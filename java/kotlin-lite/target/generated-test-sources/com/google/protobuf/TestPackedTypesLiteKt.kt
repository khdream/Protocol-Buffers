//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google/protobuf/unittest_lite.proto

package com.google.protobuf;

@kotlin.jvm.JvmSynthetic
inline fun testPackedTypesLite(block: com.google.protobuf.TestPackedTypesLiteKt.Dsl.() -> Unit): com.google.protobuf.UnittestLite.TestPackedTypesLite =
  com.google.protobuf.TestPackedTypesLiteKt.Dsl._create(com.google.protobuf.UnittestLite.TestPackedTypesLite.newBuilder()).apply { block() }._build()
object TestPackedTypesLiteKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: com.google.protobuf.UnittestLite.TestPackedTypesLite.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.google.protobuf.UnittestLite.TestPackedTypesLite.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.google.protobuf.UnittestLite.TestPackedTypesLite = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PackedInt32Proxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     */
     val packedInt32: com.google.protobuf.kotlin.DslList<kotlin.Int, PackedInt32Proxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPackedInt32List()
      )
    /**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     * @param value The packedInt32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPackedInt32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedInt32Proxy>.add(value: kotlin.Int) {
      _builder.addPackedInt32(value)
    }/**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     * @param value The packedInt32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPackedInt32")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedInt32Proxy>.plusAssign(value: kotlin.Int) {
      add(value)
    }/**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     * @param values The packedInt32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPackedInt32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedInt32Proxy>.addAll(values: kotlin.collections.Iterable<kotlin.Int>) {
      _builder.addAllPackedInt32(values)
    }/**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     * @param values The packedInt32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPackedInt32")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedInt32Proxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Int>) {
      addAll(values)
    }/**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedInt32 to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPackedInt32")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedInt32Proxy>.set(index: kotlin.Int, value: kotlin.Int) {
      _builder.setPackedInt32(index, value)
    }/**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPackedInt32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedInt32Proxy>.clear() {
      _builder.clearPackedInt32()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PackedInt64Proxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     */
     val packedInt64: com.google.protobuf.kotlin.DslList<kotlin.Long, PackedInt64Proxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPackedInt64List()
      )
    /**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     * @param value The packedInt64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPackedInt64")
    fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedInt64Proxy>.add(value: kotlin.Long) {
      _builder.addPackedInt64(value)
    }/**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     * @param value The packedInt64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPackedInt64")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedInt64Proxy>.plusAssign(value: kotlin.Long) {
      add(value)
    }/**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     * @param values The packedInt64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPackedInt64")
    fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedInt64Proxy>.addAll(values: kotlin.collections.Iterable<kotlin.Long>) {
      _builder.addAllPackedInt64(values)
    }/**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     * @param values The packedInt64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPackedInt64")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedInt64Proxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Long>) {
      addAll(values)
    }/**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedInt64 to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPackedInt64")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedInt64Proxy>.set(index: kotlin.Int, value: kotlin.Long) {
      _builder.setPackedInt64(index, value)
    }/**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPackedInt64")
    fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedInt64Proxy>.clear() {
      _builder.clearPackedInt64()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PackedUint32Proxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     */
     val packedUint32: com.google.protobuf.kotlin.DslList<kotlin.Int, PackedUint32Proxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPackedUint32List()
      )
    /**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     * @param value The packedUint32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPackedUint32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedUint32Proxy>.add(value: kotlin.Int) {
      _builder.addPackedUint32(value)
    }/**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     * @param value The packedUint32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPackedUint32")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedUint32Proxy>.plusAssign(value: kotlin.Int) {
      add(value)
    }/**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     * @param values The packedUint32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPackedUint32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedUint32Proxy>.addAll(values: kotlin.collections.Iterable<kotlin.Int>) {
      _builder.addAllPackedUint32(values)
    }/**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     * @param values The packedUint32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPackedUint32")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedUint32Proxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Int>) {
      addAll(values)
    }/**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedUint32 to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPackedUint32")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedUint32Proxy>.set(index: kotlin.Int, value: kotlin.Int) {
      _builder.setPackedUint32(index, value)
    }/**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPackedUint32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedUint32Proxy>.clear() {
      _builder.clearPackedUint32()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PackedUint64Proxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     */
     val packedUint64: com.google.protobuf.kotlin.DslList<kotlin.Long, PackedUint64Proxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPackedUint64List()
      )
    /**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     * @param value The packedUint64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPackedUint64")
    fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedUint64Proxy>.add(value: kotlin.Long) {
      _builder.addPackedUint64(value)
    }/**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     * @param value The packedUint64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPackedUint64")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedUint64Proxy>.plusAssign(value: kotlin.Long) {
      add(value)
    }/**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     * @param values The packedUint64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPackedUint64")
    fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedUint64Proxy>.addAll(values: kotlin.collections.Iterable<kotlin.Long>) {
      _builder.addAllPackedUint64(values)
    }/**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     * @param values The packedUint64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPackedUint64")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedUint64Proxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Long>) {
      addAll(values)
    }/**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedUint64 to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPackedUint64")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedUint64Proxy>.set(index: kotlin.Int, value: kotlin.Long) {
      _builder.setPackedUint64(index, value)
    }/**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPackedUint64")
    fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedUint64Proxy>.clear() {
      _builder.clearPackedUint64()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PackedSint32Proxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     */
     val packedSint32: com.google.protobuf.kotlin.DslList<kotlin.Int, PackedSint32Proxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPackedSint32List()
      )
    /**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     * @param value The packedSint32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPackedSint32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedSint32Proxy>.add(value: kotlin.Int) {
      _builder.addPackedSint32(value)
    }/**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     * @param value The packedSint32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPackedSint32")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedSint32Proxy>.plusAssign(value: kotlin.Int) {
      add(value)
    }/**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     * @param values The packedSint32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPackedSint32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedSint32Proxy>.addAll(values: kotlin.collections.Iterable<kotlin.Int>) {
      _builder.addAllPackedSint32(values)
    }/**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     * @param values The packedSint32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPackedSint32")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedSint32Proxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Int>) {
      addAll(values)
    }/**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedSint32 to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPackedSint32")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedSint32Proxy>.set(index: kotlin.Int, value: kotlin.Int) {
      _builder.setPackedSint32(index, value)
    }/**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPackedSint32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedSint32Proxy>.clear() {
      _builder.clearPackedSint32()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PackedSint64Proxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     */
     val packedSint64: com.google.protobuf.kotlin.DslList<kotlin.Long, PackedSint64Proxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPackedSint64List()
      )
    /**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     * @param value The packedSint64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPackedSint64")
    fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedSint64Proxy>.add(value: kotlin.Long) {
      _builder.addPackedSint64(value)
    }/**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     * @param value The packedSint64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPackedSint64")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedSint64Proxy>.plusAssign(value: kotlin.Long) {
      add(value)
    }/**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     * @param values The packedSint64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPackedSint64")
    fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedSint64Proxy>.addAll(values: kotlin.collections.Iterable<kotlin.Long>) {
      _builder.addAllPackedSint64(values)
    }/**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     * @param values The packedSint64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPackedSint64")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedSint64Proxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Long>) {
      addAll(values)
    }/**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedSint64 to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPackedSint64")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedSint64Proxy>.set(index: kotlin.Int, value: kotlin.Long) {
      _builder.setPackedSint64(index, value)
    }/**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPackedSint64")
    fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedSint64Proxy>.clear() {
      _builder.clearPackedSint64()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PackedFixed32Proxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     */
     val packedFixed32: com.google.protobuf.kotlin.DslList<kotlin.Int, PackedFixed32Proxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPackedFixed32List()
      )
    /**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     * @param value The packedFixed32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPackedFixed32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedFixed32Proxy>.add(value: kotlin.Int) {
      _builder.addPackedFixed32(value)
    }/**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     * @param value The packedFixed32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPackedFixed32")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedFixed32Proxy>.plusAssign(value: kotlin.Int) {
      add(value)
    }/**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     * @param values The packedFixed32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPackedFixed32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedFixed32Proxy>.addAll(values: kotlin.collections.Iterable<kotlin.Int>) {
      _builder.addAllPackedFixed32(values)
    }/**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     * @param values The packedFixed32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPackedFixed32")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedFixed32Proxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Int>) {
      addAll(values)
    }/**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedFixed32 to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPackedFixed32")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedFixed32Proxy>.set(index: kotlin.Int, value: kotlin.Int) {
      _builder.setPackedFixed32(index, value)
    }/**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPackedFixed32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedFixed32Proxy>.clear() {
      _builder.clearPackedFixed32()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PackedFixed64Proxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     */
     val packedFixed64: com.google.protobuf.kotlin.DslList<kotlin.Long, PackedFixed64Proxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPackedFixed64List()
      )
    /**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     * @param value The packedFixed64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPackedFixed64")
    fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedFixed64Proxy>.add(value: kotlin.Long) {
      _builder.addPackedFixed64(value)
    }/**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     * @param value The packedFixed64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPackedFixed64")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedFixed64Proxy>.plusAssign(value: kotlin.Long) {
      add(value)
    }/**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     * @param values The packedFixed64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPackedFixed64")
    fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedFixed64Proxy>.addAll(values: kotlin.collections.Iterable<kotlin.Long>) {
      _builder.addAllPackedFixed64(values)
    }/**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     * @param values The packedFixed64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPackedFixed64")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedFixed64Proxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Long>) {
      addAll(values)
    }/**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedFixed64 to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPackedFixed64")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedFixed64Proxy>.set(index: kotlin.Int, value: kotlin.Long) {
      _builder.setPackedFixed64(index, value)
    }/**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPackedFixed64")
    fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedFixed64Proxy>.clear() {
      _builder.clearPackedFixed64()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PackedSfixed32Proxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     */
     val packedSfixed32: com.google.protobuf.kotlin.DslList<kotlin.Int, PackedSfixed32Proxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPackedSfixed32List()
      )
    /**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     * @param value The packedSfixed32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPackedSfixed32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedSfixed32Proxy>.add(value: kotlin.Int) {
      _builder.addPackedSfixed32(value)
    }/**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     * @param value The packedSfixed32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPackedSfixed32")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedSfixed32Proxy>.plusAssign(value: kotlin.Int) {
      add(value)
    }/**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     * @param values The packedSfixed32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPackedSfixed32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedSfixed32Proxy>.addAll(values: kotlin.collections.Iterable<kotlin.Int>) {
      _builder.addAllPackedSfixed32(values)
    }/**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     * @param values The packedSfixed32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPackedSfixed32")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedSfixed32Proxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Int>) {
      addAll(values)
    }/**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedSfixed32 to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPackedSfixed32")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedSfixed32Proxy>.set(index: kotlin.Int, value: kotlin.Int) {
      _builder.setPackedSfixed32(index, value)
    }/**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPackedSfixed32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, PackedSfixed32Proxy>.clear() {
      _builder.clearPackedSfixed32()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PackedSfixed64Proxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     */
     val packedSfixed64: com.google.protobuf.kotlin.DslList<kotlin.Long, PackedSfixed64Proxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPackedSfixed64List()
      )
    /**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     * @param value The packedSfixed64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPackedSfixed64")
    fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedSfixed64Proxy>.add(value: kotlin.Long) {
      _builder.addPackedSfixed64(value)
    }/**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     * @param value The packedSfixed64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPackedSfixed64")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedSfixed64Proxy>.plusAssign(value: kotlin.Long) {
      add(value)
    }/**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     * @param values The packedSfixed64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPackedSfixed64")
    fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedSfixed64Proxy>.addAll(values: kotlin.collections.Iterable<kotlin.Long>) {
      _builder.addAllPackedSfixed64(values)
    }/**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     * @param values The packedSfixed64 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPackedSfixed64")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedSfixed64Proxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Long>) {
      addAll(values)
    }/**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedSfixed64 to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPackedSfixed64")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedSfixed64Proxy>.set(index: kotlin.Int, value: kotlin.Long) {
      _builder.setPackedSfixed64(index, value)
    }/**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPackedSfixed64")
    fun com.google.protobuf.kotlin.DslList<kotlin.Long, PackedSfixed64Proxy>.clear() {
      _builder.clearPackedSfixed64()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PackedFloatProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     */
     val packedFloat: com.google.protobuf.kotlin.DslList<kotlin.Float, PackedFloatProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPackedFloatList()
      )
    /**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     * @param value The packedFloat to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPackedFloat")
    fun com.google.protobuf.kotlin.DslList<kotlin.Float, PackedFloatProxy>.add(value: kotlin.Float) {
      _builder.addPackedFloat(value)
    }/**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     * @param value The packedFloat to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPackedFloat")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Float, PackedFloatProxy>.plusAssign(value: kotlin.Float) {
      add(value)
    }/**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     * @param values The packedFloat to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPackedFloat")
    fun com.google.protobuf.kotlin.DslList<kotlin.Float, PackedFloatProxy>.addAll(values: kotlin.collections.Iterable<kotlin.Float>) {
      _builder.addAllPackedFloat(values)
    }/**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     * @param values The packedFloat to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPackedFloat")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Float, PackedFloatProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Float>) {
      addAll(values)
    }/**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedFloat to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPackedFloat")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.Float, PackedFloatProxy>.set(index: kotlin.Int, value: kotlin.Float) {
      _builder.setPackedFloat(index, value)
    }/**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPackedFloat")
    fun com.google.protobuf.kotlin.DslList<kotlin.Float, PackedFloatProxy>.clear() {
      _builder.clearPackedFloat()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PackedDoubleProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     */
     val packedDouble: com.google.protobuf.kotlin.DslList<kotlin.Double, PackedDoubleProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPackedDoubleList()
      )
    /**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     * @param value The packedDouble to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPackedDouble")
    fun com.google.protobuf.kotlin.DslList<kotlin.Double, PackedDoubleProxy>.add(value: kotlin.Double) {
      _builder.addPackedDouble(value)
    }/**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     * @param value The packedDouble to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPackedDouble")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Double, PackedDoubleProxy>.plusAssign(value: kotlin.Double) {
      add(value)
    }/**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     * @param values The packedDouble to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPackedDouble")
    fun com.google.protobuf.kotlin.DslList<kotlin.Double, PackedDoubleProxy>.addAll(values: kotlin.collections.Iterable<kotlin.Double>) {
      _builder.addAllPackedDouble(values)
    }/**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     * @param values The packedDouble to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPackedDouble")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Double, PackedDoubleProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Double>) {
      addAll(values)
    }/**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedDouble to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPackedDouble")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.Double, PackedDoubleProxy>.set(index: kotlin.Int, value: kotlin.Double) {
      _builder.setPackedDouble(index, value)
    }/**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPackedDouble")
    fun com.google.protobuf.kotlin.DslList<kotlin.Double, PackedDoubleProxy>.clear() {
      _builder.clearPackedDouble()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PackedBoolProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     */
     val packedBool: com.google.protobuf.kotlin.DslList<kotlin.Boolean, PackedBoolProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPackedBoolList()
      )
    /**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     * @param value The packedBool to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPackedBool")
    fun com.google.protobuf.kotlin.DslList<kotlin.Boolean, PackedBoolProxy>.add(value: kotlin.Boolean) {
      _builder.addPackedBool(value)
    }/**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     * @param value The packedBool to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPackedBool")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Boolean, PackedBoolProxy>.plusAssign(value: kotlin.Boolean) {
      add(value)
    }/**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     * @param values The packedBool to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPackedBool")
    fun com.google.protobuf.kotlin.DslList<kotlin.Boolean, PackedBoolProxy>.addAll(values: kotlin.collections.Iterable<kotlin.Boolean>) {
      _builder.addAllPackedBool(values)
    }/**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     * @param values The packedBool to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPackedBool")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Boolean, PackedBoolProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Boolean>) {
      addAll(values)
    }/**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedBool to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPackedBool")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.Boolean, PackedBoolProxy>.set(index: kotlin.Int, value: kotlin.Boolean) {
      _builder.setPackedBool(index, value)
    }/**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPackedBool")
    fun com.google.protobuf.kotlin.DslList<kotlin.Boolean, PackedBoolProxy>.clear() {
      _builder.clearPackedBool()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PackedEnumProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated .protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];</code>
     */
     val packedEnum: com.google.protobuf.kotlin.DslList<com.google.protobuf.UnittestLite.ForeignEnumLite, PackedEnumProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPackedEnumList()
      )
    /**
     * <code>repeated .protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];</code>
     * @param value The packedEnum to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPackedEnum")
    fun com.google.protobuf.kotlin.DslList<com.google.protobuf.UnittestLite.ForeignEnumLite, PackedEnumProxy>.add(value: com.google.protobuf.UnittestLite.ForeignEnumLite) {
      _builder.addPackedEnum(value)
    }/**
     * <code>repeated .protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];</code>
     * @param value The packedEnum to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPackedEnum")
    inline operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.UnittestLite.ForeignEnumLite, PackedEnumProxy>.plusAssign(value: com.google.protobuf.UnittestLite.ForeignEnumLite) {
      add(value)
    }/**
     * <code>repeated .protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];</code>
     * @param values The packedEnum to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPackedEnum")
    fun com.google.protobuf.kotlin.DslList<com.google.protobuf.UnittestLite.ForeignEnumLite, PackedEnumProxy>.addAll(values: kotlin.collections.Iterable<com.google.protobuf.UnittestLite.ForeignEnumLite>) {
      _builder.addAllPackedEnum(values)
    }/**
     * <code>repeated .protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];</code>
     * @param values The packedEnum to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPackedEnum")
    inline operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.UnittestLite.ForeignEnumLite, PackedEnumProxy>.plusAssign(values: kotlin.collections.Iterable<com.google.protobuf.UnittestLite.ForeignEnumLite>) {
      addAll(values)
    }/**
     * <code>repeated .protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedEnum to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPackedEnum")
    operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.UnittestLite.ForeignEnumLite, PackedEnumProxy>.set(index: kotlin.Int, value: com.google.protobuf.UnittestLite.ForeignEnumLite) {
      _builder.setPackedEnum(index, value)
    }/**
     * <code>repeated .protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPackedEnum")
    fun com.google.protobuf.kotlin.DslList<com.google.protobuf.UnittestLite.ForeignEnumLite, PackedEnumProxy>.clear() {
      _builder.clearPackedEnum()
    }}
}
inline fun com.google.protobuf.UnittestLite.TestPackedTypesLite.copy(block: com.google.protobuf.TestPackedTypesLiteKt.Dsl.() -> Unit): com.google.protobuf.UnittestLite.TestPackedTypesLite =
  com.google.protobuf.TestPackedTypesLiteKt.Dsl._create(this.toBuilder()).apply { block() }._build()
