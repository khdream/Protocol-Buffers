//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google/protobuf/unittest_lite.proto

package com.google.protobuf;

@kotlin.jvm.JvmSynthetic
inline fun packedInt32(block: com.google.protobuf.PackedInt32Kt.Dsl.() -> Unit): com.google.protobuf.UnittestLite.PackedInt32 =
  com.google.protobuf.PackedInt32Kt.Dsl._create(com.google.protobuf.UnittestLite.PackedInt32.newBuilder()).apply { block() }._build()
object PackedInt32Kt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: com.google.protobuf.UnittestLite.PackedInt32.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.google.protobuf.UnittestLite.PackedInt32.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.google.protobuf.UnittestLite.PackedInt32 = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class RepeatedInt32Proxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated int32 repeated_int32 = 2048 [packed = true];</code>
     */
     val repeatedInt32: com.google.protobuf.kotlin.DslList<kotlin.Int, RepeatedInt32Proxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getRepeatedInt32List()
      )
    /**
     * <code>repeated int32 repeated_int32 = 2048 [packed = true];</code>
     * @param value The repeatedInt32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addRepeatedInt32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, RepeatedInt32Proxy>.add(value: kotlin.Int) {
      _builder.addRepeatedInt32(value)
    }/**
     * <code>repeated int32 repeated_int32 = 2048 [packed = true];</code>
     * @param value The repeatedInt32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignRepeatedInt32")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, RepeatedInt32Proxy>.plusAssign(value: kotlin.Int) {
      add(value)
    }/**
     * <code>repeated int32 repeated_int32 = 2048 [packed = true];</code>
     * @param values The repeatedInt32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllRepeatedInt32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, RepeatedInt32Proxy>.addAll(values: kotlin.collections.Iterable<kotlin.Int>) {
      _builder.addAllRepeatedInt32(values)
    }/**
     * <code>repeated int32 repeated_int32 = 2048 [packed = true];</code>
     * @param values The repeatedInt32 to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllRepeatedInt32")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, RepeatedInt32Proxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Int>) {
      addAll(values)
    }/**
     * <code>repeated int32 repeated_int32 = 2048 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The repeatedInt32 to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setRepeatedInt32")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, RepeatedInt32Proxy>.set(index: kotlin.Int, value: kotlin.Int) {
      _builder.setRepeatedInt32(index, value)
    }/**
     * <code>repeated int32 repeated_int32 = 2048 [packed = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearRepeatedInt32")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, RepeatedInt32Proxy>.clear() {
      _builder.clearRepeatedInt32()
    }}
}
inline fun com.google.protobuf.UnittestLite.PackedInt32.copy(block: com.google.protobuf.PackedInt32Kt.Dsl.() -> Unit): com.google.protobuf.UnittestLite.PackedInt32 =
  com.google.protobuf.PackedInt32Kt.Dsl._create(this.toBuilder()).apply { block() }._build()
