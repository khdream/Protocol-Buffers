//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google/protobuf/unittest_proto3.proto

package proto3_unittest;

@kotlin.jvm.JvmSynthetic
inline fun nestedTestAllTypes(block: proto3_unittest.NestedTestAllTypesKt.Dsl.() -> Unit): proto3_unittest.UnittestProto3.NestedTestAllTypes =
  proto3_unittest.NestedTestAllTypesKt.Dsl._create(proto3_unittest.UnittestProto3.NestedTestAllTypes.newBuilder()).apply { block() }._build()
object NestedTestAllTypesKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: proto3_unittest.UnittestProto3.NestedTestAllTypes.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: proto3_unittest.UnittestProto3.NestedTestAllTypes.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): proto3_unittest.UnittestProto3.NestedTestAllTypes = _builder.build()

    /**
     * <code>.proto3_unittest.NestedTestAllTypes child = 1;</code>
     */
    var child: proto3_unittest.UnittestProto3.NestedTestAllTypes
      @JvmName("getChild")
      get() = _builder.getChild()
      @JvmName("setChild")
      set(value) {
        _builder.setChild(value)
      }
    /**
     * <code>.proto3_unittest.NestedTestAllTypes child = 1;</code>
     */
    fun clearChild() {
      _builder.clearChild()
    }
    /**
     * <code>.proto3_unittest.NestedTestAllTypes child = 1;</code>
     * @return Whether the child field is set.
     */
    fun hasChild(): kotlin.Boolean {
      return _builder.hasChild()
    }

    /**
     * <code>.proto3_unittest.TestAllTypes payload = 2;</code>
     */
    var payload: proto3_unittest.UnittestProto3.TestAllTypes
      @JvmName("getPayload")
      get() = _builder.getPayload()
      @JvmName("setPayload")
      set(value) {
        _builder.setPayload(value)
      }
    /**
     * <code>.proto3_unittest.TestAllTypes payload = 2;</code>
     */
    fun clearPayload() {
      _builder.clearPayload()
    }
    /**
     * <code>.proto3_unittest.TestAllTypes payload = 2;</code>
     * @return Whether the payload field is set.
     */
    fun hasPayload(): kotlin.Boolean {
      return _builder.hasPayload()
    }
  }
}
inline fun proto3_unittest.UnittestProto3.NestedTestAllTypes.copy(block: proto3_unittest.NestedTestAllTypesKt.Dsl.() -> Unit): proto3_unittest.UnittestProto3.NestedTestAllTypes =
  proto3_unittest.NestedTestAllTypesKt.Dsl._create(this.toBuilder()).apply { block() }._build()
