//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google/protobuf/unittest_proto3.proto

package proto3_unittest;

@kotlin.jvm.JvmSynthetic
inline fun testOneof2(block: proto3_unittest.TestOneof2Kt.Dsl.() -> Unit): proto3_unittest.UnittestProto3.TestOneof2 =
  proto3_unittest.TestOneof2Kt.Dsl._create(proto3_unittest.UnittestProto3.TestOneof2.newBuilder()).apply { block() }._build()
object TestOneof2Kt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: proto3_unittest.UnittestProto3.TestOneof2.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: proto3_unittest.UnittestProto3.TestOneof2.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): proto3_unittest.UnittestProto3.TestOneof2 = _builder.build()

    /**
     * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
     */
    var fooEnum: proto3_unittest.UnittestProto3.TestOneof2.NestedEnum
      @JvmName("getFooEnum")
      get() = _builder.getFooEnum()
      @JvmName("setFooEnum")
      set(value) {
        _builder.setFooEnum(value)
      }
    /**
     * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
     */
    fun clearFooEnum() {
      _builder.clearFooEnum()
    }
    /**
     * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
     * @return Whether the fooEnum field is set.
     */
    fun hasFooEnum(): kotlin.Boolean {
      return _builder.hasFooEnum()
    }
    val fooCase: proto3_unittest.UnittestProto3.TestOneof2.FooCase
      @JvmName("getFooCase")
      get() = _builder.getFooCase()

    fun clearFoo() {
      _builder.clearFoo()
    }
  }
}
inline fun proto3_unittest.UnittestProto3.TestOneof2.copy(block: proto3_unittest.TestOneof2Kt.Dsl.() -> Unit): proto3_unittest.UnittestProto3.TestOneof2 =
  proto3_unittest.TestOneof2Kt.Dsl._create(this.toBuilder()).apply { block() }._build()
