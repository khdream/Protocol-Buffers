// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/unittest_proto3.proto

package proto3_unittest;

public final class UnittestProto3 {
  private UnittestProto3() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * Protobuf enum {@code proto3_unittest.ForeignEnum}
   */
  public enum ForeignEnum
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>FOREIGN_ZERO = 0;</code>
     */
    FOREIGN_ZERO(0),
    /**
     * <code>FOREIGN_FOO = 4;</code>
     */
    FOREIGN_FOO(4),
    /**
     * <code>FOREIGN_BAR = 5;</code>
     */
    FOREIGN_BAR(5),
    /**
     * <code>FOREIGN_BAZ = 6;</code>
     */
    FOREIGN_BAZ(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>FOREIGN_ZERO = 0;</code>
     */
    public static final int FOREIGN_ZERO_VALUE = 0;
    /**
     * <code>FOREIGN_FOO = 4;</code>
     */
    public static final int FOREIGN_FOO_VALUE = 4;
    /**
     * <code>FOREIGN_BAR = 5;</code>
     */
    public static final int FOREIGN_BAR_VALUE = 5;
    /**
     * <code>FOREIGN_BAZ = 6;</code>
     */
    public static final int FOREIGN_BAZ_VALUE = 6;


    @java.lang.Override
    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ForeignEnum valueOf(int value) {
      return forNumber(value);
    }

    public static ForeignEnum forNumber(int value) {
      switch (value) {
        case 0: return FOREIGN_ZERO;
        case 4: return FOREIGN_FOO;
        case 5: return FOREIGN_BAR;
        case 6: return FOREIGN_BAZ;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ForeignEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ForeignEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ForeignEnum>() {
            @java.lang.Override
            public ForeignEnum findValueByNumber(int number) {
              return ForeignEnum.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return ForeignEnumVerifier.INSTANCE;
    }

    private static final class ForeignEnumVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new ForeignEnumVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return ForeignEnum.forNumber(number) != null;
            }
          };

    private final int value;

    private ForeignEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:proto3_unittest.ForeignEnum)
  }

  public interface TestAllTypesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto3_unittest.TestAllTypes)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Singular
     * </pre>
     *
     * <code>int32 optional_int32 = 1;</code>
     * @return The optionalInt32.
     */
    int getOptionalInt32();

    /**
     * <code>int64 optional_int64 = 2;</code>
     * @return The optionalInt64.
     */
    long getOptionalInt64();

    /**
     * <code>uint32 optional_uint32 = 3;</code>
     * @return The optionalUint32.
     */
    int getOptionalUint32();

    /**
     * <code>uint64 optional_uint64 = 4;</code>
     * @return The optionalUint64.
     */
    long getOptionalUint64();

    /**
     * <code>sint32 optional_sint32 = 5;</code>
     * @return The optionalSint32.
     */
    int getOptionalSint32();

    /**
     * <code>sint64 optional_sint64 = 6;</code>
     * @return The optionalSint64.
     */
    long getOptionalSint64();

    /**
     * <code>fixed32 optional_fixed32 = 7;</code>
     * @return The optionalFixed32.
     */
    int getOptionalFixed32();

    /**
     * <code>fixed64 optional_fixed64 = 8;</code>
     * @return The optionalFixed64.
     */
    long getOptionalFixed64();

    /**
     * <code>sfixed32 optional_sfixed32 = 9;</code>
     * @return The optionalSfixed32.
     */
    int getOptionalSfixed32();

    /**
     * <code>sfixed64 optional_sfixed64 = 10;</code>
     * @return The optionalSfixed64.
     */
    long getOptionalSfixed64();

    /**
     * <code>float optional_float = 11;</code>
     * @return The optionalFloat.
     */
    float getOptionalFloat();

    /**
     * <code>double optional_double = 12;</code>
     * @return The optionalDouble.
     */
    double getOptionalDouble();

    /**
     * <code>bool optional_bool = 13;</code>
     * @return The optionalBool.
     */
    boolean getOptionalBool();

    /**
     * <code>string optional_string = 14;</code>
     * @return The optionalString.
     */
    java.lang.String getOptionalString();
    /**
     * <code>string optional_string = 14;</code>
     * @return The bytes for optionalString.
     */
    com.google.protobuf.ByteString
        getOptionalStringBytes();

    /**
     * <code>bytes optional_bytes = 15;</code>
     * @return The optionalBytes.
     */
    com.google.protobuf.ByteString getOptionalBytes();

    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;</code>
     * @return Whether the optionalNestedMessage field is set.
     */
    boolean hasOptionalNestedMessage();
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;</code>
     * @return The optionalNestedMessage.
     */
    proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage getOptionalNestedMessage();

    /**
     * <code>.proto3_unittest.ForeignMessage optional_foreign_message = 19;</code>
     * @return Whether the optionalForeignMessage field is set.
     */
    boolean hasOptionalForeignMessage();
    /**
     * <code>.proto3_unittest.ForeignMessage optional_foreign_message = 19;</code>
     * @return The optionalForeignMessage.
     */
    proto3_unittest.UnittestProto3.ForeignMessage getOptionalForeignMessage();

    /**
     * <code>.protobuf_unittest_import.ImportMessage optional_import_message = 20;</code>
     * @return Whether the optionalImportMessage field is set.
     */
    boolean hasOptionalImportMessage();
    /**
     * <code>.protobuf_unittest_import.ImportMessage optional_import_message = 20;</code>
     * @return The optionalImportMessage.
     */
    com.google.protobuf.test.UnittestImport.ImportMessage getOptionalImportMessage();

    /**
     * <code>.proto3_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;</code>
     * @return The enum numeric value on the wire for optionalNestedEnum.
     */
    int getOptionalNestedEnumValue();
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;</code>
     * @return The optionalNestedEnum.
     */
    proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum getOptionalNestedEnum();

    /**
     * <code>.proto3_unittest.ForeignEnum optional_foreign_enum = 22;</code>
     * @return The enum numeric value on the wire for optionalForeignEnum.
     */
    int getOptionalForeignEnumValue();
    /**
     * <code>.proto3_unittest.ForeignEnum optional_foreign_enum = 22;</code>
     * @return The optionalForeignEnum.
     */
    proto3_unittest.UnittestProto3.ForeignEnum getOptionalForeignEnum();

    /**
     * <code>string optional_string_piece = 24 [ctype = STRING_PIECE];</code>
     * @return The optionalStringPiece.
     */
    java.lang.String getOptionalStringPiece();
    /**
     * <code>string optional_string_piece = 24 [ctype = STRING_PIECE];</code>
     * @return The bytes for optionalStringPiece.
     */
    com.google.protobuf.ByteString
        getOptionalStringPieceBytes();

    /**
     * <code>string optional_cord = 25 [ctype = CORD];</code>
     * @return The optionalCord.
     */
    java.lang.String getOptionalCord();
    /**
     * <code>string optional_cord = 25 [ctype = CORD];</code>
     * @return The bytes for optionalCord.
     */
    com.google.protobuf.ByteString
        getOptionalCordBytes();

    /**
     * <pre>
     * Defined in unittest_import_public.proto
     * </pre>
     *
     * <code>.protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;</code>
     * @return Whether the optionalPublicImportMessage field is set.
     */
    boolean hasOptionalPublicImportMessage();
    /**
     * <pre>
     * Defined in unittest_import_public.proto
     * </pre>
     *
     * <code>.protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;</code>
     * @return The optionalPublicImportMessage.
     */
    com.google.protobuf.test.UnittestImportPublic.PublicImportMessage getOptionalPublicImportMessage();

    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];</code>
     * @return Whether the optionalLazyMessage field is set.
     */
    boolean hasOptionalLazyMessage();
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];</code>
     * @return The optionalLazyMessage.
     */
    proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage getOptionalLazyMessage();

    /**
     * <code>.protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115 [lazy = true];</code>
     * @return Whether the optionalLazyImportMessage field is set.
     */
    boolean hasOptionalLazyImportMessage();
    /**
     * <code>.protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115 [lazy = true];</code>
     * @return The optionalLazyImportMessage.
     */
    com.google.protobuf.test.UnittestImport.ImportMessage getOptionalLazyImportMessage();

    /**
     * <pre>
     * Repeated
     * </pre>
     *
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @return A list containing the repeatedInt32.
     */
    java.util.List<java.lang.Integer> getRepeatedInt32List();
    /**
     * <pre>
     * Repeated
     * </pre>
     *
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @return The count of repeatedInt32.
     */
    int getRepeatedInt32Count();
    /**
     * <pre>
     * Repeated
     * </pre>
     *
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @param index The index of the element to return.
     * @return The repeatedInt32 at the given index.
     */
    int getRepeatedInt32(int index);

    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @return A list containing the repeatedInt64.
     */
    java.util.List<java.lang.Long> getRepeatedInt64List();
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @return The count of repeatedInt64.
     */
    int getRepeatedInt64Count();
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @param index The index of the element to return.
     * @return The repeatedInt64 at the given index.
     */
    long getRepeatedInt64(int index);

    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @return A list containing the repeatedUint32.
     */
    java.util.List<java.lang.Integer> getRepeatedUint32List();
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @return The count of repeatedUint32.
     */
    int getRepeatedUint32Count();
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @param index The index of the element to return.
     * @return The repeatedUint32 at the given index.
     */
    int getRepeatedUint32(int index);

    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @return A list containing the repeatedUint64.
     */
    java.util.List<java.lang.Long> getRepeatedUint64List();
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @return The count of repeatedUint64.
     */
    int getRepeatedUint64Count();
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @param index The index of the element to return.
     * @return The repeatedUint64 at the given index.
     */
    long getRepeatedUint64(int index);

    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @return A list containing the repeatedSint32.
     */
    java.util.List<java.lang.Integer> getRepeatedSint32List();
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @return The count of repeatedSint32.
     */
    int getRepeatedSint32Count();
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @param index The index of the element to return.
     * @return The repeatedSint32 at the given index.
     */
    int getRepeatedSint32(int index);

    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @return A list containing the repeatedSint64.
     */
    java.util.List<java.lang.Long> getRepeatedSint64List();
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @return The count of repeatedSint64.
     */
    int getRepeatedSint64Count();
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @param index The index of the element to return.
     * @return The repeatedSint64 at the given index.
     */
    long getRepeatedSint64(int index);

    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @return A list containing the repeatedFixed32.
     */
    java.util.List<java.lang.Integer> getRepeatedFixed32List();
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @return The count of repeatedFixed32.
     */
    int getRepeatedFixed32Count();
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @param index The index of the element to return.
     * @return The repeatedFixed32 at the given index.
     */
    int getRepeatedFixed32(int index);

    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @return A list containing the repeatedFixed64.
     */
    java.util.List<java.lang.Long> getRepeatedFixed64List();
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @return The count of repeatedFixed64.
     */
    int getRepeatedFixed64Count();
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @param index The index of the element to return.
     * @return The repeatedFixed64 at the given index.
     */
    long getRepeatedFixed64(int index);

    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @return A list containing the repeatedSfixed32.
     */
    java.util.List<java.lang.Integer> getRepeatedSfixed32List();
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @return The count of repeatedSfixed32.
     */
    int getRepeatedSfixed32Count();
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @param index The index of the element to return.
     * @return The repeatedSfixed32 at the given index.
     */
    int getRepeatedSfixed32(int index);

    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @return A list containing the repeatedSfixed64.
     */
    java.util.List<java.lang.Long> getRepeatedSfixed64List();
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @return The count of repeatedSfixed64.
     */
    int getRepeatedSfixed64Count();
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @param index The index of the element to return.
     * @return The repeatedSfixed64 at the given index.
     */
    long getRepeatedSfixed64(int index);

    /**
     * <code>repeated float repeated_float = 41;</code>
     * @return A list containing the repeatedFloat.
     */
    java.util.List<java.lang.Float> getRepeatedFloatList();
    /**
     * <code>repeated float repeated_float = 41;</code>
     * @return The count of repeatedFloat.
     */
    int getRepeatedFloatCount();
    /**
     * <code>repeated float repeated_float = 41;</code>
     * @param index The index of the element to return.
     * @return The repeatedFloat at the given index.
     */
    float getRepeatedFloat(int index);

    /**
     * <code>repeated double repeated_double = 42;</code>
     * @return A list containing the repeatedDouble.
     */
    java.util.List<java.lang.Double> getRepeatedDoubleList();
    /**
     * <code>repeated double repeated_double = 42;</code>
     * @return The count of repeatedDouble.
     */
    int getRepeatedDoubleCount();
    /**
     * <code>repeated double repeated_double = 42;</code>
     * @param index The index of the element to return.
     * @return The repeatedDouble at the given index.
     */
    double getRepeatedDouble(int index);

    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @return A list containing the repeatedBool.
     */
    java.util.List<java.lang.Boolean> getRepeatedBoolList();
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @return The count of repeatedBool.
     */
    int getRepeatedBoolCount();
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @param index The index of the element to return.
     * @return The repeatedBool at the given index.
     */
    boolean getRepeatedBool(int index);

    /**
     * <code>repeated string repeated_string = 44;</code>
     * @return A list containing the repeatedString.
     */
    java.util.List<java.lang.String>
        getRepeatedStringList();
    /**
     * <code>repeated string repeated_string = 44;</code>
     * @return The count of repeatedString.
     */
    int getRepeatedStringCount();
    /**
     * <code>repeated string repeated_string = 44;</code>
     * @param index The index of the element to return.
     * @return The repeatedString at the given index.
     */
    java.lang.String getRepeatedString(int index);
    /**
     * <code>repeated string repeated_string = 44;</code>
     * @param index The index of the element to return.
     * @return The repeatedString at the given index.
     */
    com.google.protobuf.ByteString
        getRepeatedStringBytes(int index);

    /**
     * <code>repeated bytes repeated_bytes = 45;</code>
     * @return A list containing the repeatedBytes.
     */
    java.util.List<com.google.protobuf.ByteString> getRepeatedBytesList();
    /**
     * <code>repeated bytes repeated_bytes = 45;</code>
     * @return The count of repeatedBytes.
     */
    int getRepeatedBytesCount();
    /**
     * <code>repeated bytes repeated_bytes = 45;</code>
     * @param index The index of the element to return.
     * @return The repeatedBytes at the given index.
     */
    com.google.protobuf.ByteString getRepeatedBytes(int index);

    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
     */
    java.util.List<proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage> 
        getRepeatedNestedMessageList();
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
     */
    proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage getRepeatedNestedMessage(int index);
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
     */
    int getRepeatedNestedMessageCount();

    /**
     * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
     */
    java.util.List<proto3_unittest.UnittestProto3.ForeignMessage> 
        getRepeatedForeignMessageList();
    /**
     * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
     */
    proto3_unittest.UnittestProto3.ForeignMessage getRepeatedForeignMessage(int index);
    /**
     * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
     */
    int getRepeatedForeignMessageCount();

    /**
     * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
     */
    java.util.List<com.google.protobuf.test.UnittestImport.ImportMessage> 
        getRepeatedImportMessageList();
    /**
     * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
     */
    com.google.protobuf.test.UnittestImport.ImportMessage getRepeatedImportMessage(int index);
    /**
     * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
     */
    int getRepeatedImportMessageCount();

    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @return A list containing the repeatedNestedEnum.
     */
    java.util.List<proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum> getRepeatedNestedEnumList();
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @return The count of repeatedNestedEnum.
     */
    int getRepeatedNestedEnumCount();
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param index The index of the element to return.
     * @return The repeatedNestedEnum at the given index.
     */
    proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum getRepeatedNestedEnum(int index);
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @return A list containing the enum numeric values on the wire for repeatedNestedEnum.
     */
    java.util.List<java.lang.Integer>
    getRepeatedNestedEnumValueList();
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of repeatedNestedEnum at the given index.
     */
    int getRepeatedNestedEnumValue(int index);

    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     * @return A list containing the repeatedForeignEnum.
     */
    java.util.List<proto3_unittest.UnittestProto3.ForeignEnum> getRepeatedForeignEnumList();
    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     * @return The count of repeatedForeignEnum.
     */
    int getRepeatedForeignEnumCount();
    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     * @param index The index of the element to return.
     * @return The repeatedForeignEnum at the given index.
     */
    proto3_unittest.UnittestProto3.ForeignEnum getRepeatedForeignEnum(int index);
    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     * @return A list containing the enum numeric values on the wire for repeatedForeignEnum.
     */
    java.util.List<java.lang.Integer>
    getRepeatedForeignEnumValueList();
    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of repeatedForeignEnum at the given index.
     */
    int getRepeatedForeignEnumValue(int index);

    /**
     * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
     * @return A list containing the repeatedStringPiece.
     */
    java.util.List<java.lang.String>
        getRepeatedStringPieceList();
    /**
     * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
     * @return The count of repeatedStringPiece.
     */
    int getRepeatedStringPieceCount();
    /**
     * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
     * @param index The index of the element to return.
     * @return The repeatedStringPiece at the given index.
     */
    java.lang.String getRepeatedStringPiece(int index);
    /**
     * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
     * @param index The index of the element to return.
     * @return The repeatedStringPiece at the given index.
     */
    com.google.protobuf.ByteString
        getRepeatedStringPieceBytes(int index);

    /**
     * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
     * @return A list containing the repeatedCord.
     */
    java.util.List<java.lang.String>
        getRepeatedCordList();
    /**
     * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
     * @return The count of repeatedCord.
     */
    int getRepeatedCordCount();
    /**
     * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
     * @param index The index of the element to return.
     * @return The repeatedCord at the given index.
     */
    java.lang.String getRepeatedCord(int index);
    /**
     * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
     * @param index The index of the element to return.
     * @return The repeatedCord at the given index.
     */
    com.google.protobuf.ByteString
        getRepeatedCordBytes(int index);

    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
     */
    java.util.List<proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage> 
        getRepeatedLazyMessageList();
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
     */
    proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage getRepeatedLazyMessage(int index);
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
     */
    int getRepeatedLazyMessageCount();

    /**
     * <code>uint32 oneof_uint32 = 111;</code>
     * @return Whether the oneofUint32 field is set.
     */
    boolean hasOneofUint32();
    /**
     * <code>uint32 oneof_uint32 = 111;</code>
     * @return The oneofUint32.
     */
    int getOneofUint32();

    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;</code>
     * @return Whether the oneofNestedMessage field is set.
     */
    boolean hasOneofNestedMessage();
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;</code>
     * @return The oneofNestedMessage.
     */
    proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage getOneofNestedMessage();

    /**
     * <code>string oneof_string = 113;</code>
     * @return Whether the oneofString field is set.
     */
    boolean hasOneofString();
    /**
     * <code>string oneof_string = 113;</code>
     * @return The oneofString.
     */
    java.lang.String getOneofString();
    /**
     * <code>string oneof_string = 113;</code>
     * @return The bytes for oneofString.
     */
    com.google.protobuf.ByteString
        getOneofStringBytes();

    /**
     * <code>bytes oneof_bytes = 114;</code>
     * @return Whether the oneofBytes field is set.
     */
    boolean hasOneofBytes();
    /**
     * <code>bytes oneof_bytes = 114;</code>
     * @return The oneofBytes.
     */
    com.google.protobuf.ByteString getOneofBytes();

    public proto3_unittest.UnittestProto3.TestAllTypes.OneofFieldCase getOneofFieldCase();
  }
  /**
   * <pre>
   * This proto includes every type of field in both singular and repeated
   * forms.
   * </pre>
   *
   * Protobuf type {@code proto3_unittest.TestAllTypes}
   */
  public  static final class TestAllTypes extends
      com.google.protobuf.GeneratedMessageLite<
          TestAllTypes, TestAllTypes.Builder> implements
      // @@protoc_insertion_point(message_implements:proto3_unittest.TestAllTypes)
      TestAllTypesOrBuilder {
    private TestAllTypes() {
      optionalString_ = "";
      optionalBytes_ = com.google.protobuf.ByteString.EMPTY;
      optionalStringPiece_ = "";
      optionalCord_ = "";
      repeatedInt32_ = emptyIntList();
      repeatedInt64_ = emptyLongList();
      repeatedUint32_ = emptyIntList();
      repeatedUint64_ = emptyLongList();
      repeatedSint32_ = emptyIntList();
      repeatedSint64_ = emptyLongList();
      repeatedFixed32_ = emptyIntList();
      repeatedFixed64_ = emptyLongList();
      repeatedSfixed32_ = emptyIntList();
      repeatedSfixed64_ = emptyLongList();
      repeatedFloat_ = emptyFloatList();
      repeatedDouble_ = emptyDoubleList();
      repeatedBool_ = emptyBooleanList();
      repeatedString_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      repeatedBytes_ = emptyProtobufList();
      repeatedNestedMessage_ = emptyProtobufList();
      repeatedForeignMessage_ = emptyProtobufList();
      repeatedImportMessage_ = emptyProtobufList();
      repeatedNestedEnum_ = emptyIntList();
      repeatedForeignEnum_ = emptyIntList();
      repeatedStringPiece_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      repeatedCord_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      repeatedLazyMessage_ = emptyProtobufList();
    }
    /**
     * Protobuf enum {@code proto3_unittest.TestAllTypes.NestedEnum}
     */
    public enum NestedEnum
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>ZERO = 0;</code>
       */
      ZERO(0),
      /**
       * <code>FOO = 1;</code>
       */
      FOO(1),
      /**
       * <code>BAR = 2;</code>
       */
      BAR(2),
      /**
       * <code>BAZ = 3;</code>
       */
      BAZ(3),
      /**
       * <pre>
       * Intentionally negative.
       * </pre>
       *
       * <code>NEG = -1;</code>
       */
      NEG(-1),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>ZERO = 0;</code>
       */
      public static final int ZERO_VALUE = 0;
      /**
       * <code>FOO = 1;</code>
       */
      public static final int FOO_VALUE = 1;
      /**
       * <code>BAR = 2;</code>
       */
      public static final int BAR_VALUE = 2;
      /**
       * <code>BAZ = 3;</code>
       */
      public static final int BAZ_VALUE = 3;
      /**
       * <pre>
       * Intentionally negative.
       * </pre>
       *
       * <code>NEG = -1;</code>
       */
      public static final int NEG_VALUE = -1;


      @java.lang.Override
      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static NestedEnum valueOf(int value) {
        return forNumber(value);
      }

      public static NestedEnum forNumber(int value) {
        switch (value) {
          case 0: return ZERO;
          case 1: return FOO;
          case 2: return BAR;
          case 3: return BAZ;
          case -1: return NEG;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<NestedEnum>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          NestedEnum> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<NestedEnum>() {
              @java.lang.Override
              public NestedEnum findValueByNumber(int number) {
                return NestedEnum.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return NestedEnumVerifier.INSTANCE;
      }

      private static final class NestedEnumVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new NestedEnumVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return NestedEnum.forNumber(number) != null;
              }
            };

      private final int value;

      private NestedEnum(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:proto3_unittest.TestAllTypes.NestedEnum)
    }

    public interface NestedMessageOrBuilder extends
        // @@protoc_insertion_point(interface_extends:proto3_unittest.TestAllTypes.NestedMessage)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * The field name "b" fails to compile in proto1 because it conflicts with
       * a local variable named "b" in one of the generated methods.  Doh.
       * This file needs to compile in proto1 to test backwards-compatibility.
       * </pre>
       *
       * <code>int32 bb = 1;</code>
       * @return The bb.
       */
      int getBb();
    }
    /**
     * Protobuf type {@code proto3_unittest.TestAllTypes.NestedMessage}
     */
    public  static final class NestedMessage extends
        com.google.protobuf.GeneratedMessageLite<
            NestedMessage, NestedMessage.Builder> implements
        // @@protoc_insertion_point(message_implements:proto3_unittest.TestAllTypes.NestedMessage)
        NestedMessageOrBuilder {
      private NestedMessage() {
      }
      public static final int BB_FIELD_NUMBER = 1;
      private int bb_;
      /**
       * <pre>
       * The field name "b" fails to compile in proto1 because it conflicts with
       * a local variable named "b" in one of the generated methods.  Doh.
       * This file needs to compile in proto1 to test backwards-compatibility.
       * </pre>
       *
       * <code>int32 bb = 1;</code>
       * @return The bb.
       */
      @java.lang.Override
      public int getBb() {
        return bb_;
      }
      /**
       * <pre>
       * The field name "b" fails to compile in proto1 because it conflicts with
       * a local variable named "b" in one of the generated methods.  Doh.
       * This file needs to compile in proto1 to test backwards-compatibility.
       * </pre>
       *
       * <code>int32 bb = 1;</code>
       * @param value The bb to set.
       */
      private void setBb(int value) {
        
        bb_ = value;
      }
      /**
       * <pre>
       * The field name "b" fails to compile in proto1 because it conflicts with
       * a local variable named "b" in one of the generated methods.  Doh.
       * This file needs to compile in proto1 to test backwards-compatibility.
       * </pre>
       *
       * <code>int32 bb = 1;</code>
       */
      private void clearBb() {
        
        bb_ = 0;
      }

      public static proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code proto3_unittest.TestAllTypes.NestedMessage}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage, Builder> implements
          // @@protoc_insertion_point(builder_implements:proto3_unittest.TestAllTypes.NestedMessage)
          proto3_unittest.UnittestProto3.TestAllTypes.NestedMessageOrBuilder {
        // Construct using proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * The field name "b" fails to compile in proto1 because it conflicts with
         * a local variable named "b" in one of the generated methods.  Doh.
         * This file needs to compile in proto1 to test backwards-compatibility.
         * </pre>
         *
         * <code>int32 bb = 1;</code>
         * @return The bb.
         */
        @java.lang.Override
        public int getBb() {
          return instance.getBb();
        }
        /**
         * <pre>
         * The field name "b" fails to compile in proto1 because it conflicts with
         * a local variable named "b" in one of the generated methods.  Doh.
         * This file needs to compile in proto1 to test backwards-compatibility.
         * </pre>
         *
         * <code>int32 bb = 1;</code>
         * @param value The bb to set.
         * @return This builder for chaining.
         */
        public Builder setBb(int value) {
          copyOnWrite();
          instance.setBb(value);
          return this;
        }
        /**
         * <pre>
         * The field name "b" fails to compile in proto1 because it conflicts with
         * a local variable named "b" in one of the generated methods.  Doh.
         * This file needs to compile in proto1 to test backwards-compatibility.
         * </pre>
         *
         * <code>int32 bb = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearBb() {
          copyOnWrite();
          instance.clearBb();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:proto3_unittest.TestAllTypes.NestedMessage)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bb_",
              };
              java.lang.String info =
                  "\u0000\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u0004";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage> parser = PARSER;
            if (parser == null) {
              synchronized (proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:proto3_unittest.TestAllTypes.NestedMessage)
      private static final proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage DEFAULT_INSTANCE;
      static {
        NestedMessage defaultInstance = new NestedMessage();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          NestedMessage.class, defaultInstance);
      }

      public static proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<NestedMessage> PARSER;

      public static com.google.protobuf.Parser<NestedMessage> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int oneofFieldCase_ = 0;
    private java.lang.Object oneofField_;
    public enum OneofFieldCase {
      ONEOF_UINT32(111),
      ONEOF_NESTED_MESSAGE(112),
      ONEOF_STRING(113),
      ONEOF_BYTES(114),
      ONEOFFIELD_NOT_SET(0);
      private final int value;
      private OneofFieldCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OneofFieldCase valueOf(int value) {
        return forNumber(value);
      }

      public static OneofFieldCase forNumber(int value) {
        switch (value) {
          case 111: return ONEOF_UINT32;
          case 112: return ONEOF_NESTED_MESSAGE;
          case 113: return ONEOF_STRING;
          case 114: return ONEOF_BYTES;
          case 0: return ONEOFFIELD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public OneofFieldCase
    getOneofFieldCase() {
      return OneofFieldCase.forNumber(
          oneofFieldCase_);
    }

    private void clearOneofField() {
      oneofFieldCase_ = 0;
      oneofField_ = null;
    }

    public static final int OPTIONAL_INT32_FIELD_NUMBER = 1;
    private int optionalInt32_;
    /**
     * <pre>
     * Singular
     * </pre>
     *
     * <code>int32 optional_int32 = 1;</code>
     * @return The optionalInt32.
     */
    @java.lang.Override
    public int getOptionalInt32() {
      return optionalInt32_;
    }
    /**
     * <pre>
     * Singular
     * </pre>
     *
     * <code>int32 optional_int32 = 1;</code>
     * @param value The optionalInt32 to set.
     */
    private void setOptionalInt32(int value) {
      
      optionalInt32_ = value;
    }
    /**
     * <pre>
     * Singular
     * </pre>
     *
     * <code>int32 optional_int32 = 1;</code>
     */
    private void clearOptionalInt32() {
      
      optionalInt32_ = 0;
    }

    public static final int OPTIONAL_INT64_FIELD_NUMBER = 2;
    private long optionalInt64_;
    /**
     * <code>int64 optional_int64 = 2;</code>
     * @return The optionalInt64.
     */
    @java.lang.Override
    public long getOptionalInt64() {
      return optionalInt64_;
    }
    /**
     * <code>int64 optional_int64 = 2;</code>
     * @param value The optionalInt64 to set.
     */
    private void setOptionalInt64(long value) {
      
      optionalInt64_ = value;
    }
    /**
     * <code>int64 optional_int64 = 2;</code>
     */
    private void clearOptionalInt64() {
      
      optionalInt64_ = 0L;
    }

    public static final int OPTIONAL_UINT32_FIELD_NUMBER = 3;
    private int optionalUint32_;
    /**
     * <code>uint32 optional_uint32 = 3;</code>
     * @return The optionalUint32.
     */
    @java.lang.Override
    public int getOptionalUint32() {
      return optionalUint32_;
    }
    /**
     * <code>uint32 optional_uint32 = 3;</code>
     * @param value The optionalUint32 to set.
     */
    private void setOptionalUint32(int value) {
      
      optionalUint32_ = value;
    }
    /**
     * <code>uint32 optional_uint32 = 3;</code>
     */
    private void clearOptionalUint32() {
      
      optionalUint32_ = 0;
    }

    public static final int OPTIONAL_UINT64_FIELD_NUMBER = 4;
    private long optionalUint64_;
    /**
     * <code>uint64 optional_uint64 = 4;</code>
     * @return The optionalUint64.
     */
    @java.lang.Override
    public long getOptionalUint64() {
      return optionalUint64_;
    }
    /**
     * <code>uint64 optional_uint64 = 4;</code>
     * @param value The optionalUint64 to set.
     */
    private void setOptionalUint64(long value) {
      
      optionalUint64_ = value;
    }
    /**
     * <code>uint64 optional_uint64 = 4;</code>
     */
    private void clearOptionalUint64() {
      
      optionalUint64_ = 0L;
    }

    public static final int OPTIONAL_SINT32_FIELD_NUMBER = 5;
    private int optionalSint32_;
    /**
     * <code>sint32 optional_sint32 = 5;</code>
     * @return The optionalSint32.
     */
    @java.lang.Override
    public int getOptionalSint32() {
      return optionalSint32_;
    }
    /**
     * <code>sint32 optional_sint32 = 5;</code>
     * @param value The optionalSint32 to set.
     */
    private void setOptionalSint32(int value) {
      
      optionalSint32_ = value;
    }
    /**
     * <code>sint32 optional_sint32 = 5;</code>
     */
    private void clearOptionalSint32() {
      
      optionalSint32_ = 0;
    }

    public static final int OPTIONAL_SINT64_FIELD_NUMBER = 6;
    private long optionalSint64_;
    /**
     * <code>sint64 optional_sint64 = 6;</code>
     * @return The optionalSint64.
     */
    @java.lang.Override
    public long getOptionalSint64() {
      return optionalSint64_;
    }
    /**
     * <code>sint64 optional_sint64 = 6;</code>
     * @param value The optionalSint64 to set.
     */
    private void setOptionalSint64(long value) {
      
      optionalSint64_ = value;
    }
    /**
     * <code>sint64 optional_sint64 = 6;</code>
     */
    private void clearOptionalSint64() {
      
      optionalSint64_ = 0L;
    }

    public static final int OPTIONAL_FIXED32_FIELD_NUMBER = 7;
    private int optionalFixed32_;
    /**
     * <code>fixed32 optional_fixed32 = 7;</code>
     * @return The optionalFixed32.
     */
    @java.lang.Override
    public int getOptionalFixed32() {
      return optionalFixed32_;
    }
    /**
     * <code>fixed32 optional_fixed32 = 7;</code>
     * @param value The optionalFixed32 to set.
     */
    private void setOptionalFixed32(int value) {
      
      optionalFixed32_ = value;
    }
    /**
     * <code>fixed32 optional_fixed32 = 7;</code>
     */
    private void clearOptionalFixed32() {
      
      optionalFixed32_ = 0;
    }

    public static final int OPTIONAL_FIXED64_FIELD_NUMBER = 8;
    private long optionalFixed64_;
    /**
     * <code>fixed64 optional_fixed64 = 8;</code>
     * @return The optionalFixed64.
     */
    @java.lang.Override
    public long getOptionalFixed64() {
      return optionalFixed64_;
    }
    /**
     * <code>fixed64 optional_fixed64 = 8;</code>
     * @param value The optionalFixed64 to set.
     */
    private void setOptionalFixed64(long value) {
      
      optionalFixed64_ = value;
    }
    /**
     * <code>fixed64 optional_fixed64 = 8;</code>
     */
    private void clearOptionalFixed64() {
      
      optionalFixed64_ = 0L;
    }

    public static final int OPTIONAL_SFIXED32_FIELD_NUMBER = 9;
    private int optionalSfixed32_;
    /**
     * <code>sfixed32 optional_sfixed32 = 9;</code>
     * @return The optionalSfixed32.
     */
    @java.lang.Override
    public int getOptionalSfixed32() {
      return optionalSfixed32_;
    }
    /**
     * <code>sfixed32 optional_sfixed32 = 9;</code>
     * @param value The optionalSfixed32 to set.
     */
    private void setOptionalSfixed32(int value) {
      
      optionalSfixed32_ = value;
    }
    /**
     * <code>sfixed32 optional_sfixed32 = 9;</code>
     */
    private void clearOptionalSfixed32() {
      
      optionalSfixed32_ = 0;
    }

    public static final int OPTIONAL_SFIXED64_FIELD_NUMBER = 10;
    private long optionalSfixed64_;
    /**
     * <code>sfixed64 optional_sfixed64 = 10;</code>
     * @return The optionalSfixed64.
     */
    @java.lang.Override
    public long getOptionalSfixed64() {
      return optionalSfixed64_;
    }
    /**
     * <code>sfixed64 optional_sfixed64 = 10;</code>
     * @param value The optionalSfixed64 to set.
     */
    private void setOptionalSfixed64(long value) {
      
      optionalSfixed64_ = value;
    }
    /**
     * <code>sfixed64 optional_sfixed64 = 10;</code>
     */
    private void clearOptionalSfixed64() {
      
      optionalSfixed64_ = 0L;
    }

    public static final int OPTIONAL_FLOAT_FIELD_NUMBER = 11;
    private float optionalFloat_;
    /**
     * <code>float optional_float = 11;</code>
     * @return The optionalFloat.
     */
    @java.lang.Override
    public float getOptionalFloat() {
      return optionalFloat_;
    }
    /**
     * <code>float optional_float = 11;</code>
     * @param value The optionalFloat to set.
     */
    private void setOptionalFloat(float value) {
      
      optionalFloat_ = value;
    }
    /**
     * <code>float optional_float = 11;</code>
     */
    private void clearOptionalFloat() {
      
      optionalFloat_ = 0F;
    }

    public static final int OPTIONAL_DOUBLE_FIELD_NUMBER = 12;
    private double optionalDouble_;
    /**
     * <code>double optional_double = 12;</code>
     * @return The optionalDouble.
     */
    @java.lang.Override
    public double getOptionalDouble() {
      return optionalDouble_;
    }
    /**
     * <code>double optional_double = 12;</code>
     * @param value The optionalDouble to set.
     */
    private void setOptionalDouble(double value) {
      
      optionalDouble_ = value;
    }
    /**
     * <code>double optional_double = 12;</code>
     */
    private void clearOptionalDouble() {
      
      optionalDouble_ = 0D;
    }

    public static final int OPTIONAL_BOOL_FIELD_NUMBER = 13;
    private boolean optionalBool_;
    /**
     * <code>bool optional_bool = 13;</code>
     * @return The optionalBool.
     */
    @java.lang.Override
    public boolean getOptionalBool() {
      return optionalBool_;
    }
    /**
     * <code>bool optional_bool = 13;</code>
     * @param value The optionalBool to set.
     */
    private void setOptionalBool(boolean value) {
      
      optionalBool_ = value;
    }
    /**
     * <code>bool optional_bool = 13;</code>
     */
    private void clearOptionalBool() {
      
      optionalBool_ = false;
    }

    public static final int OPTIONAL_STRING_FIELD_NUMBER = 14;
    private java.lang.String optionalString_;
    /**
     * <code>string optional_string = 14;</code>
     * @return The optionalString.
     */
    @java.lang.Override
    public java.lang.String getOptionalString() {
      return optionalString_;
    }
    /**
     * <code>string optional_string = 14;</code>
     * @return The bytes for optionalString.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOptionalStringBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(optionalString_);
    }
    /**
     * <code>string optional_string = 14;</code>
     * @param value The optionalString to set.
     */
    private void setOptionalString(
        java.lang.String value) {
      value.getClass();
  
      optionalString_ = value;
    }
    /**
     * <code>string optional_string = 14;</code>
     */
    private void clearOptionalString() {
      
      optionalString_ = getDefaultInstance().getOptionalString();
    }
    /**
     * <code>string optional_string = 14;</code>
     * @param value The bytes for optionalString to set.
     */
    private void setOptionalStringBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      optionalString_ = value.toStringUtf8();
      
    }

    public static final int OPTIONAL_BYTES_FIELD_NUMBER = 15;
    private com.google.protobuf.ByteString optionalBytes_;
    /**
     * <code>bytes optional_bytes = 15;</code>
     * @return The optionalBytes.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getOptionalBytes() {
      return optionalBytes_;
    }
    /**
     * <code>bytes optional_bytes = 15;</code>
     * @param value The optionalBytes to set.
     */
    private void setOptionalBytes(com.google.protobuf.ByteString value) {
      value.getClass();
  
      optionalBytes_ = value;
    }
    /**
     * <code>bytes optional_bytes = 15;</code>
     */
    private void clearOptionalBytes() {
      
      optionalBytes_ = getDefaultInstance().getOptionalBytes();
    }

    public static final int OPTIONAL_NESTED_MESSAGE_FIELD_NUMBER = 18;
    private proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage optionalNestedMessage_;
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;</code>
     */
    @java.lang.Override
    public boolean hasOptionalNestedMessage() {
      return optionalNestedMessage_ != null;
    }
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;</code>
     */
    @java.lang.Override
    public proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage getOptionalNestedMessage() {
      return optionalNestedMessage_ == null ? proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.getDefaultInstance() : optionalNestedMessage_;
    }
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;</code>
     */
    private void setOptionalNestedMessage(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
      value.getClass();
  optionalNestedMessage_ = value;
      
      }
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeOptionalNestedMessage(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
      value.getClass();
  if (optionalNestedMessage_ != null &&
          optionalNestedMessage_ != proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.getDefaultInstance()) {
        optionalNestedMessage_ =
          proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.newBuilder(optionalNestedMessage_).mergeFrom(value).buildPartial();
      } else {
        optionalNestedMessage_ = value;
      }
      
    }
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;</code>
     */
    private void clearOptionalNestedMessage() {  optionalNestedMessage_ = null;
      
    }

    public static final int OPTIONAL_FOREIGN_MESSAGE_FIELD_NUMBER = 19;
    private proto3_unittest.UnittestProto3.ForeignMessage optionalForeignMessage_;
    /**
     * <code>.proto3_unittest.ForeignMessage optional_foreign_message = 19;</code>
     */
    @java.lang.Override
    public boolean hasOptionalForeignMessage() {
      return optionalForeignMessage_ != null;
    }
    /**
     * <code>.proto3_unittest.ForeignMessage optional_foreign_message = 19;</code>
     */
    @java.lang.Override
    public proto3_unittest.UnittestProto3.ForeignMessage getOptionalForeignMessage() {
      return optionalForeignMessage_ == null ? proto3_unittest.UnittestProto3.ForeignMessage.getDefaultInstance() : optionalForeignMessage_;
    }
    /**
     * <code>.proto3_unittest.ForeignMessage optional_foreign_message = 19;</code>
     */
    private void setOptionalForeignMessage(proto3_unittest.UnittestProto3.ForeignMessage value) {
      value.getClass();
  optionalForeignMessage_ = value;
      
      }
    /**
     * <code>.proto3_unittest.ForeignMessage optional_foreign_message = 19;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeOptionalForeignMessage(proto3_unittest.UnittestProto3.ForeignMessage value) {
      value.getClass();
  if (optionalForeignMessage_ != null &&
          optionalForeignMessage_ != proto3_unittest.UnittestProto3.ForeignMessage.getDefaultInstance()) {
        optionalForeignMessage_ =
          proto3_unittest.UnittestProto3.ForeignMessage.newBuilder(optionalForeignMessage_).mergeFrom(value).buildPartial();
      } else {
        optionalForeignMessage_ = value;
      }
      
    }
    /**
     * <code>.proto3_unittest.ForeignMessage optional_foreign_message = 19;</code>
     */
    private void clearOptionalForeignMessage() {  optionalForeignMessage_ = null;
      
    }

    public static final int OPTIONAL_IMPORT_MESSAGE_FIELD_NUMBER = 20;
    private com.google.protobuf.test.UnittestImport.ImportMessage optionalImportMessage_;
    /**
     * <code>.protobuf_unittest_import.ImportMessage optional_import_message = 20;</code>
     */
    @java.lang.Override
    public boolean hasOptionalImportMessage() {
      return optionalImportMessage_ != null;
    }
    /**
     * <code>.protobuf_unittest_import.ImportMessage optional_import_message = 20;</code>
     */
    @java.lang.Override
    public com.google.protobuf.test.UnittestImport.ImportMessage getOptionalImportMessage() {
      return optionalImportMessage_ == null ? com.google.protobuf.test.UnittestImport.ImportMessage.getDefaultInstance() : optionalImportMessage_;
    }
    /**
     * <code>.protobuf_unittest_import.ImportMessage optional_import_message = 20;</code>
     */
    private void setOptionalImportMessage(com.google.protobuf.test.UnittestImport.ImportMessage value) {
      value.getClass();
  optionalImportMessage_ = value;
      
      }
    /**
     * <code>.protobuf_unittest_import.ImportMessage optional_import_message = 20;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeOptionalImportMessage(com.google.protobuf.test.UnittestImport.ImportMessage value) {
      value.getClass();
  if (optionalImportMessage_ != null &&
          optionalImportMessage_ != com.google.protobuf.test.UnittestImport.ImportMessage.getDefaultInstance()) {
        optionalImportMessage_ =
          com.google.protobuf.test.UnittestImport.ImportMessage.newBuilder(optionalImportMessage_).mergeFrom(value).buildPartial();
      } else {
        optionalImportMessage_ = value;
      }
      
    }
    /**
     * <code>.protobuf_unittest_import.ImportMessage optional_import_message = 20;</code>
     */
    private void clearOptionalImportMessage() {  optionalImportMessage_ = null;
      
    }

    public static final int OPTIONAL_NESTED_ENUM_FIELD_NUMBER = 21;
    private int optionalNestedEnum_;
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;</code>
     * @return The enum numeric value on the wire for optionalNestedEnum.
     */
    @java.lang.Override
    public int getOptionalNestedEnumValue() {
      return optionalNestedEnum_;
    }
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;</code>
     * @return The optionalNestedEnum.
     */
    @java.lang.Override
    public proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum getOptionalNestedEnum() {
      proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum result = proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum.forNumber(optionalNestedEnum_);
      return result == null ? proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum.UNRECOGNIZED : result;
    }
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;</code>
     * @param value The enum numeric value on the wire for optionalNestedEnum to set.
     */
    private void setOptionalNestedEnumValue(int value) {
        optionalNestedEnum_ = value;
    }
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;</code>
     * @param value The optionalNestedEnum to set.
     */
    private void setOptionalNestedEnum(proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum value) {
      optionalNestedEnum_ = value.getNumber();
      
    }
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;</code>
     */
    private void clearOptionalNestedEnum() {
      
      optionalNestedEnum_ = 0;
    }

    public static final int OPTIONAL_FOREIGN_ENUM_FIELD_NUMBER = 22;
    private int optionalForeignEnum_;
    /**
     * <code>.proto3_unittest.ForeignEnum optional_foreign_enum = 22;</code>
     * @return The enum numeric value on the wire for optionalForeignEnum.
     */
    @java.lang.Override
    public int getOptionalForeignEnumValue() {
      return optionalForeignEnum_;
    }
    /**
     * <code>.proto3_unittest.ForeignEnum optional_foreign_enum = 22;</code>
     * @return The optionalForeignEnum.
     */
    @java.lang.Override
    public proto3_unittest.UnittestProto3.ForeignEnum getOptionalForeignEnum() {
      proto3_unittest.UnittestProto3.ForeignEnum result = proto3_unittest.UnittestProto3.ForeignEnum.forNumber(optionalForeignEnum_);
      return result == null ? proto3_unittest.UnittestProto3.ForeignEnum.UNRECOGNIZED : result;
    }
    /**
     * <code>.proto3_unittest.ForeignEnum optional_foreign_enum = 22;</code>
     * @param value The enum numeric value on the wire for optionalForeignEnum to set.
     */
    private void setOptionalForeignEnumValue(int value) {
        optionalForeignEnum_ = value;
    }
    /**
     * <code>.proto3_unittest.ForeignEnum optional_foreign_enum = 22;</code>
     * @param value The optionalForeignEnum to set.
     */
    private void setOptionalForeignEnum(proto3_unittest.UnittestProto3.ForeignEnum value) {
      optionalForeignEnum_ = value.getNumber();
      
    }
    /**
     * <code>.proto3_unittest.ForeignEnum optional_foreign_enum = 22;</code>
     */
    private void clearOptionalForeignEnum() {
      
      optionalForeignEnum_ = 0;
    }

    public static final int OPTIONAL_STRING_PIECE_FIELD_NUMBER = 24;
    private java.lang.String optionalStringPiece_;
    /**
     * <code>string optional_string_piece = 24 [ctype = STRING_PIECE];</code>
     * @return The optionalStringPiece.
     */
    @java.lang.Override
    public java.lang.String getOptionalStringPiece() {
      return optionalStringPiece_;
    }
    /**
     * <code>string optional_string_piece = 24 [ctype = STRING_PIECE];</code>
     * @return The bytes for optionalStringPiece.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOptionalStringPieceBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(optionalStringPiece_);
    }
    /**
     * <code>string optional_string_piece = 24 [ctype = STRING_PIECE];</code>
     * @param value The optionalStringPiece to set.
     */
    private void setOptionalStringPiece(
        java.lang.String value) {
      value.getClass();
  
      optionalStringPiece_ = value;
    }
    /**
     * <code>string optional_string_piece = 24 [ctype = STRING_PIECE];</code>
     */
    private void clearOptionalStringPiece() {
      
      optionalStringPiece_ = getDefaultInstance().getOptionalStringPiece();
    }
    /**
     * <code>string optional_string_piece = 24 [ctype = STRING_PIECE];</code>
     * @param value The bytes for optionalStringPiece to set.
     */
    private void setOptionalStringPieceBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      optionalStringPiece_ = value.toStringUtf8();
      
    }

    public static final int OPTIONAL_CORD_FIELD_NUMBER = 25;
    private java.lang.String optionalCord_;
    /**
     * <code>string optional_cord = 25 [ctype = CORD];</code>
     * @return The optionalCord.
     */
    @java.lang.Override
    public java.lang.String getOptionalCord() {
      return optionalCord_;
    }
    /**
     * <code>string optional_cord = 25 [ctype = CORD];</code>
     * @return The bytes for optionalCord.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOptionalCordBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(optionalCord_);
    }
    /**
     * <code>string optional_cord = 25 [ctype = CORD];</code>
     * @param value The optionalCord to set.
     */
    private void setOptionalCord(
        java.lang.String value) {
      value.getClass();
  
      optionalCord_ = value;
    }
    /**
     * <code>string optional_cord = 25 [ctype = CORD];</code>
     */
    private void clearOptionalCord() {
      
      optionalCord_ = getDefaultInstance().getOptionalCord();
    }
    /**
     * <code>string optional_cord = 25 [ctype = CORD];</code>
     * @param value The bytes for optionalCord to set.
     */
    private void setOptionalCordBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      optionalCord_ = value.toStringUtf8();
      
    }

    public static final int OPTIONAL_PUBLIC_IMPORT_MESSAGE_FIELD_NUMBER = 26;
    private com.google.protobuf.test.UnittestImportPublic.PublicImportMessage optionalPublicImportMessage_;
    /**
     * <pre>
     * Defined in unittest_import_public.proto
     * </pre>
     *
     * <code>.protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;</code>
     */
    @java.lang.Override
    public boolean hasOptionalPublicImportMessage() {
      return optionalPublicImportMessage_ != null;
    }
    /**
     * <pre>
     * Defined in unittest_import_public.proto
     * </pre>
     *
     * <code>.protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;</code>
     */
    @java.lang.Override
    public com.google.protobuf.test.UnittestImportPublic.PublicImportMessage getOptionalPublicImportMessage() {
      return optionalPublicImportMessage_ == null ? com.google.protobuf.test.UnittestImportPublic.PublicImportMessage.getDefaultInstance() : optionalPublicImportMessage_;
    }
    /**
     * <pre>
     * Defined in unittest_import_public.proto
     * </pre>
     *
     * <code>.protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;</code>
     */
    private void setOptionalPublicImportMessage(com.google.protobuf.test.UnittestImportPublic.PublicImportMessage value) {
      value.getClass();
  optionalPublicImportMessage_ = value;
      
      }
    /**
     * <pre>
     * Defined in unittest_import_public.proto
     * </pre>
     *
     * <code>.protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeOptionalPublicImportMessage(com.google.protobuf.test.UnittestImportPublic.PublicImportMessage value) {
      value.getClass();
  if (optionalPublicImportMessage_ != null &&
          optionalPublicImportMessage_ != com.google.protobuf.test.UnittestImportPublic.PublicImportMessage.getDefaultInstance()) {
        optionalPublicImportMessage_ =
          com.google.protobuf.test.UnittestImportPublic.PublicImportMessage.newBuilder(optionalPublicImportMessage_).mergeFrom(value).buildPartial();
      } else {
        optionalPublicImportMessage_ = value;
      }
      
    }
    /**
     * <pre>
     * Defined in unittest_import_public.proto
     * </pre>
     *
     * <code>.protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;</code>
     */
    private void clearOptionalPublicImportMessage() {  optionalPublicImportMessage_ = null;
      
    }

    public static final int OPTIONAL_LAZY_MESSAGE_FIELD_NUMBER = 27;
    private proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage optionalLazyMessage_;
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];</code>
     */
    @java.lang.Override
    public boolean hasOptionalLazyMessage() {
      return optionalLazyMessage_ != null;
    }
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];</code>
     */
    @java.lang.Override
    public proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage getOptionalLazyMessage() {
      return optionalLazyMessage_ == null ? proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.getDefaultInstance() : optionalLazyMessage_;
    }
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];</code>
     */
    private void setOptionalLazyMessage(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
      value.getClass();
  optionalLazyMessage_ = value;
      
      }
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeOptionalLazyMessage(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
      value.getClass();
  if (optionalLazyMessage_ != null &&
          optionalLazyMessage_ != proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.getDefaultInstance()) {
        optionalLazyMessage_ =
          proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.newBuilder(optionalLazyMessage_).mergeFrom(value).buildPartial();
      } else {
        optionalLazyMessage_ = value;
      }
      
    }
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];</code>
     */
    private void clearOptionalLazyMessage() {  optionalLazyMessage_ = null;
      
    }

    public static final int OPTIONAL_LAZY_IMPORT_MESSAGE_FIELD_NUMBER = 115;
    private com.google.protobuf.test.UnittestImport.ImportMessage optionalLazyImportMessage_;
    /**
     * <code>.protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115 [lazy = true];</code>
     */
    @java.lang.Override
    public boolean hasOptionalLazyImportMessage() {
      return optionalLazyImportMessage_ != null;
    }
    /**
     * <code>.protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115 [lazy = true];</code>
     */
    @java.lang.Override
    public com.google.protobuf.test.UnittestImport.ImportMessage getOptionalLazyImportMessage() {
      return optionalLazyImportMessage_ == null ? com.google.protobuf.test.UnittestImport.ImportMessage.getDefaultInstance() : optionalLazyImportMessage_;
    }
    /**
     * <code>.protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115 [lazy = true];</code>
     */
    private void setOptionalLazyImportMessage(com.google.protobuf.test.UnittestImport.ImportMessage value) {
      value.getClass();
  optionalLazyImportMessage_ = value;
      
      }
    /**
     * <code>.protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115 [lazy = true];</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeOptionalLazyImportMessage(com.google.protobuf.test.UnittestImport.ImportMessage value) {
      value.getClass();
  if (optionalLazyImportMessage_ != null &&
          optionalLazyImportMessage_ != com.google.protobuf.test.UnittestImport.ImportMessage.getDefaultInstance()) {
        optionalLazyImportMessage_ =
          com.google.protobuf.test.UnittestImport.ImportMessage.newBuilder(optionalLazyImportMessage_).mergeFrom(value).buildPartial();
      } else {
        optionalLazyImportMessage_ = value;
      }
      
    }
    /**
     * <code>.protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115 [lazy = true];</code>
     */
    private void clearOptionalLazyImportMessage() {  optionalLazyImportMessage_ = null;
      
    }

    public static final int REPEATED_INT32_FIELD_NUMBER = 31;
    private com.google.protobuf.Internal.IntList repeatedInt32_;
    /**
     * <pre>
     * Repeated
     * </pre>
     *
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @return A list containing the repeatedInt32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedInt32List() {
      return repeatedInt32_;
    }
    /**
     * <pre>
     * Repeated
     * </pre>
     *
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @return The count of repeatedInt32.
     */
    @java.lang.Override
    public int getRepeatedInt32Count() {
      return repeatedInt32_.size();
    }
    /**
     * <pre>
     * Repeated
     * </pre>
     *
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @param index The index of the element to return.
     * @return The repeatedInt32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedInt32(int index) {
      return repeatedInt32_.getInt(index);
    }
    private int repeatedInt32MemoizedSerializedSize = -1;
    private void ensureRepeatedInt32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedInt32_;
      if (!tmp.isModifiable()) {
        repeatedInt32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * Repeated
     * </pre>
     *
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @param index The index to set the value at.
     * @param value The repeatedInt32 to set.
     */
    private void setRepeatedInt32(
        int index, int value) {
      ensureRepeatedInt32IsMutable();
      repeatedInt32_.setInt(index, value);
    }
    /**
     * <pre>
     * Repeated
     * </pre>
     *
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @param value The repeatedInt32 to add.
     */
    private void addRepeatedInt32(int value) {
      ensureRepeatedInt32IsMutable();
      repeatedInt32_.addInt(value);
    }
    /**
     * <pre>
     * Repeated
     * </pre>
     *
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @param values The repeatedInt32 to add.
     */
    private void addAllRepeatedInt32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedInt32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedInt32_);
    }
    /**
     * <pre>
     * Repeated
     * </pre>
     *
     * <code>repeated int32 repeated_int32 = 31;</code>
     */
    private void clearRepeatedInt32() {
      repeatedInt32_ = emptyIntList();
    }

    public static final int REPEATED_INT64_FIELD_NUMBER = 32;
    private com.google.protobuf.Internal.LongList repeatedInt64_;
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @return A list containing the repeatedInt64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedInt64List() {
      return repeatedInt64_;
    }
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @return The count of repeatedInt64.
     */
    @java.lang.Override
    public int getRepeatedInt64Count() {
      return repeatedInt64_.size();
    }
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @param index The index of the element to return.
     * @return The repeatedInt64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedInt64(int index) {
      return repeatedInt64_.getLong(index);
    }
    private int repeatedInt64MemoizedSerializedSize = -1;
    private void ensureRepeatedInt64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedInt64_;
      if (!tmp.isModifiable()) {
        repeatedInt64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @param index The index to set the value at.
     * @param value The repeatedInt64 to set.
     */
    private void setRepeatedInt64(
        int index, long value) {
      ensureRepeatedInt64IsMutable();
      repeatedInt64_.setLong(index, value);
    }
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @param value The repeatedInt64 to add.
     */
    private void addRepeatedInt64(long value) {
      ensureRepeatedInt64IsMutable();
      repeatedInt64_.addLong(value);
    }
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @param values The repeatedInt64 to add.
     */
    private void addAllRepeatedInt64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedInt64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedInt64_);
    }
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     */
    private void clearRepeatedInt64() {
      repeatedInt64_ = emptyLongList();
    }

    public static final int REPEATED_UINT32_FIELD_NUMBER = 33;
    private com.google.protobuf.Internal.IntList repeatedUint32_;
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @return A list containing the repeatedUint32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedUint32List() {
      return repeatedUint32_;
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @return The count of repeatedUint32.
     */
    @java.lang.Override
    public int getRepeatedUint32Count() {
      return repeatedUint32_.size();
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @param index The index of the element to return.
     * @return The repeatedUint32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedUint32(int index) {
      return repeatedUint32_.getInt(index);
    }
    private int repeatedUint32MemoizedSerializedSize = -1;
    private void ensureRepeatedUint32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedUint32_;
      if (!tmp.isModifiable()) {
        repeatedUint32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @param index The index to set the value at.
     * @param value The repeatedUint32 to set.
     */
    private void setRepeatedUint32(
        int index, int value) {
      ensureRepeatedUint32IsMutable();
      repeatedUint32_.setInt(index, value);
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @param value The repeatedUint32 to add.
     */
    private void addRepeatedUint32(int value) {
      ensureRepeatedUint32IsMutable();
      repeatedUint32_.addInt(value);
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @param values The repeatedUint32 to add.
     */
    private void addAllRepeatedUint32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedUint32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedUint32_);
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     */
    private void clearRepeatedUint32() {
      repeatedUint32_ = emptyIntList();
    }

    public static final int REPEATED_UINT64_FIELD_NUMBER = 34;
    private com.google.protobuf.Internal.LongList repeatedUint64_;
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @return A list containing the repeatedUint64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedUint64List() {
      return repeatedUint64_;
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @return The count of repeatedUint64.
     */
    @java.lang.Override
    public int getRepeatedUint64Count() {
      return repeatedUint64_.size();
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @param index The index of the element to return.
     * @return The repeatedUint64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedUint64(int index) {
      return repeatedUint64_.getLong(index);
    }
    private int repeatedUint64MemoizedSerializedSize = -1;
    private void ensureRepeatedUint64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedUint64_;
      if (!tmp.isModifiable()) {
        repeatedUint64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @param index The index to set the value at.
     * @param value The repeatedUint64 to set.
     */
    private void setRepeatedUint64(
        int index, long value) {
      ensureRepeatedUint64IsMutable();
      repeatedUint64_.setLong(index, value);
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @param value The repeatedUint64 to add.
     */
    private void addRepeatedUint64(long value) {
      ensureRepeatedUint64IsMutable();
      repeatedUint64_.addLong(value);
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @param values The repeatedUint64 to add.
     */
    private void addAllRepeatedUint64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedUint64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedUint64_);
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     */
    private void clearRepeatedUint64() {
      repeatedUint64_ = emptyLongList();
    }

    public static final int REPEATED_SINT32_FIELD_NUMBER = 35;
    private com.google.protobuf.Internal.IntList repeatedSint32_;
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @return A list containing the repeatedSint32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedSint32List() {
      return repeatedSint32_;
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @return The count of repeatedSint32.
     */
    @java.lang.Override
    public int getRepeatedSint32Count() {
      return repeatedSint32_.size();
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @param index The index of the element to return.
     * @return The repeatedSint32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedSint32(int index) {
      return repeatedSint32_.getInt(index);
    }
    private int repeatedSint32MemoizedSerializedSize = -1;
    private void ensureRepeatedSint32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedSint32_;
      if (!tmp.isModifiable()) {
        repeatedSint32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @param index The index to set the value at.
     * @param value The repeatedSint32 to set.
     */
    private void setRepeatedSint32(
        int index, int value) {
      ensureRepeatedSint32IsMutable();
      repeatedSint32_.setInt(index, value);
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @param value The repeatedSint32 to add.
     */
    private void addRepeatedSint32(int value) {
      ensureRepeatedSint32IsMutable();
      repeatedSint32_.addInt(value);
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @param values The repeatedSint32 to add.
     */
    private void addAllRepeatedSint32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedSint32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedSint32_);
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     */
    private void clearRepeatedSint32() {
      repeatedSint32_ = emptyIntList();
    }

    public static final int REPEATED_SINT64_FIELD_NUMBER = 36;
    private com.google.protobuf.Internal.LongList repeatedSint64_;
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @return A list containing the repeatedSint64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedSint64List() {
      return repeatedSint64_;
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @return The count of repeatedSint64.
     */
    @java.lang.Override
    public int getRepeatedSint64Count() {
      return repeatedSint64_.size();
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @param index The index of the element to return.
     * @return The repeatedSint64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedSint64(int index) {
      return repeatedSint64_.getLong(index);
    }
    private int repeatedSint64MemoizedSerializedSize = -1;
    private void ensureRepeatedSint64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedSint64_;
      if (!tmp.isModifiable()) {
        repeatedSint64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @param index The index to set the value at.
     * @param value The repeatedSint64 to set.
     */
    private void setRepeatedSint64(
        int index, long value) {
      ensureRepeatedSint64IsMutable();
      repeatedSint64_.setLong(index, value);
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @param value The repeatedSint64 to add.
     */
    private void addRepeatedSint64(long value) {
      ensureRepeatedSint64IsMutable();
      repeatedSint64_.addLong(value);
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @param values The repeatedSint64 to add.
     */
    private void addAllRepeatedSint64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedSint64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedSint64_);
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     */
    private void clearRepeatedSint64() {
      repeatedSint64_ = emptyLongList();
    }

    public static final int REPEATED_FIXED32_FIELD_NUMBER = 37;
    private com.google.protobuf.Internal.IntList repeatedFixed32_;
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @return A list containing the repeatedFixed32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedFixed32List() {
      return repeatedFixed32_;
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @return The count of repeatedFixed32.
     */
    @java.lang.Override
    public int getRepeatedFixed32Count() {
      return repeatedFixed32_.size();
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @param index The index of the element to return.
     * @return The repeatedFixed32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedFixed32(int index) {
      return repeatedFixed32_.getInt(index);
    }
    private int repeatedFixed32MemoizedSerializedSize = -1;
    private void ensureRepeatedFixed32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedFixed32_;
      if (!tmp.isModifiable()) {
        repeatedFixed32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @param index The index to set the value at.
     * @param value The repeatedFixed32 to set.
     */
    private void setRepeatedFixed32(
        int index, int value) {
      ensureRepeatedFixed32IsMutable();
      repeatedFixed32_.setInt(index, value);
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @param value The repeatedFixed32 to add.
     */
    private void addRepeatedFixed32(int value) {
      ensureRepeatedFixed32IsMutable();
      repeatedFixed32_.addInt(value);
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @param values The repeatedFixed32 to add.
     */
    private void addAllRepeatedFixed32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedFixed32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedFixed32_);
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     */
    private void clearRepeatedFixed32() {
      repeatedFixed32_ = emptyIntList();
    }

    public static final int REPEATED_FIXED64_FIELD_NUMBER = 38;
    private com.google.protobuf.Internal.LongList repeatedFixed64_;
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @return A list containing the repeatedFixed64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedFixed64List() {
      return repeatedFixed64_;
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @return The count of repeatedFixed64.
     */
    @java.lang.Override
    public int getRepeatedFixed64Count() {
      return repeatedFixed64_.size();
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @param index The index of the element to return.
     * @return The repeatedFixed64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedFixed64(int index) {
      return repeatedFixed64_.getLong(index);
    }
    private int repeatedFixed64MemoizedSerializedSize = -1;
    private void ensureRepeatedFixed64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedFixed64_;
      if (!tmp.isModifiable()) {
        repeatedFixed64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @param index The index to set the value at.
     * @param value The repeatedFixed64 to set.
     */
    private void setRepeatedFixed64(
        int index, long value) {
      ensureRepeatedFixed64IsMutable();
      repeatedFixed64_.setLong(index, value);
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @param value The repeatedFixed64 to add.
     */
    private void addRepeatedFixed64(long value) {
      ensureRepeatedFixed64IsMutable();
      repeatedFixed64_.addLong(value);
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @param values The repeatedFixed64 to add.
     */
    private void addAllRepeatedFixed64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedFixed64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedFixed64_);
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     */
    private void clearRepeatedFixed64() {
      repeatedFixed64_ = emptyLongList();
    }

    public static final int REPEATED_SFIXED32_FIELD_NUMBER = 39;
    private com.google.protobuf.Internal.IntList repeatedSfixed32_;
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @return A list containing the repeatedSfixed32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedSfixed32List() {
      return repeatedSfixed32_;
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @return The count of repeatedSfixed32.
     */
    @java.lang.Override
    public int getRepeatedSfixed32Count() {
      return repeatedSfixed32_.size();
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @param index The index of the element to return.
     * @return The repeatedSfixed32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedSfixed32(int index) {
      return repeatedSfixed32_.getInt(index);
    }
    private int repeatedSfixed32MemoizedSerializedSize = -1;
    private void ensureRepeatedSfixed32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedSfixed32_;
      if (!tmp.isModifiable()) {
        repeatedSfixed32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @param index The index to set the value at.
     * @param value The repeatedSfixed32 to set.
     */
    private void setRepeatedSfixed32(
        int index, int value) {
      ensureRepeatedSfixed32IsMutable();
      repeatedSfixed32_.setInt(index, value);
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @param value The repeatedSfixed32 to add.
     */
    private void addRepeatedSfixed32(int value) {
      ensureRepeatedSfixed32IsMutable();
      repeatedSfixed32_.addInt(value);
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @param values The repeatedSfixed32 to add.
     */
    private void addAllRepeatedSfixed32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedSfixed32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedSfixed32_);
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     */
    private void clearRepeatedSfixed32() {
      repeatedSfixed32_ = emptyIntList();
    }

    public static final int REPEATED_SFIXED64_FIELD_NUMBER = 40;
    private com.google.protobuf.Internal.LongList repeatedSfixed64_;
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @return A list containing the repeatedSfixed64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedSfixed64List() {
      return repeatedSfixed64_;
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @return The count of repeatedSfixed64.
     */
    @java.lang.Override
    public int getRepeatedSfixed64Count() {
      return repeatedSfixed64_.size();
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @param index The index of the element to return.
     * @return The repeatedSfixed64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedSfixed64(int index) {
      return repeatedSfixed64_.getLong(index);
    }
    private int repeatedSfixed64MemoizedSerializedSize = -1;
    private void ensureRepeatedSfixed64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedSfixed64_;
      if (!tmp.isModifiable()) {
        repeatedSfixed64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @param index The index to set the value at.
     * @param value The repeatedSfixed64 to set.
     */
    private void setRepeatedSfixed64(
        int index, long value) {
      ensureRepeatedSfixed64IsMutable();
      repeatedSfixed64_.setLong(index, value);
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @param value The repeatedSfixed64 to add.
     */
    private void addRepeatedSfixed64(long value) {
      ensureRepeatedSfixed64IsMutable();
      repeatedSfixed64_.addLong(value);
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @param values The repeatedSfixed64 to add.
     */
    private void addAllRepeatedSfixed64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedSfixed64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedSfixed64_);
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     */
    private void clearRepeatedSfixed64() {
      repeatedSfixed64_ = emptyLongList();
    }

    public static final int REPEATED_FLOAT_FIELD_NUMBER = 41;
    private com.google.protobuf.Internal.FloatList repeatedFloat_;
    /**
     * <code>repeated float repeated_float = 41;</code>
     * @return A list containing the repeatedFloat.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getRepeatedFloatList() {
      return repeatedFloat_;
    }
    /**
     * <code>repeated float repeated_float = 41;</code>
     * @return The count of repeatedFloat.
     */
    @java.lang.Override
    public int getRepeatedFloatCount() {
      return repeatedFloat_.size();
    }
    /**
     * <code>repeated float repeated_float = 41;</code>
     * @param index The index of the element to return.
     * @return The repeatedFloat at the given index.
     */
    @java.lang.Override
    public float getRepeatedFloat(int index) {
      return repeatedFloat_.getFloat(index);
    }
    private int repeatedFloatMemoizedSerializedSize = -1;
    private void ensureRepeatedFloatIsMutable() {
      com.google.protobuf.Internal.FloatList tmp = repeatedFloat_;
      if (!tmp.isModifiable()) {
        repeatedFloat_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated float repeated_float = 41;</code>
     * @param index The index to set the value at.
     * @param value The repeatedFloat to set.
     */
    private void setRepeatedFloat(
        int index, float value) {
      ensureRepeatedFloatIsMutable();
      repeatedFloat_.setFloat(index, value);
    }
    /**
     * <code>repeated float repeated_float = 41;</code>
     * @param value The repeatedFloat to add.
     */
    private void addRepeatedFloat(float value) {
      ensureRepeatedFloatIsMutable();
      repeatedFloat_.addFloat(value);
    }
    /**
     * <code>repeated float repeated_float = 41;</code>
     * @param values The repeatedFloat to add.
     */
    private void addAllRepeatedFloat(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureRepeatedFloatIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedFloat_);
    }
    /**
     * <code>repeated float repeated_float = 41;</code>
     */
    private void clearRepeatedFloat() {
      repeatedFloat_ = emptyFloatList();
    }

    public static final int REPEATED_DOUBLE_FIELD_NUMBER = 42;
    private com.google.protobuf.Internal.DoubleList repeatedDouble_;
    /**
     * <code>repeated double repeated_double = 42;</code>
     * @return A list containing the repeatedDouble.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getRepeatedDoubleList() {
      return repeatedDouble_;
    }
    /**
     * <code>repeated double repeated_double = 42;</code>
     * @return The count of repeatedDouble.
     */
    @java.lang.Override
    public int getRepeatedDoubleCount() {
      return repeatedDouble_.size();
    }
    /**
     * <code>repeated double repeated_double = 42;</code>
     * @param index The index of the element to return.
     * @return The repeatedDouble at the given index.
     */
    @java.lang.Override
    public double getRepeatedDouble(int index) {
      return repeatedDouble_.getDouble(index);
    }
    private int repeatedDoubleMemoizedSerializedSize = -1;
    private void ensureRepeatedDoubleIsMutable() {
      com.google.protobuf.Internal.DoubleList tmp = repeatedDouble_;
      if (!tmp.isModifiable()) {
        repeatedDouble_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated double repeated_double = 42;</code>
     * @param index The index to set the value at.
     * @param value The repeatedDouble to set.
     */
    private void setRepeatedDouble(
        int index, double value) {
      ensureRepeatedDoubleIsMutable();
      repeatedDouble_.setDouble(index, value);
    }
    /**
     * <code>repeated double repeated_double = 42;</code>
     * @param value The repeatedDouble to add.
     */
    private void addRepeatedDouble(double value) {
      ensureRepeatedDoubleIsMutable();
      repeatedDouble_.addDouble(value);
    }
    /**
     * <code>repeated double repeated_double = 42;</code>
     * @param values The repeatedDouble to add.
     */
    private void addAllRepeatedDouble(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureRepeatedDoubleIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedDouble_);
    }
    /**
     * <code>repeated double repeated_double = 42;</code>
     */
    private void clearRepeatedDouble() {
      repeatedDouble_ = emptyDoubleList();
    }

    public static final int REPEATED_BOOL_FIELD_NUMBER = 43;
    private com.google.protobuf.Internal.BooleanList repeatedBool_;
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @return A list containing the repeatedBool.
     */
    @java.lang.Override
    public java.util.List<java.lang.Boolean>
        getRepeatedBoolList() {
      return repeatedBool_;
    }
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @return The count of repeatedBool.
     */
    @java.lang.Override
    public int getRepeatedBoolCount() {
      return repeatedBool_.size();
    }
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @param index The index of the element to return.
     * @return The repeatedBool at the given index.
     */
    @java.lang.Override
    public boolean getRepeatedBool(int index) {
      return repeatedBool_.getBoolean(index);
    }
    private int repeatedBoolMemoizedSerializedSize = -1;
    private void ensureRepeatedBoolIsMutable() {
      com.google.protobuf.Internal.BooleanList tmp = repeatedBool_;
      if (!tmp.isModifiable()) {
        repeatedBool_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @param index The index to set the value at.
     * @param value The repeatedBool to set.
     */
    private void setRepeatedBool(
        int index, boolean value) {
      ensureRepeatedBoolIsMutable();
      repeatedBool_.setBoolean(index, value);
    }
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @param value The repeatedBool to add.
     */
    private void addRepeatedBool(boolean value) {
      ensureRepeatedBoolIsMutable();
      repeatedBool_.addBoolean(value);
    }
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @param values The repeatedBool to add.
     */
    private void addAllRepeatedBool(
        java.lang.Iterable<? extends java.lang.Boolean> values) {
      ensureRepeatedBoolIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedBool_);
    }
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     */
    private void clearRepeatedBool() {
      repeatedBool_ = emptyBooleanList();
    }

    public static final int REPEATED_STRING_FIELD_NUMBER = 44;
    private com.google.protobuf.Internal.ProtobufList<java.lang.String> repeatedString_;
    /**
     * <code>repeated string repeated_string = 44;</code>
     * @return A list containing the repeatedString.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getRepeatedStringList() {
      return repeatedString_;
    }
    /**
     * <code>repeated string repeated_string = 44;</code>
     * @return The count of repeatedString.
     */
    @java.lang.Override
    public int getRepeatedStringCount() {
      return repeatedString_.size();
    }
    /**
     * <code>repeated string repeated_string = 44;</code>
     * @param index The index of the element to return.
     * @return The repeatedString at the given index.
     */
    @java.lang.Override
    public java.lang.String getRepeatedString(int index) {
      return repeatedString_.get(index);
    }
    /**
     * <code>repeated string repeated_string = 44;</code>
     * @param index The index of the value to return.
     * @return The bytes of the repeatedString at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRepeatedStringBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          repeatedString_.get(index));
    }
    private void ensureRepeatedStringIsMutable() {
      com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          repeatedString_;  if (!tmp.isModifiable()) {
        repeatedString_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated string repeated_string = 44;</code>
     * @param index The index to set the value at.
     * @param value The repeatedString to set.
     */
    private void setRepeatedString(
        int index, java.lang.String value) {
      value.getClass();
  ensureRepeatedStringIsMutable();
      repeatedString_.set(index, value);
    }
    /**
     * <code>repeated string repeated_string = 44;</code>
     * @param value The repeatedString to add.
     */
    private void addRepeatedString(
        java.lang.String value) {
      value.getClass();
  ensureRepeatedStringIsMutable();
      repeatedString_.add(value);
    }
    /**
     * <code>repeated string repeated_string = 44;</code>
     * @param values The repeatedString to add.
     */
    private void addAllRepeatedString(
        java.lang.Iterable<java.lang.String> values) {
      ensureRepeatedStringIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedString_);
    }
    /**
     * <code>repeated string repeated_string = 44;</code>
     */
    private void clearRepeatedString() {
      repeatedString_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <code>repeated string repeated_string = 44;</code>
     * @param value The bytes of the repeatedString to add.
     */
    private void addRepeatedStringBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      ensureRepeatedStringIsMutable();
      repeatedString_.add(value.toStringUtf8());
    }

    public static final int REPEATED_BYTES_FIELD_NUMBER = 45;
    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> repeatedBytes_;
    /**
     * <code>repeated bytes repeated_bytes = 45;</code>
     * @return A list containing the repeatedBytes.
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.ByteString>
        getRepeatedBytesList() {
      return repeatedBytes_;
    }
    /**
     * <code>repeated bytes repeated_bytes = 45;</code>
     * @return The count of repeatedBytes.
     */
    @java.lang.Override
    public int getRepeatedBytesCount() {
      return repeatedBytes_.size();
    }
    /**
     * <code>repeated bytes repeated_bytes = 45;</code>
     * @param index The index of the element to return.
     * @return The repeatedBytes at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getRepeatedBytes(int index) {
      return repeatedBytes_.get(index);
    }
    private void ensureRepeatedBytesIsMutable() {
      com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> tmp = repeatedBytes_;
      if (!tmp.isModifiable()) {
        repeatedBytes_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated bytes repeated_bytes = 45;</code>
     * @param index The index to set the value at.
     * @param value The repeatedBytes to set.
     */
    private void setRepeatedBytes(
        int index, com.google.protobuf.ByteString value) {
      value.getClass();
  ensureRepeatedBytesIsMutable();
      repeatedBytes_.set(index, value);
    }
    /**
     * <code>repeated bytes repeated_bytes = 45;</code>
     * @param value The repeatedBytes to add.
     */
    private void addRepeatedBytes(com.google.protobuf.ByteString value) {
      value.getClass();
  ensureRepeatedBytesIsMutable();
      repeatedBytes_.add(value);
    }
    /**
     * <code>repeated bytes repeated_bytes = 45;</code>
     * @param values The repeatedBytes to add.
     */
    private void addAllRepeatedBytes(
        java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
      ensureRepeatedBytesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedBytes_);
    }
    /**
     * <code>repeated bytes repeated_bytes = 45;</code>
     */
    private void clearRepeatedBytes() {
      repeatedBytes_ = emptyProtobufList();
    }

    public static final int REPEATED_NESTED_MESSAGE_FIELD_NUMBER = 48;
    private com.google.protobuf.Internal.ProtobufList<proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage> repeatedNestedMessage_;
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
     */
    @java.lang.Override
    public java.util.List<proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage> getRepeatedNestedMessageList() {
      return repeatedNestedMessage_;
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
     */
    public java.util.List<? extends proto3_unittest.UnittestProto3.TestAllTypes.NestedMessageOrBuilder> 
        getRepeatedNestedMessageOrBuilderList() {
      return repeatedNestedMessage_;
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
     */
    @java.lang.Override
    public int getRepeatedNestedMessageCount() {
      return repeatedNestedMessage_.size();
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
     */
    @java.lang.Override
    public proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage getRepeatedNestedMessage(int index) {
      return repeatedNestedMessage_.get(index);
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
     */
    public proto3_unittest.UnittestProto3.TestAllTypes.NestedMessageOrBuilder getRepeatedNestedMessageOrBuilder(
        int index) {
      return repeatedNestedMessage_.get(index);
    }
    private void ensureRepeatedNestedMessageIsMutable() {
      com.google.protobuf.Internal.ProtobufList<proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage> tmp = repeatedNestedMessage_;
      if (!tmp.isModifiable()) {
        repeatedNestedMessage_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
     */
    private void setRepeatedNestedMessage(
        int index, proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
      value.getClass();
  ensureRepeatedNestedMessageIsMutable();
      repeatedNestedMessage_.set(index, value);
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
     */
    private void addRepeatedNestedMessage(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
      value.getClass();
  ensureRepeatedNestedMessageIsMutable();
      repeatedNestedMessage_.add(value);
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
     */
    private void addRepeatedNestedMessage(
        int index, proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
      value.getClass();
  ensureRepeatedNestedMessageIsMutable();
      repeatedNestedMessage_.add(index, value);
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
     */
    private void addAllRepeatedNestedMessage(
        java.lang.Iterable<? extends proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage> values) {
      ensureRepeatedNestedMessageIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedNestedMessage_);
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
     */
    private void clearRepeatedNestedMessage() {
      repeatedNestedMessage_ = emptyProtobufList();
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
     */
    private void removeRepeatedNestedMessage(int index) {
      ensureRepeatedNestedMessageIsMutable();
      repeatedNestedMessage_.remove(index);
    }

    public static final int REPEATED_FOREIGN_MESSAGE_FIELD_NUMBER = 49;
    private com.google.protobuf.Internal.ProtobufList<proto3_unittest.UnittestProto3.ForeignMessage> repeatedForeignMessage_;
    /**
     * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
     */
    @java.lang.Override
    public java.util.List<proto3_unittest.UnittestProto3.ForeignMessage> getRepeatedForeignMessageList() {
      return repeatedForeignMessage_;
    }
    /**
     * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
     */
    public java.util.List<? extends proto3_unittest.UnittestProto3.ForeignMessageOrBuilder> 
        getRepeatedForeignMessageOrBuilderList() {
      return repeatedForeignMessage_;
    }
    /**
     * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
     */
    @java.lang.Override
    public int getRepeatedForeignMessageCount() {
      return repeatedForeignMessage_.size();
    }
    /**
     * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
     */
    @java.lang.Override
    public proto3_unittest.UnittestProto3.ForeignMessage getRepeatedForeignMessage(int index) {
      return repeatedForeignMessage_.get(index);
    }
    /**
     * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
     */
    public proto3_unittest.UnittestProto3.ForeignMessageOrBuilder getRepeatedForeignMessageOrBuilder(
        int index) {
      return repeatedForeignMessage_.get(index);
    }
    private void ensureRepeatedForeignMessageIsMutable() {
      com.google.protobuf.Internal.ProtobufList<proto3_unittest.UnittestProto3.ForeignMessage> tmp = repeatedForeignMessage_;
      if (!tmp.isModifiable()) {
        repeatedForeignMessage_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
     */
    private void setRepeatedForeignMessage(
        int index, proto3_unittest.UnittestProto3.ForeignMessage value) {
      value.getClass();
  ensureRepeatedForeignMessageIsMutable();
      repeatedForeignMessage_.set(index, value);
    }
    /**
     * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
     */
    private void addRepeatedForeignMessage(proto3_unittest.UnittestProto3.ForeignMessage value) {
      value.getClass();
  ensureRepeatedForeignMessageIsMutable();
      repeatedForeignMessage_.add(value);
    }
    /**
     * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
     */
    private void addRepeatedForeignMessage(
        int index, proto3_unittest.UnittestProto3.ForeignMessage value) {
      value.getClass();
  ensureRepeatedForeignMessageIsMutable();
      repeatedForeignMessage_.add(index, value);
    }
    /**
     * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
     */
    private void addAllRepeatedForeignMessage(
        java.lang.Iterable<? extends proto3_unittest.UnittestProto3.ForeignMessage> values) {
      ensureRepeatedForeignMessageIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedForeignMessage_);
    }
    /**
     * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
     */
    private void clearRepeatedForeignMessage() {
      repeatedForeignMessage_ = emptyProtobufList();
    }
    /**
     * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
     */
    private void removeRepeatedForeignMessage(int index) {
      ensureRepeatedForeignMessageIsMutable();
      repeatedForeignMessage_.remove(index);
    }

    public static final int REPEATED_IMPORT_MESSAGE_FIELD_NUMBER = 50;
    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.test.UnittestImport.ImportMessage> repeatedImportMessage_;
    /**
     * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.test.UnittestImport.ImportMessage> getRepeatedImportMessageList() {
      return repeatedImportMessage_;
    }
    /**
     * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
     */
    public java.util.List<? extends com.google.protobuf.test.UnittestImport.ImportMessageOrBuilder> 
        getRepeatedImportMessageOrBuilderList() {
      return repeatedImportMessage_;
    }
    /**
     * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
     */
    @java.lang.Override
    public int getRepeatedImportMessageCount() {
      return repeatedImportMessage_.size();
    }
    /**
     * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
     */
    @java.lang.Override
    public com.google.protobuf.test.UnittestImport.ImportMessage getRepeatedImportMessage(int index) {
      return repeatedImportMessage_.get(index);
    }
    /**
     * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
     */
    public com.google.protobuf.test.UnittestImport.ImportMessageOrBuilder getRepeatedImportMessageOrBuilder(
        int index) {
      return repeatedImportMessage_.get(index);
    }
    private void ensureRepeatedImportMessageIsMutable() {
      com.google.protobuf.Internal.ProtobufList<com.google.protobuf.test.UnittestImport.ImportMessage> tmp = repeatedImportMessage_;
      if (!tmp.isModifiable()) {
        repeatedImportMessage_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
     */
    private void setRepeatedImportMessage(
        int index, com.google.protobuf.test.UnittestImport.ImportMessage value) {
      value.getClass();
  ensureRepeatedImportMessageIsMutable();
      repeatedImportMessage_.set(index, value);
    }
    /**
     * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
     */
    private void addRepeatedImportMessage(com.google.protobuf.test.UnittestImport.ImportMessage value) {
      value.getClass();
  ensureRepeatedImportMessageIsMutable();
      repeatedImportMessage_.add(value);
    }
    /**
     * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
     */
    private void addRepeatedImportMessage(
        int index, com.google.protobuf.test.UnittestImport.ImportMessage value) {
      value.getClass();
  ensureRepeatedImportMessageIsMutable();
      repeatedImportMessage_.add(index, value);
    }
    /**
     * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
     */
    private void addAllRepeatedImportMessage(
        java.lang.Iterable<? extends com.google.protobuf.test.UnittestImport.ImportMessage> values) {
      ensureRepeatedImportMessageIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedImportMessage_);
    }
    /**
     * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
     */
    private void clearRepeatedImportMessage() {
      repeatedImportMessage_ = emptyProtobufList();
    }
    /**
     * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
     */
    private void removeRepeatedImportMessage(int index) {
      ensureRepeatedImportMessageIsMutable();
      repeatedImportMessage_.remove(index);
    }

    public static final int REPEATED_NESTED_ENUM_FIELD_NUMBER = 51;
    private com.google.protobuf.Internal.IntList repeatedNestedEnum_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum> repeatedNestedEnum_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum>() {
              @java.lang.Override
              public proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum convert(java.lang.Integer from) {
                proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum result = proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum.forNumber(from);
                return result == null ? proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum.UNRECOGNIZED : result;
              }
            };
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @return A list containing the repeatedNestedEnum.
     */
    @java.lang.Override
    public java.util.List<proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum> getRepeatedNestedEnumList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum>(repeatedNestedEnum_, repeatedNestedEnum_converter_);
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @return The count of repeatedNestedEnum.
     */
    @java.lang.Override
    public int getRepeatedNestedEnumCount() {
      return repeatedNestedEnum_.size();
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param index The index of the element to return.
     * @return The repeatedNestedEnum at the given index.
     */
    @java.lang.Override
    public proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum getRepeatedNestedEnum(int index) {
      return repeatedNestedEnum_converter_.convert(repeatedNestedEnum_.getInt(index));
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @return A list containing the enum numeric values on the wire for repeatedNestedEnum.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
    getRepeatedNestedEnumValueList() {
      return repeatedNestedEnum_;
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of repeatedNestedEnum at the given index.
     */
    @java.lang.Override
    public int getRepeatedNestedEnumValue(int index) {
      return repeatedNestedEnum_.getInt(index);
    }
    private int repeatedNestedEnumMemoizedSerializedSize;
    private void ensureRepeatedNestedEnumIsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedNestedEnum_;
      if (!tmp.isModifiable()) {
        repeatedNestedEnum_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
      }
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param index The index to set the value at.
     * @param value The repeatedNestedEnum to set.
     */
    private void setRepeatedNestedEnum(
        int index, proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum value) {
      value.getClass();
  ensureRepeatedNestedEnumIsMutable();
      repeatedNestedEnum_.setInt(index, value.getNumber());
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param value The repeatedNestedEnum to add.
     */
    private void addRepeatedNestedEnum(proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum value) {
      value.getClass();
  ensureRepeatedNestedEnumIsMutable();
      repeatedNestedEnum_.addInt(value.getNumber());
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param values The repeatedNestedEnum to add.
     */
    private void addAllRepeatedNestedEnum(
        java.lang.Iterable<? extends proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum> values) {
      ensureRepeatedNestedEnumIsMutable();
      for (proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum value : values) {
        repeatedNestedEnum_.addInt(value.getNumber());
      }
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     */
    private void clearRepeatedNestedEnum() {
      repeatedNestedEnum_ = emptyIntList();
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param value The enum numeric value on the wire for repeatedNestedEnum to set.
     */
    private void setRepeatedNestedEnumValue(
        int index, int value) {
      ensureRepeatedNestedEnumIsMutable();
      repeatedNestedEnum_.setInt(index, value);
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param value The enum numeric value on the wire for repeatedNestedEnum to add.
     */
    private void addRepeatedNestedEnumValue(int value) {
      ensureRepeatedNestedEnumIsMutable();
      repeatedNestedEnum_.addInt(value);
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param values The enum numeric values on the wire for repeatedNestedEnum to add.
     */
    private void addAllRepeatedNestedEnumValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureRepeatedNestedEnumIsMutable();
      for (int value : values) {
        repeatedNestedEnum_.addInt(value);
      }
    }

    public static final int REPEATED_FOREIGN_ENUM_FIELD_NUMBER = 52;
    private com.google.protobuf.Internal.IntList repeatedForeignEnum_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, proto3_unittest.UnittestProto3.ForeignEnum> repeatedForeignEnum_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, proto3_unittest.UnittestProto3.ForeignEnum>() {
              @java.lang.Override
              public proto3_unittest.UnittestProto3.ForeignEnum convert(java.lang.Integer from) {
                proto3_unittest.UnittestProto3.ForeignEnum result = proto3_unittest.UnittestProto3.ForeignEnum.forNumber(from);
                return result == null ? proto3_unittest.UnittestProto3.ForeignEnum.UNRECOGNIZED : result;
              }
            };
    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     * @return A list containing the repeatedForeignEnum.
     */
    @java.lang.Override
    public java.util.List<proto3_unittest.UnittestProto3.ForeignEnum> getRepeatedForeignEnumList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, proto3_unittest.UnittestProto3.ForeignEnum>(repeatedForeignEnum_, repeatedForeignEnum_converter_);
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     * @return The count of repeatedForeignEnum.
     */
    @java.lang.Override
    public int getRepeatedForeignEnumCount() {
      return repeatedForeignEnum_.size();
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     * @param index The index of the element to return.
     * @return The repeatedForeignEnum at the given index.
     */
    @java.lang.Override
    public proto3_unittest.UnittestProto3.ForeignEnum getRepeatedForeignEnum(int index) {
      return repeatedForeignEnum_converter_.convert(repeatedForeignEnum_.getInt(index));
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     * @return A list containing the enum numeric values on the wire for repeatedForeignEnum.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
    getRepeatedForeignEnumValueList() {
      return repeatedForeignEnum_;
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of repeatedForeignEnum at the given index.
     */
    @java.lang.Override
    public int getRepeatedForeignEnumValue(int index) {
      return repeatedForeignEnum_.getInt(index);
    }
    private int repeatedForeignEnumMemoizedSerializedSize;
    private void ensureRepeatedForeignEnumIsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedForeignEnum_;
      if (!tmp.isModifiable()) {
        repeatedForeignEnum_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
      }
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     * @param index The index to set the value at.
     * @param value The repeatedForeignEnum to set.
     */
    private void setRepeatedForeignEnum(
        int index, proto3_unittest.UnittestProto3.ForeignEnum value) {
      value.getClass();
  ensureRepeatedForeignEnumIsMutable();
      repeatedForeignEnum_.setInt(index, value.getNumber());
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     * @param value The repeatedForeignEnum to add.
     */
    private void addRepeatedForeignEnum(proto3_unittest.UnittestProto3.ForeignEnum value) {
      value.getClass();
  ensureRepeatedForeignEnumIsMutable();
      repeatedForeignEnum_.addInt(value.getNumber());
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     * @param values The repeatedForeignEnum to add.
     */
    private void addAllRepeatedForeignEnum(
        java.lang.Iterable<? extends proto3_unittest.UnittestProto3.ForeignEnum> values) {
      ensureRepeatedForeignEnumIsMutable();
      for (proto3_unittest.UnittestProto3.ForeignEnum value : values) {
        repeatedForeignEnum_.addInt(value.getNumber());
      }
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     */
    private void clearRepeatedForeignEnum() {
      repeatedForeignEnum_ = emptyIntList();
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     * @param value The enum numeric value on the wire for repeatedForeignEnum to set.
     */
    private void setRepeatedForeignEnumValue(
        int index, int value) {
      ensureRepeatedForeignEnumIsMutable();
      repeatedForeignEnum_.setInt(index, value);
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     * @param value The enum numeric value on the wire for repeatedForeignEnum to add.
     */
    private void addRepeatedForeignEnumValue(int value) {
      ensureRepeatedForeignEnumIsMutable();
      repeatedForeignEnum_.addInt(value);
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
     * @param values The enum numeric values on the wire for repeatedForeignEnum to add.
     */
    private void addAllRepeatedForeignEnumValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureRepeatedForeignEnumIsMutable();
      for (int value : values) {
        repeatedForeignEnum_.addInt(value);
      }
    }

    public static final int REPEATED_STRING_PIECE_FIELD_NUMBER = 54;
    private com.google.protobuf.Internal.ProtobufList<java.lang.String> repeatedStringPiece_;
    /**
     * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
     * @return A list containing the repeatedStringPiece.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getRepeatedStringPieceList() {
      return repeatedStringPiece_;
    }
    /**
     * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
     * @return The count of repeatedStringPiece.
     */
    @java.lang.Override
    public int getRepeatedStringPieceCount() {
      return repeatedStringPiece_.size();
    }
    /**
     * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
     * @param index The index of the element to return.
     * @return The repeatedStringPiece at the given index.
     */
    @java.lang.Override
    public java.lang.String getRepeatedStringPiece(int index) {
      return repeatedStringPiece_.get(index);
    }
    /**
     * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
     * @param index The index of the value to return.
     * @return The bytes of the repeatedStringPiece at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRepeatedStringPieceBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          repeatedStringPiece_.get(index));
    }
    private void ensureRepeatedStringPieceIsMutable() {
      com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          repeatedStringPiece_;  if (!tmp.isModifiable()) {
        repeatedStringPiece_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
     * @param index The index to set the value at.
     * @param value The repeatedStringPiece to set.
     */
    private void setRepeatedStringPiece(
        int index, java.lang.String value) {
      value.getClass();
  ensureRepeatedStringPieceIsMutable();
      repeatedStringPiece_.set(index, value);
    }
    /**
     * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
     * @param value The repeatedStringPiece to add.
     */
    private void addRepeatedStringPiece(
        java.lang.String value) {
      value.getClass();
  ensureRepeatedStringPieceIsMutable();
      repeatedStringPiece_.add(value);
    }
    /**
     * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
     * @param values The repeatedStringPiece to add.
     */
    private void addAllRepeatedStringPiece(
        java.lang.Iterable<java.lang.String> values) {
      ensureRepeatedStringPieceIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedStringPiece_);
    }
    /**
     * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
     */
    private void clearRepeatedStringPiece() {
      repeatedStringPiece_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
     * @param value The bytes of the repeatedStringPiece to add.
     */
    private void addRepeatedStringPieceBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      ensureRepeatedStringPieceIsMutable();
      repeatedStringPiece_.add(value.toStringUtf8());
    }

    public static final int REPEATED_CORD_FIELD_NUMBER = 55;
    private com.google.protobuf.Internal.ProtobufList<java.lang.String> repeatedCord_;
    /**
     * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
     * @return A list containing the repeatedCord.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getRepeatedCordList() {
      return repeatedCord_;
    }
    /**
     * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
     * @return The count of repeatedCord.
     */
    @java.lang.Override
    public int getRepeatedCordCount() {
      return repeatedCord_.size();
    }
    /**
     * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
     * @param index The index of the element to return.
     * @return The repeatedCord at the given index.
     */
    @java.lang.Override
    public java.lang.String getRepeatedCord(int index) {
      return repeatedCord_.get(index);
    }
    /**
     * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
     * @param index The index of the value to return.
     * @return The bytes of the repeatedCord at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRepeatedCordBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          repeatedCord_.get(index));
    }
    private void ensureRepeatedCordIsMutable() {
      com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          repeatedCord_;  if (!tmp.isModifiable()) {
        repeatedCord_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
     * @param index The index to set the value at.
     * @param value The repeatedCord to set.
     */
    private void setRepeatedCord(
        int index, java.lang.String value) {
      value.getClass();
  ensureRepeatedCordIsMutable();
      repeatedCord_.set(index, value);
    }
    /**
     * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
     * @param value The repeatedCord to add.
     */
    private void addRepeatedCord(
        java.lang.String value) {
      value.getClass();
  ensureRepeatedCordIsMutable();
      repeatedCord_.add(value);
    }
    /**
     * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
     * @param values The repeatedCord to add.
     */
    private void addAllRepeatedCord(
        java.lang.Iterable<java.lang.String> values) {
      ensureRepeatedCordIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedCord_);
    }
    /**
     * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
     */
    private void clearRepeatedCord() {
      repeatedCord_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
     * @param value The bytes of the repeatedCord to add.
     */
    private void addRepeatedCordBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      ensureRepeatedCordIsMutable();
      repeatedCord_.add(value.toStringUtf8());
    }

    public static final int REPEATED_LAZY_MESSAGE_FIELD_NUMBER = 57;
    private com.google.protobuf.Internal.ProtobufList<proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage> repeatedLazyMessage_;
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
     */
    @java.lang.Override
    public java.util.List<proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage> getRepeatedLazyMessageList() {
      return repeatedLazyMessage_;
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
     */
    public java.util.List<? extends proto3_unittest.UnittestProto3.TestAllTypes.NestedMessageOrBuilder> 
        getRepeatedLazyMessageOrBuilderList() {
      return repeatedLazyMessage_;
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
     */
    @java.lang.Override
    public int getRepeatedLazyMessageCount() {
      return repeatedLazyMessage_.size();
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
     */
    @java.lang.Override
    public proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage getRepeatedLazyMessage(int index) {
      return repeatedLazyMessage_.get(index);
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
     */
    public proto3_unittest.UnittestProto3.TestAllTypes.NestedMessageOrBuilder getRepeatedLazyMessageOrBuilder(
        int index) {
      return repeatedLazyMessage_.get(index);
    }
    private void ensureRepeatedLazyMessageIsMutable() {
      com.google.protobuf.Internal.ProtobufList<proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage> tmp = repeatedLazyMessage_;
      if (!tmp.isModifiable()) {
        repeatedLazyMessage_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
     */
    private void setRepeatedLazyMessage(
        int index, proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
      value.getClass();
  ensureRepeatedLazyMessageIsMutable();
      repeatedLazyMessage_.set(index, value);
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
     */
    private void addRepeatedLazyMessage(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
      value.getClass();
  ensureRepeatedLazyMessageIsMutable();
      repeatedLazyMessage_.add(value);
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
     */
    private void addRepeatedLazyMessage(
        int index, proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
      value.getClass();
  ensureRepeatedLazyMessageIsMutable();
      repeatedLazyMessage_.add(index, value);
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
     */
    private void addAllRepeatedLazyMessage(
        java.lang.Iterable<? extends proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage> values) {
      ensureRepeatedLazyMessageIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedLazyMessage_);
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
     */
    private void clearRepeatedLazyMessage() {
      repeatedLazyMessage_ = emptyProtobufList();
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
     */
    private void removeRepeatedLazyMessage(int index) {
      ensureRepeatedLazyMessageIsMutable();
      repeatedLazyMessage_.remove(index);
    }

    public static final int ONEOF_UINT32_FIELD_NUMBER = 111;
    /**
     * <code>uint32 oneof_uint32 = 111;</code>
     * @return Whether the oneofUint32 field is set.
     */
    @java.lang.Override
    public boolean hasOneofUint32() {
      return oneofFieldCase_ == 111;
    }
    /**
     * <code>uint32 oneof_uint32 = 111;</code>
     * @return The oneofUint32.
     */
    @java.lang.Override
    public int getOneofUint32() {
      if (oneofFieldCase_ == 111) {
        return (java.lang.Integer) oneofField_;
      }
      return 0;
    }
    /**
     * <code>uint32 oneof_uint32 = 111;</code>
     * @param value The oneofUint32 to set.
     */
    private void setOneofUint32(int value) {
      oneofFieldCase_ = 111;
      oneofField_ = value;
    }
    /**
     * <code>uint32 oneof_uint32 = 111;</code>
     */
    private void clearOneofUint32() {
      if (oneofFieldCase_ == 111) {
        oneofFieldCase_ = 0;
        oneofField_ = null;
      }
    }

    public static final int ONEOF_NESTED_MESSAGE_FIELD_NUMBER = 112;
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;</code>
     */
    @java.lang.Override
    public boolean hasOneofNestedMessage() {
      return oneofFieldCase_ == 112;
    }
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;</code>
     */
    @java.lang.Override
    public proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage getOneofNestedMessage() {
      if (oneofFieldCase_ == 112) {
         return (proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage) oneofField_;
      }
      return proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.getDefaultInstance();
    }
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;</code>
     */
    private void setOneofNestedMessage(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
      value.getClass();
  oneofField_ = value;
      oneofFieldCase_ = 112;
    }
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;</code>
     */
    private void mergeOneofNestedMessage(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
      value.getClass();
  if (oneofFieldCase_ == 112 &&
          oneofField_ != proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.getDefaultInstance()) {
        oneofField_ = proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.newBuilder((proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage) oneofField_)
            .mergeFrom(value).buildPartial();
      } else {
        oneofField_ = value;
      }
      oneofFieldCase_ = 112;
    }
    /**
     * <code>.proto3_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;</code>
     */
    private void clearOneofNestedMessage() {
      if (oneofFieldCase_ == 112) {
        oneofFieldCase_ = 0;
        oneofField_ = null;
      }
    }

    public static final int ONEOF_STRING_FIELD_NUMBER = 113;
    /**
     * <code>string oneof_string = 113;</code>
     * @return Whether the oneofString field is set.
     */
    @java.lang.Override
    public boolean hasOneofString() {
      return oneofFieldCase_ == 113;
    }
    /**
     * <code>string oneof_string = 113;</code>
     * @return The oneofString.
     */
    @java.lang.Override
    public java.lang.String getOneofString() {
      java.lang.String ref = "";
      if (oneofFieldCase_ == 113) {
        ref = (java.lang.String) oneofField_;
      }
      return ref;
    }
    /**
     * <code>string oneof_string = 113;</code>
     * @return The bytes for oneofString.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOneofStringBytes() {
      java.lang.String ref = "";
      if (oneofFieldCase_ == 113) {
        ref = (java.lang.String) oneofField_;
      }
      return com.google.protobuf.ByteString.copyFromUtf8(ref);
    }
    /**
     * <code>string oneof_string = 113;</code>
     * @param value The oneofString to set.
     */
    private void setOneofString(
        java.lang.String value) {
      value.getClass();
  oneofFieldCase_ = 113;
      oneofField_ = value;
    }
    /**
     * <code>string oneof_string = 113;</code>
     */
    private void clearOneofString() {
      if (oneofFieldCase_ == 113) {
        oneofFieldCase_ = 0;
        oneofField_ = null;
      }
    }
    /**
     * <code>string oneof_string = 113;</code>
     * @param value The bytes for oneofString to set.
     */
    private void setOneofStringBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      oneofField_ = value.toStringUtf8();
      oneofFieldCase_ = 113;
    }

    public static final int ONEOF_BYTES_FIELD_NUMBER = 114;
    /**
     * <code>bytes oneof_bytes = 114;</code>
     * @return Whether the oneofBytes field is set.
     */
    @java.lang.Override
    public boolean hasOneofBytes() {
      return oneofFieldCase_ == 114;
    }
    /**
     * <code>bytes oneof_bytes = 114;</code>
     * @return The oneofBytes.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getOneofBytes() {
      if (oneofFieldCase_ == 114) {
        return (com.google.protobuf.ByteString) oneofField_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * <code>bytes oneof_bytes = 114;</code>
     * @param value The oneofBytes to set.
     */
    private void setOneofBytes(com.google.protobuf.ByteString value) {
      value.getClass();
  oneofFieldCase_ = 114;
      oneofField_ = value;
    }
    /**
     * <code>bytes oneof_bytes = 114;</code>
     */
    private void clearOneofBytes() {
      if (oneofFieldCase_ == 114) {
        oneofFieldCase_ = 0;
        oneofField_ = null;
      }
    }

    public static proto3_unittest.UnittestProto3.TestAllTypes parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestAllTypes parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestAllTypes parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestAllTypes parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestAllTypes parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestAllTypes parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestAllTypes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestAllTypes parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestAllTypes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestAllTypes parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestAllTypes parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestAllTypes parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(proto3_unittest.UnittestProto3.TestAllTypes prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * This proto includes every type of field in both singular and repeated
     * forms.
     * </pre>
     *
     * Protobuf type {@code proto3_unittest.TestAllTypes}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          proto3_unittest.UnittestProto3.TestAllTypes, Builder> implements
        // @@protoc_insertion_point(builder_implements:proto3_unittest.TestAllTypes)
        proto3_unittest.UnittestProto3.TestAllTypesOrBuilder {
      // Construct using proto3_unittest.UnittestProto3.TestAllTypes.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @java.lang.Override
      public OneofFieldCase
          getOneofFieldCase() {
        return instance.getOneofFieldCase();
      }

      public Builder clearOneofField() {
        copyOnWrite();
        instance.clearOneofField();
        return this;
      }


      /**
       * <pre>
       * Singular
       * </pre>
       *
       * <code>int32 optional_int32 = 1;</code>
       * @return The optionalInt32.
       */
      @java.lang.Override
      public int getOptionalInt32() {
        return instance.getOptionalInt32();
      }
      /**
       * <pre>
       * Singular
       * </pre>
       *
       * <code>int32 optional_int32 = 1;</code>
       * @param value The optionalInt32 to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalInt32(int value) {
        copyOnWrite();
        instance.setOptionalInt32(value);
        return this;
      }
      /**
       * <pre>
       * Singular
       * </pre>
       *
       * <code>int32 optional_int32 = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalInt32() {
        copyOnWrite();
        instance.clearOptionalInt32();
        return this;
      }

      /**
       * <code>int64 optional_int64 = 2;</code>
       * @return The optionalInt64.
       */
      @java.lang.Override
      public long getOptionalInt64() {
        return instance.getOptionalInt64();
      }
      /**
       * <code>int64 optional_int64 = 2;</code>
       * @param value The optionalInt64 to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalInt64(long value) {
        copyOnWrite();
        instance.setOptionalInt64(value);
        return this;
      }
      /**
       * <code>int64 optional_int64 = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalInt64() {
        copyOnWrite();
        instance.clearOptionalInt64();
        return this;
      }

      /**
       * <code>uint32 optional_uint32 = 3;</code>
       * @return The optionalUint32.
       */
      @java.lang.Override
      public int getOptionalUint32() {
        return instance.getOptionalUint32();
      }
      /**
       * <code>uint32 optional_uint32 = 3;</code>
       * @param value The optionalUint32 to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalUint32(int value) {
        copyOnWrite();
        instance.setOptionalUint32(value);
        return this;
      }
      /**
       * <code>uint32 optional_uint32 = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalUint32() {
        copyOnWrite();
        instance.clearOptionalUint32();
        return this;
      }

      /**
       * <code>uint64 optional_uint64 = 4;</code>
       * @return The optionalUint64.
       */
      @java.lang.Override
      public long getOptionalUint64() {
        return instance.getOptionalUint64();
      }
      /**
       * <code>uint64 optional_uint64 = 4;</code>
       * @param value The optionalUint64 to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalUint64(long value) {
        copyOnWrite();
        instance.setOptionalUint64(value);
        return this;
      }
      /**
       * <code>uint64 optional_uint64 = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalUint64() {
        copyOnWrite();
        instance.clearOptionalUint64();
        return this;
      }

      /**
       * <code>sint32 optional_sint32 = 5;</code>
       * @return The optionalSint32.
       */
      @java.lang.Override
      public int getOptionalSint32() {
        return instance.getOptionalSint32();
      }
      /**
       * <code>sint32 optional_sint32 = 5;</code>
       * @param value The optionalSint32 to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalSint32(int value) {
        copyOnWrite();
        instance.setOptionalSint32(value);
        return this;
      }
      /**
       * <code>sint32 optional_sint32 = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalSint32() {
        copyOnWrite();
        instance.clearOptionalSint32();
        return this;
      }

      /**
       * <code>sint64 optional_sint64 = 6;</code>
       * @return The optionalSint64.
       */
      @java.lang.Override
      public long getOptionalSint64() {
        return instance.getOptionalSint64();
      }
      /**
       * <code>sint64 optional_sint64 = 6;</code>
       * @param value The optionalSint64 to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalSint64(long value) {
        copyOnWrite();
        instance.setOptionalSint64(value);
        return this;
      }
      /**
       * <code>sint64 optional_sint64 = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalSint64() {
        copyOnWrite();
        instance.clearOptionalSint64();
        return this;
      }

      /**
       * <code>fixed32 optional_fixed32 = 7;</code>
       * @return The optionalFixed32.
       */
      @java.lang.Override
      public int getOptionalFixed32() {
        return instance.getOptionalFixed32();
      }
      /**
       * <code>fixed32 optional_fixed32 = 7;</code>
       * @param value The optionalFixed32 to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalFixed32(int value) {
        copyOnWrite();
        instance.setOptionalFixed32(value);
        return this;
      }
      /**
       * <code>fixed32 optional_fixed32 = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalFixed32() {
        copyOnWrite();
        instance.clearOptionalFixed32();
        return this;
      }

      /**
       * <code>fixed64 optional_fixed64 = 8;</code>
       * @return The optionalFixed64.
       */
      @java.lang.Override
      public long getOptionalFixed64() {
        return instance.getOptionalFixed64();
      }
      /**
       * <code>fixed64 optional_fixed64 = 8;</code>
       * @param value The optionalFixed64 to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalFixed64(long value) {
        copyOnWrite();
        instance.setOptionalFixed64(value);
        return this;
      }
      /**
       * <code>fixed64 optional_fixed64 = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalFixed64() {
        copyOnWrite();
        instance.clearOptionalFixed64();
        return this;
      }

      /**
       * <code>sfixed32 optional_sfixed32 = 9;</code>
       * @return The optionalSfixed32.
       */
      @java.lang.Override
      public int getOptionalSfixed32() {
        return instance.getOptionalSfixed32();
      }
      /**
       * <code>sfixed32 optional_sfixed32 = 9;</code>
       * @param value The optionalSfixed32 to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalSfixed32(int value) {
        copyOnWrite();
        instance.setOptionalSfixed32(value);
        return this;
      }
      /**
       * <code>sfixed32 optional_sfixed32 = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalSfixed32() {
        copyOnWrite();
        instance.clearOptionalSfixed32();
        return this;
      }

      /**
       * <code>sfixed64 optional_sfixed64 = 10;</code>
       * @return The optionalSfixed64.
       */
      @java.lang.Override
      public long getOptionalSfixed64() {
        return instance.getOptionalSfixed64();
      }
      /**
       * <code>sfixed64 optional_sfixed64 = 10;</code>
       * @param value The optionalSfixed64 to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalSfixed64(long value) {
        copyOnWrite();
        instance.setOptionalSfixed64(value);
        return this;
      }
      /**
       * <code>sfixed64 optional_sfixed64 = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalSfixed64() {
        copyOnWrite();
        instance.clearOptionalSfixed64();
        return this;
      }

      /**
       * <code>float optional_float = 11;</code>
       * @return The optionalFloat.
       */
      @java.lang.Override
      public float getOptionalFloat() {
        return instance.getOptionalFloat();
      }
      /**
       * <code>float optional_float = 11;</code>
       * @param value The optionalFloat to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalFloat(float value) {
        copyOnWrite();
        instance.setOptionalFloat(value);
        return this;
      }
      /**
       * <code>float optional_float = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalFloat() {
        copyOnWrite();
        instance.clearOptionalFloat();
        return this;
      }

      /**
       * <code>double optional_double = 12;</code>
       * @return The optionalDouble.
       */
      @java.lang.Override
      public double getOptionalDouble() {
        return instance.getOptionalDouble();
      }
      /**
       * <code>double optional_double = 12;</code>
       * @param value The optionalDouble to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalDouble(double value) {
        copyOnWrite();
        instance.setOptionalDouble(value);
        return this;
      }
      /**
       * <code>double optional_double = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalDouble() {
        copyOnWrite();
        instance.clearOptionalDouble();
        return this;
      }

      /**
       * <code>bool optional_bool = 13;</code>
       * @return The optionalBool.
       */
      @java.lang.Override
      public boolean getOptionalBool() {
        return instance.getOptionalBool();
      }
      /**
       * <code>bool optional_bool = 13;</code>
       * @param value The optionalBool to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalBool(boolean value) {
        copyOnWrite();
        instance.setOptionalBool(value);
        return this;
      }
      /**
       * <code>bool optional_bool = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalBool() {
        copyOnWrite();
        instance.clearOptionalBool();
        return this;
      }

      /**
       * <code>string optional_string = 14;</code>
       * @return The optionalString.
       */
      @java.lang.Override
      public java.lang.String getOptionalString() {
        return instance.getOptionalString();
      }
      /**
       * <code>string optional_string = 14;</code>
       * @return The bytes for optionalString.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getOptionalStringBytes() {
        return instance.getOptionalStringBytes();
      }
      /**
       * <code>string optional_string = 14;</code>
       * @param value The optionalString to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalString(
          java.lang.String value) {
        copyOnWrite();
        instance.setOptionalString(value);
        return this;
      }
      /**
       * <code>string optional_string = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalString() {
        copyOnWrite();
        instance.clearOptionalString();
        return this;
      }
      /**
       * <code>string optional_string = 14;</code>
       * @param value The bytes for optionalString to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalStringBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setOptionalStringBytes(value);
        return this;
      }

      /**
       * <code>bytes optional_bytes = 15;</code>
       * @return The optionalBytes.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getOptionalBytes() {
        return instance.getOptionalBytes();
      }
      /**
       * <code>bytes optional_bytes = 15;</code>
       * @param value The optionalBytes to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalBytes(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setOptionalBytes(value);
        return this;
      }
      /**
       * <code>bytes optional_bytes = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalBytes() {
        copyOnWrite();
        instance.clearOptionalBytes();
        return this;
      }

      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;</code>
       */
      @java.lang.Override
      public boolean hasOptionalNestedMessage() {
        return instance.hasOptionalNestedMessage();
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;</code>
       */
      @java.lang.Override
      public proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage getOptionalNestedMessage() {
        return instance.getOptionalNestedMessage();
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;</code>
       */
      public Builder setOptionalNestedMessage(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
        copyOnWrite();
        instance.setOptionalNestedMessage(value);
        return this;
        }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;</code>
       */
      public Builder setOptionalNestedMessage(
          proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.Builder builderForValue) {
        copyOnWrite();
        instance.setOptionalNestedMessage(builderForValue.build());
        return this;
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;</code>
       */
      public Builder mergeOptionalNestedMessage(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
        copyOnWrite();
        instance.mergeOptionalNestedMessage(value);
        return this;
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;</code>
       */
      public Builder clearOptionalNestedMessage() {  copyOnWrite();
        instance.clearOptionalNestedMessage();
        return this;
      }

      /**
       * <code>.proto3_unittest.ForeignMessage optional_foreign_message = 19;</code>
       */
      @java.lang.Override
      public boolean hasOptionalForeignMessage() {
        return instance.hasOptionalForeignMessage();
      }
      /**
       * <code>.proto3_unittest.ForeignMessage optional_foreign_message = 19;</code>
       */
      @java.lang.Override
      public proto3_unittest.UnittestProto3.ForeignMessage getOptionalForeignMessage() {
        return instance.getOptionalForeignMessage();
      }
      /**
       * <code>.proto3_unittest.ForeignMessage optional_foreign_message = 19;</code>
       */
      public Builder setOptionalForeignMessage(proto3_unittest.UnittestProto3.ForeignMessage value) {
        copyOnWrite();
        instance.setOptionalForeignMessage(value);
        return this;
        }
      /**
       * <code>.proto3_unittest.ForeignMessage optional_foreign_message = 19;</code>
       */
      public Builder setOptionalForeignMessage(
          proto3_unittest.UnittestProto3.ForeignMessage.Builder builderForValue) {
        copyOnWrite();
        instance.setOptionalForeignMessage(builderForValue.build());
        return this;
      }
      /**
       * <code>.proto3_unittest.ForeignMessage optional_foreign_message = 19;</code>
       */
      public Builder mergeOptionalForeignMessage(proto3_unittest.UnittestProto3.ForeignMessage value) {
        copyOnWrite();
        instance.mergeOptionalForeignMessage(value);
        return this;
      }
      /**
       * <code>.proto3_unittest.ForeignMessage optional_foreign_message = 19;</code>
       */
      public Builder clearOptionalForeignMessage() {  copyOnWrite();
        instance.clearOptionalForeignMessage();
        return this;
      }

      /**
       * <code>.protobuf_unittest_import.ImportMessage optional_import_message = 20;</code>
       */
      @java.lang.Override
      public boolean hasOptionalImportMessage() {
        return instance.hasOptionalImportMessage();
      }
      /**
       * <code>.protobuf_unittest_import.ImportMessage optional_import_message = 20;</code>
       */
      @java.lang.Override
      public com.google.protobuf.test.UnittestImport.ImportMessage getOptionalImportMessage() {
        return instance.getOptionalImportMessage();
      }
      /**
       * <code>.protobuf_unittest_import.ImportMessage optional_import_message = 20;</code>
       */
      public Builder setOptionalImportMessage(com.google.protobuf.test.UnittestImport.ImportMessage value) {
        copyOnWrite();
        instance.setOptionalImportMessage(value);
        return this;
        }
      /**
       * <code>.protobuf_unittest_import.ImportMessage optional_import_message = 20;</code>
       */
      public Builder setOptionalImportMessage(
          com.google.protobuf.test.UnittestImport.ImportMessage.Builder builderForValue) {
        copyOnWrite();
        instance.setOptionalImportMessage(builderForValue.build());
        return this;
      }
      /**
       * <code>.protobuf_unittest_import.ImportMessage optional_import_message = 20;</code>
       */
      public Builder mergeOptionalImportMessage(com.google.protobuf.test.UnittestImport.ImportMessage value) {
        copyOnWrite();
        instance.mergeOptionalImportMessage(value);
        return this;
      }
      /**
       * <code>.protobuf_unittest_import.ImportMessage optional_import_message = 20;</code>
       */
      public Builder clearOptionalImportMessage() {  copyOnWrite();
        instance.clearOptionalImportMessage();
        return this;
      }

      /**
       * <code>.proto3_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;</code>
       * @return The enum numeric value on the wire for optionalNestedEnum.
       */
      @java.lang.Override
      public int getOptionalNestedEnumValue() {
        return instance.getOptionalNestedEnumValue();
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;</code>
       * @param value The optionalNestedEnum to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalNestedEnumValue(int value) {
        copyOnWrite();
        instance.setOptionalNestedEnumValue(value);
        return this;
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;</code>
       * @return The optionalNestedEnum.
       */
      @java.lang.Override
      public proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum getOptionalNestedEnum() {
        return instance.getOptionalNestedEnum();
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;</code>
       * @param value The enum numeric value on the wire for optionalNestedEnum to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalNestedEnum(proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum value) {
        copyOnWrite();
        instance.setOptionalNestedEnum(value);
        return this;
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalNestedEnum() {
        copyOnWrite();
        instance.clearOptionalNestedEnum();
        return this;
      }

      /**
       * <code>.proto3_unittest.ForeignEnum optional_foreign_enum = 22;</code>
       * @return The enum numeric value on the wire for optionalForeignEnum.
       */
      @java.lang.Override
      public int getOptionalForeignEnumValue() {
        return instance.getOptionalForeignEnumValue();
      }
      /**
       * <code>.proto3_unittest.ForeignEnum optional_foreign_enum = 22;</code>
       * @param value The optionalForeignEnum to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalForeignEnumValue(int value) {
        copyOnWrite();
        instance.setOptionalForeignEnumValue(value);
        return this;
      }
      /**
       * <code>.proto3_unittest.ForeignEnum optional_foreign_enum = 22;</code>
       * @return The optionalForeignEnum.
       */
      @java.lang.Override
      public proto3_unittest.UnittestProto3.ForeignEnum getOptionalForeignEnum() {
        return instance.getOptionalForeignEnum();
      }
      /**
       * <code>.proto3_unittest.ForeignEnum optional_foreign_enum = 22;</code>
       * @param value The enum numeric value on the wire for optionalForeignEnum to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalForeignEnum(proto3_unittest.UnittestProto3.ForeignEnum value) {
        copyOnWrite();
        instance.setOptionalForeignEnum(value);
        return this;
      }
      /**
       * <code>.proto3_unittest.ForeignEnum optional_foreign_enum = 22;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalForeignEnum() {
        copyOnWrite();
        instance.clearOptionalForeignEnum();
        return this;
      }

      /**
       * <code>string optional_string_piece = 24 [ctype = STRING_PIECE];</code>
       * @return The optionalStringPiece.
       */
      @java.lang.Override
      public java.lang.String getOptionalStringPiece() {
        return instance.getOptionalStringPiece();
      }
      /**
       * <code>string optional_string_piece = 24 [ctype = STRING_PIECE];</code>
       * @return The bytes for optionalStringPiece.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getOptionalStringPieceBytes() {
        return instance.getOptionalStringPieceBytes();
      }
      /**
       * <code>string optional_string_piece = 24 [ctype = STRING_PIECE];</code>
       * @param value The optionalStringPiece to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalStringPiece(
          java.lang.String value) {
        copyOnWrite();
        instance.setOptionalStringPiece(value);
        return this;
      }
      /**
       * <code>string optional_string_piece = 24 [ctype = STRING_PIECE];</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalStringPiece() {
        copyOnWrite();
        instance.clearOptionalStringPiece();
        return this;
      }
      /**
       * <code>string optional_string_piece = 24 [ctype = STRING_PIECE];</code>
       * @param value The bytes for optionalStringPiece to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalStringPieceBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setOptionalStringPieceBytes(value);
        return this;
      }

      /**
       * <code>string optional_cord = 25 [ctype = CORD];</code>
       * @return The optionalCord.
       */
      @java.lang.Override
      public java.lang.String getOptionalCord() {
        return instance.getOptionalCord();
      }
      /**
       * <code>string optional_cord = 25 [ctype = CORD];</code>
       * @return The bytes for optionalCord.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getOptionalCordBytes() {
        return instance.getOptionalCordBytes();
      }
      /**
       * <code>string optional_cord = 25 [ctype = CORD];</code>
       * @param value The optionalCord to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalCord(
          java.lang.String value) {
        copyOnWrite();
        instance.setOptionalCord(value);
        return this;
      }
      /**
       * <code>string optional_cord = 25 [ctype = CORD];</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalCord() {
        copyOnWrite();
        instance.clearOptionalCord();
        return this;
      }
      /**
       * <code>string optional_cord = 25 [ctype = CORD];</code>
       * @param value The bytes for optionalCord to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalCordBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setOptionalCordBytes(value);
        return this;
      }

      /**
       * <pre>
       * Defined in unittest_import_public.proto
       * </pre>
       *
       * <code>.protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;</code>
       */
      @java.lang.Override
      public boolean hasOptionalPublicImportMessage() {
        return instance.hasOptionalPublicImportMessage();
      }
      /**
       * <pre>
       * Defined in unittest_import_public.proto
       * </pre>
       *
       * <code>.protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;</code>
       */
      @java.lang.Override
      public com.google.protobuf.test.UnittestImportPublic.PublicImportMessage getOptionalPublicImportMessage() {
        return instance.getOptionalPublicImportMessage();
      }
      /**
       * <pre>
       * Defined in unittest_import_public.proto
       * </pre>
       *
       * <code>.protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;</code>
       */
      public Builder setOptionalPublicImportMessage(com.google.protobuf.test.UnittestImportPublic.PublicImportMessage value) {
        copyOnWrite();
        instance.setOptionalPublicImportMessage(value);
        return this;
        }
      /**
       * <pre>
       * Defined in unittest_import_public.proto
       * </pre>
       *
       * <code>.protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;</code>
       */
      public Builder setOptionalPublicImportMessage(
          com.google.protobuf.test.UnittestImportPublic.PublicImportMessage.Builder builderForValue) {
        copyOnWrite();
        instance.setOptionalPublicImportMessage(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Defined in unittest_import_public.proto
       * </pre>
       *
       * <code>.protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;</code>
       */
      public Builder mergeOptionalPublicImportMessage(com.google.protobuf.test.UnittestImportPublic.PublicImportMessage value) {
        copyOnWrite();
        instance.mergeOptionalPublicImportMessage(value);
        return this;
      }
      /**
       * <pre>
       * Defined in unittest_import_public.proto
       * </pre>
       *
       * <code>.protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;</code>
       */
      public Builder clearOptionalPublicImportMessage() {  copyOnWrite();
        instance.clearOptionalPublicImportMessage();
        return this;
      }

      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];</code>
       */
      @java.lang.Override
      public boolean hasOptionalLazyMessage() {
        return instance.hasOptionalLazyMessage();
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];</code>
       */
      @java.lang.Override
      public proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage getOptionalLazyMessage() {
        return instance.getOptionalLazyMessage();
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];</code>
       */
      public Builder setOptionalLazyMessage(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
        copyOnWrite();
        instance.setOptionalLazyMessage(value);
        return this;
        }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];</code>
       */
      public Builder setOptionalLazyMessage(
          proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.Builder builderForValue) {
        copyOnWrite();
        instance.setOptionalLazyMessage(builderForValue.build());
        return this;
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];</code>
       */
      public Builder mergeOptionalLazyMessage(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
        copyOnWrite();
        instance.mergeOptionalLazyMessage(value);
        return this;
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];</code>
       */
      public Builder clearOptionalLazyMessage() {  copyOnWrite();
        instance.clearOptionalLazyMessage();
        return this;
      }

      /**
       * <code>.protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115 [lazy = true];</code>
       */
      @java.lang.Override
      public boolean hasOptionalLazyImportMessage() {
        return instance.hasOptionalLazyImportMessage();
      }
      /**
       * <code>.protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115 [lazy = true];</code>
       */
      @java.lang.Override
      public com.google.protobuf.test.UnittestImport.ImportMessage getOptionalLazyImportMessage() {
        return instance.getOptionalLazyImportMessage();
      }
      /**
       * <code>.protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115 [lazy = true];</code>
       */
      public Builder setOptionalLazyImportMessage(com.google.protobuf.test.UnittestImport.ImportMessage value) {
        copyOnWrite();
        instance.setOptionalLazyImportMessage(value);
        return this;
        }
      /**
       * <code>.protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115 [lazy = true];</code>
       */
      public Builder setOptionalLazyImportMessage(
          com.google.protobuf.test.UnittestImport.ImportMessage.Builder builderForValue) {
        copyOnWrite();
        instance.setOptionalLazyImportMessage(builderForValue.build());
        return this;
      }
      /**
       * <code>.protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115 [lazy = true];</code>
       */
      public Builder mergeOptionalLazyImportMessage(com.google.protobuf.test.UnittestImport.ImportMessage value) {
        copyOnWrite();
        instance.mergeOptionalLazyImportMessage(value);
        return this;
      }
      /**
       * <code>.protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115 [lazy = true];</code>
       */
      public Builder clearOptionalLazyImportMessage() {  copyOnWrite();
        instance.clearOptionalLazyImportMessage();
        return this;
      }

      /**
       * <pre>
       * Repeated
       * </pre>
       *
       * <code>repeated int32 repeated_int32 = 31;</code>
       * @return A list containing the repeatedInt32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedInt32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedInt32List());
      }
      /**
       * <pre>
       * Repeated
       * </pre>
       *
       * <code>repeated int32 repeated_int32 = 31;</code>
       * @return The count of repeatedInt32.
       */
      @java.lang.Override
      public int getRepeatedInt32Count() {
        return instance.getRepeatedInt32Count();
      }
      /**
       * <pre>
       * Repeated
       * </pre>
       *
       * <code>repeated int32 repeated_int32 = 31;</code>
       * @param index The index of the element to return.
       * @return The repeatedInt32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedInt32(int index) {
        return instance.getRepeatedInt32(index);
      }
      /**
       * <pre>
       * Repeated
       * </pre>
       *
       * <code>repeated int32 repeated_int32 = 31;</code>
       * @param value The repeatedInt32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedInt32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedInt32(index, value);
        return this;
      }
      /**
       * <pre>
       * Repeated
       * </pre>
       *
       * <code>repeated int32 repeated_int32 = 31;</code>
       * @param value The repeatedInt32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedInt32(int value) {
        copyOnWrite();
        instance.addRepeatedInt32(value);
        return this;
      }
      /**
       * <pre>
       * Repeated
       * </pre>
       *
       * <code>repeated int32 repeated_int32 = 31;</code>
       * @param values The repeatedInt32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedInt32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedInt32(values);
        return this;
      }
      /**
       * <pre>
       * Repeated
       * </pre>
       *
       * <code>repeated int32 repeated_int32 = 31;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedInt32() {
        copyOnWrite();
        instance.clearRepeatedInt32();
        return this;
      }

      /**
       * <code>repeated int64 repeated_int64 = 32;</code>
       * @return A list containing the repeatedInt64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedInt64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedInt64List());
      }
      /**
       * <code>repeated int64 repeated_int64 = 32;</code>
       * @return The count of repeatedInt64.
       */
      @java.lang.Override
      public int getRepeatedInt64Count() {
        return instance.getRepeatedInt64Count();
      }
      /**
       * <code>repeated int64 repeated_int64 = 32;</code>
       * @param index The index of the element to return.
       * @return The repeatedInt64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedInt64(int index) {
        return instance.getRepeatedInt64(index);
      }
      /**
       * <code>repeated int64 repeated_int64 = 32;</code>
       * @param value The repeatedInt64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedInt64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedInt64(index, value);
        return this;
      }
      /**
       * <code>repeated int64 repeated_int64 = 32;</code>
       * @param value The repeatedInt64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedInt64(long value) {
        copyOnWrite();
        instance.addRepeatedInt64(value);
        return this;
      }
      /**
       * <code>repeated int64 repeated_int64 = 32;</code>
       * @param values The repeatedInt64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedInt64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedInt64(values);
        return this;
      }
      /**
       * <code>repeated int64 repeated_int64 = 32;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedInt64() {
        copyOnWrite();
        instance.clearRepeatedInt64();
        return this;
      }

      /**
       * <code>repeated uint32 repeated_uint32 = 33;</code>
       * @return A list containing the repeatedUint32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedUint32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedUint32List());
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 33;</code>
       * @return The count of repeatedUint32.
       */
      @java.lang.Override
      public int getRepeatedUint32Count() {
        return instance.getRepeatedUint32Count();
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 33;</code>
       * @param index The index of the element to return.
       * @return The repeatedUint32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedUint32(int index) {
        return instance.getRepeatedUint32(index);
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 33;</code>
       * @param value The repeatedUint32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedUint32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedUint32(index, value);
        return this;
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 33;</code>
       * @param value The repeatedUint32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedUint32(int value) {
        copyOnWrite();
        instance.addRepeatedUint32(value);
        return this;
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 33;</code>
       * @param values The repeatedUint32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedUint32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedUint32(values);
        return this;
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 33;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedUint32() {
        copyOnWrite();
        instance.clearRepeatedUint32();
        return this;
      }

      /**
       * <code>repeated uint64 repeated_uint64 = 34;</code>
       * @return A list containing the repeatedUint64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedUint64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedUint64List());
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 34;</code>
       * @return The count of repeatedUint64.
       */
      @java.lang.Override
      public int getRepeatedUint64Count() {
        return instance.getRepeatedUint64Count();
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 34;</code>
       * @param index The index of the element to return.
       * @return The repeatedUint64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedUint64(int index) {
        return instance.getRepeatedUint64(index);
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 34;</code>
       * @param value The repeatedUint64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedUint64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedUint64(index, value);
        return this;
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 34;</code>
       * @param value The repeatedUint64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedUint64(long value) {
        copyOnWrite();
        instance.addRepeatedUint64(value);
        return this;
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 34;</code>
       * @param values The repeatedUint64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedUint64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedUint64(values);
        return this;
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 34;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedUint64() {
        copyOnWrite();
        instance.clearRepeatedUint64();
        return this;
      }

      /**
       * <code>repeated sint32 repeated_sint32 = 35;</code>
       * @return A list containing the repeatedSint32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedSint32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedSint32List());
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 35;</code>
       * @return The count of repeatedSint32.
       */
      @java.lang.Override
      public int getRepeatedSint32Count() {
        return instance.getRepeatedSint32Count();
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 35;</code>
       * @param index The index of the element to return.
       * @return The repeatedSint32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedSint32(int index) {
        return instance.getRepeatedSint32(index);
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 35;</code>
       * @param value The repeatedSint32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedSint32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedSint32(index, value);
        return this;
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 35;</code>
       * @param value The repeatedSint32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedSint32(int value) {
        copyOnWrite();
        instance.addRepeatedSint32(value);
        return this;
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 35;</code>
       * @param values The repeatedSint32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedSint32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedSint32(values);
        return this;
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 35;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedSint32() {
        copyOnWrite();
        instance.clearRepeatedSint32();
        return this;
      }

      /**
       * <code>repeated sint64 repeated_sint64 = 36;</code>
       * @return A list containing the repeatedSint64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedSint64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedSint64List());
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 36;</code>
       * @return The count of repeatedSint64.
       */
      @java.lang.Override
      public int getRepeatedSint64Count() {
        return instance.getRepeatedSint64Count();
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 36;</code>
       * @param index The index of the element to return.
       * @return The repeatedSint64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedSint64(int index) {
        return instance.getRepeatedSint64(index);
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 36;</code>
       * @param value The repeatedSint64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedSint64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedSint64(index, value);
        return this;
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 36;</code>
       * @param value The repeatedSint64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedSint64(long value) {
        copyOnWrite();
        instance.addRepeatedSint64(value);
        return this;
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 36;</code>
       * @param values The repeatedSint64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedSint64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedSint64(values);
        return this;
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 36;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedSint64() {
        copyOnWrite();
        instance.clearRepeatedSint64();
        return this;
      }

      /**
       * <code>repeated fixed32 repeated_fixed32 = 37;</code>
       * @return A list containing the repeatedFixed32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedFixed32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedFixed32List());
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 37;</code>
       * @return The count of repeatedFixed32.
       */
      @java.lang.Override
      public int getRepeatedFixed32Count() {
        return instance.getRepeatedFixed32Count();
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 37;</code>
       * @param index The index of the element to return.
       * @return The repeatedFixed32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedFixed32(int index) {
        return instance.getRepeatedFixed32(index);
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 37;</code>
       * @param value The repeatedFixed32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedFixed32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedFixed32(index, value);
        return this;
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 37;</code>
       * @param value The repeatedFixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedFixed32(int value) {
        copyOnWrite();
        instance.addRepeatedFixed32(value);
        return this;
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 37;</code>
       * @param values The repeatedFixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedFixed32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedFixed32(values);
        return this;
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 37;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedFixed32() {
        copyOnWrite();
        instance.clearRepeatedFixed32();
        return this;
      }

      /**
       * <code>repeated fixed64 repeated_fixed64 = 38;</code>
       * @return A list containing the repeatedFixed64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedFixed64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedFixed64List());
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 38;</code>
       * @return The count of repeatedFixed64.
       */
      @java.lang.Override
      public int getRepeatedFixed64Count() {
        return instance.getRepeatedFixed64Count();
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 38;</code>
       * @param index The index of the element to return.
       * @return The repeatedFixed64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedFixed64(int index) {
        return instance.getRepeatedFixed64(index);
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 38;</code>
       * @param value The repeatedFixed64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedFixed64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedFixed64(index, value);
        return this;
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 38;</code>
       * @param value The repeatedFixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedFixed64(long value) {
        copyOnWrite();
        instance.addRepeatedFixed64(value);
        return this;
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 38;</code>
       * @param values The repeatedFixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedFixed64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedFixed64(values);
        return this;
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 38;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedFixed64() {
        copyOnWrite();
        instance.clearRepeatedFixed64();
        return this;
      }

      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
       * @return A list containing the repeatedSfixed32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedSfixed32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedSfixed32List());
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
       * @return The count of repeatedSfixed32.
       */
      @java.lang.Override
      public int getRepeatedSfixed32Count() {
        return instance.getRepeatedSfixed32Count();
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
       * @param index The index of the element to return.
       * @return The repeatedSfixed32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedSfixed32(int index) {
        return instance.getRepeatedSfixed32(index);
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
       * @param value The repeatedSfixed32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedSfixed32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedSfixed32(index, value);
        return this;
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
       * @param value The repeatedSfixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedSfixed32(int value) {
        copyOnWrite();
        instance.addRepeatedSfixed32(value);
        return this;
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
       * @param values The repeatedSfixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedSfixed32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedSfixed32(values);
        return this;
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedSfixed32() {
        copyOnWrite();
        instance.clearRepeatedSfixed32();
        return this;
      }

      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
       * @return A list containing the repeatedSfixed64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedSfixed64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedSfixed64List());
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
       * @return The count of repeatedSfixed64.
       */
      @java.lang.Override
      public int getRepeatedSfixed64Count() {
        return instance.getRepeatedSfixed64Count();
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
       * @param index The index of the element to return.
       * @return The repeatedSfixed64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedSfixed64(int index) {
        return instance.getRepeatedSfixed64(index);
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
       * @param value The repeatedSfixed64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedSfixed64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedSfixed64(index, value);
        return this;
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
       * @param value The repeatedSfixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedSfixed64(long value) {
        copyOnWrite();
        instance.addRepeatedSfixed64(value);
        return this;
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
       * @param values The repeatedSfixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedSfixed64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedSfixed64(values);
        return this;
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedSfixed64() {
        copyOnWrite();
        instance.clearRepeatedSfixed64();
        return this;
      }

      /**
       * <code>repeated float repeated_float = 41;</code>
       * @return A list containing the repeatedFloat.
       */
      @java.lang.Override
      public java.util.List<java.lang.Float>
          getRepeatedFloatList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedFloatList());
      }
      /**
       * <code>repeated float repeated_float = 41;</code>
       * @return The count of repeatedFloat.
       */
      @java.lang.Override
      public int getRepeatedFloatCount() {
        return instance.getRepeatedFloatCount();
      }
      /**
       * <code>repeated float repeated_float = 41;</code>
       * @param index The index of the element to return.
       * @return The repeatedFloat at the given index.
       */
      @java.lang.Override
      public float getRepeatedFloat(int index) {
        return instance.getRepeatedFloat(index);
      }
      /**
       * <code>repeated float repeated_float = 41;</code>
       * @param value The repeatedFloat to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedFloat(
          int index, float value) {
        copyOnWrite();
        instance.setRepeatedFloat(index, value);
        return this;
      }
      /**
       * <code>repeated float repeated_float = 41;</code>
       * @param value The repeatedFloat to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedFloat(float value) {
        copyOnWrite();
        instance.addRepeatedFloat(value);
        return this;
      }
      /**
       * <code>repeated float repeated_float = 41;</code>
       * @param values The repeatedFloat to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedFloat(
          java.lang.Iterable<? extends java.lang.Float> values) {
        copyOnWrite();
        instance.addAllRepeatedFloat(values);
        return this;
      }
      /**
       * <code>repeated float repeated_float = 41;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedFloat() {
        copyOnWrite();
        instance.clearRepeatedFloat();
        return this;
      }

      /**
       * <code>repeated double repeated_double = 42;</code>
       * @return A list containing the repeatedDouble.
       */
      @java.lang.Override
      public java.util.List<java.lang.Double>
          getRepeatedDoubleList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedDoubleList());
      }
      /**
       * <code>repeated double repeated_double = 42;</code>
       * @return The count of repeatedDouble.
       */
      @java.lang.Override
      public int getRepeatedDoubleCount() {
        return instance.getRepeatedDoubleCount();
      }
      /**
       * <code>repeated double repeated_double = 42;</code>
       * @param index The index of the element to return.
       * @return The repeatedDouble at the given index.
       */
      @java.lang.Override
      public double getRepeatedDouble(int index) {
        return instance.getRepeatedDouble(index);
      }
      /**
       * <code>repeated double repeated_double = 42;</code>
       * @param value The repeatedDouble to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedDouble(
          int index, double value) {
        copyOnWrite();
        instance.setRepeatedDouble(index, value);
        return this;
      }
      /**
       * <code>repeated double repeated_double = 42;</code>
       * @param value The repeatedDouble to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedDouble(double value) {
        copyOnWrite();
        instance.addRepeatedDouble(value);
        return this;
      }
      /**
       * <code>repeated double repeated_double = 42;</code>
       * @param values The repeatedDouble to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedDouble(
          java.lang.Iterable<? extends java.lang.Double> values) {
        copyOnWrite();
        instance.addAllRepeatedDouble(values);
        return this;
      }
      /**
       * <code>repeated double repeated_double = 42;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedDouble() {
        copyOnWrite();
        instance.clearRepeatedDouble();
        return this;
      }

      /**
       * <code>repeated bool repeated_bool = 43;</code>
       * @return A list containing the repeatedBool.
       */
      @java.lang.Override
      public java.util.List<java.lang.Boolean>
          getRepeatedBoolList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedBoolList());
      }
      /**
       * <code>repeated bool repeated_bool = 43;</code>
       * @return The count of repeatedBool.
       */
      @java.lang.Override
      public int getRepeatedBoolCount() {
        return instance.getRepeatedBoolCount();
      }
      /**
       * <code>repeated bool repeated_bool = 43;</code>
       * @param index The index of the element to return.
       * @return The repeatedBool at the given index.
       */
      @java.lang.Override
      public boolean getRepeatedBool(int index) {
        return instance.getRepeatedBool(index);
      }
      /**
       * <code>repeated bool repeated_bool = 43;</code>
       * @param value The repeatedBool to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedBool(
          int index, boolean value) {
        copyOnWrite();
        instance.setRepeatedBool(index, value);
        return this;
      }
      /**
       * <code>repeated bool repeated_bool = 43;</code>
       * @param value The repeatedBool to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedBool(boolean value) {
        copyOnWrite();
        instance.addRepeatedBool(value);
        return this;
      }
      /**
       * <code>repeated bool repeated_bool = 43;</code>
       * @param values The repeatedBool to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedBool(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        copyOnWrite();
        instance.addAllRepeatedBool(values);
        return this;
      }
      /**
       * <code>repeated bool repeated_bool = 43;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedBool() {
        copyOnWrite();
        instance.clearRepeatedBool();
        return this;
      }

      /**
       * <code>repeated string repeated_string = 44;</code>
       * @return A list containing the repeatedString.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getRepeatedStringList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedStringList());
      }
      /**
       * <code>repeated string repeated_string = 44;</code>
       * @return The count of repeatedString.
       */
      @java.lang.Override
      public int getRepeatedStringCount() {
        return instance.getRepeatedStringCount();
      }
      /**
       * <code>repeated string repeated_string = 44;</code>
       * @param index The index of the element to return.
       * @return The repeatedString at the given index.
       */
      @java.lang.Override
      public java.lang.String getRepeatedString(int index) {
        return instance.getRepeatedString(index);
      }
      /**
       * <code>repeated string repeated_string = 44;</code>
       * @param index The index of the value to return.
       * @return The bytes of the repeatedString at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getRepeatedStringBytes(int index) {
        return instance.getRepeatedStringBytes(index);
      }
      /**
       * <code>repeated string repeated_string = 44;</code>
       * @param index The index to set the value at.
       * @param value The repeatedString to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedString(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setRepeatedString(index, value);
        return this;
      }
      /**
       * <code>repeated string repeated_string = 44;</code>
       * @param value The repeatedString to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedString(
          java.lang.String value) {
        copyOnWrite();
        instance.addRepeatedString(value);
        return this;
      }
      /**
       * <code>repeated string repeated_string = 44;</code>
       * @param values The repeatedString to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedString(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllRepeatedString(values);
        return this;
      }
      /**
       * <code>repeated string repeated_string = 44;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedString() {
        copyOnWrite();
        instance.clearRepeatedString();
        return this;
      }
      /**
       * <code>repeated string repeated_string = 44;</code>
       * @param value The bytes of the repeatedString to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedStringBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addRepeatedStringBytes(value);
        return this;
      }

      /**
       * <code>repeated bytes repeated_bytes = 45;</code>
       * @return A list containing the repeatedBytes.
       */
      @java.lang.Override
      public java.util.List<com.google.protobuf.ByteString>
          getRepeatedBytesList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedBytesList());
      }
      /**
       * <code>repeated bytes repeated_bytes = 45;</code>
       * @return The count of repeatedBytes.
       */
      @java.lang.Override
      public int getRepeatedBytesCount() {
        return instance.getRepeatedBytesCount();
      }
      /**
       * <code>repeated bytes repeated_bytes = 45;</code>
       * @param index The index of the element to return.
       * @return The repeatedBytes at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getRepeatedBytes(int index) {
        return instance.getRepeatedBytes(index);
      }
      /**
       * <code>repeated bytes repeated_bytes = 45;</code>
       * @param value The repeatedBytes to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedBytes(
          int index, com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setRepeatedBytes(index, value);
        return this;
      }
      /**
       * <code>repeated bytes repeated_bytes = 45;</code>
       * @param value The repeatedBytes to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedBytes(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addRepeatedBytes(value);
        return this;
      }
      /**
       * <code>repeated bytes repeated_bytes = 45;</code>
       * @param values The repeatedBytes to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedBytes(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.addAllRepeatedBytes(values);
        return this;
      }
      /**
       * <code>repeated bytes repeated_bytes = 45;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedBytes() {
        copyOnWrite();
        instance.clearRepeatedBytes();
        return this;
      }

      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
       */
      @java.lang.Override
      public java.util.List<proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage> getRepeatedNestedMessageList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedNestedMessageList());
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
       */
      @java.lang.Override
      public int getRepeatedNestedMessageCount() {
        return instance.getRepeatedNestedMessageCount();
      }/**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
       */
      @java.lang.Override
      public proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage getRepeatedNestedMessage(int index) {
        return instance.getRepeatedNestedMessage(index);
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
       */
      public Builder setRepeatedNestedMessage(
          int index, proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
        copyOnWrite();
        instance.setRepeatedNestedMessage(index, value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
       */
      public Builder setRepeatedNestedMessage(
          int index, proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.Builder builderForValue) {
        copyOnWrite();
        instance.setRepeatedNestedMessage(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
       */
      public Builder addRepeatedNestedMessage(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
        copyOnWrite();
        instance.addRepeatedNestedMessage(value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
       */
      public Builder addRepeatedNestedMessage(
          int index, proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
        copyOnWrite();
        instance.addRepeatedNestedMessage(index, value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
       */
      public Builder addRepeatedNestedMessage(
          proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.Builder builderForValue) {
        copyOnWrite();
        instance.addRepeatedNestedMessage(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
       */
      public Builder addRepeatedNestedMessage(
          int index, proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.Builder builderForValue) {
        copyOnWrite();
        instance.addRepeatedNestedMessage(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
       */
      public Builder addAllRepeatedNestedMessage(
          java.lang.Iterable<? extends proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage> values) {
        copyOnWrite();
        instance.addAllRepeatedNestedMessage(values);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
       */
      public Builder clearRepeatedNestedMessage() {
        copyOnWrite();
        instance.clearRepeatedNestedMessage();
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;</code>
       */
      public Builder removeRepeatedNestedMessage(int index) {
        copyOnWrite();
        instance.removeRepeatedNestedMessage(index);
        return this;
      }

      /**
       * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
       */
      @java.lang.Override
      public java.util.List<proto3_unittest.UnittestProto3.ForeignMessage> getRepeatedForeignMessageList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedForeignMessageList());
      }
      /**
       * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
       */
      @java.lang.Override
      public int getRepeatedForeignMessageCount() {
        return instance.getRepeatedForeignMessageCount();
      }/**
       * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
       */
      @java.lang.Override
      public proto3_unittest.UnittestProto3.ForeignMessage getRepeatedForeignMessage(int index) {
        return instance.getRepeatedForeignMessage(index);
      }
      /**
       * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
       */
      public Builder setRepeatedForeignMessage(
          int index, proto3_unittest.UnittestProto3.ForeignMessage value) {
        copyOnWrite();
        instance.setRepeatedForeignMessage(index, value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
       */
      public Builder setRepeatedForeignMessage(
          int index, proto3_unittest.UnittestProto3.ForeignMessage.Builder builderForValue) {
        copyOnWrite();
        instance.setRepeatedForeignMessage(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
       */
      public Builder addRepeatedForeignMessage(proto3_unittest.UnittestProto3.ForeignMessage value) {
        copyOnWrite();
        instance.addRepeatedForeignMessage(value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
       */
      public Builder addRepeatedForeignMessage(
          int index, proto3_unittest.UnittestProto3.ForeignMessage value) {
        copyOnWrite();
        instance.addRepeatedForeignMessage(index, value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
       */
      public Builder addRepeatedForeignMessage(
          proto3_unittest.UnittestProto3.ForeignMessage.Builder builderForValue) {
        copyOnWrite();
        instance.addRepeatedForeignMessage(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
       */
      public Builder addRepeatedForeignMessage(
          int index, proto3_unittest.UnittestProto3.ForeignMessage.Builder builderForValue) {
        copyOnWrite();
        instance.addRepeatedForeignMessage(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
       */
      public Builder addAllRepeatedForeignMessage(
          java.lang.Iterable<? extends proto3_unittest.UnittestProto3.ForeignMessage> values) {
        copyOnWrite();
        instance.addAllRepeatedForeignMessage(values);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
       */
      public Builder clearRepeatedForeignMessage() {
        copyOnWrite();
        instance.clearRepeatedForeignMessage();
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignMessage repeated_foreign_message = 49;</code>
       */
      public Builder removeRepeatedForeignMessage(int index) {
        copyOnWrite();
        instance.removeRepeatedForeignMessage(index);
        return this;
      }

      /**
       * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
       */
      @java.lang.Override
      public java.util.List<com.google.protobuf.test.UnittestImport.ImportMessage> getRepeatedImportMessageList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedImportMessageList());
      }
      /**
       * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
       */
      @java.lang.Override
      public int getRepeatedImportMessageCount() {
        return instance.getRepeatedImportMessageCount();
      }/**
       * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
       */
      @java.lang.Override
      public com.google.protobuf.test.UnittestImport.ImportMessage getRepeatedImportMessage(int index) {
        return instance.getRepeatedImportMessage(index);
      }
      /**
       * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
       */
      public Builder setRepeatedImportMessage(
          int index, com.google.protobuf.test.UnittestImport.ImportMessage value) {
        copyOnWrite();
        instance.setRepeatedImportMessage(index, value);
        return this;
      }
      /**
       * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
       */
      public Builder setRepeatedImportMessage(
          int index, com.google.protobuf.test.UnittestImport.ImportMessage.Builder builderForValue) {
        copyOnWrite();
        instance.setRepeatedImportMessage(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
       */
      public Builder addRepeatedImportMessage(com.google.protobuf.test.UnittestImport.ImportMessage value) {
        copyOnWrite();
        instance.addRepeatedImportMessage(value);
        return this;
      }
      /**
       * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
       */
      public Builder addRepeatedImportMessage(
          int index, com.google.protobuf.test.UnittestImport.ImportMessage value) {
        copyOnWrite();
        instance.addRepeatedImportMessage(index, value);
        return this;
      }
      /**
       * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
       */
      public Builder addRepeatedImportMessage(
          com.google.protobuf.test.UnittestImport.ImportMessage.Builder builderForValue) {
        copyOnWrite();
        instance.addRepeatedImportMessage(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
       */
      public Builder addRepeatedImportMessage(
          int index, com.google.protobuf.test.UnittestImport.ImportMessage.Builder builderForValue) {
        copyOnWrite();
        instance.addRepeatedImportMessage(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
       */
      public Builder addAllRepeatedImportMessage(
          java.lang.Iterable<? extends com.google.protobuf.test.UnittestImport.ImportMessage> values) {
        copyOnWrite();
        instance.addAllRepeatedImportMessage(values);
        return this;
      }
      /**
       * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
       */
      public Builder clearRepeatedImportMessage() {
        copyOnWrite();
        instance.clearRepeatedImportMessage();
        return this;
      }
      /**
       * <code>repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;</code>
       */
      public Builder removeRepeatedImportMessage(int index) {
        copyOnWrite();
        instance.removeRepeatedImportMessage(index);
        return this;
      }

      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @return A list containing the repeatedNestedEnum.
       */
      @java.lang.Override
      public java.util.List<proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum> getRepeatedNestedEnumList() {
        return instance.getRepeatedNestedEnumList();
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @return The count of repeatedNestedEnum.
       */
      @java.lang.Override
      public int getRepeatedNestedEnumCount() {
        return instance.getRepeatedNestedEnumCount();
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @param index The index of the element to return.
       * @return The repeatedNestedEnum at the given index.
       */
      @java.lang.Override
      public proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum getRepeatedNestedEnum(int index) {
        return instance.getRepeatedNestedEnum(index);
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @param index The index to set the value at.
       * @param value The repeatedNestedEnum to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedNestedEnum(
          int index, proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum value) {
        copyOnWrite();
        instance.setRepeatedNestedEnum(index, value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @param value The repeatedNestedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedNestedEnum(proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum value) {
        copyOnWrite();
        instance.addRepeatedNestedEnum(value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @param values The repeatedNestedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedNestedEnum(
          java.lang.Iterable<? extends proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum> values) {
        copyOnWrite();
        instance.addAllRepeatedNestedEnum(values);  return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedNestedEnum() {
        copyOnWrite();
        instance.clearRepeatedNestedEnum();
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @return A list containing the enum numeric values on the wire for repeatedNestedEnum.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
      getRepeatedNestedEnumValueList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedNestedEnumValueList());
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @param index The index of the value to return.
       * @return The enum numeric value on the wire of repeatedNestedEnum at the given index.
       */
      @java.lang.Override
      public int getRepeatedNestedEnumValue(int index) {
        return instance.getRepeatedNestedEnumValue(index);
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @param index The index to set the value at.
       * @param value The enum numeric value on the wire for repeatedNestedEnum to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedNestedEnumValue(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedNestedEnumValue(index, value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @param value The enum numeric value on the wire for repeatedNestedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedNestedEnumValue(int value) {
        instance.addRepeatedNestedEnumValue(value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @param values The enum numeric values on the wire for repeatedNestedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedNestedEnumValue(
          java.lang.Iterable<java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedNestedEnumValue(values);
        return this;
      }

      /**
       * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
       * @return A list containing the repeatedForeignEnum.
       */
      @java.lang.Override
      public java.util.List<proto3_unittest.UnittestProto3.ForeignEnum> getRepeatedForeignEnumList() {
        return instance.getRepeatedForeignEnumList();
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
       * @return The count of repeatedForeignEnum.
       */
      @java.lang.Override
      public int getRepeatedForeignEnumCount() {
        return instance.getRepeatedForeignEnumCount();
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
       * @param index The index of the element to return.
       * @return The repeatedForeignEnum at the given index.
       */
      @java.lang.Override
      public proto3_unittest.UnittestProto3.ForeignEnum getRepeatedForeignEnum(int index) {
        return instance.getRepeatedForeignEnum(index);
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
       * @param index The index to set the value at.
       * @param value The repeatedForeignEnum to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedForeignEnum(
          int index, proto3_unittest.UnittestProto3.ForeignEnum value) {
        copyOnWrite();
        instance.setRepeatedForeignEnum(index, value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
       * @param value The repeatedForeignEnum to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedForeignEnum(proto3_unittest.UnittestProto3.ForeignEnum value) {
        copyOnWrite();
        instance.addRepeatedForeignEnum(value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
       * @param values The repeatedForeignEnum to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedForeignEnum(
          java.lang.Iterable<? extends proto3_unittest.UnittestProto3.ForeignEnum> values) {
        copyOnWrite();
        instance.addAllRepeatedForeignEnum(values);  return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedForeignEnum() {
        copyOnWrite();
        instance.clearRepeatedForeignEnum();
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
       * @return A list containing the enum numeric values on the wire for repeatedForeignEnum.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
      getRepeatedForeignEnumValueList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedForeignEnumValueList());
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
       * @param index The index of the value to return.
       * @return The enum numeric value on the wire of repeatedForeignEnum at the given index.
       */
      @java.lang.Override
      public int getRepeatedForeignEnumValue(int index) {
        return instance.getRepeatedForeignEnumValue(index);
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
       * @param index The index to set the value at.
       * @param value The enum numeric value on the wire for repeatedForeignEnum to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedForeignEnumValue(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedForeignEnumValue(index, value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
       * @param value The enum numeric value on the wire for repeatedForeignEnum to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedForeignEnumValue(int value) {
        instance.addRepeatedForeignEnumValue(value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum repeated_foreign_enum = 52;</code>
       * @param values The enum numeric values on the wire for repeatedForeignEnum to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedForeignEnumValue(
          java.lang.Iterable<java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedForeignEnumValue(values);
        return this;
      }

      /**
       * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
       * @return A list containing the repeatedStringPiece.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getRepeatedStringPieceList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedStringPieceList());
      }
      /**
       * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
       * @return The count of repeatedStringPiece.
       */
      @java.lang.Override
      public int getRepeatedStringPieceCount() {
        return instance.getRepeatedStringPieceCount();
      }
      /**
       * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
       * @param index The index of the element to return.
       * @return The repeatedStringPiece at the given index.
       */
      @java.lang.Override
      public java.lang.String getRepeatedStringPiece(int index) {
        return instance.getRepeatedStringPiece(index);
      }
      /**
       * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
       * @param index The index of the value to return.
       * @return The bytes of the repeatedStringPiece at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getRepeatedStringPieceBytes(int index) {
        return instance.getRepeatedStringPieceBytes(index);
      }
      /**
       * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
       * @param index The index to set the value at.
       * @param value The repeatedStringPiece to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedStringPiece(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setRepeatedStringPiece(index, value);
        return this;
      }
      /**
       * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
       * @param value The repeatedStringPiece to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedStringPiece(
          java.lang.String value) {
        copyOnWrite();
        instance.addRepeatedStringPiece(value);
        return this;
      }
      /**
       * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
       * @param values The repeatedStringPiece to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedStringPiece(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllRepeatedStringPiece(values);
        return this;
      }
      /**
       * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedStringPiece() {
        copyOnWrite();
        instance.clearRepeatedStringPiece();
        return this;
      }
      /**
       * <code>repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];</code>
       * @param value The bytes of the repeatedStringPiece to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedStringPieceBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addRepeatedStringPieceBytes(value);
        return this;
      }

      /**
       * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
       * @return A list containing the repeatedCord.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getRepeatedCordList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedCordList());
      }
      /**
       * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
       * @return The count of repeatedCord.
       */
      @java.lang.Override
      public int getRepeatedCordCount() {
        return instance.getRepeatedCordCount();
      }
      /**
       * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
       * @param index The index of the element to return.
       * @return The repeatedCord at the given index.
       */
      @java.lang.Override
      public java.lang.String getRepeatedCord(int index) {
        return instance.getRepeatedCord(index);
      }
      /**
       * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
       * @param index The index of the value to return.
       * @return The bytes of the repeatedCord at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getRepeatedCordBytes(int index) {
        return instance.getRepeatedCordBytes(index);
      }
      /**
       * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
       * @param index The index to set the value at.
       * @param value The repeatedCord to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedCord(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setRepeatedCord(index, value);
        return this;
      }
      /**
       * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
       * @param value The repeatedCord to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedCord(
          java.lang.String value) {
        copyOnWrite();
        instance.addRepeatedCord(value);
        return this;
      }
      /**
       * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
       * @param values The repeatedCord to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedCord(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllRepeatedCord(values);
        return this;
      }
      /**
       * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedCord() {
        copyOnWrite();
        instance.clearRepeatedCord();
        return this;
      }
      /**
       * <code>repeated string repeated_cord = 55 [ctype = CORD];</code>
       * @param value The bytes of the repeatedCord to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedCordBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addRepeatedCordBytes(value);
        return this;
      }

      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
       */
      @java.lang.Override
      public java.util.List<proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage> getRepeatedLazyMessageList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedLazyMessageList());
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
       */
      @java.lang.Override
      public int getRepeatedLazyMessageCount() {
        return instance.getRepeatedLazyMessageCount();
      }/**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
       */
      @java.lang.Override
      public proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage getRepeatedLazyMessage(int index) {
        return instance.getRepeatedLazyMessage(index);
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
       */
      public Builder setRepeatedLazyMessage(
          int index, proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
        copyOnWrite();
        instance.setRepeatedLazyMessage(index, value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
       */
      public Builder setRepeatedLazyMessage(
          int index, proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.Builder builderForValue) {
        copyOnWrite();
        instance.setRepeatedLazyMessage(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
       */
      public Builder addRepeatedLazyMessage(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
        copyOnWrite();
        instance.addRepeatedLazyMessage(value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
       */
      public Builder addRepeatedLazyMessage(
          int index, proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
        copyOnWrite();
        instance.addRepeatedLazyMessage(index, value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
       */
      public Builder addRepeatedLazyMessage(
          proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.Builder builderForValue) {
        copyOnWrite();
        instance.addRepeatedLazyMessage(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
       */
      public Builder addRepeatedLazyMessage(
          int index, proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.Builder builderForValue) {
        copyOnWrite();
        instance.addRepeatedLazyMessage(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
       */
      public Builder addAllRepeatedLazyMessage(
          java.lang.Iterable<? extends proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage> values) {
        copyOnWrite();
        instance.addAllRepeatedLazyMessage(values);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
       */
      public Builder clearRepeatedLazyMessage() {
        copyOnWrite();
        instance.clearRepeatedLazyMessage();
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];</code>
       */
      public Builder removeRepeatedLazyMessage(int index) {
        copyOnWrite();
        instance.removeRepeatedLazyMessage(index);
        return this;
      }

      /**
       * <code>uint32 oneof_uint32 = 111;</code>
       * @return Whether the oneofUint32 field is set.
       */
      @java.lang.Override
      public boolean hasOneofUint32() {
        return instance.hasOneofUint32();
      }
      /**
       * <code>uint32 oneof_uint32 = 111;</code>
       * @return The oneofUint32.
       */
      @java.lang.Override
      public int getOneofUint32() {
        return instance.getOneofUint32();
      }
      /**
       * <code>uint32 oneof_uint32 = 111;</code>
       * @param value The oneofUint32 to set.
       * @return This builder for chaining.
       */
      public Builder setOneofUint32(int value) {
        copyOnWrite();
        instance.setOneofUint32(value);
        return this;
      }
      /**
       * <code>uint32 oneof_uint32 = 111;</code>
       * @return This builder for chaining.
       */
      public Builder clearOneofUint32() {
        copyOnWrite();
        instance.clearOneofUint32();
        return this;
      }

      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;</code>
       */
      @java.lang.Override
      public boolean hasOneofNestedMessage() {
        return instance.hasOneofNestedMessage();
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;</code>
       */
      @java.lang.Override
      public proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage getOneofNestedMessage() {
        return instance.getOneofNestedMessage();
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;</code>
       */
      public Builder setOneofNestedMessage(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
        copyOnWrite();
        instance.setOneofNestedMessage(value);
        return this;
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;</code>
       */
      public Builder setOneofNestedMessage(
          proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.Builder builderForValue) {
        copyOnWrite();
        instance.setOneofNestedMessage(builderForValue.build());
        return this;
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;</code>
       */
      public Builder mergeOneofNestedMessage(proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage value) {
        copyOnWrite();
        instance.mergeOneofNestedMessage(value);
        return this;
      }
      /**
       * <code>.proto3_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;</code>
       */
      public Builder clearOneofNestedMessage() {
        copyOnWrite();
        instance.clearOneofNestedMessage();
        return this;
      }

      /**
       * <code>string oneof_string = 113;</code>
       * @return Whether the oneofString field is set.
       */
      @java.lang.Override
      public boolean hasOneofString() {
        return instance.hasOneofString();
      }
      /**
       * <code>string oneof_string = 113;</code>
       * @return The oneofString.
       */
      @java.lang.Override
      public java.lang.String getOneofString() {
        return instance.getOneofString();
      }
      /**
       * <code>string oneof_string = 113;</code>
       * @return The bytes for oneofString.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getOneofStringBytes() {
        return instance.getOneofStringBytes();
      }
      /**
       * <code>string oneof_string = 113;</code>
       * @param value The oneofString to set.
       * @return This builder for chaining.
       */
      public Builder setOneofString(
          java.lang.String value) {
        copyOnWrite();
        instance.setOneofString(value);
        return this;
      }
      /**
       * <code>string oneof_string = 113;</code>
       * @return This builder for chaining.
       */
      public Builder clearOneofString() {
        copyOnWrite();
        instance.clearOneofString();
        return this;
      }
      /**
       * <code>string oneof_string = 113;</code>
       * @param value The bytes for oneofString to set.
       * @return This builder for chaining.
       */
      public Builder setOneofStringBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setOneofStringBytes(value);
        return this;
      }

      /**
       * <code>bytes oneof_bytes = 114;</code>
       * @return Whether the oneofBytes field is set.
       */
      @java.lang.Override
      public boolean hasOneofBytes() {
        return instance.hasOneofBytes();
      }
      /**
       * <code>bytes oneof_bytes = 114;</code>
       * @return The oneofBytes.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getOneofBytes() {
        return instance.getOneofBytes();
      }
      /**
       * <code>bytes oneof_bytes = 114;</code>
       * @param value The oneofBytes to set.
       * @return This builder for chaining.
       */
      public Builder setOneofBytes(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setOneofBytes(value);
        return this;
      }
      /**
       * <code>bytes oneof_bytes = 114;</code>
       * @return This builder for chaining.
       */
      public Builder clearOneofBytes() {
        copyOnWrite();
        instance.clearOneofBytes();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto3_unittest.TestAllTypes)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new proto3_unittest.UnittestProto3.TestAllTypes();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "oneofField_",
              "oneofFieldCase_",
              "optionalInt32_",
              "optionalInt64_",
              "optionalUint32_",
              "optionalUint64_",
              "optionalSint32_",
              "optionalSint64_",
              "optionalFixed32_",
              "optionalFixed64_",
              "optionalSfixed32_",
              "optionalSfixed64_",
              "optionalFloat_",
              "optionalDouble_",
              "optionalBool_",
              "optionalString_",
              "optionalBytes_",
              "optionalNestedMessage_",
              "optionalForeignMessage_",
              "optionalImportMessage_",
              "optionalNestedEnum_",
              "optionalForeignEnum_",
              "optionalStringPiece_",
              "optionalCord_",
              "optionalPublicImportMessage_",
              "optionalLazyMessage_",
              "repeatedInt32_",
              "repeatedInt64_",
              "repeatedUint32_",
              "repeatedUint64_",
              "repeatedSint32_",
              "repeatedSint64_",
              "repeatedFixed32_",
              "repeatedFixed64_",
              "repeatedSfixed32_",
              "repeatedSfixed64_",
              "repeatedFloat_",
              "repeatedDouble_",
              "repeatedBool_",
              "repeatedString_",
              "repeatedBytes_",
              "repeatedNestedMessage_",
              proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.class,
              "repeatedForeignMessage_",
              proto3_unittest.UnittestProto3.ForeignMessage.class,
              "repeatedImportMessage_",
              com.google.protobuf.test.UnittestImport.ImportMessage.class,
              "repeatedNestedEnum_",
              "repeatedForeignEnum_",
              "repeatedStringPiece_",
              "repeatedCord_",
              "repeatedLazyMessage_",
              proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.class,
              proto3_unittest.UnittestProto3.TestAllTypes.NestedMessage.class,
              "optionalLazyImportMessage_",
            };
            java.lang.String info =
                "\u00004\u0001\u0000\u0001s4\u0000\u0017\u0000\u0001\u0004\u0002\u0002\u0003\u000b" +
                "\u0004\u0003\u0005\u000f\u0006\u0010\u0007\u0006\b\u0005\t\r\n\u000e\u000b\u0001" +
                "\f\u0000\r\u0007\u000e\u0208\u000f\n\u0012\t\u0013\t\u0014\t\u0015\f\u0016\f\u0018" +
                "\u0208\u0019\u0208\u001a\t\u001b\t\u001f\' %!+\"&#/$0%)&(\'-(.)$*#+*,\u021a-\u001c" +
                "0\u001b1\u001b2\u001b3,4,6\u021a7\u021a9\u001bo>\u0000p<\u0000q\u023b\u0000r=\u0000" +
                "s\t";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<proto3_unittest.UnittestProto3.TestAllTypes> parser = PARSER;
          if (parser == null) {
            synchronized (proto3_unittest.UnittestProto3.TestAllTypes.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<proto3_unittest.UnittestProto3.TestAllTypes>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:proto3_unittest.TestAllTypes)
    private static final proto3_unittest.UnittestProto3.TestAllTypes DEFAULT_INSTANCE;
    static {
      TestAllTypes defaultInstance = new TestAllTypes();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TestAllTypes.class, defaultInstance);
    }

    public static proto3_unittest.UnittestProto3.TestAllTypes getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TestAllTypes> PARSER;

    public static com.google.protobuf.Parser<TestAllTypes> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TestPackedTypesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto3_unittest.TestPackedTypes)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     * @return A list containing the packedInt32.
     */
    java.util.List<java.lang.Integer> getPackedInt32List();
    /**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     * @return The count of packedInt32.
     */
    int getPackedInt32Count();
    /**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedInt32 at the given index.
     */
    int getPackedInt32(int index);

    /**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     * @return A list containing the packedInt64.
     */
    java.util.List<java.lang.Long> getPackedInt64List();
    /**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     * @return The count of packedInt64.
     */
    int getPackedInt64Count();
    /**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedInt64 at the given index.
     */
    long getPackedInt64(int index);

    /**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     * @return A list containing the packedUint32.
     */
    java.util.List<java.lang.Integer> getPackedUint32List();
    /**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     * @return The count of packedUint32.
     */
    int getPackedUint32Count();
    /**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedUint32 at the given index.
     */
    int getPackedUint32(int index);

    /**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     * @return A list containing the packedUint64.
     */
    java.util.List<java.lang.Long> getPackedUint64List();
    /**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     * @return The count of packedUint64.
     */
    int getPackedUint64Count();
    /**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedUint64 at the given index.
     */
    long getPackedUint64(int index);

    /**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     * @return A list containing the packedSint32.
     */
    java.util.List<java.lang.Integer> getPackedSint32List();
    /**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     * @return The count of packedSint32.
     */
    int getPackedSint32Count();
    /**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedSint32 at the given index.
     */
    int getPackedSint32(int index);

    /**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     * @return A list containing the packedSint64.
     */
    java.util.List<java.lang.Long> getPackedSint64List();
    /**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     * @return The count of packedSint64.
     */
    int getPackedSint64Count();
    /**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedSint64 at the given index.
     */
    long getPackedSint64(int index);

    /**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     * @return A list containing the packedFixed32.
     */
    java.util.List<java.lang.Integer> getPackedFixed32List();
    /**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     * @return The count of packedFixed32.
     */
    int getPackedFixed32Count();
    /**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedFixed32 at the given index.
     */
    int getPackedFixed32(int index);

    /**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     * @return A list containing the packedFixed64.
     */
    java.util.List<java.lang.Long> getPackedFixed64List();
    /**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     * @return The count of packedFixed64.
     */
    int getPackedFixed64Count();
    /**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedFixed64 at the given index.
     */
    long getPackedFixed64(int index);

    /**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     * @return A list containing the packedSfixed32.
     */
    java.util.List<java.lang.Integer> getPackedSfixed32List();
    /**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     * @return The count of packedSfixed32.
     */
    int getPackedSfixed32Count();
    /**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedSfixed32 at the given index.
     */
    int getPackedSfixed32(int index);

    /**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     * @return A list containing the packedSfixed64.
     */
    java.util.List<java.lang.Long> getPackedSfixed64List();
    /**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     * @return The count of packedSfixed64.
     */
    int getPackedSfixed64Count();
    /**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedSfixed64 at the given index.
     */
    long getPackedSfixed64(int index);

    /**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     * @return A list containing the packedFloat.
     */
    java.util.List<java.lang.Float> getPackedFloatList();
    /**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     * @return The count of packedFloat.
     */
    int getPackedFloatCount();
    /**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedFloat at the given index.
     */
    float getPackedFloat(int index);

    /**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     * @return A list containing the packedDouble.
     */
    java.util.List<java.lang.Double> getPackedDoubleList();
    /**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     * @return The count of packedDouble.
     */
    int getPackedDoubleCount();
    /**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedDouble at the given index.
     */
    double getPackedDouble(int index);

    /**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     * @return A list containing the packedBool.
     */
    java.util.List<java.lang.Boolean> getPackedBoolList();
    /**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     * @return The count of packedBool.
     */
    int getPackedBoolCount();
    /**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedBool at the given index.
     */
    boolean getPackedBool(int index);

    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     * @return A list containing the packedEnum.
     */
    java.util.List<proto3_unittest.UnittestProto3.ForeignEnum> getPackedEnumList();
    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     * @return The count of packedEnum.
     */
    int getPackedEnumCount();
    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedEnum at the given index.
     */
    proto3_unittest.UnittestProto3.ForeignEnum getPackedEnum(int index);
    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     * @return A list containing the enum numeric values on the wire for packedEnum.
     */
    java.util.List<java.lang.Integer>
    getPackedEnumValueList();
    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of packedEnum at the given index.
     */
    int getPackedEnumValue(int index);
  }
  /**
   * Protobuf type {@code proto3_unittest.TestPackedTypes}
   */
  public  static final class TestPackedTypes extends
      com.google.protobuf.GeneratedMessageLite<
          TestPackedTypes, TestPackedTypes.Builder> implements
      // @@protoc_insertion_point(message_implements:proto3_unittest.TestPackedTypes)
      TestPackedTypesOrBuilder {
    private TestPackedTypes() {
      packedInt32_ = emptyIntList();
      packedInt64_ = emptyLongList();
      packedUint32_ = emptyIntList();
      packedUint64_ = emptyLongList();
      packedSint32_ = emptyIntList();
      packedSint64_ = emptyLongList();
      packedFixed32_ = emptyIntList();
      packedFixed64_ = emptyLongList();
      packedSfixed32_ = emptyIntList();
      packedSfixed64_ = emptyLongList();
      packedFloat_ = emptyFloatList();
      packedDouble_ = emptyDoubleList();
      packedBool_ = emptyBooleanList();
      packedEnum_ = emptyIntList();
    }
    public static final int PACKED_INT32_FIELD_NUMBER = 90;
    private com.google.protobuf.Internal.IntList packedInt32_;
    /**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     * @return A list containing the packedInt32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getPackedInt32List() {
      return packedInt32_;
    }
    /**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     * @return The count of packedInt32.
     */
    @java.lang.Override
    public int getPackedInt32Count() {
      return packedInt32_.size();
    }
    /**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedInt32 at the given index.
     */
    @java.lang.Override
    public int getPackedInt32(int index) {
      return packedInt32_.getInt(index);
    }
    private int packedInt32MemoizedSerializedSize = -1;
    private void ensurePackedInt32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = packedInt32_;
      if (!tmp.isModifiable()) {
        packedInt32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedInt32 to set.
     */
    private void setPackedInt32(
        int index, int value) {
      ensurePackedInt32IsMutable();
      packedInt32_.setInt(index, value);
    }
    /**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     * @param value The packedInt32 to add.
     */
    private void addPackedInt32(int value) {
      ensurePackedInt32IsMutable();
      packedInt32_.addInt(value);
    }
    /**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     * @param values The packedInt32 to add.
     */
    private void addAllPackedInt32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensurePackedInt32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, packedInt32_);
    }
    /**
     * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
     */
    private void clearPackedInt32() {
      packedInt32_ = emptyIntList();
    }

    public static final int PACKED_INT64_FIELD_NUMBER = 91;
    private com.google.protobuf.Internal.LongList packedInt64_;
    /**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     * @return A list containing the packedInt64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getPackedInt64List() {
      return packedInt64_;
    }
    /**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     * @return The count of packedInt64.
     */
    @java.lang.Override
    public int getPackedInt64Count() {
      return packedInt64_.size();
    }
    /**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedInt64 at the given index.
     */
    @java.lang.Override
    public long getPackedInt64(int index) {
      return packedInt64_.getLong(index);
    }
    private int packedInt64MemoizedSerializedSize = -1;
    private void ensurePackedInt64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = packedInt64_;
      if (!tmp.isModifiable()) {
        packedInt64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedInt64 to set.
     */
    private void setPackedInt64(
        int index, long value) {
      ensurePackedInt64IsMutable();
      packedInt64_.setLong(index, value);
    }
    /**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     * @param value The packedInt64 to add.
     */
    private void addPackedInt64(long value) {
      ensurePackedInt64IsMutable();
      packedInt64_.addLong(value);
    }
    /**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     * @param values The packedInt64 to add.
     */
    private void addAllPackedInt64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensurePackedInt64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, packedInt64_);
    }
    /**
     * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
     */
    private void clearPackedInt64() {
      packedInt64_ = emptyLongList();
    }

    public static final int PACKED_UINT32_FIELD_NUMBER = 92;
    private com.google.protobuf.Internal.IntList packedUint32_;
    /**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     * @return A list containing the packedUint32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getPackedUint32List() {
      return packedUint32_;
    }
    /**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     * @return The count of packedUint32.
     */
    @java.lang.Override
    public int getPackedUint32Count() {
      return packedUint32_.size();
    }
    /**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedUint32 at the given index.
     */
    @java.lang.Override
    public int getPackedUint32(int index) {
      return packedUint32_.getInt(index);
    }
    private int packedUint32MemoizedSerializedSize = -1;
    private void ensurePackedUint32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = packedUint32_;
      if (!tmp.isModifiable()) {
        packedUint32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedUint32 to set.
     */
    private void setPackedUint32(
        int index, int value) {
      ensurePackedUint32IsMutable();
      packedUint32_.setInt(index, value);
    }
    /**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     * @param value The packedUint32 to add.
     */
    private void addPackedUint32(int value) {
      ensurePackedUint32IsMutable();
      packedUint32_.addInt(value);
    }
    /**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     * @param values The packedUint32 to add.
     */
    private void addAllPackedUint32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensurePackedUint32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, packedUint32_);
    }
    /**
     * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
     */
    private void clearPackedUint32() {
      packedUint32_ = emptyIntList();
    }

    public static final int PACKED_UINT64_FIELD_NUMBER = 93;
    private com.google.protobuf.Internal.LongList packedUint64_;
    /**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     * @return A list containing the packedUint64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getPackedUint64List() {
      return packedUint64_;
    }
    /**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     * @return The count of packedUint64.
     */
    @java.lang.Override
    public int getPackedUint64Count() {
      return packedUint64_.size();
    }
    /**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedUint64 at the given index.
     */
    @java.lang.Override
    public long getPackedUint64(int index) {
      return packedUint64_.getLong(index);
    }
    private int packedUint64MemoizedSerializedSize = -1;
    private void ensurePackedUint64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = packedUint64_;
      if (!tmp.isModifiable()) {
        packedUint64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedUint64 to set.
     */
    private void setPackedUint64(
        int index, long value) {
      ensurePackedUint64IsMutable();
      packedUint64_.setLong(index, value);
    }
    /**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     * @param value The packedUint64 to add.
     */
    private void addPackedUint64(long value) {
      ensurePackedUint64IsMutable();
      packedUint64_.addLong(value);
    }
    /**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     * @param values The packedUint64 to add.
     */
    private void addAllPackedUint64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensurePackedUint64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, packedUint64_);
    }
    /**
     * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
     */
    private void clearPackedUint64() {
      packedUint64_ = emptyLongList();
    }

    public static final int PACKED_SINT32_FIELD_NUMBER = 94;
    private com.google.protobuf.Internal.IntList packedSint32_;
    /**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     * @return A list containing the packedSint32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getPackedSint32List() {
      return packedSint32_;
    }
    /**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     * @return The count of packedSint32.
     */
    @java.lang.Override
    public int getPackedSint32Count() {
      return packedSint32_.size();
    }
    /**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedSint32 at the given index.
     */
    @java.lang.Override
    public int getPackedSint32(int index) {
      return packedSint32_.getInt(index);
    }
    private int packedSint32MemoizedSerializedSize = -1;
    private void ensurePackedSint32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = packedSint32_;
      if (!tmp.isModifiable()) {
        packedSint32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedSint32 to set.
     */
    private void setPackedSint32(
        int index, int value) {
      ensurePackedSint32IsMutable();
      packedSint32_.setInt(index, value);
    }
    /**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     * @param value The packedSint32 to add.
     */
    private void addPackedSint32(int value) {
      ensurePackedSint32IsMutable();
      packedSint32_.addInt(value);
    }
    /**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     * @param values The packedSint32 to add.
     */
    private void addAllPackedSint32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensurePackedSint32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, packedSint32_);
    }
    /**
     * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
     */
    private void clearPackedSint32() {
      packedSint32_ = emptyIntList();
    }

    public static final int PACKED_SINT64_FIELD_NUMBER = 95;
    private com.google.protobuf.Internal.LongList packedSint64_;
    /**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     * @return A list containing the packedSint64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getPackedSint64List() {
      return packedSint64_;
    }
    /**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     * @return The count of packedSint64.
     */
    @java.lang.Override
    public int getPackedSint64Count() {
      return packedSint64_.size();
    }
    /**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedSint64 at the given index.
     */
    @java.lang.Override
    public long getPackedSint64(int index) {
      return packedSint64_.getLong(index);
    }
    private int packedSint64MemoizedSerializedSize = -1;
    private void ensurePackedSint64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = packedSint64_;
      if (!tmp.isModifiable()) {
        packedSint64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedSint64 to set.
     */
    private void setPackedSint64(
        int index, long value) {
      ensurePackedSint64IsMutable();
      packedSint64_.setLong(index, value);
    }
    /**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     * @param value The packedSint64 to add.
     */
    private void addPackedSint64(long value) {
      ensurePackedSint64IsMutable();
      packedSint64_.addLong(value);
    }
    /**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     * @param values The packedSint64 to add.
     */
    private void addAllPackedSint64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensurePackedSint64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, packedSint64_);
    }
    /**
     * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
     */
    private void clearPackedSint64() {
      packedSint64_ = emptyLongList();
    }

    public static final int PACKED_FIXED32_FIELD_NUMBER = 96;
    private com.google.protobuf.Internal.IntList packedFixed32_;
    /**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     * @return A list containing the packedFixed32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getPackedFixed32List() {
      return packedFixed32_;
    }
    /**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     * @return The count of packedFixed32.
     */
    @java.lang.Override
    public int getPackedFixed32Count() {
      return packedFixed32_.size();
    }
    /**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedFixed32 at the given index.
     */
    @java.lang.Override
    public int getPackedFixed32(int index) {
      return packedFixed32_.getInt(index);
    }
    private int packedFixed32MemoizedSerializedSize = -1;
    private void ensurePackedFixed32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = packedFixed32_;
      if (!tmp.isModifiable()) {
        packedFixed32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedFixed32 to set.
     */
    private void setPackedFixed32(
        int index, int value) {
      ensurePackedFixed32IsMutable();
      packedFixed32_.setInt(index, value);
    }
    /**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     * @param value The packedFixed32 to add.
     */
    private void addPackedFixed32(int value) {
      ensurePackedFixed32IsMutable();
      packedFixed32_.addInt(value);
    }
    /**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     * @param values The packedFixed32 to add.
     */
    private void addAllPackedFixed32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensurePackedFixed32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, packedFixed32_);
    }
    /**
     * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
     */
    private void clearPackedFixed32() {
      packedFixed32_ = emptyIntList();
    }

    public static final int PACKED_FIXED64_FIELD_NUMBER = 97;
    private com.google.protobuf.Internal.LongList packedFixed64_;
    /**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     * @return A list containing the packedFixed64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getPackedFixed64List() {
      return packedFixed64_;
    }
    /**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     * @return The count of packedFixed64.
     */
    @java.lang.Override
    public int getPackedFixed64Count() {
      return packedFixed64_.size();
    }
    /**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedFixed64 at the given index.
     */
    @java.lang.Override
    public long getPackedFixed64(int index) {
      return packedFixed64_.getLong(index);
    }
    private int packedFixed64MemoizedSerializedSize = -1;
    private void ensurePackedFixed64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = packedFixed64_;
      if (!tmp.isModifiable()) {
        packedFixed64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedFixed64 to set.
     */
    private void setPackedFixed64(
        int index, long value) {
      ensurePackedFixed64IsMutable();
      packedFixed64_.setLong(index, value);
    }
    /**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     * @param value The packedFixed64 to add.
     */
    private void addPackedFixed64(long value) {
      ensurePackedFixed64IsMutable();
      packedFixed64_.addLong(value);
    }
    /**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     * @param values The packedFixed64 to add.
     */
    private void addAllPackedFixed64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensurePackedFixed64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, packedFixed64_);
    }
    /**
     * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
     */
    private void clearPackedFixed64() {
      packedFixed64_ = emptyLongList();
    }

    public static final int PACKED_SFIXED32_FIELD_NUMBER = 98;
    private com.google.protobuf.Internal.IntList packedSfixed32_;
    /**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     * @return A list containing the packedSfixed32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getPackedSfixed32List() {
      return packedSfixed32_;
    }
    /**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     * @return The count of packedSfixed32.
     */
    @java.lang.Override
    public int getPackedSfixed32Count() {
      return packedSfixed32_.size();
    }
    /**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedSfixed32 at the given index.
     */
    @java.lang.Override
    public int getPackedSfixed32(int index) {
      return packedSfixed32_.getInt(index);
    }
    private int packedSfixed32MemoizedSerializedSize = -1;
    private void ensurePackedSfixed32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = packedSfixed32_;
      if (!tmp.isModifiable()) {
        packedSfixed32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedSfixed32 to set.
     */
    private void setPackedSfixed32(
        int index, int value) {
      ensurePackedSfixed32IsMutable();
      packedSfixed32_.setInt(index, value);
    }
    /**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     * @param value The packedSfixed32 to add.
     */
    private void addPackedSfixed32(int value) {
      ensurePackedSfixed32IsMutable();
      packedSfixed32_.addInt(value);
    }
    /**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     * @param values The packedSfixed32 to add.
     */
    private void addAllPackedSfixed32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensurePackedSfixed32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, packedSfixed32_);
    }
    /**
     * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
     */
    private void clearPackedSfixed32() {
      packedSfixed32_ = emptyIntList();
    }

    public static final int PACKED_SFIXED64_FIELD_NUMBER = 99;
    private com.google.protobuf.Internal.LongList packedSfixed64_;
    /**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     * @return A list containing the packedSfixed64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getPackedSfixed64List() {
      return packedSfixed64_;
    }
    /**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     * @return The count of packedSfixed64.
     */
    @java.lang.Override
    public int getPackedSfixed64Count() {
      return packedSfixed64_.size();
    }
    /**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedSfixed64 at the given index.
     */
    @java.lang.Override
    public long getPackedSfixed64(int index) {
      return packedSfixed64_.getLong(index);
    }
    private int packedSfixed64MemoizedSerializedSize = -1;
    private void ensurePackedSfixed64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = packedSfixed64_;
      if (!tmp.isModifiable()) {
        packedSfixed64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedSfixed64 to set.
     */
    private void setPackedSfixed64(
        int index, long value) {
      ensurePackedSfixed64IsMutable();
      packedSfixed64_.setLong(index, value);
    }
    /**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     * @param value The packedSfixed64 to add.
     */
    private void addPackedSfixed64(long value) {
      ensurePackedSfixed64IsMutable();
      packedSfixed64_.addLong(value);
    }
    /**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     * @param values The packedSfixed64 to add.
     */
    private void addAllPackedSfixed64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensurePackedSfixed64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, packedSfixed64_);
    }
    /**
     * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
     */
    private void clearPackedSfixed64() {
      packedSfixed64_ = emptyLongList();
    }

    public static final int PACKED_FLOAT_FIELD_NUMBER = 100;
    private com.google.protobuf.Internal.FloatList packedFloat_;
    /**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     * @return A list containing the packedFloat.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getPackedFloatList() {
      return packedFloat_;
    }
    /**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     * @return The count of packedFloat.
     */
    @java.lang.Override
    public int getPackedFloatCount() {
      return packedFloat_.size();
    }
    /**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedFloat at the given index.
     */
    @java.lang.Override
    public float getPackedFloat(int index) {
      return packedFloat_.getFloat(index);
    }
    private int packedFloatMemoizedSerializedSize = -1;
    private void ensurePackedFloatIsMutable() {
      com.google.protobuf.Internal.FloatList tmp = packedFloat_;
      if (!tmp.isModifiable()) {
        packedFloat_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedFloat to set.
     */
    private void setPackedFloat(
        int index, float value) {
      ensurePackedFloatIsMutable();
      packedFloat_.setFloat(index, value);
    }
    /**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     * @param value The packedFloat to add.
     */
    private void addPackedFloat(float value) {
      ensurePackedFloatIsMutable();
      packedFloat_.addFloat(value);
    }
    /**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     * @param values The packedFloat to add.
     */
    private void addAllPackedFloat(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensurePackedFloatIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, packedFloat_);
    }
    /**
     * <code>repeated float packed_float = 100 [packed = true];</code>
     */
    private void clearPackedFloat() {
      packedFloat_ = emptyFloatList();
    }

    public static final int PACKED_DOUBLE_FIELD_NUMBER = 101;
    private com.google.protobuf.Internal.DoubleList packedDouble_;
    /**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     * @return A list containing the packedDouble.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getPackedDoubleList() {
      return packedDouble_;
    }
    /**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     * @return The count of packedDouble.
     */
    @java.lang.Override
    public int getPackedDoubleCount() {
      return packedDouble_.size();
    }
    /**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedDouble at the given index.
     */
    @java.lang.Override
    public double getPackedDouble(int index) {
      return packedDouble_.getDouble(index);
    }
    private int packedDoubleMemoizedSerializedSize = -1;
    private void ensurePackedDoubleIsMutable() {
      com.google.protobuf.Internal.DoubleList tmp = packedDouble_;
      if (!tmp.isModifiable()) {
        packedDouble_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedDouble to set.
     */
    private void setPackedDouble(
        int index, double value) {
      ensurePackedDoubleIsMutable();
      packedDouble_.setDouble(index, value);
    }
    /**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     * @param value The packedDouble to add.
     */
    private void addPackedDouble(double value) {
      ensurePackedDoubleIsMutable();
      packedDouble_.addDouble(value);
    }
    /**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     * @param values The packedDouble to add.
     */
    private void addAllPackedDouble(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensurePackedDoubleIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, packedDouble_);
    }
    /**
     * <code>repeated double packed_double = 101 [packed = true];</code>
     */
    private void clearPackedDouble() {
      packedDouble_ = emptyDoubleList();
    }

    public static final int PACKED_BOOL_FIELD_NUMBER = 102;
    private com.google.protobuf.Internal.BooleanList packedBool_;
    /**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     * @return A list containing the packedBool.
     */
    @java.lang.Override
    public java.util.List<java.lang.Boolean>
        getPackedBoolList() {
      return packedBool_;
    }
    /**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     * @return The count of packedBool.
     */
    @java.lang.Override
    public int getPackedBoolCount() {
      return packedBool_.size();
    }
    /**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedBool at the given index.
     */
    @java.lang.Override
    public boolean getPackedBool(int index) {
      return packedBool_.getBoolean(index);
    }
    private int packedBoolMemoizedSerializedSize = -1;
    private void ensurePackedBoolIsMutable() {
      com.google.protobuf.Internal.BooleanList tmp = packedBool_;
      if (!tmp.isModifiable()) {
        packedBool_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedBool to set.
     */
    private void setPackedBool(
        int index, boolean value) {
      ensurePackedBoolIsMutable();
      packedBool_.setBoolean(index, value);
    }
    /**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     * @param value The packedBool to add.
     */
    private void addPackedBool(boolean value) {
      ensurePackedBoolIsMutable();
      packedBool_.addBoolean(value);
    }
    /**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     * @param values The packedBool to add.
     */
    private void addAllPackedBool(
        java.lang.Iterable<? extends java.lang.Boolean> values) {
      ensurePackedBoolIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, packedBool_);
    }
    /**
     * <code>repeated bool packed_bool = 102 [packed = true];</code>
     */
    private void clearPackedBool() {
      packedBool_ = emptyBooleanList();
    }

    public static final int PACKED_ENUM_FIELD_NUMBER = 103;
    private com.google.protobuf.Internal.IntList packedEnum_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, proto3_unittest.UnittestProto3.ForeignEnum> packedEnum_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, proto3_unittest.UnittestProto3.ForeignEnum>() {
              @java.lang.Override
              public proto3_unittest.UnittestProto3.ForeignEnum convert(java.lang.Integer from) {
                proto3_unittest.UnittestProto3.ForeignEnum result = proto3_unittest.UnittestProto3.ForeignEnum.forNumber(from);
                return result == null ? proto3_unittest.UnittestProto3.ForeignEnum.UNRECOGNIZED : result;
              }
            };
    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     * @return A list containing the packedEnum.
     */
    @java.lang.Override
    public java.util.List<proto3_unittest.UnittestProto3.ForeignEnum> getPackedEnumList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, proto3_unittest.UnittestProto3.ForeignEnum>(packedEnum_, packedEnum_converter_);
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     * @return The count of packedEnum.
     */
    @java.lang.Override
    public int getPackedEnumCount() {
      return packedEnum_.size();
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The packedEnum at the given index.
     */
    @java.lang.Override
    public proto3_unittest.UnittestProto3.ForeignEnum getPackedEnum(int index) {
      return packedEnum_converter_.convert(packedEnum_.getInt(index));
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     * @return A list containing the enum numeric values on the wire for packedEnum.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
    getPackedEnumValueList() {
      return packedEnum_;
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of packedEnum at the given index.
     */
    @java.lang.Override
    public int getPackedEnumValue(int index) {
      return packedEnum_.getInt(index);
    }
    private int packedEnumMemoizedSerializedSize;
    private void ensurePackedEnumIsMutable() {
      com.google.protobuf.Internal.IntList tmp = packedEnum_;
      if (!tmp.isModifiable()) {
        packedEnum_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
      }
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The packedEnum to set.
     */
    private void setPackedEnum(
        int index, proto3_unittest.UnittestProto3.ForeignEnum value) {
      value.getClass();
  ensurePackedEnumIsMutable();
      packedEnum_.setInt(index, value.getNumber());
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     * @param value The packedEnum to add.
     */
    private void addPackedEnum(proto3_unittest.UnittestProto3.ForeignEnum value) {
      value.getClass();
  ensurePackedEnumIsMutable();
      packedEnum_.addInt(value.getNumber());
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     * @param values The packedEnum to add.
     */
    private void addAllPackedEnum(
        java.lang.Iterable<? extends proto3_unittest.UnittestProto3.ForeignEnum> values) {
      ensurePackedEnumIsMutable();
      for (proto3_unittest.UnittestProto3.ForeignEnum value : values) {
        packedEnum_.addInt(value.getNumber());
      }
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     */
    private void clearPackedEnum() {
      packedEnum_ = emptyIntList();
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     * @param value The enum numeric value on the wire for packedEnum to set.
     */
    private void setPackedEnumValue(
        int index, int value) {
      ensurePackedEnumIsMutable();
      packedEnum_.setInt(index, value);
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     * @param value The enum numeric value on the wire for packedEnum to add.
     */
    private void addPackedEnumValue(int value) {
      ensurePackedEnumIsMutable();
      packedEnum_.addInt(value);
    }
    /**
     * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
     * @param values The enum numeric values on the wire for packedEnum to add.
     */
    private void addAllPackedEnumValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensurePackedEnumIsMutable();
      for (int value : values) {
        packedEnum_.addInt(value);
      }
    }

    public static proto3_unittest.UnittestProto3.TestPackedTypes parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestPackedTypes parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestPackedTypes parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestPackedTypes parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestPackedTypes parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestPackedTypes parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestPackedTypes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestPackedTypes parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestPackedTypes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestPackedTypes parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestPackedTypes parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestPackedTypes parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(proto3_unittest.UnittestProto3.TestPackedTypes prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code proto3_unittest.TestPackedTypes}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          proto3_unittest.UnittestProto3.TestPackedTypes, Builder> implements
        // @@protoc_insertion_point(builder_implements:proto3_unittest.TestPackedTypes)
        proto3_unittest.UnittestProto3.TestPackedTypesOrBuilder {
      // Construct using proto3_unittest.UnittestProto3.TestPackedTypes.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
       * @return A list containing the packedInt32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getPackedInt32List() {
        return java.util.Collections.unmodifiableList(
            instance.getPackedInt32List());
      }
      /**
       * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
       * @return The count of packedInt32.
       */
      @java.lang.Override
      public int getPackedInt32Count() {
        return instance.getPackedInt32Count();
      }
      /**
       * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The packedInt32 at the given index.
       */
      @java.lang.Override
      public int getPackedInt32(int index) {
        return instance.getPackedInt32(index);
      }
      /**
       * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
       * @param value The packedInt32 to set.
       * @return This builder for chaining.
       */
      public Builder setPackedInt32(
          int index, int value) {
        copyOnWrite();
        instance.setPackedInt32(index, value);
        return this;
      }
      /**
       * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
       * @param value The packedInt32 to add.
       * @return This builder for chaining.
       */
      public Builder addPackedInt32(int value) {
        copyOnWrite();
        instance.addPackedInt32(value);
        return this;
      }
      /**
       * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
       * @param values The packedInt32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllPackedInt32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllPackedInt32(values);
        return this;
      }
      /**
       * <code>repeated int32 packed_int32 = 90 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearPackedInt32() {
        copyOnWrite();
        instance.clearPackedInt32();
        return this;
      }

      /**
       * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
       * @return A list containing the packedInt64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getPackedInt64List() {
        return java.util.Collections.unmodifiableList(
            instance.getPackedInt64List());
      }
      /**
       * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
       * @return The count of packedInt64.
       */
      @java.lang.Override
      public int getPackedInt64Count() {
        return instance.getPackedInt64Count();
      }
      /**
       * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The packedInt64 at the given index.
       */
      @java.lang.Override
      public long getPackedInt64(int index) {
        return instance.getPackedInt64(index);
      }
      /**
       * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
       * @param value The packedInt64 to set.
       * @return This builder for chaining.
       */
      public Builder setPackedInt64(
          int index, long value) {
        copyOnWrite();
        instance.setPackedInt64(index, value);
        return this;
      }
      /**
       * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
       * @param value The packedInt64 to add.
       * @return This builder for chaining.
       */
      public Builder addPackedInt64(long value) {
        copyOnWrite();
        instance.addPackedInt64(value);
        return this;
      }
      /**
       * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
       * @param values The packedInt64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllPackedInt64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllPackedInt64(values);
        return this;
      }
      /**
       * <code>repeated int64 packed_int64 = 91 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearPackedInt64() {
        copyOnWrite();
        instance.clearPackedInt64();
        return this;
      }

      /**
       * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
       * @return A list containing the packedUint32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getPackedUint32List() {
        return java.util.Collections.unmodifiableList(
            instance.getPackedUint32List());
      }
      /**
       * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
       * @return The count of packedUint32.
       */
      @java.lang.Override
      public int getPackedUint32Count() {
        return instance.getPackedUint32Count();
      }
      /**
       * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The packedUint32 at the given index.
       */
      @java.lang.Override
      public int getPackedUint32(int index) {
        return instance.getPackedUint32(index);
      }
      /**
       * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
       * @param value The packedUint32 to set.
       * @return This builder for chaining.
       */
      public Builder setPackedUint32(
          int index, int value) {
        copyOnWrite();
        instance.setPackedUint32(index, value);
        return this;
      }
      /**
       * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
       * @param value The packedUint32 to add.
       * @return This builder for chaining.
       */
      public Builder addPackedUint32(int value) {
        copyOnWrite();
        instance.addPackedUint32(value);
        return this;
      }
      /**
       * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
       * @param values The packedUint32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllPackedUint32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllPackedUint32(values);
        return this;
      }
      /**
       * <code>repeated uint32 packed_uint32 = 92 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearPackedUint32() {
        copyOnWrite();
        instance.clearPackedUint32();
        return this;
      }

      /**
       * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
       * @return A list containing the packedUint64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getPackedUint64List() {
        return java.util.Collections.unmodifiableList(
            instance.getPackedUint64List());
      }
      /**
       * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
       * @return The count of packedUint64.
       */
      @java.lang.Override
      public int getPackedUint64Count() {
        return instance.getPackedUint64Count();
      }
      /**
       * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The packedUint64 at the given index.
       */
      @java.lang.Override
      public long getPackedUint64(int index) {
        return instance.getPackedUint64(index);
      }
      /**
       * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
       * @param value The packedUint64 to set.
       * @return This builder for chaining.
       */
      public Builder setPackedUint64(
          int index, long value) {
        copyOnWrite();
        instance.setPackedUint64(index, value);
        return this;
      }
      /**
       * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
       * @param value The packedUint64 to add.
       * @return This builder for chaining.
       */
      public Builder addPackedUint64(long value) {
        copyOnWrite();
        instance.addPackedUint64(value);
        return this;
      }
      /**
       * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
       * @param values The packedUint64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllPackedUint64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllPackedUint64(values);
        return this;
      }
      /**
       * <code>repeated uint64 packed_uint64 = 93 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearPackedUint64() {
        copyOnWrite();
        instance.clearPackedUint64();
        return this;
      }

      /**
       * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
       * @return A list containing the packedSint32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getPackedSint32List() {
        return java.util.Collections.unmodifiableList(
            instance.getPackedSint32List());
      }
      /**
       * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
       * @return The count of packedSint32.
       */
      @java.lang.Override
      public int getPackedSint32Count() {
        return instance.getPackedSint32Count();
      }
      /**
       * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The packedSint32 at the given index.
       */
      @java.lang.Override
      public int getPackedSint32(int index) {
        return instance.getPackedSint32(index);
      }
      /**
       * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
       * @param value The packedSint32 to set.
       * @return This builder for chaining.
       */
      public Builder setPackedSint32(
          int index, int value) {
        copyOnWrite();
        instance.setPackedSint32(index, value);
        return this;
      }
      /**
       * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
       * @param value The packedSint32 to add.
       * @return This builder for chaining.
       */
      public Builder addPackedSint32(int value) {
        copyOnWrite();
        instance.addPackedSint32(value);
        return this;
      }
      /**
       * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
       * @param values The packedSint32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllPackedSint32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllPackedSint32(values);
        return this;
      }
      /**
       * <code>repeated sint32 packed_sint32 = 94 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearPackedSint32() {
        copyOnWrite();
        instance.clearPackedSint32();
        return this;
      }

      /**
       * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
       * @return A list containing the packedSint64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getPackedSint64List() {
        return java.util.Collections.unmodifiableList(
            instance.getPackedSint64List());
      }
      /**
       * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
       * @return The count of packedSint64.
       */
      @java.lang.Override
      public int getPackedSint64Count() {
        return instance.getPackedSint64Count();
      }
      /**
       * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The packedSint64 at the given index.
       */
      @java.lang.Override
      public long getPackedSint64(int index) {
        return instance.getPackedSint64(index);
      }
      /**
       * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
       * @param value The packedSint64 to set.
       * @return This builder for chaining.
       */
      public Builder setPackedSint64(
          int index, long value) {
        copyOnWrite();
        instance.setPackedSint64(index, value);
        return this;
      }
      /**
       * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
       * @param value The packedSint64 to add.
       * @return This builder for chaining.
       */
      public Builder addPackedSint64(long value) {
        copyOnWrite();
        instance.addPackedSint64(value);
        return this;
      }
      /**
       * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
       * @param values The packedSint64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllPackedSint64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllPackedSint64(values);
        return this;
      }
      /**
       * <code>repeated sint64 packed_sint64 = 95 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearPackedSint64() {
        copyOnWrite();
        instance.clearPackedSint64();
        return this;
      }

      /**
       * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
       * @return A list containing the packedFixed32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getPackedFixed32List() {
        return java.util.Collections.unmodifiableList(
            instance.getPackedFixed32List());
      }
      /**
       * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
       * @return The count of packedFixed32.
       */
      @java.lang.Override
      public int getPackedFixed32Count() {
        return instance.getPackedFixed32Count();
      }
      /**
       * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The packedFixed32 at the given index.
       */
      @java.lang.Override
      public int getPackedFixed32(int index) {
        return instance.getPackedFixed32(index);
      }
      /**
       * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
       * @param value The packedFixed32 to set.
       * @return This builder for chaining.
       */
      public Builder setPackedFixed32(
          int index, int value) {
        copyOnWrite();
        instance.setPackedFixed32(index, value);
        return this;
      }
      /**
       * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
       * @param value The packedFixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addPackedFixed32(int value) {
        copyOnWrite();
        instance.addPackedFixed32(value);
        return this;
      }
      /**
       * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
       * @param values The packedFixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllPackedFixed32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllPackedFixed32(values);
        return this;
      }
      /**
       * <code>repeated fixed32 packed_fixed32 = 96 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearPackedFixed32() {
        copyOnWrite();
        instance.clearPackedFixed32();
        return this;
      }

      /**
       * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
       * @return A list containing the packedFixed64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getPackedFixed64List() {
        return java.util.Collections.unmodifiableList(
            instance.getPackedFixed64List());
      }
      /**
       * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
       * @return The count of packedFixed64.
       */
      @java.lang.Override
      public int getPackedFixed64Count() {
        return instance.getPackedFixed64Count();
      }
      /**
       * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The packedFixed64 at the given index.
       */
      @java.lang.Override
      public long getPackedFixed64(int index) {
        return instance.getPackedFixed64(index);
      }
      /**
       * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
       * @param value The packedFixed64 to set.
       * @return This builder for chaining.
       */
      public Builder setPackedFixed64(
          int index, long value) {
        copyOnWrite();
        instance.setPackedFixed64(index, value);
        return this;
      }
      /**
       * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
       * @param value The packedFixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addPackedFixed64(long value) {
        copyOnWrite();
        instance.addPackedFixed64(value);
        return this;
      }
      /**
       * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
       * @param values The packedFixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllPackedFixed64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllPackedFixed64(values);
        return this;
      }
      /**
       * <code>repeated fixed64 packed_fixed64 = 97 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearPackedFixed64() {
        copyOnWrite();
        instance.clearPackedFixed64();
        return this;
      }

      /**
       * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
       * @return A list containing the packedSfixed32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getPackedSfixed32List() {
        return java.util.Collections.unmodifiableList(
            instance.getPackedSfixed32List());
      }
      /**
       * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
       * @return The count of packedSfixed32.
       */
      @java.lang.Override
      public int getPackedSfixed32Count() {
        return instance.getPackedSfixed32Count();
      }
      /**
       * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The packedSfixed32 at the given index.
       */
      @java.lang.Override
      public int getPackedSfixed32(int index) {
        return instance.getPackedSfixed32(index);
      }
      /**
       * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
       * @param value The packedSfixed32 to set.
       * @return This builder for chaining.
       */
      public Builder setPackedSfixed32(
          int index, int value) {
        copyOnWrite();
        instance.setPackedSfixed32(index, value);
        return this;
      }
      /**
       * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
       * @param value The packedSfixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addPackedSfixed32(int value) {
        copyOnWrite();
        instance.addPackedSfixed32(value);
        return this;
      }
      /**
       * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
       * @param values The packedSfixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllPackedSfixed32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllPackedSfixed32(values);
        return this;
      }
      /**
       * <code>repeated sfixed32 packed_sfixed32 = 98 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearPackedSfixed32() {
        copyOnWrite();
        instance.clearPackedSfixed32();
        return this;
      }

      /**
       * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
       * @return A list containing the packedSfixed64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getPackedSfixed64List() {
        return java.util.Collections.unmodifiableList(
            instance.getPackedSfixed64List());
      }
      /**
       * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
       * @return The count of packedSfixed64.
       */
      @java.lang.Override
      public int getPackedSfixed64Count() {
        return instance.getPackedSfixed64Count();
      }
      /**
       * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The packedSfixed64 at the given index.
       */
      @java.lang.Override
      public long getPackedSfixed64(int index) {
        return instance.getPackedSfixed64(index);
      }
      /**
       * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
       * @param value The packedSfixed64 to set.
       * @return This builder for chaining.
       */
      public Builder setPackedSfixed64(
          int index, long value) {
        copyOnWrite();
        instance.setPackedSfixed64(index, value);
        return this;
      }
      /**
       * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
       * @param value The packedSfixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addPackedSfixed64(long value) {
        copyOnWrite();
        instance.addPackedSfixed64(value);
        return this;
      }
      /**
       * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
       * @param values The packedSfixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllPackedSfixed64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllPackedSfixed64(values);
        return this;
      }
      /**
       * <code>repeated sfixed64 packed_sfixed64 = 99 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearPackedSfixed64() {
        copyOnWrite();
        instance.clearPackedSfixed64();
        return this;
      }

      /**
       * <code>repeated float packed_float = 100 [packed = true];</code>
       * @return A list containing the packedFloat.
       */
      @java.lang.Override
      public java.util.List<java.lang.Float>
          getPackedFloatList() {
        return java.util.Collections.unmodifiableList(
            instance.getPackedFloatList());
      }
      /**
       * <code>repeated float packed_float = 100 [packed = true];</code>
       * @return The count of packedFloat.
       */
      @java.lang.Override
      public int getPackedFloatCount() {
        return instance.getPackedFloatCount();
      }
      /**
       * <code>repeated float packed_float = 100 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The packedFloat at the given index.
       */
      @java.lang.Override
      public float getPackedFloat(int index) {
        return instance.getPackedFloat(index);
      }
      /**
       * <code>repeated float packed_float = 100 [packed = true];</code>
       * @param value The packedFloat to set.
       * @return This builder for chaining.
       */
      public Builder setPackedFloat(
          int index, float value) {
        copyOnWrite();
        instance.setPackedFloat(index, value);
        return this;
      }
      /**
       * <code>repeated float packed_float = 100 [packed = true];</code>
       * @param value The packedFloat to add.
       * @return This builder for chaining.
       */
      public Builder addPackedFloat(float value) {
        copyOnWrite();
        instance.addPackedFloat(value);
        return this;
      }
      /**
       * <code>repeated float packed_float = 100 [packed = true];</code>
       * @param values The packedFloat to add.
       * @return This builder for chaining.
       */
      public Builder addAllPackedFloat(
          java.lang.Iterable<? extends java.lang.Float> values) {
        copyOnWrite();
        instance.addAllPackedFloat(values);
        return this;
      }
      /**
       * <code>repeated float packed_float = 100 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearPackedFloat() {
        copyOnWrite();
        instance.clearPackedFloat();
        return this;
      }

      /**
       * <code>repeated double packed_double = 101 [packed = true];</code>
       * @return A list containing the packedDouble.
       */
      @java.lang.Override
      public java.util.List<java.lang.Double>
          getPackedDoubleList() {
        return java.util.Collections.unmodifiableList(
            instance.getPackedDoubleList());
      }
      /**
       * <code>repeated double packed_double = 101 [packed = true];</code>
       * @return The count of packedDouble.
       */
      @java.lang.Override
      public int getPackedDoubleCount() {
        return instance.getPackedDoubleCount();
      }
      /**
       * <code>repeated double packed_double = 101 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The packedDouble at the given index.
       */
      @java.lang.Override
      public double getPackedDouble(int index) {
        return instance.getPackedDouble(index);
      }
      /**
       * <code>repeated double packed_double = 101 [packed = true];</code>
       * @param value The packedDouble to set.
       * @return This builder for chaining.
       */
      public Builder setPackedDouble(
          int index, double value) {
        copyOnWrite();
        instance.setPackedDouble(index, value);
        return this;
      }
      /**
       * <code>repeated double packed_double = 101 [packed = true];</code>
       * @param value The packedDouble to add.
       * @return This builder for chaining.
       */
      public Builder addPackedDouble(double value) {
        copyOnWrite();
        instance.addPackedDouble(value);
        return this;
      }
      /**
       * <code>repeated double packed_double = 101 [packed = true];</code>
       * @param values The packedDouble to add.
       * @return This builder for chaining.
       */
      public Builder addAllPackedDouble(
          java.lang.Iterable<? extends java.lang.Double> values) {
        copyOnWrite();
        instance.addAllPackedDouble(values);
        return this;
      }
      /**
       * <code>repeated double packed_double = 101 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearPackedDouble() {
        copyOnWrite();
        instance.clearPackedDouble();
        return this;
      }

      /**
       * <code>repeated bool packed_bool = 102 [packed = true];</code>
       * @return A list containing the packedBool.
       */
      @java.lang.Override
      public java.util.List<java.lang.Boolean>
          getPackedBoolList() {
        return java.util.Collections.unmodifiableList(
            instance.getPackedBoolList());
      }
      /**
       * <code>repeated bool packed_bool = 102 [packed = true];</code>
       * @return The count of packedBool.
       */
      @java.lang.Override
      public int getPackedBoolCount() {
        return instance.getPackedBoolCount();
      }
      /**
       * <code>repeated bool packed_bool = 102 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The packedBool at the given index.
       */
      @java.lang.Override
      public boolean getPackedBool(int index) {
        return instance.getPackedBool(index);
      }
      /**
       * <code>repeated bool packed_bool = 102 [packed = true];</code>
       * @param value The packedBool to set.
       * @return This builder for chaining.
       */
      public Builder setPackedBool(
          int index, boolean value) {
        copyOnWrite();
        instance.setPackedBool(index, value);
        return this;
      }
      /**
       * <code>repeated bool packed_bool = 102 [packed = true];</code>
       * @param value The packedBool to add.
       * @return This builder for chaining.
       */
      public Builder addPackedBool(boolean value) {
        copyOnWrite();
        instance.addPackedBool(value);
        return this;
      }
      /**
       * <code>repeated bool packed_bool = 102 [packed = true];</code>
       * @param values The packedBool to add.
       * @return This builder for chaining.
       */
      public Builder addAllPackedBool(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        copyOnWrite();
        instance.addAllPackedBool(values);
        return this;
      }
      /**
       * <code>repeated bool packed_bool = 102 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearPackedBool() {
        copyOnWrite();
        instance.clearPackedBool();
        return this;
      }

      /**
       * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
       * @return A list containing the packedEnum.
       */
      @java.lang.Override
      public java.util.List<proto3_unittest.UnittestProto3.ForeignEnum> getPackedEnumList() {
        return instance.getPackedEnumList();
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
       * @return The count of packedEnum.
       */
      @java.lang.Override
      public int getPackedEnumCount() {
        return instance.getPackedEnumCount();
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The packedEnum at the given index.
       */
      @java.lang.Override
      public proto3_unittest.UnittestProto3.ForeignEnum getPackedEnum(int index) {
        return instance.getPackedEnum(index);
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
       * @param index The index to set the value at.
       * @param value The packedEnum to set.
       * @return This builder for chaining.
       */
      public Builder setPackedEnum(
          int index, proto3_unittest.UnittestProto3.ForeignEnum value) {
        copyOnWrite();
        instance.setPackedEnum(index, value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
       * @param value The packedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addPackedEnum(proto3_unittest.UnittestProto3.ForeignEnum value) {
        copyOnWrite();
        instance.addPackedEnum(value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
       * @param values The packedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addAllPackedEnum(
          java.lang.Iterable<? extends proto3_unittest.UnittestProto3.ForeignEnum> values) {
        copyOnWrite();
        instance.addAllPackedEnum(values);  return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearPackedEnum() {
        copyOnWrite();
        instance.clearPackedEnum();
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
       * @return A list containing the enum numeric values on the wire for packedEnum.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
      getPackedEnumValueList() {
        return java.util.Collections.unmodifiableList(
            instance.getPackedEnumValueList());
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
       * @param index The index of the value to return.
       * @return The enum numeric value on the wire of packedEnum at the given index.
       */
      @java.lang.Override
      public int getPackedEnumValue(int index) {
        return instance.getPackedEnumValue(index);
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
       * @param index The index to set the value at.
       * @param value The enum numeric value on the wire for packedEnum to set.
       * @return This builder for chaining.
       */
      public Builder setPackedEnumValue(
          int index, int value) {
        copyOnWrite();
        instance.setPackedEnumValue(index, value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
       * @param value The enum numeric value on the wire for packedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addPackedEnumValue(int value) {
        instance.addPackedEnumValue(value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];</code>
       * @param values The enum numeric values on the wire for packedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addAllPackedEnumValue(
          java.lang.Iterable<java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllPackedEnumValue(values);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto3_unittest.TestPackedTypes)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new proto3_unittest.UnittestProto3.TestPackedTypes();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "packedInt32_",
              "packedInt64_",
              "packedUint32_",
              "packedUint64_",
              "packedSint32_",
              "packedSint64_",
              "packedFixed32_",
              "packedFixed64_",
              "packedSfixed32_",
              "packedSfixed64_",
              "packedFloat_",
              "packedDouble_",
              "packedBool_",
              "packedEnum_",
            };
            java.lang.String info =
                "\u0000\u000e\u0000\u0000Zg\u000e\u0000\u000e\u0000Z\'[%\\+]&^/_0`)a(b-c.d$e#f*g," +
                "";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<proto3_unittest.UnittestProto3.TestPackedTypes> parser = PARSER;
          if (parser == null) {
            synchronized (proto3_unittest.UnittestProto3.TestPackedTypes.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<proto3_unittest.UnittestProto3.TestPackedTypes>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:proto3_unittest.TestPackedTypes)
    private static final proto3_unittest.UnittestProto3.TestPackedTypes DEFAULT_INSTANCE;
    static {
      TestPackedTypes defaultInstance = new TestPackedTypes();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TestPackedTypes.class, defaultInstance);
    }

    public static proto3_unittest.UnittestProto3.TestPackedTypes getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TestPackedTypes> PARSER;

    public static com.google.protobuf.Parser<TestPackedTypes> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TestUnpackedTypesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto3_unittest.TestUnpackedTypes)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @return A list containing the repeatedInt32.
     */
    java.util.List<java.lang.Integer> getRepeatedInt32List();
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @return The count of repeatedInt32.
     */
    int getRepeatedInt32Count();
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedInt32 at the given index.
     */
    int getRepeatedInt32(int index);

    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @return A list containing the repeatedInt64.
     */
    java.util.List<java.lang.Long> getRepeatedInt64List();
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @return The count of repeatedInt64.
     */
    int getRepeatedInt64Count();
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedInt64 at the given index.
     */
    long getRepeatedInt64(int index);

    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @return A list containing the repeatedUint32.
     */
    java.util.List<java.lang.Integer> getRepeatedUint32List();
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @return The count of repeatedUint32.
     */
    int getRepeatedUint32Count();
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedUint32 at the given index.
     */
    int getRepeatedUint32(int index);

    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @return A list containing the repeatedUint64.
     */
    java.util.List<java.lang.Long> getRepeatedUint64List();
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @return The count of repeatedUint64.
     */
    int getRepeatedUint64Count();
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedUint64 at the given index.
     */
    long getRepeatedUint64(int index);

    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @return A list containing the repeatedSint32.
     */
    java.util.List<java.lang.Integer> getRepeatedSint32List();
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @return The count of repeatedSint32.
     */
    int getRepeatedSint32Count();
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedSint32 at the given index.
     */
    int getRepeatedSint32(int index);

    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @return A list containing the repeatedSint64.
     */
    java.util.List<java.lang.Long> getRepeatedSint64List();
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @return The count of repeatedSint64.
     */
    int getRepeatedSint64Count();
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedSint64 at the given index.
     */
    long getRepeatedSint64(int index);

    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @return A list containing the repeatedFixed32.
     */
    java.util.List<java.lang.Integer> getRepeatedFixed32List();
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @return The count of repeatedFixed32.
     */
    int getRepeatedFixed32Count();
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedFixed32 at the given index.
     */
    int getRepeatedFixed32(int index);

    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @return A list containing the repeatedFixed64.
     */
    java.util.List<java.lang.Long> getRepeatedFixed64List();
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @return The count of repeatedFixed64.
     */
    int getRepeatedFixed64Count();
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedFixed64 at the given index.
     */
    long getRepeatedFixed64(int index);

    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @return A list containing the repeatedSfixed32.
     */
    java.util.List<java.lang.Integer> getRepeatedSfixed32List();
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @return The count of repeatedSfixed32.
     */
    int getRepeatedSfixed32Count();
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedSfixed32 at the given index.
     */
    int getRepeatedSfixed32(int index);

    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @return A list containing the repeatedSfixed64.
     */
    java.util.List<java.lang.Long> getRepeatedSfixed64List();
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @return The count of repeatedSfixed64.
     */
    int getRepeatedSfixed64Count();
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedSfixed64 at the given index.
     */
    long getRepeatedSfixed64(int index);

    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @return A list containing the repeatedFloat.
     */
    java.util.List<java.lang.Float> getRepeatedFloatList();
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @return The count of repeatedFloat.
     */
    int getRepeatedFloatCount();
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedFloat at the given index.
     */
    float getRepeatedFloat(int index);

    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @return A list containing the repeatedDouble.
     */
    java.util.List<java.lang.Double> getRepeatedDoubleList();
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @return The count of repeatedDouble.
     */
    int getRepeatedDoubleCount();
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedDouble at the given index.
     */
    double getRepeatedDouble(int index);

    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @return A list containing the repeatedBool.
     */
    java.util.List<java.lang.Boolean> getRepeatedBoolList();
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @return The count of repeatedBool.
     */
    int getRepeatedBoolCount();
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedBool at the given index.
     */
    boolean getRepeatedBool(int index);

    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @return A list containing the repeatedNestedEnum.
     */
    java.util.List<proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum> getRepeatedNestedEnumList();
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @return The count of repeatedNestedEnum.
     */
    int getRepeatedNestedEnumCount();
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedNestedEnum at the given index.
     */
    proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum getRepeatedNestedEnum(int index);
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @return A list containing the enum numeric values on the wire for repeatedNestedEnum.
     */
    java.util.List<java.lang.Integer>
    getRepeatedNestedEnumValueList();
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of repeatedNestedEnum at the given index.
     */
    int getRepeatedNestedEnumValue(int index);
  }
  /**
   * <pre>
   * Explicitly set packed to false
   * </pre>
   *
   * Protobuf type {@code proto3_unittest.TestUnpackedTypes}
   */
  public  static final class TestUnpackedTypes extends
      com.google.protobuf.GeneratedMessageLite<
          TestUnpackedTypes, TestUnpackedTypes.Builder> implements
      // @@protoc_insertion_point(message_implements:proto3_unittest.TestUnpackedTypes)
      TestUnpackedTypesOrBuilder {
    private TestUnpackedTypes() {
      repeatedInt32_ = emptyIntList();
      repeatedInt64_ = emptyLongList();
      repeatedUint32_ = emptyIntList();
      repeatedUint64_ = emptyLongList();
      repeatedSint32_ = emptyIntList();
      repeatedSint64_ = emptyLongList();
      repeatedFixed32_ = emptyIntList();
      repeatedFixed64_ = emptyLongList();
      repeatedSfixed32_ = emptyIntList();
      repeatedSfixed64_ = emptyLongList();
      repeatedFloat_ = emptyFloatList();
      repeatedDouble_ = emptyDoubleList();
      repeatedBool_ = emptyBooleanList();
      repeatedNestedEnum_ = emptyIntList();
    }
    public static final int REPEATED_INT32_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.IntList repeatedInt32_;
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @return A list containing the repeatedInt32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedInt32List() {
      return repeatedInt32_;
    }
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @return The count of repeatedInt32.
     */
    @java.lang.Override
    public int getRepeatedInt32Count() {
      return repeatedInt32_.size();
    }
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedInt32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedInt32(int index) {
      return repeatedInt32_.getInt(index);
    }
    private void ensureRepeatedInt32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedInt32_;
      if (!tmp.isModifiable()) {
        repeatedInt32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedInt32 to set.
     */
    private void setRepeatedInt32(
        int index, int value) {
      ensureRepeatedInt32IsMutable();
      repeatedInt32_.setInt(index, value);
    }
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @param value The repeatedInt32 to add.
     */
    private void addRepeatedInt32(int value) {
      ensureRepeatedInt32IsMutable();
      repeatedInt32_.addInt(value);
    }
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @param values The repeatedInt32 to add.
     */
    private void addAllRepeatedInt32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedInt32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedInt32_);
    }
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     */
    private void clearRepeatedInt32() {
      repeatedInt32_ = emptyIntList();
    }

    public static final int REPEATED_INT64_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.LongList repeatedInt64_;
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @return A list containing the repeatedInt64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedInt64List() {
      return repeatedInt64_;
    }
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @return The count of repeatedInt64.
     */
    @java.lang.Override
    public int getRepeatedInt64Count() {
      return repeatedInt64_.size();
    }
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedInt64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedInt64(int index) {
      return repeatedInt64_.getLong(index);
    }
    private void ensureRepeatedInt64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedInt64_;
      if (!tmp.isModifiable()) {
        repeatedInt64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedInt64 to set.
     */
    private void setRepeatedInt64(
        int index, long value) {
      ensureRepeatedInt64IsMutable();
      repeatedInt64_.setLong(index, value);
    }
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @param value The repeatedInt64 to add.
     */
    private void addRepeatedInt64(long value) {
      ensureRepeatedInt64IsMutable();
      repeatedInt64_.addLong(value);
    }
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @param values The repeatedInt64 to add.
     */
    private void addAllRepeatedInt64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedInt64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedInt64_);
    }
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     */
    private void clearRepeatedInt64() {
      repeatedInt64_ = emptyLongList();
    }

    public static final int REPEATED_UINT32_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.IntList repeatedUint32_;
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @return A list containing the repeatedUint32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedUint32List() {
      return repeatedUint32_;
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @return The count of repeatedUint32.
     */
    @java.lang.Override
    public int getRepeatedUint32Count() {
      return repeatedUint32_.size();
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedUint32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedUint32(int index) {
      return repeatedUint32_.getInt(index);
    }
    private void ensureRepeatedUint32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedUint32_;
      if (!tmp.isModifiable()) {
        repeatedUint32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedUint32 to set.
     */
    private void setRepeatedUint32(
        int index, int value) {
      ensureRepeatedUint32IsMutable();
      repeatedUint32_.setInt(index, value);
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @param value The repeatedUint32 to add.
     */
    private void addRepeatedUint32(int value) {
      ensureRepeatedUint32IsMutable();
      repeatedUint32_.addInt(value);
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @param values The repeatedUint32 to add.
     */
    private void addAllRepeatedUint32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedUint32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedUint32_);
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     */
    private void clearRepeatedUint32() {
      repeatedUint32_ = emptyIntList();
    }

    public static final int REPEATED_UINT64_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.LongList repeatedUint64_;
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @return A list containing the repeatedUint64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedUint64List() {
      return repeatedUint64_;
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @return The count of repeatedUint64.
     */
    @java.lang.Override
    public int getRepeatedUint64Count() {
      return repeatedUint64_.size();
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedUint64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedUint64(int index) {
      return repeatedUint64_.getLong(index);
    }
    private void ensureRepeatedUint64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedUint64_;
      if (!tmp.isModifiable()) {
        repeatedUint64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedUint64 to set.
     */
    private void setRepeatedUint64(
        int index, long value) {
      ensureRepeatedUint64IsMutable();
      repeatedUint64_.setLong(index, value);
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @param value The repeatedUint64 to add.
     */
    private void addRepeatedUint64(long value) {
      ensureRepeatedUint64IsMutable();
      repeatedUint64_.addLong(value);
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @param values The repeatedUint64 to add.
     */
    private void addAllRepeatedUint64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedUint64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedUint64_);
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     */
    private void clearRepeatedUint64() {
      repeatedUint64_ = emptyLongList();
    }

    public static final int REPEATED_SINT32_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.IntList repeatedSint32_;
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @return A list containing the repeatedSint32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedSint32List() {
      return repeatedSint32_;
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @return The count of repeatedSint32.
     */
    @java.lang.Override
    public int getRepeatedSint32Count() {
      return repeatedSint32_.size();
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedSint32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedSint32(int index) {
      return repeatedSint32_.getInt(index);
    }
    private void ensureRepeatedSint32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedSint32_;
      if (!tmp.isModifiable()) {
        repeatedSint32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedSint32 to set.
     */
    private void setRepeatedSint32(
        int index, int value) {
      ensureRepeatedSint32IsMutable();
      repeatedSint32_.setInt(index, value);
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @param value The repeatedSint32 to add.
     */
    private void addRepeatedSint32(int value) {
      ensureRepeatedSint32IsMutable();
      repeatedSint32_.addInt(value);
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @param values The repeatedSint32 to add.
     */
    private void addAllRepeatedSint32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedSint32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedSint32_);
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     */
    private void clearRepeatedSint32() {
      repeatedSint32_ = emptyIntList();
    }

    public static final int REPEATED_SINT64_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.LongList repeatedSint64_;
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @return A list containing the repeatedSint64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedSint64List() {
      return repeatedSint64_;
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @return The count of repeatedSint64.
     */
    @java.lang.Override
    public int getRepeatedSint64Count() {
      return repeatedSint64_.size();
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedSint64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedSint64(int index) {
      return repeatedSint64_.getLong(index);
    }
    private void ensureRepeatedSint64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedSint64_;
      if (!tmp.isModifiable()) {
        repeatedSint64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedSint64 to set.
     */
    private void setRepeatedSint64(
        int index, long value) {
      ensureRepeatedSint64IsMutable();
      repeatedSint64_.setLong(index, value);
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @param value The repeatedSint64 to add.
     */
    private void addRepeatedSint64(long value) {
      ensureRepeatedSint64IsMutable();
      repeatedSint64_.addLong(value);
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @param values The repeatedSint64 to add.
     */
    private void addAllRepeatedSint64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedSint64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedSint64_);
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     */
    private void clearRepeatedSint64() {
      repeatedSint64_ = emptyLongList();
    }

    public static final int REPEATED_FIXED32_FIELD_NUMBER = 7;
    private com.google.protobuf.Internal.IntList repeatedFixed32_;
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @return A list containing the repeatedFixed32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedFixed32List() {
      return repeatedFixed32_;
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @return The count of repeatedFixed32.
     */
    @java.lang.Override
    public int getRepeatedFixed32Count() {
      return repeatedFixed32_.size();
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedFixed32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedFixed32(int index) {
      return repeatedFixed32_.getInt(index);
    }
    private void ensureRepeatedFixed32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedFixed32_;
      if (!tmp.isModifiable()) {
        repeatedFixed32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedFixed32 to set.
     */
    private void setRepeatedFixed32(
        int index, int value) {
      ensureRepeatedFixed32IsMutable();
      repeatedFixed32_.setInt(index, value);
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @param value The repeatedFixed32 to add.
     */
    private void addRepeatedFixed32(int value) {
      ensureRepeatedFixed32IsMutable();
      repeatedFixed32_.addInt(value);
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @param values The repeatedFixed32 to add.
     */
    private void addAllRepeatedFixed32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedFixed32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedFixed32_);
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     */
    private void clearRepeatedFixed32() {
      repeatedFixed32_ = emptyIntList();
    }

    public static final int REPEATED_FIXED64_FIELD_NUMBER = 8;
    private com.google.protobuf.Internal.LongList repeatedFixed64_;
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @return A list containing the repeatedFixed64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedFixed64List() {
      return repeatedFixed64_;
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @return The count of repeatedFixed64.
     */
    @java.lang.Override
    public int getRepeatedFixed64Count() {
      return repeatedFixed64_.size();
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedFixed64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedFixed64(int index) {
      return repeatedFixed64_.getLong(index);
    }
    private void ensureRepeatedFixed64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedFixed64_;
      if (!tmp.isModifiable()) {
        repeatedFixed64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedFixed64 to set.
     */
    private void setRepeatedFixed64(
        int index, long value) {
      ensureRepeatedFixed64IsMutable();
      repeatedFixed64_.setLong(index, value);
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @param value The repeatedFixed64 to add.
     */
    private void addRepeatedFixed64(long value) {
      ensureRepeatedFixed64IsMutable();
      repeatedFixed64_.addLong(value);
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @param values The repeatedFixed64 to add.
     */
    private void addAllRepeatedFixed64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedFixed64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedFixed64_);
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     */
    private void clearRepeatedFixed64() {
      repeatedFixed64_ = emptyLongList();
    }

    public static final int REPEATED_SFIXED32_FIELD_NUMBER = 9;
    private com.google.protobuf.Internal.IntList repeatedSfixed32_;
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @return A list containing the repeatedSfixed32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedSfixed32List() {
      return repeatedSfixed32_;
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @return The count of repeatedSfixed32.
     */
    @java.lang.Override
    public int getRepeatedSfixed32Count() {
      return repeatedSfixed32_.size();
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedSfixed32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedSfixed32(int index) {
      return repeatedSfixed32_.getInt(index);
    }
    private void ensureRepeatedSfixed32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedSfixed32_;
      if (!tmp.isModifiable()) {
        repeatedSfixed32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedSfixed32 to set.
     */
    private void setRepeatedSfixed32(
        int index, int value) {
      ensureRepeatedSfixed32IsMutable();
      repeatedSfixed32_.setInt(index, value);
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @param value The repeatedSfixed32 to add.
     */
    private void addRepeatedSfixed32(int value) {
      ensureRepeatedSfixed32IsMutable();
      repeatedSfixed32_.addInt(value);
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @param values The repeatedSfixed32 to add.
     */
    private void addAllRepeatedSfixed32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedSfixed32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedSfixed32_);
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     */
    private void clearRepeatedSfixed32() {
      repeatedSfixed32_ = emptyIntList();
    }

    public static final int REPEATED_SFIXED64_FIELD_NUMBER = 10;
    private com.google.protobuf.Internal.LongList repeatedSfixed64_;
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @return A list containing the repeatedSfixed64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedSfixed64List() {
      return repeatedSfixed64_;
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @return The count of repeatedSfixed64.
     */
    @java.lang.Override
    public int getRepeatedSfixed64Count() {
      return repeatedSfixed64_.size();
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedSfixed64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedSfixed64(int index) {
      return repeatedSfixed64_.getLong(index);
    }
    private void ensureRepeatedSfixed64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedSfixed64_;
      if (!tmp.isModifiable()) {
        repeatedSfixed64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedSfixed64 to set.
     */
    private void setRepeatedSfixed64(
        int index, long value) {
      ensureRepeatedSfixed64IsMutable();
      repeatedSfixed64_.setLong(index, value);
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @param value The repeatedSfixed64 to add.
     */
    private void addRepeatedSfixed64(long value) {
      ensureRepeatedSfixed64IsMutable();
      repeatedSfixed64_.addLong(value);
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @param values The repeatedSfixed64 to add.
     */
    private void addAllRepeatedSfixed64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedSfixed64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedSfixed64_);
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     */
    private void clearRepeatedSfixed64() {
      repeatedSfixed64_ = emptyLongList();
    }

    public static final int REPEATED_FLOAT_FIELD_NUMBER = 11;
    private com.google.protobuf.Internal.FloatList repeatedFloat_;
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @return A list containing the repeatedFloat.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getRepeatedFloatList() {
      return repeatedFloat_;
    }
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @return The count of repeatedFloat.
     */
    @java.lang.Override
    public int getRepeatedFloatCount() {
      return repeatedFloat_.size();
    }
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedFloat at the given index.
     */
    @java.lang.Override
    public float getRepeatedFloat(int index) {
      return repeatedFloat_.getFloat(index);
    }
    private void ensureRepeatedFloatIsMutable() {
      com.google.protobuf.Internal.FloatList tmp = repeatedFloat_;
      if (!tmp.isModifiable()) {
        repeatedFloat_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedFloat to set.
     */
    private void setRepeatedFloat(
        int index, float value) {
      ensureRepeatedFloatIsMutable();
      repeatedFloat_.setFloat(index, value);
    }
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @param value The repeatedFloat to add.
     */
    private void addRepeatedFloat(float value) {
      ensureRepeatedFloatIsMutable();
      repeatedFloat_.addFloat(value);
    }
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @param values The repeatedFloat to add.
     */
    private void addAllRepeatedFloat(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureRepeatedFloatIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedFloat_);
    }
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     */
    private void clearRepeatedFloat() {
      repeatedFloat_ = emptyFloatList();
    }

    public static final int REPEATED_DOUBLE_FIELD_NUMBER = 12;
    private com.google.protobuf.Internal.DoubleList repeatedDouble_;
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @return A list containing the repeatedDouble.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getRepeatedDoubleList() {
      return repeatedDouble_;
    }
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @return The count of repeatedDouble.
     */
    @java.lang.Override
    public int getRepeatedDoubleCount() {
      return repeatedDouble_.size();
    }
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedDouble at the given index.
     */
    @java.lang.Override
    public double getRepeatedDouble(int index) {
      return repeatedDouble_.getDouble(index);
    }
    private void ensureRepeatedDoubleIsMutable() {
      com.google.protobuf.Internal.DoubleList tmp = repeatedDouble_;
      if (!tmp.isModifiable()) {
        repeatedDouble_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedDouble to set.
     */
    private void setRepeatedDouble(
        int index, double value) {
      ensureRepeatedDoubleIsMutable();
      repeatedDouble_.setDouble(index, value);
    }
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @param value The repeatedDouble to add.
     */
    private void addRepeatedDouble(double value) {
      ensureRepeatedDoubleIsMutable();
      repeatedDouble_.addDouble(value);
    }
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @param values The repeatedDouble to add.
     */
    private void addAllRepeatedDouble(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureRepeatedDoubleIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedDouble_);
    }
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     */
    private void clearRepeatedDouble() {
      repeatedDouble_ = emptyDoubleList();
    }

    public static final int REPEATED_BOOL_FIELD_NUMBER = 13;
    private com.google.protobuf.Internal.BooleanList repeatedBool_;
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @return A list containing the repeatedBool.
     */
    @java.lang.Override
    public java.util.List<java.lang.Boolean>
        getRepeatedBoolList() {
      return repeatedBool_;
    }
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @return The count of repeatedBool.
     */
    @java.lang.Override
    public int getRepeatedBoolCount() {
      return repeatedBool_.size();
    }
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedBool at the given index.
     */
    @java.lang.Override
    public boolean getRepeatedBool(int index) {
      return repeatedBool_.getBoolean(index);
    }
    private void ensureRepeatedBoolIsMutable() {
      com.google.protobuf.Internal.BooleanList tmp = repeatedBool_;
      if (!tmp.isModifiable()) {
        repeatedBool_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedBool to set.
     */
    private void setRepeatedBool(
        int index, boolean value) {
      ensureRepeatedBoolIsMutable();
      repeatedBool_.setBoolean(index, value);
    }
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @param value The repeatedBool to add.
     */
    private void addRepeatedBool(boolean value) {
      ensureRepeatedBoolIsMutable();
      repeatedBool_.addBoolean(value);
    }
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @param values The repeatedBool to add.
     */
    private void addAllRepeatedBool(
        java.lang.Iterable<? extends java.lang.Boolean> values) {
      ensureRepeatedBoolIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedBool_);
    }
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     */
    private void clearRepeatedBool() {
      repeatedBool_ = emptyBooleanList();
    }

    public static final int REPEATED_NESTED_ENUM_FIELD_NUMBER = 14;
    private com.google.protobuf.Internal.IntList repeatedNestedEnum_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum> repeatedNestedEnum_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum>() {
              @java.lang.Override
              public proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum convert(java.lang.Integer from) {
                proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum result = proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum.forNumber(from);
                return result == null ? proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum.UNRECOGNIZED : result;
              }
            };
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @return A list containing the repeatedNestedEnum.
     */
    @java.lang.Override
    public java.util.List<proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum> getRepeatedNestedEnumList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum>(repeatedNestedEnum_, repeatedNestedEnum_converter_);
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @return The count of repeatedNestedEnum.
     */
    @java.lang.Override
    public int getRepeatedNestedEnumCount() {
      return repeatedNestedEnum_.size();
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedNestedEnum at the given index.
     */
    @java.lang.Override
    public proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum getRepeatedNestedEnum(int index) {
      return repeatedNestedEnum_converter_.convert(repeatedNestedEnum_.getInt(index));
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @return A list containing the enum numeric values on the wire for repeatedNestedEnum.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
    getRepeatedNestedEnumValueList() {
      return repeatedNestedEnum_;
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of repeatedNestedEnum at the given index.
     */
    @java.lang.Override
    public int getRepeatedNestedEnumValue(int index) {
      return repeatedNestedEnum_.getInt(index);
    }
    private void ensureRepeatedNestedEnumIsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedNestedEnum_;
      if (!tmp.isModifiable()) {
        repeatedNestedEnum_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
      }
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedNestedEnum to set.
     */
    private void setRepeatedNestedEnum(
        int index, proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum value) {
      value.getClass();
  ensureRepeatedNestedEnumIsMutable();
      repeatedNestedEnum_.setInt(index, value.getNumber());
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param value The repeatedNestedEnum to add.
     */
    private void addRepeatedNestedEnum(proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum value) {
      value.getClass();
  ensureRepeatedNestedEnumIsMutable();
      repeatedNestedEnum_.addInt(value.getNumber());
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param values The repeatedNestedEnum to add.
     */
    private void addAllRepeatedNestedEnum(
        java.lang.Iterable<? extends proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum> values) {
      ensureRepeatedNestedEnumIsMutable();
      for (proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum value : values) {
        repeatedNestedEnum_.addInt(value.getNumber());
      }
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     */
    private void clearRepeatedNestedEnum() {
      repeatedNestedEnum_ = emptyIntList();
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param value The enum numeric value on the wire for repeatedNestedEnum to set.
     */
    private void setRepeatedNestedEnumValue(
        int index, int value) {
      ensureRepeatedNestedEnumIsMutable();
      repeatedNestedEnum_.setInt(index, value);
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param value The enum numeric value on the wire for repeatedNestedEnum to add.
     */
    private void addRepeatedNestedEnumValue(int value) {
      ensureRepeatedNestedEnumIsMutable();
      repeatedNestedEnum_.addInt(value);
    }
    /**
     * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param values The enum numeric values on the wire for repeatedNestedEnum to add.
     */
    private void addAllRepeatedNestedEnumValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureRepeatedNestedEnumIsMutable();
      for (int value : values) {
        repeatedNestedEnum_.addInt(value);
      }
    }

    public static proto3_unittest.UnittestProto3.TestUnpackedTypes parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestUnpackedTypes parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestUnpackedTypes parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestUnpackedTypes parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestUnpackedTypes parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestUnpackedTypes parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestUnpackedTypes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestUnpackedTypes parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestUnpackedTypes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestUnpackedTypes parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestUnpackedTypes parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestUnpackedTypes parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(proto3_unittest.UnittestProto3.TestUnpackedTypes prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Explicitly set packed to false
     * </pre>
     *
     * Protobuf type {@code proto3_unittest.TestUnpackedTypes}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          proto3_unittest.UnittestProto3.TestUnpackedTypes, Builder> implements
        // @@protoc_insertion_point(builder_implements:proto3_unittest.TestUnpackedTypes)
        proto3_unittest.UnittestProto3.TestUnpackedTypesOrBuilder {
      // Construct using proto3_unittest.UnittestProto3.TestUnpackedTypes.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
       * @return A list containing the repeatedInt32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedInt32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedInt32List());
      }
      /**
       * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
       * @return The count of repeatedInt32.
       */
      @java.lang.Override
      public int getRepeatedInt32Count() {
        return instance.getRepeatedInt32Count();
      }
      /**
       * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedInt32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedInt32(int index) {
        return instance.getRepeatedInt32(index);
      }
      /**
       * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
       * @param value The repeatedInt32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedInt32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedInt32(index, value);
        return this;
      }
      /**
       * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
       * @param value The repeatedInt32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedInt32(int value) {
        copyOnWrite();
        instance.addRepeatedInt32(value);
        return this;
      }
      /**
       * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
       * @param values The repeatedInt32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedInt32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedInt32(values);
        return this;
      }
      /**
       * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedInt32() {
        copyOnWrite();
        instance.clearRepeatedInt32();
        return this;
      }

      /**
       * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
       * @return A list containing the repeatedInt64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedInt64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedInt64List());
      }
      /**
       * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
       * @return The count of repeatedInt64.
       */
      @java.lang.Override
      public int getRepeatedInt64Count() {
        return instance.getRepeatedInt64Count();
      }
      /**
       * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedInt64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedInt64(int index) {
        return instance.getRepeatedInt64(index);
      }
      /**
       * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
       * @param value The repeatedInt64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedInt64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedInt64(index, value);
        return this;
      }
      /**
       * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
       * @param value The repeatedInt64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedInt64(long value) {
        copyOnWrite();
        instance.addRepeatedInt64(value);
        return this;
      }
      /**
       * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
       * @param values The repeatedInt64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedInt64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedInt64(values);
        return this;
      }
      /**
       * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedInt64() {
        copyOnWrite();
        instance.clearRepeatedInt64();
        return this;
      }

      /**
       * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
       * @return A list containing the repeatedUint32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedUint32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedUint32List());
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
       * @return The count of repeatedUint32.
       */
      @java.lang.Override
      public int getRepeatedUint32Count() {
        return instance.getRepeatedUint32Count();
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedUint32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedUint32(int index) {
        return instance.getRepeatedUint32(index);
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
       * @param value The repeatedUint32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedUint32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedUint32(index, value);
        return this;
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
       * @param value The repeatedUint32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedUint32(int value) {
        copyOnWrite();
        instance.addRepeatedUint32(value);
        return this;
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
       * @param values The repeatedUint32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedUint32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedUint32(values);
        return this;
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedUint32() {
        copyOnWrite();
        instance.clearRepeatedUint32();
        return this;
      }

      /**
       * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
       * @return A list containing the repeatedUint64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedUint64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedUint64List());
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
       * @return The count of repeatedUint64.
       */
      @java.lang.Override
      public int getRepeatedUint64Count() {
        return instance.getRepeatedUint64Count();
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedUint64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedUint64(int index) {
        return instance.getRepeatedUint64(index);
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
       * @param value The repeatedUint64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedUint64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedUint64(index, value);
        return this;
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
       * @param value The repeatedUint64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedUint64(long value) {
        copyOnWrite();
        instance.addRepeatedUint64(value);
        return this;
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
       * @param values The repeatedUint64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedUint64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedUint64(values);
        return this;
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedUint64() {
        copyOnWrite();
        instance.clearRepeatedUint64();
        return this;
      }

      /**
       * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
       * @return A list containing the repeatedSint32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedSint32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedSint32List());
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
       * @return The count of repeatedSint32.
       */
      @java.lang.Override
      public int getRepeatedSint32Count() {
        return instance.getRepeatedSint32Count();
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedSint32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedSint32(int index) {
        return instance.getRepeatedSint32(index);
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
       * @param value The repeatedSint32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedSint32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedSint32(index, value);
        return this;
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
       * @param value The repeatedSint32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedSint32(int value) {
        copyOnWrite();
        instance.addRepeatedSint32(value);
        return this;
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
       * @param values The repeatedSint32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedSint32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedSint32(values);
        return this;
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedSint32() {
        copyOnWrite();
        instance.clearRepeatedSint32();
        return this;
      }

      /**
       * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
       * @return A list containing the repeatedSint64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedSint64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedSint64List());
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
       * @return The count of repeatedSint64.
       */
      @java.lang.Override
      public int getRepeatedSint64Count() {
        return instance.getRepeatedSint64Count();
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedSint64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedSint64(int index) {
        return instance.getRepeatedSint64(index);
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
       * @param value The repeatedSint64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedSint64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedSint64(index, value);
        return this;
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
       * @param value The repeatedSint64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedSint64(long value) {
        copyOnWrite();
        instance.addRepeatedSint64(value);
        return this;
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
       * @param values The repeatedSint64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedSint64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedSint64(values);
        return this;
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedSint64() {
        copyOnWrite();
        instance.clearRepeatedSint64();
        return this;
      }

      /**
       * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
       * @return A list containing the repeatedFixed32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedFixed32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedFixed32List());
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
       * @return The count of repeatedFixed32.
       */
      @java.lang.Override
      public int getRepeatedFixed32Count() {
        return instance.getRepeatedFixed32Count();
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedFixed32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedFixed32(int index) {
        return instance.getRepeatedFixed32(index);
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
       * @param value The repeatedFixed32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedFixed32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedFixed32(index, value);
        return this;
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
       * @param value The repeatedFixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedFixed32(int value) {
        copyOnWrite();
        instance.addRepeatedFixed32(value);
        return this;
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
       * @param values The repeatedFixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedFixed32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedFixed32(values);
        return this;
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedFixed32() {
        copyOnWrite();
        instance.clearRepeatedFixed32();
        return this;
      }

      /**
       * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
       * @return A list containing the repeatedFixed64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedFixed64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedFixed64List());
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
       * @return The count of repeatedFixed64.
       */
      @java.lang.Override
      public int getRepeatedFixed64Count() {
        return instance.getRepeatedFixed64Count();
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedFixed64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedFixed64(int index) {
        return instance.getRepeatedFixed64(index);
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
       * @param value The repeatedFixed64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedFixed64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedFixed64(index, value);
        return this;
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
       * @param value The repeatedFixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedFixed64(long value) {
        copyOnWrite();
        instance.addRepeatedFixed64(value);
        return this;
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
       * @param values The repeatedFixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedFixed64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedFixed64(values);
        return this;
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedFixed64() {
        copyOnWrite();
        instance.clearRepeatedFixed64();
        return this;
      }

      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
       * @return A list containing the repeatedSfixed32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedSfixed32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedSfixed32List());
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
       * @return The count of repeatedSfixed32.
       */
      @java.lang.Override
      public int getRepeatedSfixed32Count() {
        return instance.getRepeatedSfixed32Count();
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedSfixed32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedSfixed32(int index) {
        return instance.getRepeatedSfixed32(index);
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
       * @param value The repeatedSfixed32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedSfixed32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedSfixed32(index, value);
        return this;
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
       * @param value The repeatedSfixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedSfixed32(int value) {
        copyOnWrite();
        instance.addRepeatedSfixed32(value);
        return this;
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
       * @param values The repeatedSfixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedSfixed32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedSfixed32(values);
        return this;
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedSfixed32() {
        copyOnWrite();
        instance.clearRepeatedSfixed32();
        return this;
      }

      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
       * @return A list containing the repeatedSfixed64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedSfixed64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedSfixed64List());
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
       * @return The count of repeatedSfixed64.
       */
      @java.lang.Override
      public int getRepeatedSfixed64Count() {
        return instance.getRepeatedSfixed64Count();
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedSfixed64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedSfixed64(int index) {
        return instance.getRepeatedSfixed64(index);
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
       * @param value The repeatedSfixed64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedSfixed64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedSfixed64(index, value);
        return this;
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
       * @param value The repeatedSfixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedSfixed64(long value) {
        copyOnWrite();
        instance.addRepeatedSfixed64(value);
        return this;
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
       * @param values The repeatedSfixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedSfixed64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedSfixed64(values);
        return this;
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedSfixed64() {
        copyOnWrite();
        instance.clearRepeatedSfixed64();
        return this;
      }

      /**
       * <code>repeated float repeated_float = 11 [packed = false];</code>
       * @return A list containing the repeatedFloat.
       */
      @java.lang.Override
      public java.util.List<java.lang.Float>
          getRepeatedFloatList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedFloatList());
      }
      /**
       * <code>repeated float repeated_float = 11 [packed = false];</code>
       * @return The count of repeatedFloat.
       */
      @java.lang.Override
      public int getRepeatedFloatCount() {
        return instance.getRepeatedFloatCount();
      }
      /**
       * <code>repeated float repeated_float = 11 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedFloat at the given index.
       */
      @java.lang.Override
      public float getRepeatedFloat(int index) {
        return instance.getRepeatedFloat(index);
      }
      /**
       * <code>repeated float repeated_float = 11 [packed = false];</code>
       * @param value The repeatedFloat to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedFloat(
          int index, float value) {
        copyOnWrite();
        instance.setRepeatedFloat(index, value);
        return this;
      }
      /**
       * <code>repeated float repeated_float = 11 [packed = false];</code>
       * @param value The repeatedFloat to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedFloat(float value) {
        copyOnWrite();
        instance.addRepeatedFloat(value);
        return this;
      }
      /**
       * <code>repeated float repeated_float = 11 [packed = false];</code>
       * @param values The repeatedFloat to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedFloat(
          java.lang.Iterable<? extends java.lang.Float> values) {
        copyOnWrite();
        instance.addAllRepeatedFloat(values);
        return this;
      }
      /**
       * <code>repeated float repeated_float = 11 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedFloat() {
        copyOnWrite();
        instance.clearRepeatedFloat();
        return this;
      }

      /**
       * <code>repeated double repeated_double = 12 [packed = false];</code>
       * @return A list containing the repeatedDouble.
       */
      @java.lang.Override
      public java.util.List<java.lang.Double>
          getRepeatedDoubleList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedDoubleList());
      }
      /**
       * <code>repeated double repeated_double = 12 [packed = false];</code>
       * @return The count of repeatedDouble.
       */
      @java.lang.Override
      public int getRepeatedDoubleCount() {
        return instance.getRepeatedDoubleCount();
      }
      /**
       * <code>repeated double repeated_double = 12 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedDouble at the given index.
       */
      @java.lang.Override
      public double getRepeatedDouble(int index) {
        return instance.getRepeatedDouble(index);
      }
      /**
       * <code>repeated double repeated_double = 12 [packed = false];</code>
       * @param value The repeatedDouble to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedDouble(
          int index, double value) {
        copyOnWrite();
        instance.setRepeatedDouble(index, value);
        return this;
      }
      /**
       * <code>repeated double repeated_double = 12 [packed = false];</code>
       * @param value The repeatedDouble to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedDouble(double value) {
        copyOnWrite();
        instance.addRepeatedDouble(value);
        return this;
      }
      /**
       * <code>repeated double repeated_double = 12 [packed = false];</code>
       * @param values The repeatedDouble to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedDouble(
          java.lang.Iterable<? extends java.lang.Double> values) {
        copyOnWrite();
        instance.addAllRepeatedDouble(values);
        return this;
      }
      /**
       * <code>repeated double repeated_double = 12 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedDouble() {
        copyOnWrite();
        instance.clearRepeatedDouble();
        return this;
      }

      /**
       * <code>repeated bool repeated_bool = 13 [packed = false];</code>
       * @return A list containing the repeatedBool.
       */
      @java.lang.Override
      public java.util.List<java.lang.Boolean>
          getRepeatedBoolList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedBoolList());
      }
      /**
       * <code>repeated bool repeated_bool = 13 [packed = false];</code>
       * @return The count of repeatedBool.
       */
      @java.lang.Override
      public int getRepeatedBoolCount() {
        return instance.getRepeatedBoolCount();
      }
      /**
       * <code>repeated bool repeated_bool = 13 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedBool at the given index.
       */
      @java.lang.Override
      public boolean getRepeatedBool(int index) {
        return instance.getRepeatedBool(index);
      }
      /**
       * <code>repeated bool repeated_bool = 13 [packed = false];</code>
       * @param value The repeatedBool to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedBool(
          int index, boolean value) {
        copyOnWrite();
        instance.setRepeatedBool(index, value);
        return this;
      }
      /**
       * <code>repeated bool repeated_bool = 13 [packed = false];</code>
       * @param value The repeatedBool to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedBool(boolean value) {
        copyOnWrite();
        instance.addRepeatedBool(value);
        return this;
      }
      /**
       * <code>repeated bool repeated_bool = 13 [packed = false];</code>
       * @param values The repeatedBool to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedBool(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        copyOnWrite();
        instance.addAllRepeatedBool(values);
        return this;
      }
      /**
       * <code>repeated bool repeated_bool = 13 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedBool() {
        copyOnWrite();
        instance.clearRepeatedBool();
        return this;
      }

      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @return A list containing the repeatedNestedEnum.
       */
      @java.lang.Override
      public java.util.List<proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum> getRepeatedNestedEnumList() {
        return instance.getRepeatedNestedEnumList();
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @return The count of repeatedNestedEnum.
       */
      @java.lang.Override
      public int getRepeatedNestedEnumCount() {
        return instance.getRepeatedNestedEnumCount();
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedNestedEnum at the given index.
       */
      @java.lang.Override
      public proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum getRepeatedNestedEnum(int index) {
        return instance.getRepeatedNestedEnum(index);
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @param index The index to set the value at.
       * @param value The repeatedNestedEnum to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedNestedEnum(
          int index, proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum value) {
        copyOnWrite();
        instance.setRepeatedNestedEnum(index, value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @param value The repeatedNestedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedNestedEnum(proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum value) {
        copyOnWrite();
        instance.addRepeatedNestedEnum(value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @param values The repeatedNestedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedNestedEnum(
          java.lang.Iterable<? extends proto3_unittest.UnittestProto3.TestAllTypes.NestedEnum> values) {
        copyOnWrite();
        instance.addAllRepeatedNestedEnum(values);  return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedNestedEnum() {
        copyOnWrite();
        instance.clearRepeatedNestedEnum();
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @return A list containing the enum numeric values on the wire for repeatedNestedEnum.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
      getRepeatedNestedEnumValueList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedNestedEnumValueList());
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @param index The index of the value to return.
       * @return The enum numeric value on the wire of repeatedNestedEnum at the given index.
       */
      @java.lang.Override
      public int getRepeatedNestedEnumValue(int index) {
        return instance.getRepeatedNestedEnumValue(index);
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @param index The index to set the value at.
       * @param value The enum numeric value on the wire for repeatedNestedEnum to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedNestedEnumValue(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedNestedEnumValue(index, value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @param value The enum numeric value on the wire for repeatedNestedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedNestedEnumValue(int value) {
        instance.addRepeatedNestedEnumValue(value);
        return this;
      }
      /**
       * <code>repeated .proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @param values The enum numeric values on the wire for repeatedNestedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedNestedEnumValue(
          java.lang.Iterable<java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedNestedEnumValue(values);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto3_unittest.TestUnpackedTypes)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new proto3_unittest.UnittestProto3.TestUnpackedTypes();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "repeatedInt32_",
              "repeatedInt64_",
              "repeatedUint32_",
              "repeatedUint64_",
              "repeatedSint32_",
              "repeatedSint64_",
              "repeatedFixed32_",
              "repeatedFixed64_",
              "repeatedSfixed32_",
              "repeatedSfixed64_",
              "repeatedFloat_",
              "repeatedDouble_",
              "repeatedBool_",
              "repeatedNestedEnum_",
            };
            java.lang.String info =
                "\u0000\u000e\u0000\u0000\u0001\u000e\u000e\u0000\u000e\u0000\u0001\u0016\u0002\u0014" +
                "\u0003\u001d\u0004\u0015\u0005!\u0006\"\u0007\u0018\b\u0017\t\u001f\n \u000b\u0013" +
                "\f\u0012\r\u0019\u000e\u001e";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<proto3_unittest.UnittestProto3.TestUnpackedTypes> parser = PARSER;
          if (parser == null) {
            synchronized (proto3_unittest.UnittestProto3.TestUnpackedTypes.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<proto3_unittest.UnittestProto3.TestUnpackedTypes>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:proto3_unittest.TestUnpackedTypes)
    private static final proto3_unittest.UnittestProto3.TestUnpackedTypes DEFAULT_INSTANCE;
    static {
      TestUnpackedTypes defaultInstance = new TestUnpackedTypes();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TestUnpackedTypes.class, defaultInstance);
    }

    public static proto3_unittest.UnittestProto3.TestUnpackedTypes getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TestUnpackedTypes> PARSER;

    public static com.google.protobuf.Parser<TestUnpackedTypes> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface NestedTestAllTypesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto3_unittest.NestedTestAllTypes)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.proto3_unittest.NestedTestAllTypes child = 1;</code>
     * @return Whether the child field is set.
     */
    boolean hasChild();
    /**
     * <code>.proto3_unittest.NestedTestAllTypes child = 1;</code>
     * @return The child.
     */
    proto3_unittest.UnittestProto3.NestedTestAllTypes getChild();

    /**
     * <code>.proto3_unittest.TestAllTypes payload = 2;</code>
     * @return Whether the payload field is set.
     */
    boolean hasPayload();
    /**
     * <code>.proto3_unittest.TestAllTypes payload = 2;</code>
     * @return The payload.
     */
    proto3_unittest.UnittestProto3.TestAllTypes getPayload();
  }
  /**
   * <pre>
   * This proto includes a recursively nested message.
   * </pre>
   *
   * Protobuf type {@code proto3_unittest.NestedTestAllTypes}
   */
  public  static final class NestedTestAllTypes extends
      com.google.protobuf.GeneratedMessageLite<
          NestedTestAllTypes, NestedTestAllTypes.Builder> implements
      // @@protoc_insertion_point(message_implements:proto3_unittest.NestedTestAllTypes)
      NestedTestAllTypesOrBuilder {
    private NestedTestAllTypes() {
    }
    public static final int CHILD_FIELD_NUMBER = 1;
    private proto3_unittest.UnittestProto3.NestedTestAllTypes child_;
    /**
     * <code>.proto3_unittest.NestedTestAllTypes child = 1;</code>
     */
    @java.lang.Override
    public boolean hasChild() {
      return child_ != null;
    }
    /**
     * <code>.proto3_unittest.NestedTestAllTypes child = 1;</code>
     */
    @java.lang.Override
    public proto3_unittest.UnittestProto3.NestedTestAllTypes getChild() {
      return child_ == null ? proto3_unittest.UnittestProto3.NestedTestAllTypes.getDefaultInstance() : child_;
    }
    /**
     * <code>.proto3_unittest.NestedTestAllTypes child = 1;</code>
     */
    private void setChild(proto3_unittest.UnittestProto3.NestedTestAllTypes value) {
      value.getClass();
  child_ = value;
      
      }
    /**
     * <code>.proto3_unittest.NestedTestAllTypes child = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeChild(proto3_unittest.UnittestProto3.NestedTestAllTypes value) {
      value.getClass();
  if (child_ != null &&
          child_ != proto3_unittest.UnittestProto3.NestedTestAllTypes.getDefaultInstance()) {
        child_ =
          proto3_unittest.UnittestProto3.NestedTestAllTypes.newBuilder(child_).mergeFrom(value).buildPartial();
      } else {
        child_ = value;
      }
      
    }
    /**
     * <code>.proto3_unittest.NestedTestAllTypes child = 1;</code>
     */
    private void clearChild() {  child_ = null;
      
    }

    public static final int PAYLOAD_FIELD_NUMBER = 2;
    private proto3_unittest.UnittestProto3.TestAllTypes payload_;
    /**
     * <code>.proto3_unittest.TestAllTypes payload = 2;</code>
     */
    @java.lang.Override
    public boolean hasPayload() {
      return payload_ != null;
    }
    /**
     * <code>.proto3_unittest.TestAllTypes payload = 2;</code>
     */
    @java.lang.Override
    public proto3_unittest.UnittestProto3.TestAllTypes getPayload() {
      return payload_ == null ? proto3_unittest.UnittestProto3.TestAllTypes.getDefaultInstance() : payload_;
    }
    /**
     * <code>.proto3_unittest.TestAllTypes payload = 2;</code>
     */
    private void setPayload(proto3_unittest.UnittestProto3.TestAllTypes value) {
      value.getClass();
  payload_ = value;
      
      }
    /**
     * <code>.proto3_unittest.TestAllTypes payload = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergePayload(proto3_unittest.UnittestProto3.TestAllTypes value) {
      value.getClass();
  if (payload_ != null &&
          payload_ != proto3_unittest.UnittestProto3.TestAllTypes.getDefaultInstance()) {
        payload_ =
          proto3_unittest.UnittestProto3.TestAllTypes.newBuilder(payload_).mergeFrom(value).buildPartial();
      } else {
        payload_ = value;
      }
      
    }
    /**
     * <code>.proto3_unittest.TestAllTypes payload = 2;</code>
     */
    private void clearPayload() {  payload_ = null;
      
    }

    public static proto3_unittest.UnittestProto3.NestedTestAllTypes parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.NestedTestAllTypes parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.NestedTestAllTypes parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.NestedTestAllTypes parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.NestedTestAllTypes parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.NestedTestAllTypes parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.NestedTestAllTypes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.NestedTestAllTypes parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.NestedTestAllTypes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.NestedTestAllTypes parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.NestedTestAllTypes parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.NestedTestAllTypes parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(proto3_unittest.UnittestProto3.NestedTestAllTypes prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * This proto includes a recursively nested message.
     * </pre>
     *
     * Protobuf type {@code proto3_unittest.NestedTestAllTypes}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          proto3_unittest.UnittestProto3.NestedTestAllTypes, Builder> implements
        // @@protoc_insertion_point(builder_implements:proto3_unittest.NestedTestAllTypes)
        proto3_unittest.UnittestProto3.NestedTestAllTypesOrBuilder {
      // Construct using proto3_unittest.UnittestProto3.NestedTestAllTypes.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.proto3_unittest.NestedTestAllTypes child = 1;</code>
       */
      @java.lang.Override
      public boolean hasChild() {
        return instance.hasChild();
      }
      /**
       * <code>.proto3_unittest.NestedTestAllTypes child = 1;</code>
       */
      @java.lang.Override
      public proto3_unittest.UnittestProto3.NestedTestAllTypes getChild() {
        return instance.getChild();
      }
      /**
       * <code>.proto3_unittest.NestedTestAllTypes child = 1;</code>
       */
      public Builder setChild(proto3_unittest.UnittestProto3.NestedTestAllTypes value) {
        copyOnWrite();
        instance.setChild(value);
        return this;
        }
      /**
       * <code>.proto3_unittest.NestedTestAllTypes child = 1;</code>
       */
      public Builder setChild(
          proto3_unittest.UnittestProto3.NestedTestAllTypes.Builder builderForValue) {
        copyOnWrite();
        instance.setChild(builderForValue.build());
        return this;
      }
      /**
       * <code>.proto3_unittest.NestedTestAllTypes child = 1;</code>
       */
      public Builder mergeChild(proto3_unittest.UnittestProto3.NestedTestAllTypes value) {
        copyOnWrite();
        instance.mergeChild(value);
        return this;
      }
      /**
       * <code>.proto3_unittest.NestedTestAllTypes child = 1;</code>
       */
      public Builder clearChild() {  copyOnWrite();
        instance.clearChild();
        return this;
      }

      /**
       * <code>.proto3_unittest.TestAllTypes payload = 2;</code>
       */
      @java.lang.Override
      public boolean hasPayload() {
        return instance.hasPayload();
      }
      /**
       * <code>.proto3_unittest.TestAllTypes payload = 2;</code>
       */
      @java.lang.Override
      public proto3_unittest.UnittestProto3.TestAllTypes getPayload() {
        return instance.getPayload();
      }
      /**
       * <code>.proto3_unittest.TestAllTypes payload = 2;</code>
       */
      public Builder setPayload(proto3_unittest.UnittestProto3.TestAllTypes value) {
        copyOnWrite();
        instance.setPayload(value);
        return this;
        }
      /**
       * <code>.proto3_unittest.TestAllTypes payload = 2;</code>
       */
      public Builder setPayload(
          proto3_unittest.UnittestProto3.TestAllTypes.Builder builderForValue) {
        copyOnWrite();
        instance.setPayload(builderForValue.build());
        return this;
      }
      /**
       * <code>.proto3_unittest.TestAllTypes payload = 2;</code>
       */
      public Builder mergePayload(proto3_unittest.UnittestProto3.TestAllTypes value) {
        copyOnWrite();
        instance.mergePayload(value);
        return this;
      }
      /**
       * <code>.proto3_unittest.TestAllTypes payload = 2;</code>
       */
      public Builder clearPayload() {  copyOnWrite();
        instance.clearPayload();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto3_unittest.NestedTestAllTypes)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new proto3_unittest.UnittestProto3.NestedTestAllTypes();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "child_",
              "payload_",
            };
            java.lang.String info =
                "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001\t\u0002\t";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<proto3_unittest.UnittestProto3.NestedTestAllTypes> parser = PARSER;
          if (parser == null) {
            synchronized (proto3_unittest.UnittestProto3.NestedTestAllTypes.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<proto3_unittest.UnittestProto3.NestedTestAllTypes>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:proto3_unittest.NestedTestAllTypes)
    private static final proto3_unittest.UnittestProto3.NestedTestAllTypes DEFAULT_INSTANCE;
    static {
      NestedTestAllTypes defaultInstance = new NestedTestAllTypes();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        NestedTestAllTypes.class, defaultInstance);
    }

    public static proto3_unittest.UnittestProto3.NestedTestAllTypes getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<NestedTestAllTypes> PARSER;

    public static com.google.protobuf.Parser<NestedTestAllTypes> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ForeignMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto3_unittest.ForeignMessage)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 c = 1;</code>
     * @return The c.
     */
    int getC();
  }
  /**
   * <pre>
   * Define these after TestAllTypes to make sure the compiler can handle
   * that.
   * </pre>
   *
   * Protobuf type {@code proto3_unittest.ForeignMessage}
   */
  public  static final class ForeignMessage extends
      com.google.protobuf.GeneratedMessageLite<
          ForeignMessage, ForeignMessage.Builder> implements
      // @@protoc_insertion_point(message_implements:proto3_unittest.ForeignMessage)
      ForeignMessageOrBuilder {
    private ForeignMessage() {
    }
    public static final int C_FIELD_NUMBER = 1;
    private int c_;
    /**
     * <code>int32 c = 1;</code>
     * @return The c.
     */
    @java.lang.Override
    public int getC() {
      return c_;
    }
    /**
     * <code>int32 c = 1;</code>
     * @param value The c to set.
     */
    private void setC(int value) {
      
      c_ = value;
    }
    /**
     * <code>int32 c = 1;</code>
     */
    private void clearC() {
      
      c_ = 0;
    }

    public static proto3_unittest.UnittestProto3.ForeignMessage parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.ForeignMessage parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.ForeignMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.ForeignMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.ForeignMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.ForeignMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.ForeignMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.ForeignMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.ForeignMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.ForeignMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.ForeignMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.ForeignMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(proto3_unittest.UnittestProto3.ForeignMessage prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Define these after TestAllTypes to make sure the compiler can handle
     * that.
     * </pre>
     *
     * Protobuf type {@code proto3_unittest.ForeignMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          proto3_unittest.UnittestProto3.ForeignMessage, Builder> implements
        // @@protoc_insertion_point(builder_implements:proto3_unittest.ForeignMessage)
        proto3_unittest.UnittestProto3.ForeignMessageOrBuilder {
      // Construct using proto3_unittest.UnittestProto3.ForeignMessage.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 c = 1;</code>
       * @return The c.
       */
      @java.lang.Override
      public int getC() {
        return instance.getC();
      }
      /**
       * <code>int32 c = 1;</code>
       * @param value The c to set.
       * @return This builder for chaining.
       */
      public Builder setC(int value) {
        copyOnWrite();
        instance.setC(value);
        return this;
      }
      /**
       * <code>int32 c = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearC() {
        copyOnWrite();
        instance.clearC();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto3_unittest.ForeignMessage)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new proto3_unittest.UnittestProto3.ForeignMessage();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "c_",
            };
            java.lang.String info =
                "\u0000\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u0004";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<proto3_unittest.UnittestProto3.ForeignMessage> parser = PARSER;
          if (parser == null) {
            synchronized (proto3_unittest.UnittestProto3.ForeignMessage.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<proto3_unittest.UnittestProto3.ForeignMessage>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:proto3_unittest.ForeignMessage)
    private static final proto3_unittest.UnittestProto3.ForeignMessage DEFAULT_INSTANCE;
    static {
      ForeignMessage defaultInstance = new ForeignMessage();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ForeignMessage.class, defaultInstance);
    }

    public static proto3_unittest.UnittestProto3.ForeignMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ForeignMessage> PARSER;

    public static com.google.protobuf.Parser<ForeignMessage> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TestEmptyMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto3_unittest.TestEmptyMessage)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * <pre>
   * TestEmptyMessage is used to test behavior of unknown fields.
   * </pre>
   *
   * Protobuf type {@code proto3_unittest.TestEmptyMessage}
   */
  public  static final class TestEmptyMessage extends
      com.google.protobuf.GeneratedMessageLite<
          TestEmptyMessage, TestEmptyMessage.Builder> implements
      // @@protoc_insertion_point(message_implements:proto3_unittest.TestEmptyMessage)
      TestEmptyMessageOrBuilder {
    private TestEmptyMessage() {
    }
    public static proto3_unittest.UnittestProto3.TestEmptyMessage parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestEmptyMessage parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestEmptyMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestEmptyMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestEmptyMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestEmptyMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestEmptyMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestEmptyMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestEmptyMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestEmptyMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestEmptyMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestEmptyMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(proto3_unittest.UnittestProto3.TestEmptyMessage prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * TestEmptyMessage is used to test behavior of unknown fields.
     * </pre>
     *
     * Protobuf type {@code proto3_unittest.TestEmptyMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          proto3_unittest.UnittestProto3.TestEmptyMessage, Builder> implements
        // @@protoc_insertion_point(builder_implements:proto3_unittest.TestEmptyMessage)
        proto3_unittest.UnittestProto3.TestEmptyMessageOrBuilder {
      // Construct using proto3_unittest.UnittestProto3.TestEmptyMessage.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:proto3_unittest.TestEmptyMessage)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new proto3_unittest.UnittestProto3.TestEmptyMessage();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = null;java.lang.String info =
                "\u0000\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<proto3_unittest.UnittestProto3.TestEmptyMessage> parser = PARSER;
          if (parser == null) {
            synchronized (proto3_unittest.UnittestProto3.TestEmptyMessage.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<proto3_unittest.UnittestProto3.TestEmptyMessage>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:proto3_unittest.TestEmptyMessage)
    private static final proto3_unittest.UnittestProto3.TestEmptyMessage DEFAULT_INSTANCE;
    static {
      TestEmptyMessage defaultInstance = new TestEmptyMessage();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TestEmptyMessage.class, defaultInstance);
    }

    public static proto3_unittest.UnittestProto3.TestEmptyMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TestEmptyMessage> PARSER;

    public static com.google.protobuf.Parser<TestEmptyMessage> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TestMessageWithDummyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto3_unittest.TestMessageWithDummy)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * This field is only here for triggering copy-on-write; it's not intended to
     * be serialized.
     * </pre>
     *
     * <code>bool dummy = 536870911;</code>
     * @return The dummy.
     */
    boolean getDummy();
  }
  /**
   * <pre>
   * TestMessageWithDummy is also used to test behavior of unknown fields.
   * </pre>
   *
   * Protobuf type {@code proto3_unittest.TestMessageWithDummy}
   */
  public  static final class TestMessageWithDummy extends
      com.google.protobuf.GeneratedMessageLite<
          TestMessageWithDummy, TestMessageWithDummy.Builder> implements
      // @@protoc_insertion_point(message_implements:proto3_unittest.TestMessageWithDummy)
      TestMessageWithDummyOrBuilder {
    private TestMessageWithDummy() {
    }
    public static final int DUMMY_FIELD_NUMBER = 536870911;
    private boolean dummy_;
    /**
     * <pre>
     * This field is only here for triggering copy-on-write; it's not intended to
     * be serialized.
     * </pre>
     *
     * <code>bool dummy = 536870911;</code>
     * @return The dummy.
     */
    @java.lang.Override
    public boolean getDummy() {
      return dummy_;
    }
    /**
     * <pre>
     * This field is only here for triggering copy-on-write; it's not intended to
     * be serialized.
     * </pre>
     *
     * <code>bool dummy = 536870911;</code>
     * @param value The dummy to set.
     */
    private void setDummy(boolean value) {
      
      dummy_ = value;
    }
    /**
     * <pre>
     * This field is only here for triggering copy-on-write; it's not intended to
     * be serialized.
     * </pre>
     *
     * <code>bool dummy = 536870911;</code>
     */
    private void clearDummy() {
      
      dummy_ = false;
    }

    public static proto3_unittest.UnittestProto3.TestMessageWithDummy parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestMessageWithDummy parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestMessageWithDummy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestMessageWithDummy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestMessageWithDummy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestMessageWithDummy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestMessageWithDummy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestMessageWithDummy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestMessageWithDummy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestMessageWithDummy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestMessageWithDummy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestMessageWithDummy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(proto3_unittest.UnittestProto3.TestMessageWithDummy prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * TestMessageWithDummy is also used to test behavior of unknown fields.
     * </pre>
     *
     * Protobuf type {@code proto3_unittest.TestMessageWithDummy}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          proto3_unittest.UnittestProto3.TestMessageWithDummy, Builder> implements
        // @@protoc_insertion_point(builder_implements:proto3_unittest.TestMessageWithDummy)
        proto3_unittest.UnittestProto3.TestMessageWithDummyOrBuilder {
      // Construct using proto3_unittest.UnittestProto3.TestMessageWithDummy.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * This field is only here for triggering copy-on-write; it's not intended to
       * be serialized.
       * </pre>
       *
       * <code>bool dummy = 536870911;</code>
       * @return The dummy.
       */
      @java.lang.Override
      public boolean getDummy() {
        return instance.getDummy();
      }
      /**
       * <pre>
       * This field is only here for triggering copy-on-write; it's not intended to
       * be serialized.
       * </pre>
       *
       * <code>bool dummy = 536870911;</code>
       * @param value The dummy to set.
       * @return This builder for chaining.
       */
      public Builder setDummy(boolean value) {
        copyOnWrite();
        instance.setDummy(value);
        return this;
      }
      /**
       * <pre>
       * This field is only here for triggering copy-on-write; it's not intended to
       * be serialized.
       * </pre>
       *
       * <code>bool dummy = 536870911;</code>
       * @return This builder for chaining.
       */
      public Builder clearDummy() {
        copyOnWrite();
        instance.clearDummy();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto3_unittest.TestMessageWithDummy)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new proto3_unittest.UnittestProto3.TestMessageWithDummy();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "dummy_",
            };
            java.lang.String info =
                "\u0000\u0001\u0000\u0000\uffff\uffff\u0007\uffff\uffff\u0007\u0001\u0000\u0000\u0000" +
                "\uffff\uffff\u0007\u0007";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<proto3_unittest.UnittestProto3.TestMessageWithDummy> parser = PARSER;
          if (parser == null) {
            synchronized (proto3_unittest.UnittestProto3.TestMessageWithDummy.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<proto3_unittest.UnittestProto3.TestMessageWithDummy>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:proto3_unittest.TestMessageWithDummy)
    private static final proto3_unittest.UnittestProto3.TestMessageWithDummy DEFAULT_INSTANCE;
    static {
      TestMessageWithDummy defaultInstance = new TestMessageWithDummy();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TestMessageWithDummy.class, defaultInstance);
    }

    public static proto3_unittest.UnittestProto3.TestMessageWithDummy getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TestMessageWithDummy> PARSER;

    public static com.google.protobuf.Parser<TestMessageWithDummy> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TestOneof2OrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto3_unittest.TestOneof2)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
     * @return Whether the fooEnum field is set.
     */
    boolean hasFooEnum();
    /**
     * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
     * @return The enum numeric value on the wire for fooEnum.
     */
    int getFooEnumValue();
    /**
     * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
     * @return The fooEnum.
     */
    proto3_unittest.UnittestProto3.TestOneof2.NestedEnum getFooEnum();

    public proto3_unittest.UnittestProto3.TestOneof2.FooCase getFooCase();
  }
  /**
   * <pre>
   * Same layout as TestOneof2 in unittest.proto to test unknown enum value
   * parsing behavior in oneof.
   * </pre>
   *
   * Protobuf type {@code proto3_unittest.TestOneof2}
   */
  public  static final class TestOneof2 extends
      com.google.protobuf.GeneratedMessageLite<
          TestOneof2, TestOneof2.Builder> implements
      // @@protoc_insertion_point(message_implements:proto3_unittest.TestOneof2)
      TestOneof2OrBuilder {
    private TestOneof2() {
    }
    /**
     * Protobuf enum {@code proto3_unittest.TestOneof2.NestedEnum}
     */
    public enum NestedEnum
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNKNOWN = 0;</code>
       */
      UNKNOWN(0),
      /**
       * <code>FOO = 1;</code>
       */
      FOO(1),
      /**
       * <code>BAR = 2;</code>
       */
      BAR(2),
      /**
       * <code>BAZ = 3;</code>
       */
      BAZ(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>UNKNOWN = 0;</code>
       */
      public static final int UNKNOWN_VALUE = 0;
      /**
       * <code>FOO = 1;</code>
       */
      public static final int FOO_VALUE = 1;
      /**
       * <code>BAR = 2;</code>
       */
      public static final int BAR_VALUE = 2;
      /**
       * <code>BAZ = 3;</code>
       */
      public static final int BAZ_VALUE = 3;


      @java.lang.Override
      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static NestedEnum valueOf(int value) {
        return forNumber(value);
      }

      public static NestedEnum forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN;
          case 1: return FOO;
          case 2: return BAR;
          case 3: return BAZ;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<NestedEnum>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          NestedEnum> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<NestedEnum>() {
              @java.lang.Override
              public NestedEnum findValueByNumber(int number) {
                return NestedEnum.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return NestedEnumVerifier.INSTANCE;
      }

      private static final class NestedEnumVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new NestedEnumVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return NestedEnum.forNumber(number) != null;
              }
            };

      private final int value;

      private NestedEnum(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:proto3_unittest.TestOneof2.NestedEnum)
    }

    private int fooCase_ = 0;
    private java.lang.Object foo_;
    public enum FooCase {
      FOO_ENUM(6),
      FOO_NOT_SET(0);
      private final int value;
      private FooCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FooCase valueOf(int value) {
        return forNumber(value);
      }

      public static FooCase forNumber(int value) {
        switch (value) {
          case 6: return FOO_ENUM;
          case 0: return FOO_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public FooCase
    getFooCase() {
      return FooCase.forNumber(
          fooCase_);
    }

    private void clearFoo() {
      fooCase_ = 0;
      foo_ = null;
    }

    public static final int FOO_ENUM_FIELD_NUMBER = 6;
    /**
     * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
     * @return Whether the fooEnum field is set.
     */
    @java.lang.Override
    public boolean hasFooEnum() {
      return fooCase_ == 6;
    }
    /**
     * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
     * @return The enum numeric value on the wire for fooEnum.
     */
    @java.lang.Override
    public int getFooEnumValue() {
      if (fooCase_ == 6) {
        return (java.lang.Integer) foo_;
      }
      return 0;
    }
    /**
     * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
     * @return The fooEnum.
     */
    @java.lang.Override
    public proto3_unittest.UnittestProto3.TestOneof2.NestedEnum getFooEnum() {
      if (fooCase_ == 6) {
        proto3_unittest.UnittestProto3.TestOneof2.NestedEnum result = proto3_unittest.UnittestProto3.TestOneof2.NestedEnum.forNumber((java.lang.Integer) foo_);
        return result == null ? proto3_unittest.UnittestProto3.TestOneof2.NestedEnum.UNRECOGNIZED : result;
      }
      return proto3_unittest.UnittestProto3.TestOneof2.NestedEnum.UNKNOWN;
    }
    /**
     * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
     * @param value The enum numeric value on the wire for fooEnum to set.
     */
    private void setFooEnumValue(int value) {
      fooCase_ = 6;
      foo_ = value;
    }
    /**
     * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
     * @param value The fooEnum to set.
     */
    private void setFooEnum(proto3_unittest.UnittestProto3.TestOneof2.NestedEnum value) {
      foo_ = value.getNumber();
      fooCase_ = 6;
    }
    /**
     * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
     */
    private void clearFooEnum() {
      if (fooCase_ == 6) {
        fooCase_ = 0;
        foo_ = null;
      }
    }

    public static proto3_unittest.UnittestProto3.TestOneof2 parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestOneof2 parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestOneof2 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestOneof2 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestOneof2 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static proto3_unittest.UnittestProto3.TestOneof2 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestOneof2 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestOneof2 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestOneof2 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestOneof2 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static proto3_unittest.UnittestProto3.TestOneof2 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static proto3_unittest.UnittestProto3.TestOneof2 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(proto3_unittest.UnittestProto3.TestOneof2 prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Same layout as TestOneof2 in unittest.proto to test unknown enum value
     * parsing behavior in oneof.
     * </pre>
     *
     * Protobuf type {@code proto3_unittest.TestOneof2}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          proto3_unittest.UnittestProto3.TestOneof2, Builder> implements
        // @@protoc_insertion_point(builder_implements:proto3_unittest.TestOneof2)
        proto3_unittest.UnittestProto3.TestOneof2OrBuilder {
      // Construct using proto3_unittest.UnittestProto3.TestOneof2.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @java.lang.Override
      public FooCase
          getFooCase() {
        return instance.getFooCase();
      }

      public Builder clearFoo() {
        copyOnWrite();
        instance.clearFoo();
        return this;
      }


      /**
       * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
       * @return Whether the fooEnum field is set.
       */
      @java.lang.Override
      public boolean hasFooEnum() {
        return instance.hasFooEnum();
      }
      /**
       * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
       * @return The enum numeric value on the wire for fooEnum.
       */
      @java.lang.Override
      public int getFooEnumValue() {
        return instance.getFooEnumValue();
      }
      /**
       * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
       * @param value The enum numeric value on the wire for fooEnum to set.
       * @return This builder for chaining.
       */
      public Builder setFooEnumValue(int value) {
        copyOnWrite();
        instance.setFooEnumValue(value);
        return this;
      }
      /**
       * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
       * @return The fooEnum.
       */
      @java.lang.Override
      public proto3_unittest.UnittestProto3.TestOneof2.NestedEnum getFooEnum() {
        return instance.getFooEnum();
      }
      /**
       * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
       * @param value The fooEnum to set.
       * @return This builder for chaining.
       */
      public Builder setFooEnum(proto3_unittest.UnittestProto3.TestOneof2.NestedEnum value) {
        copyOnWrite();
        instance.setFooEnum(value);
        return this;
      }
      /**
       * <code>.proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearFooEnum() {
        copyOnWrite();
        instance.clearFooEnum();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto3_unittest.TestOneof2)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new proto3_unittest.UnittestProto3.TestOneof2();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "foo_",
              "fooCase_",
            };
            java.lang.String info =
                "\u0000\u0001\u0001\u0000\u0006\u0006\u0001\u0000\u0000\u0000\u0006?\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<proto3_unittest.UnittestProto3.TestOneof2> parser = PARSER;
          if (parser == null) {
            synchronized (proto3_unittest.UnittestProto3.TestOneof2.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<proto3_unittest.UnittestProto3.TestOneof2>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:proto3_unittest.TestOneof2)
    private static final proto3_unittest.UnittestProto3.TestOneof2 DEFAULT_INSTANCE;
    static {
      TestOneof2 defaultInstance = new TestOneof2();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TestOneof2.class, defaultInstance);
    }

    public static proto3_unittest.UnittestProto3.TestOneof2 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TestOneof2> PARSER;

    public static com.google.protobuf.Parser<TestOneof2> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
