// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/map_lite_unittest.proto

package protobuf_unittest;

public final class MapLiteUnittest {
  private MapLiteUnittest() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * Protobuf enum {@code protobuf_unittest.Proto2MapEnumLite}
   */
  public enum Proto2MapEnumLite
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>PROTO2_MAP_ENUM_FOO_LITE = 0;</code>
     */
    PROTO2_MAP_ENUM_FOO_LITE(0),
    /**
     * <code>PROTO2_MAP_ENUM_BAR_LITE = 1;</code>
     */
    PROTO2_MAP_ENUM_BAR_LITE(1),
    /**
     * <code>PROTO2_MAP_ENUM_BAZ_LITE = 2;</code>
     */
    PROTO2_MAP_ENUM_BAZ_LITE(2),
    ;

    /**
     * <code>PROTO2_MAP_ENUM_FOO_LITE = 0;</code>
     */
    public static final int PROTO2_MAP_ENUM_FOO_LITE_VALUE = 0;
    /**
     * <code>PROTO2_MAP_ENUM_BAR_LITE = 1;</code>
     */
    public static final int PROTO2_MAP_ENUM_BAR_LITE_VALUE = 1;
    /**
     * <code>PROTO2_MAP_ENUM_BAZ_LITE = 2;</code>
     */
    public static final int PROTO2_MAP_ENUM_BAZ_LITE_VALUE = 2;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Proto2MapEnumLite valueOf(int value) {
      return forNumber(value);
    }

    public static Proto2MapEnumLite forNumber(int value) {
      switch (value) {
        case 0: return PROTO2_MAP_ENUM_FOO_LITE;
        case 1: return PROTO2_MAP_ENUM_BAR_LITE;
        case 2: return PROTO2_MAP_ENUM_BAZ_LITE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Proto2MapEnumLite>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Proto2MapEnumLite> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Proto2MapEnumLite>() {
            @java.lang.Override
            public Proto2MapEnumLite findValueByNumber(int number) {
              return Proto2MapEnumLite.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return Proto2MapEnumLiteVerifier.INSTANCE;
    }

    private static final class Proto2MapEnumLiteVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new Proto2MapEnumLiteVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return Proto2MapEnumLite.forNumber(number) != null;
            }
          };

    private final int value;

    private Proto2MapEnumLite(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:protobuf_unittest.Proto2MapEnumLite)
  }

  /**
   * Protobuf enum {@code protobuf_unittest.Proto2MapEnumPlusExtraLite}
   */
  public enum Proto2MapEnumPlusExtraLite
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>E_PROTO2_MAP_ENUM_FOO_LITE = 0;</code>
     */
    E_PROTO2_MAP_ENUM_FOO_LITE(0),
    /**
     * <code>E_PROTO2_MAP_ENUM_BAR_LITE = 1;</code>
     */
    E_PROTO2_MAP_ENUM_BAR_LITE(1),
    /**
     * <code>E_PROTO2_MAP_ENUM_BAZ_LITE = 2;</code>
     */
    E_PROTO2_MAP_ENUM_BAZ_LITE(2),
    /**
     * <code>E_PROTO2_MAP_ENUM_EXTRA_LITE = 3;</code>
     */
    E_PROTO2_MAP_ENUM_EXTRA_LITE(3),
    ;

    /**
     * <code>E_PROTO2_MAP_ENUM_FOO_LITE = 0;</code>
     */
    public static final int E_PROTO2_MAP_ENUM_FOO_LITE_VALUE = 0;
    /**
     * <code>E_PROTO2_MAP_ENUM_BAR_LITE = 1;</code>
     */
    public static final int E_PROTO2_MAP_ENUM_BAR_LITE_VALUE = 1;
    /**
     * <code>E_PROTO2_MAP_ENUM_BAZ_LITE = 2;</code>
     */
    public static final int E_PROTO2_MAP_ENUM_BAZ_LITE_VALUE = 2;
    /**
     * <code>E_PROTO2_MAP_ENUM_EXTRA_LITE = 3;</code>
     */
    public static final int E_PROTO2_MAP_ENUM_EXTRA_LITE_VALUE = 3;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Proto2MapEnumPlusExtraLite valueOf(int value) {
      return forNumber(value);
    }

    public static Proto2MapEnumPlusExtraLite forNumber(int value) {
      switch (value) {
        case 0: return E_PROTO2_MAP_ENUM_FOO_LITE;
        case 1: return E_PROTO2_MAP_ENUM_BAR_LITE;
        case 2: return E_PROTO2_MAP_ENUM_BAZ_LITE;
        case 3: return E_PROTO2_MAP_ENUM_EXTRA_LITE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Proto2MapEnumPlusExtraLite>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Proto2MapEnumPlusExtraLite> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Proto2MapEnumPlusExtraLite>() {
            @java.lang.Override
            public Proto2MapEnumPlusExtraLite findValueByNumber(int number) {
              return Proto2MapEnumPlusExtraLite.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return Proto2MapEnumPlusExtraLiteVerifier.INSTANCE;
    }

    private static final class Proto2MapEnumPlusExtraLiteVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new Proto2MapEnumPlusExtraLiteVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return Proto2MapEnumPlusExtraLite.forNumber(number) != null;
            }
          };

    private final int value;

    private Proto2MapEnumPlusExtraLite(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:protobuf_unittest.Proto2MapEnumPlusExtraLite)
  }

  /**
   * Protobuf enum {@code protobuf_unittest.MapEnumLite}
   */
  public enum MapEnumLite
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>MAP_ENUM_FOO_LITE = 0;</code>
     */
    MAP_ENUM_FOO_LITE(0),
    /**
     * <code>MAP_ENUM_BAR_LITE = 1;</code>
     */
    MAP_ENUM_BAR_LITE(1),
    /**
     * <code>MAP_ENUM_BAZ_LITE = 2;</code>
     */
    MAP_ENUM_BAZ_LITE(2),
    ;

    /**
     * <code>MAP_ENUM_FOO_LITE = 0;</code>
     */
    public static final int MAP_ENUM_FOO_LITE_VALUE = 0;
    /**
     * <code>MAP_ENUM_BAR_LITE = 1;</code>
     */
    public static final int MAP_ENUM_BAR_LITE_VALUE = 1;
    /**
     * <code>MAP_ENUM_BAZ_LITE = 2;</code>
     */
    public static final int MAP_ENUM_BAZ_LITE_VALUE = 2;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MapEnumLite valueOf(int value) {
      return forNumber(value);
    }

    public static MapEnumLite forNumber(int value) {
      switch (value) {
        case 0: return MAP_ENUM_FOO_LITE;
        case 1: return MAP_ENUM_BAR_LITE;
        case 2: return MAP_ENUM_BAZ_LITE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MapEnumLite>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        MapEnumLite> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MapEnumLite>() {
            @java.lang.Override
            public MapEnumLite findValueByNumber(int number) {
              return MapEnumLite.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return MapEnumLiteVerifier.INSTANCE;
    }

    private static final class MapEnumLiteVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new MapEnumLiteVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return MapEnumLite.forNumber(number) != null;
            }
          };

    private final int value;

    private MapEnumLite(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:protobuf_unittest.MapEnumLite)
  }

  public interface TestMapLiteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protobuf_unittest.TestMapLite)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */
    int getMapInt32Int32Count();
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */
    boolean containsMapInt32Int32(
        int key);
    /**
     * Use {@link #getMapInt32Int32Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapInt32Int32();
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapInt32Int32Map();
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */

    int getMapInt32Int32OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */

    int getMapInt32Int32OrThrow(
        int key);

    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */
    int getMapInt64Int64Count();
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */
    boolean containsMapInt64Int64(
        long key);
    /**
     * Use {@link #getMapInt64Int64Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapInt64Int64();
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapInt64Int64Map();
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */

    long getMapInt64Int64OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */

    long getMapInt64Int64OrThrow(
        long key);

    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */
    int getMapUint32Uint32Count();
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */
    boolean containsMapUint32Uint32(
        int key);
    /**
     * Use {@link #getMapUint32Uint32Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapUint32Uint32();
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapUint32Uint32Map();
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */

    int getMapUint32Uint32OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */

    int getMapUint32Uint32OrThrow(
        int key);

    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */
    int getMapUint64Uint64Count();
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */
    boolean containsMapUint64Uint64(
        long key);
    /**
     * Use {@link #getMapUint64Uint64Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapUint64Uint64();
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapUint64Uint64Map();
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */

    long getMapUint64Uint64OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */

    long getMapUint64Uint64OrThrow(
        long key);

    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */
    int getMapSint32Sint32Count();
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */
    boolean containsMapSint32Sint32(
        int key);
    /**
     * Use {@link #getMapSint32Sint32Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapSint32Sint32();
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapSint32Sint32Map();
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */

    int getMapSint32Sint32OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */

    int getMapSint32Sint32OrThrow(
        int key);

    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */
    int getMapSint64Sint64Count();
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */
    boolean containsMapSint64Sint64(
        long key);
    /**
     * Use {@link #getMapSint64Sint64Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapSint64Sint64();
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapSint64Sint64Map();
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */

    long getMapSint64Sint64OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */

    long getMapSint64Sint64OrThrow(
        long key);

    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */
    int getMapFixed32Fixed32Count();
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */
    boolean containsMapFixed32Fixed32(
        int key);
    /**
     * Use {@link #getMapFixed32Fixed32Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapFixed32Fixed32();
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapFixed32Fixed32Map();
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */

    int getMapFixed32Fixed32OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */

    int getMapFixed32Fixed32OrThrow(
        int key);

    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */
    int getMapFixed64Fixed64Count();
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */
    boolean containsMapFixed64Fixed64(
        long key);
    /**
     * Use {@link #getMapFixed64Fixed64Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapFixed64Fixed64();
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapFixed64Fixed64Map();
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */

    long getMapFixed64Fixed64OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */

    long getMapFixed64Fixed64OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */
    int getMapSfixed32Sfixed32Count();
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */
    boolean containsMapSfixed32Sfixed32(
        int key);
    /**
     * Use {@link #getMapSfixed32Sfixed32Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapSfixed32Sfixed32();
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapSfixed32Sfixed32Map();
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */

    int getMapSfixed32Sfixed32OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */

    int getMapSfixed32Sfixed32OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */
    int getMapSfixed64Sfixed64Count();
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */
    boolean containsMapSfixed64Sfixed64(
        long key);
    /**
     * Use {@link #getMapSfixed64Sfixed64Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapSfixed64Sfixed64();
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapSfixed64Sfixed64Map();
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */

    long getMapSfixed64Sfixed64OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */

    long getMapSfixed64Sfixed64OrThrow(
        long key);

    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */
    int getMapInt32FloatCount();
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */
    boolean containsMapInt32Float(
        int key);
    /**
     * Use {@link #getMapInt32FloatMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Float>
    getMapInt32Float();
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Float>
    getMapInt32FloatMap();
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */

    float getMapInt32FloatOrDefault(
        int key,
        float defaultValue);
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */

    float getMapInt32FloatOrThrow(
        int key);

    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */
    int getMapInt32DoubleCount();
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */
    boolean containsMapInt32Double(
        int key);
    /**
     * Use {@link #getMapInt32DoubleMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Double>
    getMapInt32Double();
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Double>
    getMapInt32DoubleMap();
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */

    double getMapInt32DoubleOrDefault(
        int key,
        double defaultValue);
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */

    double getMapInt32DoubleOrThrow(
        int key);

    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */
    int getMapBoolBoolCount();
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */
    boolean containsMapBoolBool(
        boolean key);
    /**
     * Use {@link #getMapBoolBoolMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, java.lang.Boolean>
    getMapBoolBool();
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */
    java.util.Map<java.lang.Boolean, java.lang.Boolean>
    getMapBoolBoolMap();
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */

    boolean getMapBoolBoolOrDefault(
        boolean key,
        boolean defaultValue);
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */

    boolean getMapBoolBoolOrThrow(
        boolean key);

    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */
    int getMapStringStringCount();
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */
    boolean containsMapStringString(
        java.lang.String key);
    /**
     * Use {@link #getMapStringStringMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getMapStringString();
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getMapStringStringMap();
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */

    java.lang.String getMapStringStringOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */

    java.lang.String getMapStringStringOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */
    int getMapInt32BytesCount();
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */
    boolean containsMapInt32Bytes(
        int key);
    /**
     * Use {@link #getMapInt32BytesMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getMapInt32Bytes();
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getMapInt32BytesMap();
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */

    com.google.protobuf.ByteString getMapInt32BytesOrDefault(
        int key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */

    com.google.protobuf.ByteString getMapInt32BytesOrThrow(
        int key);

    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    int getMapInt32EnumCount();
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    boolean containsMapInt32Enum(
        int key);
    /**
     * Use {@link #getMapInt32EnumMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite>
    getMapInt32Enum();
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite>
    getMapInt32EnumMap();
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    protobuf_unittest.MapLiteUnittest.MapEnumLite getMapInt32EnumOrDefault(
        int key,
        protobuf_unittest.MapLiteUnittest.MapEnumLite defaultValue);
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    protobuf_unittest.MapLiteUnittest.MapEnumLite getMapInt32EnumOrThrow(
        int key);

    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
     */
    int getMapInt32ForeignMessageCount();
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
     */
    boolean containsMapInt32ForeignMessage(
        int key);
    /**
     * Use {@link #getMapInt32ForeignMessageMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite>
    getMapInt32ForeignMessage();
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite>
    getMapInt32ForeignMessageMap();
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
     */

    com.google.protobuf.UnittestLite.ForeignMessageLite getMapInt32ForeignMessageOrDefault(
        int key,
        com.google.protobuf.UnittestLite.ForeignMessageLite defaultValue);
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
     */

    com.google.protobuf.UnittestLite.ForeignMessageLite getMapInt32ForeignMessageOrThrow(
        int key);

    /**
     * <code>map&lt;int32, int32&gt; teboring = 18;</code>
     */
    int getTeboringCount();
    /**
     * <code>map&lt;int32, int32&gt; teboring = 18;</code>
     */
    boolean containsTeboring(
        int key);
    /**
     * Use {@link #getTeboringMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getTeboring();
    /**
     * <code>map&lt;int32, int32&gt; teboring = 18;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getTeboringMap();
    /**
     * <code>map&lt;int32, int32&gt; teboring = 18;</code>
     */

    int getTeboringOrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;int32, int32&gt; teboring = 18;</code>
     */

    int getTeboringOrThrow(
        int key);
  }
  /**
   * Protobuf type {@code protobuf_unittest.TestMapLite}
   */
  public  static final class TestMapLite extends
      com.google.protobuf.GeneratedMessageLite<
          TestMapLite, TestMapLite.Builder> implements
      // @@protoc_insertion_point(message_implements:protobuf_unittest.TestMapLite)
      TestMapLiteOrBuilder {
    private TestMapLite() {
    }
    public static final int MAP_INT32_INT32_FIELD_NUMBER = 1;
    private static final class MapInt32Int32DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> mapInt32Int32_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMapInt32Int32() {
      return mapInt32Int32_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableMapInt32Int32() {
      if (!mapInt32Int32_.isMutable()) {
        mapInt32Int32_ = mapInt32Int32_.mutableCopy();
      }
      return mapInt32Int32_;
    }
    @java.lang.Override

    public int getMapInt32Int32Count() {
      return internalGetMapInt32Int32().size();
    }
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */
    @java.lang.Override

    public boolean containsMapInt32Int32(
        int key) {
      
      return internalGetMapInt32Int32().containsKey(key);
    }
    /**
     * Use {@link #getMapInt32Int32Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapInt32Int32() {
      return getMapInt32Int32Map();
    }
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapInt32Int32Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapInt32Int32());
    }
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */
    @java.lang.Override

    public int getMapInt32Int32OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapInt32Int32();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */
    @java.lang.Override

    public int getMapInt32Int32OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapInt32Int32();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableMapInt32Int32Map() {
      return internalGetMutableMapInt32Int32();
    }

    public static final int MAP_INT64_INT64_FIELD_NUMBER = 2;
    private static final class MapInt64Int64DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> mapInt64Int64_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMapInt64Int64() {
      return mapInt64Int64_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableMapInt64Int64() {
      if (!mapInt64Int64_.isMutable()) {
        mapInt64Int64_ = mapInt64Int64_.mutableCopy();
      }
      return mapInt64Int64_;
    }
    @java.lang.Override

    public int getMapInt64Int64Count() {
      return internalGetMapInt64Int64().size();
    }
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */
    @java.lang.Override

    public boolean containsMapInt64Int64(
        long key) {
      
      return internalGetMapInt64Int64().containsKey(key);
    }
    /**
     * Use {@link #getMapInt64Int64Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getMapInt64Int64() {
      return getMapInt64Int64Map();
    }
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getMapInt64Int64Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapInt64Int64());
    }
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */
    @java.lang.Override

    public long getMapInt64Int64OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapInt64Int64();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */
    @java.lang.Override

    public long getMapInt64Int64OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapInt64Int64();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableMapInt64Int64Map() {
      return internalGetMutableMapInt64Int64();
    }

    public static final int MAP_UINT32_UINT32_FIELD_NUMBER = 3;
    private static final class MapUint32Uint32DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> mapUint32Uint32_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMapUint32Uint32() {
      return mapUint32Uint32_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableMapUint32Uint32() {
      if (!mapUint32Uint32_.isMutable()) {
        mapUint32Uint32_ = mapUint32Uint32_.mutableCopy();
      }
      return mapUint32Uint32_;
    }
    @java.lang.Override

    public int getMapUint32Uint32Count() {
      return internalGetMapUint32Uint32().size();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */
    @java.lang.Override

    public boolean containsMapUint32Uint32(
        int key) {
      
      return internalGetMapUint32Uint32().containsKey(key);
    }
    /**
     * Use {@link #getMapUint32Uint32Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapUint32Uint32() {
      return getMapUint32Uint32Map();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapUint32Uint32Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapUint32Uint32());
    }
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */
    @java.lang.Override

    public int getMapUint32Uint32OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapUint32Uint32();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */
    @java.lang.Override

    public int getMapUint32Uint32OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapUint32Uint32();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableMapUint32Uint32Map() {
      return internalGetMutableMapUint32Uint32();
    }

    public static final int MAP_UINT64_UINT64_FIELD_NUMBER = 4;
    private static final class MapUint64Uint64DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> mapUint64Uint64_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMapUint64Uint64() {
      return mapUint64Uint64_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableMapUint64Uint64() {
      if (!mapUint64Uint64_.isMutable()) {
        mapUint64Uint64_ = mapUint64Uint64_.mutableCopy();
      }
      return mapUint64Uint64_;
    }
    @java.lang.Override

    public int getMapUint64Uint64Count() {
      return internalGetMapUint64Uint64().size();
    }
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */
    @java.lang.Override

    public boolean containsMapUint64Uint64(
        long key) {
      
      return internalGetMapUint64Uint64().containsKey(key);
    }
    /**
     * Use {@link #getMapUint64Uint64Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getMapUint64Uint64() {
      return getMapUint64Uint64Map();
    }
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getMapUint64Uint64Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapUint64Uint64());
    }
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */
    @java.lang.Override

    public long getMapUint64Uint64OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapUint64Uint64();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */
    @java.lang.Override

    public long getMapUint64Uint64OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapUint64Uint64();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableMapUint64Uint64Map() {
      return internalGetMutableMapUint64Uint64();
    }

    public static final int MAP_SINT32_SINT32_FIELD_NUMBER = 5;
    private static final class MapSint32Sint32DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> mapSint32Sint32_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMapSint32Sint32() {
      return mapSint32Sint32_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableMapSint32Sint32() {
      if (!mapSint32Sint32_.isMutable()) {
        mapSint32Sint32_ = mapSint32Sint32_.mutableCopy();
      }
      return mapSint32Sint32_;
    }
    @java.lang.Override

    public int getMapSint32Sint32Count() {
      return internalGetMapSint32Sint32().size();
    }
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */
    @java.lang.Override

    public boolean containsMapSint32Sint32(
        int key) {
      
      return internalGetMapSint32Sint32().containsKey(key);
    }
    /**
     * Use {@link #getMapSint32Sint32Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapSint32Sint32() {
      return getMapSint32Sint32Map();
    }
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapSint32Sint32Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapSint32Sint32());
    }
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */
    @java.lang.Override

    public int getMapSint32Sint32OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapSint32Sint32();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */
    @java.lang.Override

    public int getMapSint32Sint32OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapSint32Sint32();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableMapSint32Sint32Map() {
      return internalGetMutableMapSint32Sint32();
    }

    public static final int MAP_SINT64_SINT64_FIELD_NUMBER = 6;
    private static final class MapSint64Sint64DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> mapSint64Sint64_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMapSint64Sint64() {
      return mapSint64Sint64_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableMapSint64Sint64() {
      if (!mapSint64Sint64_.isMutable()) {
        mapSint64Sint64_ = mapSint64Sint64_.mutableCopy();
      }
      return mapSint64Sint64_;
    }
    @java.lang.Override

    public int getMapSint64Sint64Count() {
      return internalGetMapSint64Sint64().size();
    }
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */
    @java.lang.Override

    public boolean containsMapSint64Sint64(
        long key) {
      
      return internalGetMapSint64Sint64().containsKey(key);
    }
    /**
     * Use {@link #getMapSint64Sint64Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getMapSint64Sint64() {
      return getMapSint64Sint64Map();
    }
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getMapSint64Sint64Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapSint64Sint64());
    }
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */
    @java.lang.Override

    public long getMapSint64Sint64OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapSint64Sint64();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */
    @java.lang.Override

    public long getMapSint64Sint64OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapSint64Sint64();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableMapSint64Sint64Map() {
      return internalGetMutableMapSint64Sint64();
    }

    public static final int MAP_FIXED32_FIXED32_FIELD_NUMBER = 7;
    private static final class MapFixed32Fixed32DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> mapFixed32Fixed32_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMapFixed32Fixed32() {
      return mapFixed32Fixed32_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableMapFixed32Fixed32() {
      if (!mapFixed32Fixed32_.isMutable()) {
        mapFixed32Fixed32_ = mapFixed32Fixed32_.mutableCopy();
      }
      return mapFixed32Fixed32_;
    }
    @java.lang.Override

    public int getMapFixed32Fixed32Count() {
      return internalGetMapFixed32Fixed32().size();
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */
    @java.lang.Override

    public boolean containsMapFixed32Fixed32(
        int key) {
      
      return internalGetMapFixed32Fixed32().containsKey(key);
    }
    /**
     * Use {@link #getMapFixed32Fixed32Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapFixed32Fixed32() {
      return getMapFixed32Fixed32Map();
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapFixed32Fixed32Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapFixed32Fixed32());
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */
    @java.lang.Override

    public int getMapFixed32Fixed32OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapFixed32Fixed32();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */
    @java.lang.Override

    public int getMapFixed32Fixed32OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapFixed32Fixed32();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableMapFixed32Fixed32Map() {
      return internalGetMutableMapFixed32Fixed32();
    }

    public static final int MAP_FIXED64_FIXED64_FIELD_NUMBER = 8;
    private static final class MapFixed64Fixed64DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> mapFixed64Fixed64_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMapFixed64Fixed64() {
      return mapFixed64Fixed64_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableMapFixed64Fixed64() {
      if (!mapFixed64Fixed64_.isMutable()) {
        mapFixed64Fixed64_ = mapFixed64Fixed64_.mutableCopy();
      }
      return mapFixed64Fixed64_;
    }
    @java.lang.Override

    public int getMapFixed64Fixed64Count() {
      return internalGetMapFixed64Fixed64().size();
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */
    @java.lang.Override

    public boolean containsMapFixed64Fixed64(
        long key) {
      
      return internalGetMapFixed64Fixed64().containsKey(key);
    }
    /**
     * Use {@link #getMapFixed64Fixed64Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getMapFixed64Fixed64() {
      return getMapFixed64Fixed64Map();
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getMapFixed64Fixed64Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapFixed64Fixed64());
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */
    @java.lang.Override

    public long getMapFixed64Fixed64OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapFixed64Fixed64();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */
    @java.lang.Override

    public long getMapFixed64Fixed64OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapFixed64Fixed64();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableMapFixed64Fixed64Map() {
      return internalGetMutableMapFixed64Fixed64();
    }

    public static final int MAP_SFIXED32_SFIXED32_FIELD_NUMBER = 9;
    private static final class MapSfixed32Sfixed32DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> mapSfixed32Sfixed32_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMapSfixed32Sfixed32() {
      return mapSfixed32Sfixed32_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableMapSfixed32Sfixed32() {
      if (!mapSfixed32Sfixed32_.isMutable()) {
        mapSfixed32Sfixed32_ = mapSfixed32Sfixed32_.mutableCopy();
      }
      return mapSfixed32Sfixed32_;
    }
    @java.lang.Override

    public int getMapSfixed32Sfixed32Count() {
      return internalGetMapSfixed32Sfixed32().size();
    }
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */
    @java.lang.Override

    public boolean containsMapSfixed32Sfixed32(
        int key) {
      
      return internalGetMapSfixed32Sfixed32().containsKey(key);
    }
    /**
     * Use {@link #getMapSfixed32Sfixed32Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapSfixed32Sfixed32() {
      return getMapSfixed32Sfixed32Map();
    }
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapSfixed32Sfixed32Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapSfixed32Sfixed32());
    }
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */
    @java.lang.Override

    public int getMapSfixed32Sfixed32OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapSfixed32Sfixed32();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */
    @java.lang.Override

    public int getMapSfixed32Sfixed32OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapSfixed32Sfixed32();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableMapSfixed32Sfixed32Map() {
      return internalGetMutableMapSfixed32Sfixed32();
    }

    public static final int MAP_SFIXED64_SFIXED64_FIELD_NUMBER = 10;
    private static final class MapSfixed64Sfixed64DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> mapSfixed64Sfixed64_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMapSfixed64Sfixed64() {
      return mapSfixed64Sfixed64_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableMapSfixed64Sfixed64() {
      if (!mapSfixed64Sfixed64_.isMutable()) {
        mapSfixed64Sfixed64_ = mapSfixed64Sfixed64_.mutableCopy();
      }
      return mapSfixed64Sfixed64_;
    }
    @java.lang.Override

    public int getMapSfixed64Sfixed64Count() {
      return internalGetMapSfixed64Sfixed64().size();
    }
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */
    @java.lang.Override

    public boolean containsMapSfixed64Sfixed64(
        long key) {
      
      return internalGetMapSfixed64Sfixed64().containsKey(key);
    }
    /**
     * Use {@link #getMapSfixed64Sfixed64Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getMapSfixed64Sfixed64() {
      return getMapSfixed64Sfixed64Map();
    }
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getMapSfixed64Sfixed64Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapSfixed64Sfixed64());
    }
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */
    @java.lang.Override

    public long getMapSfixed64Sfixed64OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapSfixed64Sfixed64();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */
    @java.lang.Override

    public long getMapSfixed64Sfixed64OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapSfixed64Sfixed64();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableMapSfixed64Sfixed64Map() {
      return internalGetMutableMapSfixed64Sfixed64();
    }

    public static final int MAP_INT32_FLOAT_FIELD_NUMBER = 11;
    private static final class MapInt32FloatDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Float> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Float>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FLOAT,
                  0F);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Float> mapInt32Float_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Float>
    internalGetMapInt32Float() {
      return mapInt32Float_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Float>
    internalGetMutableMapInt32Float() {
      if (!mapInt32Float_.isMutable()) {
        mapInt32Float_ = mapInt32Float_.mutableCopy();
      }
      return mapInt32Float_;
    }
    @java.lang.Override

    public int getMapInt32FloatCount() {
      return internalGetMapInt32Float().size();
    }
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */
    @java.lang.Override

    public boolean containsMapInt32Float(
        int key) {
      
      return internalGetMapInt32Float().containsKey(key);
    }
    /**
     * Use {@link #getMapInt32FloatMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Float> getMapInt32Float() {
      return getMapInt32FloatMap();
    }
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Float> getMapInt32FloatMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapInt32Float());
    }
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */
    @java.lang.Override

    public float getMapInt32FloatOrDefault(
        int key,
        float defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Float> map =
          internalGetMapInt32Float();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */
    @java.lang.Override

    public float getMapInt32FloatOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Float> map =
          internalGetMapInt32Float();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Float>
    getMutableMapInt32FloatMap() {
      return internalGetMutableMapInt32Float();
    }

    public static final int MAP_INT32_DOUBLE_FIELD_NUMBER = 12;
    private static final class MapInt32DoubleDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Double>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Double> mapInt32Double_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Double>
    internalGetMapInt32Double() {
      return mapInt32Double_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Double>
    internalGetMutableMapInt32Double() {
      if (!mapInt32Double_.isMutable()) {
        mapInt32Double_ = mapInt32Double_.mutableCopy();
      }
      return mapInt32Double_;
    }
    @java.lang.Override

    public int getMapInt32DoubleCount() {
      return internalGetMapInt32Double().size();
    }
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */
    @java.lang.Override

    public boolean containsMapInt32Double(
        int key) {
      
      return internalGetMapInt32Double().containsKey(key);
    }
    /**
     * Use {@link #getMapInt32DoubleMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Double> getMapInt32Double() {
      return getMapInt32DoubleMap();
    }
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Double> getMapInt32DoubleMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapInt32Double());
    }
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */
    @java.lang.Override

    public double getMapInt32DoubleOrDefault(
        int key,
        double defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Double> map =
          internalGetMapInt32Double();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */
    @java.lang.Override

    public double getMapInt32DoubleOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Double> map =
          internalGetMapInt32Double();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Double>
    getMutableMapInt32DoubleMap() {
      return internalGetMutableMapInt32Double();
    }

    public static final int MAP_BOOL_BOOL_FIELD_NUMBER = 13;
    private static final class MapBoolBoolDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.Boolean> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.Boolean>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.Boolean> mapBoolBool_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Boolean>
    internalGetMapBoolBool() {
      return mapBoolBool_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Boolean>
    internalGetMutableMapBoolBool() {
      if (!mapBoolBool_.isMutable()) {
        mapBoolBool_ = mapBoolBool_.mutableCopy();
      }
      return mapBoolBool_;
    }
    @java.lang.Override

    public int getMapBoolBoolCount() {
      return internalGetMapBoolBool().size();
    }
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */
    @java.lang.Override

    public boolean containsMapBoolBool(
        boolean key) {
      
      return internalGetMapBoolBool().containsKey(key);
    }
    /**
     * Use {@link #getMapBoolBoolMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Boolean> getMapBoolBool() {
      return getMapBoolBoolMap();
    }
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.Boolean> getMapBoolBoolMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapBoolBool());
    }
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */
    @java.lang.Override

    public boolean getMapBoolBoolOrDefault(
        boolean key,
        boolean defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Boolean> map =
          internalGetMapBoolBool();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */
    @java.lang.Override

    public boolean getMapBoolBoolOrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Boolean> map =
          internalGetMapBoolBool();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */
    private java.util.Map<java.lang.Boolean, java.lang.Boolean>
    getMutableMapBoolBoolMap() {
      return internalGetMutableMapBoolBool();
    }

    public static final int MAP_STRING_STRING_FIELD_NUMBER = 14;
    private static final class MapStringStringDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.String> mapStringString_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
    internalGetMapStringString() {
      return mapStringString_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
    internalGetMutableMapStringString() {
      if (!mapStringString_.isMutable()) {
        mapStringString_ = mapStringString_.mutableCopy();
      }
      return mapStringString_;
    }
    @java.lang.Override

    public int getMapStringStringCount() {
      return internalGetMapStringString().size();
    }
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */
    @java.lang.Override

    public boolean containsMapStringString(
        java.lang.String key) {
      key.getClass();
      return internalGetMapStringString().containsKey(key);
    }
    /**
     * Use {@link #getMapStringStringMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMapStringString() {
      return getMapStringStringMap();
    }
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getMapStringStringMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapStringString());
    }
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */
    @java.lang.Override

    public java.lang.String getMapStringStringOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMapStringString();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */
    @java.lang.Override

    public java.lang.String getMapStringStringOrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMapStringString();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */
    private java.util.Map<java.lang.String, java.lang.String>
    getMutableMapStringStringMap() {
      return internalGetMutableMapStringString();
    }

    public static final int MAP_INT32_BYTES_FIELD_NUMBER = 15;
    private static final class MapInt32BytesDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, com.google.protobuf.ByteString> mapInt32Bytes_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.ByteString>
    internalGetMapInt32Bytes() {
      return mapInt32Bytes_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.ByteString>
    internalGetMutableMapInt32Bytes() {
      if (!mapInt32Bytes_.isMutable()) {
        mapInt32Bytes_ = mapInt32Bytes_.mutableCopy();
      }
      return mapInt32Bytes_;
    }
    @java.lang.Override

    public int getMapInt32BytesCount() {
      return internalGetMapInt32Bytes().size();
    }
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */
    @java.lang.Override

    public boolean containsMapInt32Bytes(
        int key) {
      
      return internalGetMapInt32Bytes().containsKey(key);
    }
    /**
     * Use {@link #getMapInt32BytesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getMapInt32Bytes() {
      return getMapInt32BytesMap();
    }
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getMapInt32BytesMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapInt32Bytes());
    }
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getMapInt32BytesOrDefault(
        int key,
        com.google.protobuf.ByteString defaultValue) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
          internalGetMapInt32Bytes();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getMapInt32BytesOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
          internalGetMapInt32Bytes();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getMutableMapInt32BytesMap() {
      return internalGetMutableMapInt32Bytes();
    }

    public static final int MAP_INT32_ENUM_FIELD_NUMBER = 16;
    private static final class MapInt32EnumDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  protobuf_unittest.MapLiteUnittest.MapEnumLite.MAP_ENUM_FOO_LITE.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> mapInt32Enum_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMapInt32Enum() {
      return mapInt32Enum_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableMapInt32Enum() {
      if (!mapInt32Enum_.isMutable()) {
        mapInt32Enum_ = mapInt32Enum_.mutableCopy();
      }
      return mapInt32Enum_;
    }
    @java.lang.Override

    public int getMapInt32EnumCount() {
      return internalGetMapInt32Enum().size();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    @java.lang.Override

    public boolean containsMapInt32Enum(
        int key) {
      
      return internalGetMapInt32Enum().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite> mapInt32EnumValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                protobuf_unittest.MapLiteUnittest.MapEnumLite.internalGetValueMap(),
                protobuf_unittest.MapLiteUnittest.MapEnumLite.MAP_ENUM_FOO_LITE);
    /**
     * Use {@link #getMapInt32EnumMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite>
    getMapInt32Enum() {
      return getMapInt32EnumMap();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite>
    getMapInt32EnumMap() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite, java.lang.Integer>(
                internalGetMapInt32Enum(),
                mapInt32EnumValueConverter));
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    @java.lang.Override

    public protobuf_unittest.MapLiteUnittest.MapEnumLite getMapInt32EnumOrDefault(
        int key,
        protobuf_unittest.MapLiteUnittest.MapEnumLite defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapInt32Enum();
      return map.containsKey(key)
             ? mapInt32EnumValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    @java.lang.Override

    public protobuf_unittest.MapLiteUnittest.MapEnumLite getMapInt32EnumOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapInt32Enum();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return mapInt32EnumValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    private java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite>
    getMutableMapInt32EnumMap() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite, java.lang.Integer>(
              internalGetMutableMapInt32Enum(),
              mapInt32EnumValueConverter);
    }

    public static final int MAP_INT32_FOREIGN_MESSAGE_FIELD_NUMBER = 17;
    private static final class MapInt32ForeignMessageDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.protobuf.UnittestLite.ForeignMessageLite.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite> mapInt32ForeignMessage_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite>
    internalGetMapInt32ForeignMessage() {
      return mapInt32ForeignMessage_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite>
    internalGetMutableMapInt32ForeignMessage() {
      if (!mapInt32ForeignMessage_.isMutable()) {
        mapInt32ForeignMessage_ = mapInt32ForeignMessage_.mutableCopy();
      }
      return mapInt32ForeignMessage_;
    }
    @java.lang.Override

    public int getMapInt32ForeignMessageCount() {
      return internalGetMapInt32ForeignMessage().size();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
     */
    @java.lang.Override

    public boolean containsMapInt32ForeignMessage(
        int key) {
      
      return internalGetMapInt32ForeignMessage().containsKey(key);
    }
    /**
     * Use {@link #getMapInt32ForeignMessageMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite> getMapInt32ForeignMessage() {
      return getMapInt32ForeignMessageMap();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite> getMapInt32ForeignMessageMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapInt32ForeignMessage());
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
     */
    @java.lang.Override

    public com.google.protobuf.UnittestLite.ForeignMessageLite getMapInt32ForeignMessageOrDefault(
        int key,
        com.google.protobuf.UnittestLite.ForeignMessageLite defaultValue) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite> map =
          internalGetMapInt32ForeignMessage();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
     */
    @java.lang.Override

    public com.google.protobuf.UnittestLite.ForeignMessageLite getMapInt32ForeignMessageOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite> map =
          internalGetMapInt32ForeignMessage();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite>
    getMutableMapInt32ForeignMessageMap() {
      return internalGetMutableMapInt32ForeignMessage();
    }

    public static final int TEBORING_FIELD_NUMBER = 18;
    private static final class TeboringDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> teboring_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetTeboring() {
      return teboring_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableTeboring() {
      if (!teboring_.isMutable()) {
        teboring_ = teboring_.mutableCopy();
      }
      return teboring_;
    }
    @java.lang.Override

    public int getTeboringCount() {
      return internalGetTeboring().size();
    }
    /**
     * <code>map&lt;int32, int32&gt; teboring = 18;</code>
     */
    @java.lang.Override

    public boolean containsTeboring(
        int key) {
      
      return internalGetTeboring().containsKey(key);
    }
    /**
     * Use {@link #getTeboringMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getTeboring() {
      return getTeboringMap();
    }
    /**
     * <code>map&lt;int32, int32&gt; teboring = 18;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getTeboringMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetTeboring());
    }
    /**
     * <code>map&lt;int32, int32&gt; teboring = 18;</code>
     */
    @java.lang.Override

    public int getTeboringOrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetTeboring();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, int32&gt; teboring = 18;</code>
     */
    @java.lang.Override

    public int getTeboringOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetTeboring();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, int32&gt; teboring = 18;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableTeboringMap() {
      return internalGetMutableTeboring();
    }

    public static protobuf_unittest.MapLiteUnittest.TestMapLite parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMapLite parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMapLite parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMapLite parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMapLite parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMapLite parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMapLite parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMapLite parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMapLite parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMapLite parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMapLite parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMapLite parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(protobuf_unittest.MapLiteUnittest.TestMapLite prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code protobuf_unittest.TestMapLite}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          protobuf_unittest.MapLiteUnittest.TestMapLite, Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf_unittest.TestMapLite)
        protobuf_unittest.MapLiteUnittest.TestMapLiteOrBuilder {
      // Construct using protobuf_unittest.MapLiteUnittest.TestMapLite.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      @java.lang.Override

      public int getMapInt32Int32Count() {
        return instance.getMapInt32Int32Map().size();
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
       */
      @java.lang.Override

      public boolean containsMapInt32Int32(
          int key) {
        
        return instance.getMapInt32Int32Map().containsKey(key);
      }

      public Builder clearMapInt32Int32() {
        copyOnWrite();
        instance.getMutableMapInt32Int32Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
       */

      public Builder removeMapInt32Int32(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapInt32Int32Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapInt32Int32Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapInt32Int32() {
        return getMapInt32Int32Map();
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapInt32Int32Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapInt32Int32Map());
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
       */
      @java.lang.Override

      public int getMapInt32Int32OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapInt32Int32Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
       */
      @java.lang.Override

      public int getMapInt32Int32OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapInt32Int32Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
       */
      public Builder putMapInt32Int32(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableMapInt32Int32Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
       */
      public Builder putAllMapInt32Int32(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableMapInt32Int32Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapInt64Int64Count() {
        return instance.getMapInt64Int64Map().size();
      }
      /**
       * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
       */
      @java.lang.Override

      public boolean containsMapInt64Int64(
          long key) {
        
        return instance.getMapInt64Int64Map().containsKey(key);
      }

      public Builder clearMapInt64Int64() {
        copyOnWrite();
        instance.getMutableMapInt64Int64Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
       */

      public Builder removeMapInt64Int64(
          long key) {
        
        copyOnWrite();
        instance.getMutableMapInt64Int64Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapInt64Int64Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getMapInt64Int64() {
        return getMapInt64Int64Map();
      }
      /**
       * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getMapInt64Int64Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapInt64Int64Map());
      }
      /**
       * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
       */
      @java.lang.Override

      public long getMapInt64Int64OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapInt64Int64Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
       */
      @java.lang.Override

      public long getMapInt64Int64OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapInt64Int64Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
       */
      public Builder putMapInt64Int64(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableMapInt64Int64Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
       */
      public Builder putAllMapInt64Int64(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableMapInt64Int64Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapUint32Uint32Count() {
        return instance.getMapUint32Uint32Map().size();
      }
      /**
       * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
       */
      @java.lang.Override

      public boolean containsMapUint32Uint32(
          int key) {
        
        return instance.getMapUint32Uint32Map().containsKey(key);
      }

      public Builder clearMapUint32Uint32() {
        copyOnWrite();
        instance.getMutableMapUint32Uint32Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
       */

      public Builder removeMapUint32Uint32(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapUint32Uint32Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapUint32Uint32Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapUint32Uint32() {
        return getMapUint32Uint32Map();
      }
      /**
       * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapUint32Uint32Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapUint32Uint32Map());
      }
      /**
       * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
       */
      @java.lang.Override

      public int getMapUint32Uint32OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapUint32Uint32Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
       */
      @java.lang.Override

      public int getMapUint32Uint32OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapUint32Uint32Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
       */
      public Builder putMapUint32Uint32(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableMapUint32Uint32Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
       */
      public Builder putAllMapUint32Uint32(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableMapUint32Uint32Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapUint64Uint64Count() {
        return instance.getMapUint64Uint64Map().size();
      }
      /**
       * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
       */
      @java.lang.Override

      public boolean containsMapUint64Uint64(
          long key) {
        
        return instance.getMapUint64Uint64Map().containsKey(key);
      }

      public Builder clearMapUint64Uint64() {
        copyOnWrite();
        instance.getMutableMapUint64Uint64Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
       */

      public Builder removeMapUint64Uint64(
          long key) {
        
        copyOnWrite();
        instance.getMutableMapUint64Uint64Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapUint64Uint64Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getMapUint64Uint64() {
        return getMapUint64Uint64Map();
      }
      /**
       * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getMapUint64Uint64Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapUint64Uint64Map());
      }
      /**
       * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
       */
      @java.lang.Override

      public long getMapUint64Uint64OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapUint64Uint64Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
       */
      @java.lang.Override

      public long getMapUint64Uint64OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapUint64Uint64Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
       */
      public Builder putMapUint64Uint64(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableMapUint64Uint64Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
       */
      public Builder putAllMapUint64Uint64(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableMapUint64Uint64Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapSint32Sint32Count() {
        return instance.getMapSint32Sint32Map().size();
      }
      /**
       * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
       */
      @java.lang.Override

      public boolean containsMapSint32Sint32(
          int key) {
        
        return instance.getMapSint32Sint32Map().containsKey(key);
      }

      public Builder clearMapSint32Sint32() {
        copyOnWrite();
        instance.getMutableMapSint32Sint32Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
       */

      public Builder removeMapSint32Sint32(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapSint32Sint32Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapSint32Sint32Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapSint32Sint32() {
        return getMapSint32Sint32Map();
      }
      /**
       * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapSint32Sint32Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapSint32Sint32Map());
      }
      /**
       * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
       */
      @java.lang.Override

      public int getMapSint32Sint32OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapSint32Sint32Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
       */
      @java.lang.Override

      public int getMapSint32Sint32OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapSint32Sint32Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
       */
      public Builder putMapSint32Sint32(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableMapSint32Sint32Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
       */
      public Builder putAllMapSint32Sint32(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableMapSint32Sint32Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapSint64Sint64Count() {
        return instance.getMapSint64Sint64Map().size();
      }
      /**
       * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
       */
      @java.lang.Override

      public boolean containsMapSint64Sint64(
          long key) {
        
        return instance.getMapSint64Sint64Map().containsKey(key);
      }

      public Builder clearMapSint64Sint64() {
        copyOnWrite();
        instance.getMutableMapSint64Sint64Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
       */

      public Builder removeMapSint64Sint64(
          long key) {
        
        copyOnWrite();
        instance.getMutableMapSint64Sint64Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapSint64Sint64Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getMapSint64Sint64() {
        return getMapSint64Sint64Map();
      }
      /**
       * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getMapSint64Sint64Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapSint64Sint64Map());
      }
      /**
       * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
       */
      @java.lang.Override

      public long getMapSint64Sint64OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapSint64Sint64Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
       */
      @java.lang.Override

      public long getMapSint64Sint64OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapSint64Sint64Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
       */
      public Builder putMapSint64Sint64(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableMapSint64Sint64Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
       */
      public Builder putAllMapSint64Sint64(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableMapSint64Sint64Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapFixed32Fixed32Count() {
        return instance.getMapFixed32Fixed32Map().size();
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
       */
      @java.lang.Override

      public boolean containsMapFixed32Fixed32(
          int key) {
        
        return instance.getMapFixed32Fixed32Map().containsKey(key);
      }

      public Builder clearMapFixed32Fixed32() {
        copyOnWrite();
        instance.getMutableMapFixed32Fixed32Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
       */

      public Builder removeMapFixed32Fixed32(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapFixed32Fixed32Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapFixed32Fixed32Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapFixed32Fixed32() {
        return getMapFixed32Fixed32Map();
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapFixed32Fixed32Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapFixed32Fixed32Map());
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
       */
      @java.lang.Override

      public int getMapFixed32Fixed32OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapFixed32Fixed32Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
       */
      @java.lang.Override

      public int getMapFixed32Fixed32OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapFixed32Fixed32Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
       */
      public Builder putMapFixed32Fixed32(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableMapFixed32Fixed32Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
       */
      public Builder putAllMapFixed32Fixed32(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableMapFixed32Fixed32Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapFixed64Fixed64Count() {
        return instance.getMapFixed64Fixed64Map().size();
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
       */
      @java.lang.Override

      public boolean containsMapFixed64Fixed64(
          long key) {
        
        return instance.getMapFixed64Fixed64Map().containsKey(key);
      }

      public Builder clearMapFixed64Fixed64() {
        copyOnWrite();
        instance.getMutableMapFixed64Fixed64Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
       */

      public Builder removeMapFixed64Fixed64(
          long key) {
        
        copyOnWrite();
        instance.getMutableMapFixed64Fixed64Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapFixed64Fixed64Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getMapFixed64Fixed64() {
        return getMapFixed64Fixed64Map();
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getMapFixed64Fixed64Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapFixed64Fixed64Map());
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
       */
      @java.lang.Override

      public long getMapFixed64Fixed64OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapFixed64Fixed64Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
       */
      @java.lang.Override

      public long getMapFixed64Fixed64OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapFixed64Fixed64Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
       */
      public Builder putMapFixed64Fixed64(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableMapFixed64Fixed64Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
       */
      public Builder putAllMapFixed64Fixed64(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableMapFixed64Fixed64Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapSfixed32Sfixed32Count() {
        return instance.getMapSfixed32Sfixed32Map().size();
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
       */
      @java.lang.Override

      public boolean containsMapSfixed32Sfixed32(
          int key) {
        
        return instance.getMapSfixed32Sfixed32Map().containsKey(key);
      }

      public Builder clearMapSfixed32Sfixed32() {
        copyOnWrite();
        instance.getMutableMapSfixed32Sfixed32Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
       */

      public Builder removeMapSfixed32Sfixed32(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapSfixed32Sfixed32Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapSfixed32Sfixed32Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapSfixed32Sfixed32() {
        return getMapSfixed32Sfixed32Map();
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapSfixed32Sfixed32Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapSfixed32Sfixed32Map());
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
       */
      @java.lang.Override

      public int getMapSfixed32Sfixed32OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapSfixed32Sfixed32Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
       */
      @java.lang.Override

      public int getMapSfixed32Sfixed32OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapSfixed32Sfixed32Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
       */
      public Builder putMapSfixed32Sfixed32(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableMapSfixed32Sfixed32Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
       */
      public Builder putAllMapSfixed32Sfixed32(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableMapSfixed32Sfixed32Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapSfixed64Sfixed64Count() {
        return instance.getMapSfixed64Sfixed64Map().size();
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
       */
      @java.lang.Override

      public boolean containsMapSfixed64Sfixed64(
          long key) {
        
        return instance.getMapSfixed64Sfixed64Map().containsKey(key);
      }

      public Builder clearMapSfixed64Sfixed64() {
        copyOnWrite();
        instance.getMutableMapSfixed64Sfixed64Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
       */

      public Builder removeMapSfixed64Sfixed64(
          long key) {
        
        copyOnWrite();
        instance.getMutableMapSfixed64Sfixed64Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapSfixed64Sfixed64Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getMapSfixed64Sfixed64() {
        return getMapSfixed64Sfixed64Map();
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getMapSfixed64Sfixed64Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapSfixed64Sfixed64Map());
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
       */
      @java.lang.Override

      public long getMapSfixed64Sfixed64OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapSfixed64Sfixed64Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
       */
      @java.lang.Override

      public long getMapSfixed64Sfixed64OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapSfixed64Sfixed64Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
       */
      public Builder putMapSfixed64Sfixed64(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableMapSfixed64Sfixed64Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
       */
      public Builder putAllMapSfixed64Sfixed64(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableMapSfixed64Sfixed64Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapInt32FloatCount() {
        return instance.getMapInt32FloatMap().size();
      }
      /**
       * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
       */
      @java.lang.Override

      public boolean containsMapInt32Float(
          int key) {
        
        return instance.getMapInt32FloatMap().containsKey(key);
      }

      public Builder clearMapInt32Float() {
        copyOnWrite();
        instance.getMutableMapInt32FloatMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
       */

      public Builder removeMapInt32Float(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapInt32FloatMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapInt32FloatMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Float> getMapInt32Float() {
        return getMapInt32FloatMap();
      }
      /**
       * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Float> getMapInt32FloatMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapInt32FloatMap());
      }
      /**
       * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
       */
      @java.lang.Override

      public float getMapInt32FloatOrDefault(
          int key,
          float defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Float> map =
            instance.getMapInt32FloatMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
       */
      @java.lang.Override

      public float getMapInt32FloatOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Float> map =
            instance.getMapInt32FloatMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
       */
      public Builder putMapInt32Float(
          int key,
          float value) {
        
        
        copyOnWrite();
        instance.getMutableMapInt32FloatMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
       */
      public Builder putAllMapInt32Float(
          java.util.Map<java.lang.Integer, java.lang.Float> values) {
        copyOnWrite();
        instance.getMutableMapInt32FloatMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapInt32DoubleCount() {
        return instance.getMapInt32DoubleMap().size();
      }
      /**
       * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
       */
      @java.lang.Override

      public boolean containsMapInt32Double(
          int key) {
        
        return instance.getMapInt32DoubleMap().containsKey(key);
      }

      public Builder clearMapInt32Double() {
        copyOnWrite();
        instance.getMutableMapInt32DoubleMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
       */

      public Builder removeMapInt32Double(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapInt32DoubleMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapInt32DoubleMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Double> getMapInt32Double() {
        return getMapInt32DoubleMap();
      }
      /**
       * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Double> getMapInt32DoubleMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapInt32DoubleMap());
      }
      /**
       * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
       */
      @java.lang.Override

      public double getMapInt32DoubleOrDefault(
          int key,
          double defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Double> map =
            instance.getMapInt32DoubleMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
       */
      @java.lang.Override

      public double getMapInt32DoubleOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Double> map =
            instance.getMapInt32DoubleMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
       */
      public Builder putMapInt32Double(
          int key,
          double value) {
        
        
        copyOnWrite();
        instance.getMutableMapInt32DoubleMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
       */
      public Builder putAllMapInt32Double(
          java.util.Map<java.lang.Integer, java.lang.Double> values) {
        copyOnWrite();
        instance.getMutableMapInt32DoubleMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapBoolBoolCount() {
        return instance.getMapBoolBoolMap().size();
      }
      /**
       * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
       */
      @java.lang.Override

      public boolean containsMapBoolBool(
          boolean key) {
        
        return instance.getMapBoolBoolMap().containsKey(key);
      }

      public Builder clearMapBoolBool() {
        copyOnWrite();
        instance.getMutableMapBoolBoolMap().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
       */

      public Builder removeMapBoolBool(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableMapBoolBoolMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapBoolBoolMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, java.lang.Boolean> getMapBoolBool() {
        return getMapBoolBoolMap();
      }
      /**
       * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, java.lang.Boolean> getMapBoolBoolMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapBoolBoolMap());
      }
      /**
       * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
       */
      @java.lang.Override

      public boolean getMapBoolBoolOrDefault(
          boolean key,
          boolean defaultValue) {
        
        java.util.Map<java.lang.Boolean, java.lang.Boolean> map =
            instance.getMapBoolBoolMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
       */
      @java.lang.Override

      public boolean getMapBoolBoolOrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, java.lang.Boolean> map =
            instance.getMapBoolBoolMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
       */
      public Builder putMapBoolBool(
          boolean key,
          boolean value) {
        
        
        copyOnWrite();
        instance.getMutableMapBoolBoolMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
       */
      public Builder putAllMapBoolBool(
          java.util.Map<java.lang.Boolean, java.lang.Boolean> values) {
        copyOnWrite();
        instance.getMutableMapBoolBoolMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapStringStringCount() {
        return instance.getMapStringStringMap().size();
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 14;</code>
       */
      @java.lang.Override

      public boolean containsMapStringString(
          java.lang.String key) {
        key.getClass();
        return instance.getMapStringStringMap().containsKey(key);
      }

      public Builder clearMapStringString() {
        copyOnWrite();
        instance.getMutableMapStringStringMap().clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 14;</code>
       */

      public Builder removeMapStringString(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableMapStringStringMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapStringStringMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getMapStringString() {
        return getMapStringStringMap();
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 14;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.String> getMapStringStringMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapStringStringMap());
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 14;</code>
       */
      @java.lang.Override

      public java.lang.String getMapStringStringOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.String> map =
            instance.getMapStringStringMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 14;</code>
       */
      @java.lang.Override

      public java.lang.String getMapStringStringOrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.String> map =
            instance.getMapStringStringMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 14;</code>
       */
      public Builder putMapStringString(
          java.lang.String key,
          java.lang.String value) {
        key.getClass();
        value.getClass();
        copyOnWrite();
        instance.getMutableMapStringStringMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 14;</code>
       */
      public Builder putAllMapStringString(
          java.util.Map<java.lang.String, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableMapStringStringMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapInt32BytesCount() {
        return instance.getMapInt32BytesMap().size();
      }
      /**
       * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
       */
      @java.lang.Override

      public boolean containsMapInt32Bytes(
          int key) {
        
        return instance.getMapInt32BytesMap().containsKey(key);
      }

      public Builder clearMapInt32Bytes() {
        copyOnWrite();
        instance.getMutableMapInt32BytesMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
       */

      public Builder removeMapInt32Bytes(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapInt32BytesMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapInt32BytesMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getMapInt32Bytes() {
        return getMapInt32BytesMap();
      }
      /**
       * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getMapInt32BytesMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapInt32BytesMap());
      }
      /**
       * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getMapInt32BytesOrDefault(
          int key,
          com.google.protobuf.ByteString defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
            instance.getMapInt32BytesMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getMapInt32BytesOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
            instance.getMapInt32BytesMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
       */
      public Builder putMapInt32Bytes(
          int key,
          com.google.protobuf.ByteString value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableMapInt32BytesMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
       */
      public Builder putAllMapInt32Bytes(
          java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableMapInt32BytesMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapInt32EnumCount() {
        return instance.getMapInt32EnumMap().size();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
       */
      @java.lang.Override

      public boolean containsMapInt32Enum(
          int key) {
        
        return instance.getMapInt32EnumMap().containsKey(key);
      }

      public Builder clearMapInt32Enum() {
        copyOnWrite();
        instance.getMutableMapInt32EnumMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
       */

      public Builder removeMapInt32Enum(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapInt32EnumMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapInt32EnumMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite>
      getMapInt32Enum() {
        return getMapInt32EnumMap();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite>
      getMapInt32EnumMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapInt32EnumMap());
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
       */
      @java.lang.Override

      public protobuf_unittest.MapLiteUnittest.MapEnumLite getMapInt32EnumOrDefault(
          int key,
          protobuf_unittest.MapLiteUnittest.MapEnumLite defaultValue) {
        
        java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite> map =
            instance.getMapInt32EnumMap();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
       */
      @java.lang.Override

      public protobuf_unittest.MapLiteUnittest.MapEnumLite getMapInt32EnumOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite> map =
            instance.getMapInt32EnumMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
       */
      public Builder putMapInt32Enum(
          int key,
          protobuf_unittest.MapLiteUnittest.MapEnumLite value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableMapInt32EnumMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
       */
      public Builder putAllMapInt32Enum(
          java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite> values) {
        copyOnWrite();
        instance.getMutableMapInt32EnumMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapInt32ForeignMessageCount() {
        return instance.getMapInt32ForeignMessageMap().size();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
       */
      @java.lang.Override

      public boolean containsMapInt32ForeignMessage(
          int key) {
        
        return instance.getMapInt32ForeignMessageMap().containsKey(key);
      }

      public Builder clearMapInt32ForeignMessage() {
        copyOnWrite();
        instance.getMutableMapInt32ForeignMessageMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
       */

      public Builder removeMapInt32ForeignMessage(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapInt32ForeignMessageMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapInt32ForeignMessageMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite> getMapInt32ForeignMessage() {
        return getMapInt32ForeignMessageMap();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite> getMapInt32ForeignMessageMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapInt32ForeignMessageMap());
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
       */
      @java.lang.Override

      public com.google.protobuf.UnittestLite.ForeignMessageLite getMapInt32ForeignMessageOrDefault(
          int key,
          com.google.protobuf.UnittestLite.ForeignMessageLite defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite> map =
            instance.getMapInt32ForeignMessageMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
       */
      @java.lang.Override

      public com.google.protobuf.UnittestLite.ForeignMessageLite getMapInt32ForeignMessageOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite> map =
            instance.getMapInt32ForeignMessageMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
       */
      public Builder putMapInt32ForeignMessage(
          int key,
          com.google.protobuf.UnittestLite.ForeignMessageLite value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableMapInt32ForeignMessageMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.ForeignMessageLite&gt; map_int32_foreign_message = 17;</code>
       */
      public Builder putAllMapInt32ForeignMessage(
          java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.ForeignMessageLite> values) {
        copyOnWrite();
        instance.getMutableMapInt32ForeignMessageMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getTeboringCount() {
        return instance.getTeboringMap().size();
      }
      /**
       * <code>map&lt;int32, int32&gt; teboring = 18;</code>
       */
      @java.lang.Override

      public boolean containsTeboring(
          int key) {
        
        return instance.getTeboringMap().containsKey(key);
      }

      public Builder clearTeboring() {
        copyOnWrite();
        instance.getMutableTeboringMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, int32&gt; teboring = 18;</code>
       */

      public Builder removeTeboring(
          int key) {
        
        copyOnWrite();
        instance.getMutableTeboringMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getTeboringMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getTeboring() {
        return getTeboringMap();
      }
      /**
       * <code>map&lt;int32, int32&gt; teboring = 18;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getTeboringMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getTeboringMap());
      }
      /**
       * <code>map&lt;int32, int32&gt; teboring = 18;</code>
       */
      @java.lang.Override

      public int getTeboringOrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getTeboringMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, int32&gt; teboring = 18;</code>
       */
      @java.lang.Override

      public int getTeboringOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getTeboringMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, int32&gt; teboring = 18;</code>
       */
      public Builder putTeboring(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableTeboringMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, int32&gt; teboring = 18;</code>
       */
      public Builder putAllTeboring(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableTeboringMap().putAll(values);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protobuf_unittest.TestMapLite)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new protobuf_unittest.MapLiteUnittest.TestMapLite();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "mapInt32Int32_",
              MapInt32Int32DefaultEntryHolder.defaultEntry,
              "mapInt64Int64_",
              MapInt64Int64DefaultEntryHolder.defaultEntry,
              "mapUint32Uint32_",
              MapUint32Uint32DefaultEntryHolder.defaultEntry,
              "mapUint64Uint64_",
              MapUint64Uint64DefaultEntryHolder.defaultEntry,
              "mapSint32Sint32_",
              MapSint32Sint32DefaultEntryHolder.defaultEntry,
              "mapSint64Sint64_",
              MapSint64Sint64DefaultEntryHolder.defaultEntry,
              "mapFixed32Fixed32_",
              MapFixed32Fixed32DefaultEntryHolder.defaultEntry,
              "mapFixed64Fixed64_",
              MapFixed64Fixed64DefaultEntryHolder.defaultEntry,
              "mapSfixed32Sfixed32_",
              MapSfixed32Sfixed32DefaultEntryHolder.defaultEntry,
              "mapSfixed64Sfixed64_",
              MapSfixed64Sfixed64DefaultEntryHolder.defaultEntry,
              "mapInt32Float_",
              MapInt32FloatDefaultEntryHolder.defaultEntry,
              "mapInt32Double_",
              MapInt32DoubleDefaultEntryHolder.defaultEntry,
              "mapBoolBool_",
              MapBoolBoolDefaultEntryHolder.defaultEntry,
              "mapStringString_",
              MapStringStringDefaultEntryHolder.defaultEntry,
              "mapInt32Bytes_",
              MapInt32BytesDefaultEntryHolder.defaultEntry,
              "mapInt32Enum_",
              MapInt32EnumDefaultEntryHolder.defaultEntry,
              protobuf_unittest.MapLiteUnittest.MapEnumLite.internalGetVerifier(),
              "mapInt32ForeignMessage_",
              MapInt32ForeignMessageDefaultEntryHolder.defaultEntry,
              "teboring_",
              TeboringDefaultEntryHolder.defaultEntry,
            };
            java.lang.String info =
                "\u0001\u0012\u0000\u0000\u0001\u0012\u0012\u0012\u0000\u0000\u00012\u00022\u0003" +
                "2\u00042\u00052\u00062\u00072\b2\t2\n2\u000b2\f2\r2\u000e2\u000f2\u0010\u0832\u0011" +
                "2\u00122";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<protobuf_unittest.MapLiteUnittest.TestMapLite> parser = PARSER;
          if (parser == null) {
            synchronized (protobuf_unittest.MapLiteUnittest.TestMapLite.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<protobuf_unittest.MapLiteUnittest.TestMapLite>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:protobuf_unittest.TestMapLite)
    private static final protobuf_unittest.MapLiteUnittest.TestMapLite DEFAULT_INSTANCE;
    static {
      TestMapLite defaultInstance = new TestMapLite();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TestMapLite.class, defaultInstance);
    }

    public static protobuf_unittest.MapLiteUnittest.TestMapLite getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TestMapLite> PARSER;

    public static com.google.protobuf.Parser<TestMapLite> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TestArenaMapLiteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protobuf_unittest.TestArenaMapLite)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */
    int getMapInt32Int32Count();
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */
    boolean containsMapInt32Int32(
        int key);
    /**
     * Use {@link #getMapInt32Int32Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapInt32Int32();
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapInt32Int32Map();
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */

    int getMapInt32Int32OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */

    int getMapInt32Int32OrThrow(
        int key);

    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */
    int getMapInt64Int64Count();
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */
    boolean containsMapInt64Int64(
        long key);
    /**
     * Use {@link #getMapInt64Int64Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapInt64Int64();
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapInt64Int64Map();
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */

    long getMapInt64Int64OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */

    long getMapInt64Int64OrThrow(
        long key);

    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */
    int getMapUint32Uint32Count();
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */
    boolean containsMapUint32Uint32(
        int key);
    /**
     * Use {@link #getMapUint32Uint32Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapUint32Uint32();
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapUint32Uint32Map();
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */

    int getMapUint32Uint32OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */

    int getMapUint32Uint32OrThrow(
        int key);

    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */
    int getMapUint64Uint64Count();
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */
    boolean containsMapUint64Uint64(
        long key);
    /**
     * Use {@link #getMapUint64Uint64Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapUint64Uint64();
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapUint64Uint64Map();
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */

    long getMapUint64Uint64OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */

    long getMapUint64Uint64OrThrow(
        long key);

    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */
    int getMapSint32Sint32Count();
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */
    boolean containsMapSint32Sint32(
        int key);
    /**
     * Use {@link #getMapSint32Sint32Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapSint32Sint32();
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapSint32Sint32Map();
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */

    int getMapSint32Sint32OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */

    int getMapSint32Sint32OrThrow(
        int key);

    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */
    int getMapSint64Sint64Count();
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */
    boolean containsMapSint64Sint64(
        long key);
    /**
     * Use {@link #getMapSint64Sint64Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapSint64Sint64();
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapSint64Sint64Map();
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */

    long getMapSint64Sint64OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */

    long getMapSint64Sint64OrThrow(
        long key);

    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */
    int getMapFixed32Fixed32Count();
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */
    boolean containsMapFixed32Fixed32(
        int key);
    /**
     * Use {@link #getMapFixed32Fixed32Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapFixed32Fixed32();
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapFixed32Fixed32Map();
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */

    int getMapFixed32Fixed32OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */

    int getMapFixed32Fixed32OrThrow(
        int key);

    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */
    int getMapFixed64Fixed64Count();
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */
    boolean containsMapFixed64Fixed64(
        long key);
    /**
     * Use {@link #getMapFixed64Fixed64Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapFixed64Fixed64();
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapFixed64Fixed64Map();
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */

    long getMapFixed64Fixed64OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */

    long getMapFixed64Fixed64OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */
    int getMapSfixed32Sfixed32Count();
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */
    boolean containsMapSfixed32Sfixed32(
        int key);
    /**
     * Use {@link #getMapSfixed32Sfixed32Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapSfixed32Sfixed32();
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getMapSfixed32Sfixed32Map();
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */

    int getMapSfixed32Sfixed32OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */

    int getMapSfixed32Sfixed32OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */
    int getMapSfixed64Sfixed64Count();
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */
    boolean containsMapSfixed64Sfixed64(
        long key);
    /**
     * Use {@link #getMapSfixed64Sfixed64Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapSfixed64Sfixed64();
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getMapSfixed64Sfixed64Map();
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */

    long getMapSfixed64Sfixed64OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */

    long getMapSfixed64Sfixed64OrThrow(
        long key);

    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */
    int getMapInt32FloatCount();
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */
    boolean containsMapInt32Float(
        int key);
    /**
     * Use {@link #getMapInt32FloatMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Float>
    getMapInt32Float();
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Float>
    getMapInt32FloatMap();
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */

    float getMapInt32FloatOrDefault(
        int key,
        float defaultValue);
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */

    float getMapInt32FloatOrThrow(
        int key);

    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */
    int getMapInt32DoubleCount();
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */
    boolean containsMapInt32Double(
        int key);
    /**
     * Use {@link #getMapInt32DoubleMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Double>
    getMapInt32Double();
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Double>
    getMapInt32DoubleMap();
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */

    double getMapInt32DoubleOrDefault(
        int key,
        double defaultValue);
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */

    double getMapInt32DoubleOrThrow(
        int key);

    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */
    int getMapBoolBoolCount();
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */
    boolean containsMapBoolBool(
        boolean key);
    /**
     * Use {@link #getMapBoolBoolMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, java.lang.Boolean>
    getMapBoolBool();
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */
    java.util.Map<java.lang.Boolean, java.lang.Boolean>
    getMapBoolBoolMap();
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */

    boolean getMapBoolBoolOrDefault(
        boolean key,
        boolean defaultValue);
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */

    boolean getMapBoolBoolOrThrow(
        boolean key);

    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */
    int getMapStringStringCount();
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */
    boolean containsMapStringString(
        java.lang.String key);
    /**
     * Use {@link #getMapStringStringMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getMapStringString();
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getMapStringStringMap();
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */

    java.lang.String getMapStringStringOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */

    java.lang.String getMapStringStringOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */
    int getMapInt32BytesCount();
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */
    boolean containsMapInt32Bytes(
        int key);
    /**
     * Use {@link #getMapInt32BytesMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getMapInt32Bytes();
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getMapInt32BytesMap();
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */

    com.google.protobuf.ByteString getMapInt32BytesOrDefault(
        int key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */

    com.google.protobuf.ByteString getMapInt32BytesOrThrow(
        int key);

    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    int getMapInt32EnumCount();
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    boolean containsMapInt32Enum(
        int key);
    /**
     * Use {@link #getMapInt32EnumMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite>
    getMapInt32Enum();
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite>
    getMapInt32EnumMap();
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    protobuf_unittest.MapLiteUnittest.MapEnumLite getMapInt32EnumOrDefault(
        int key,
        protobuf_unittest.MapLiteUnittest.MapEnumLite defaultValue);
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    protobuf_unittest.MapLiteUnittest.MapEnumLite getMapInt32EnumOrThrow(
        int key);

    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
     */
    int getMapInt32ForeignMessageCount();
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
     */
    boolean containsMapInt32ForeignMessage(
        int key);
    /**
     * Use {@link #getMapInt32ForeignMessageMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite>
    getMapInt32ForeignMessage();
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
     */
    java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite>
    getMapInt32ForeignMessageMap();
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
     */

    protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite getMapInt32ForeignMessageOrDefault(
        int key,
        protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite defaultValue);
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
     */

    protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite getMapInt32ForeignMessageOrThrow(
        int key);
  }
  /**
   * Protobuf type {@code protobuf_unittest.TestArenaMapLite}
   */
  public  static final class TestArenaMapLite extends
      com.google.protobuf.GeneratedMessageLite<
          TestArenaMapLite, TestArenaMapLite.Builder> implements
      // @@protoc_insertion_point(message_implements:protobuf_unittest.TestArenaMapLite)
      TestArenaMapLiteOrBuilder {
    private TestArenaMapLite() {
    }
    public static final int MAP_INT32_INT32_FIELD_NUMBER = 1;
    private static final class MapInt32Int32DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> mapInt32Int32_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMapInt32Int32() {
      return mapInt32Int32_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableMapInt32Int32() {
      if (!mapInt32Int32_.isMutable()) {
        mapInt32Int32_ = mapInt32Int32_.mutableCopy();
      }
      return mapInt32Int32_;
    }
    @java.lang.Override

    public int getMapInt32Int32Count() {
      return internalGetMapInt32Int32().size();
    }
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */
    @java.lang.Override

    public boolean containsMapInt32Int32(
        int key) {
      
      return internalGetMapInt32Int32().containsKey(key);
    }
    /**
     * Use {@link #getMapInt32Int32Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapInt32Int32() {
      return getMapInt32Int32Map();
    }
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapInt32Int32Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapInt32Int32());
    }
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */
    @java.lang.Override

    public int getMapInt32Int32OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapInt32Int32();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */
    @java.lang.Override

    public int getMapInt32Int32OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapInt32Int32();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableMapInt32Int32Map() {
      return internalGetMutableMapInt32Int32();
    }

    public static final int MAP_INT64_INT64_FIELD_NUMBER = 2;
    private static final class MapInt64Int64DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> mapInt64Int64_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMapInt64Int64() {
      return mapInt64Int64_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableMapInt64Int64() {
      if (!mapInt64Int64_.isMutable()) {
        mapInt64Int64_ = mapInt64Int64_.mutableCopy();
      }
      return mapInt64Int64_;
    }
    @java.lang.Override

    public int getMapInt64Int64Count() {
      return internalGetMapInt64Int64().size();
    }
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */
    @java.lang.Override

    public boolean containsMapInt64Int64(
        long key) {
      
      return internalGetMapInt64Int64().containsKey(key);
    }
    /**
     * Use {@link #getMapInt64Int64Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getMapInt64Int64() {
      return getMapInt64Int64Map();
    }
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getMapInt64Int64Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapInt64Int64());
    }
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */
    @java.lang.Override

    public long getMapInt64Int64OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapInt64Int64();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */
    @java.lang.Override

    public long getMapInt64Int64OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapInt64Int64();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableMapInt64Int64Map() {
      return internalGetMutableMapInt64Int64();
    }

    public static final int MAP_UINT32_UINT32_FIELD_NUMBER = 3;
    private static final class MapUint32Uint32DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> mapUint32Uint32_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMapUint32Uint32() {
      return mapUint32Uint32_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableMapUint32Uint32() {
      if (!mapUint32Uint32_.isMutable()) {
        mapUint32Uint32_ = mapUint32Uint32_.mutableCopy();
      }
      return mapUint32Uint32_;
    }
    @java.lang.Override

    public int getMapUint32Uint32Count() {
      return internalGetMapUint32Uint32().size();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */
    @java.lang.Override

    public boolean containsMapUint32Uint32(
        int key) {
      
      return internalGetMapUint32Uint32().containsKey(key);
    }
    /**
     * Use {@link #getMapUint32Uint32Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapUint32Uint32() {
      return getMapUint32Uint32Map();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapUint32Uint32Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapUint32Uint32());
    }
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */
    @java.lang.Override

    public int getMapUint32Uint32OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapUint32Uint32();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */
    @java.lang.Override

    public int getMapUint32Uint32OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapUint32Uint32();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableMapUint32Uint32Map() {
      return internalGetMutableMapUint32Uint32();
    }

    public static final int MAP_UINT64_UINT64_FIELD_NUMBER = 4;
    private static final class MapUint64Uint64DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> mapUint64Uint64_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMapUint64Uint64() {
      return mapUint64Uint64_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableMapUint64Uint64() {
      if (!mapUint64Uint64_.isMutable()) {
        mapUint64Uint64_ = mapUint64Uint64_.mutableCopy();
      }
      return mapUint64Uint64_;
    }
    @java.lang.Override

    public int getMapUint64Uint64Count() {
      return internalGetMapUint64Uint64().size();
    }
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */
    @java.lang.Override

    public boolean containsMapUint64Uint64(
        long key) {
      
      return internalGetMapUint64Uint64().containsKey(key);
    }
    /**
     * Use {@link #getMapUint64Uint64Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getMapUint64Uint64() {
      return getMapUint64Uint64Map();
    }
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getMapUint64Uint64Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapUint64Uint64());
    }
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */
    @java.lang.Override

    public long getMapUint64Uint64OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapUint64Uint64();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */
    @java.lang.Override

    public long getMapUint64Uint64OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapUint64Uint64();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableMapUint64Uint64Map() {
      return internalGetMutableMapUint64Uint64();
    }

    public static final int MAP_SINT32_SINT32_FIELD_NUMBER = 5;
    private static final class MapSint32Sint32DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> mapSint32Sint32_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMapSint32Sint32() {
      return mapSint32Sint32_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableMapSint32Sint32() {
      if (!mapSint32Sint32_.isMutable()) {
        mapSint32Sint32_ = mapSint32Sint32_.mutableCopy();
      }
      return mapSint32Sint32_;
    }
    @java.lang.Override

    public int getMapSint32Sint32Count() {
      return internalGetMapSint32Sint32().size();
    }
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */
    @java.lang.Override

    public boolean containsMapSint32Sint32(
        int key) {
      
      return internalGetMapSint32Sint32().containsKey(key);
    }
    /**
     * Use {@link #getMapSint32Sint32Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapSint32Sint32() {
      return getMapSint32Sint32Map();
    }
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapSint32Sint32Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapSint32Sint32());
    }
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */
    @java.lang.Override

    public int getMapSint32Sint32OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapSint32Sint32();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */
    @java.lang.Override

    public int getMapSint32Sint32OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapSint32Sint32();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableMapSint32Sint32Map() {
      return internalGetMutableMapSint32Sint32();
    }

    public static final int MAP_SINT64_SINT64_FIELD_NUMBER = 6;
    private static final class MapSint64Sint64DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> mapSint64Sint64_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMapSint64Sint64() {
      return mapSint64Sint64_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableMapSint64Sint64() {
      if (!mapSint64Sint64_.isMutable()) {
        mapSint64Sint64_ = mapSint64Sint64_.mutableCopy();
      }
      return mapSint64Sint64_;
    }
    @java.lang.Override

    public int getMapSint64Sint64Count() {
      return internalGetMapSint64Sint64().size();
    }
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */
    @java.lang.Override

    public boolean containsMapSint64Sint64(
        long key) {
      
      return internalGetMapSint64Sint64().containsKey(key);
    }
    /**
     * Use {@link #getMapSint64Sint64Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getMapSint64Sint64() {
      return getMapSint64Sint64Map();
    }
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getMapSint64Sint64Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapSint64Sint64());
    }
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */
    @java.lang.Override

    public long getMapSint64Sint64OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapSint64Sint64();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */
    @java.lang.Override

    public long getMapSint64Sint64OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapSint64Sint64();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableMapSint64Sint64Map() {
      return internalGetMutableMapSint64Sint64();
    }

    public static final int MAP_FIXED32_FIXED32_FIELD_NUMBER = 7;
    private static final class MapFixed32Fixed32DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> mapFixed32Fixed32_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMapFixed32Fixed32() {
      return mapFixed32Fixed32_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableMapFixed32Fixed32() {
      if (!mapFixed32Fixed32_.isMutable()) {
        mapFixed32Fixed32_ = mapFixed32Fixed32_.mutableCopy();
      }
      return mapFixed32Fixed32_;
    }
    @java.lang.Override

    public int getMapFixed32Fixed32Count() {
      return internalGetMapFixed32Fixed32().size();
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */
    @java.lang.Override

    public boolean containsMapFixed32Fixed32(
        int key) {
      
      return internalGetMapFixed32Fixed32().containsKey(key);
    }
    /**
     * Use {@link #getMapFixed32Fixed32Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapFixed32Fixed32() {
      return getMapFixed32Fixed32Map();
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapFixed32Fixed32Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapFixed32Fixed32());
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */
    @java.lang.Override

    public int getMapFixed32Fixed32OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapFixed32Fixed32();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */
    @java.lang.Override

    public int getMapFixed32Fixed32OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapFixed32Fixed32();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableMapFixed32Fixed32Map() {
      return internalGetMutableMapFixed32Fixed32();
    }

    public static final int MAP_FIXED64_FIXED64_FIELD_NUMBER = 8;
    private static final class MapFixed64Fixed64DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> mapFixed64Fixed64_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMapFixed64Fixed64() {
      return mapFixed64Fixed64_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableMapFixed64Fixed64() {
      if (!mapFixed64Fixed64_.isMutable()) {
        mapFixed64Fixed64_ = mapFixed64Fixed64_.mutableCopy();
      }
      return mapFixed64Fixed64_;
    }
    @java.lang.Override

    public int getMapFixed64Fixed64Count() {
      return internalGetMapFixed64Fixed64().size();
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */
    @java.lang.Override

    public boolean containsMapFixed64Fixed64(
        long key) {
      
      return internalGetMapFixed64Fixed64().containsKey(key);
    }
    /**
     * Use {@link #getMapFixed64Fixed64Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getMapFixed64Fixed64() {
      return getMapFixed64Fixed64Map();
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getMapFixed64Fixed64Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapFixed64Fixed64());
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */
    @java.lang.Override

    public long getMapFixed64Fixed64OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapFixed64Fixed64();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */
    @java.lang.Override

    public long getMapFixed64Fixed64OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapFixed64Fixed64();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableMapFixed64Fixed64Map() {
      return internalGetMutableMapFixed64Fixed64();
    }

    public static final int MAP_SFIXED32_SFIXED32_FIELD_NUMBER = 9;
    private static final class MapSfixed32Sfixed32DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> mapSfixed32Sfixed32_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMapSfixed32Sfixed32() {
      return mapSfixed32Sfixed32_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableMapSfixed32Sfixed32() {
      if (!mapSfixed32Sfixed32_.isMutable()) {
        mapSfixed32Sfixed32_ = mapSfixed32Sfixed32_.mutableCopy();
      }
      return mapSfixed32Sfixed32_;
    }
    @java.lang.Override

    public int getMapSfixed32Sfixed32Count() {
      return internalGetMapSfixed32Sfixed32().size();
    }
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */
    @java.lang.Override

    public boolean containsMapSfixed32Sfixed32(
        int key) {
      
      return internalGetMapSfixed32Sfixed32().containsKey(key);
    }
    /**
     * Use {@link #getMapSfixed32Sfixed32Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapSfixed32Sfixed32() {
      return getMapSfixed32Sfixed32Map();
    }
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getMapSfixed32Sfixed32Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapSfixed32Sfixed32());
    }
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */
    @java.lang.Override

    public int getMapSfixed32Sfixed32OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapSfixed32Sfixed32();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */
    @java.lang.Override

    public int getMapSfixed32Sfixed32OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapSfixed32Sfixed32();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableMapSfixed32Sfixed32Map() {
      return internalGetMutableMapSfixed32Sfixed32();
    }

    public static final int MAP_SFIXED64_SFIXED64_FIELD_NUMBER = 10;
    private static final class MapSfixed64Sfixed64DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> mapSfixed64Sfixed64_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMapSfixed64Sfixed64() {
      return mapSfixed64Sfixed64_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableMapSfixed64Sfixed64() {
      if (!mapSfixed64Sfixed64_.isMutable()) {
        mapSfixed64Sfixed64_ = mapSfixed64Sfixed64_.mutableCopy();
      }
      return mapSfixed64Sfixed64_;
    }
    @java.lang.Override

    public int getMapSfixed64Sfixed64Count() {
      return internalGetMapSfixed64Sfixed64().size();
    }
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */
    @java.lang.Override

    public boolean containsMapSfixed64Sfixed64(
        long key) {
      
      return internalGetMapSfixed64Sfixed64().containsKey(key);
    }
    /**
     * Use {@link #getMapSfixed64Sfixed64Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getMapSfixed64Sfixed64() {
      return getMapSfixed64Sfixed64Map();
    }
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getMapSfixed64Sfixed64Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapSfixed64Sfixed64());
    }
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */
    @java.lang.Override

    public long getMapSfixed64Sfixed64OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapSfixed64Sfixed64();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */
    @java.lang.Override

    public long getMapSfixed64Sfixed64OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetMapSfixed64Sfixed64();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableMapSfixed64Sfixed64Map() {
      return internalGetMutableMapSfixed64Sfixed64();
    }

    public static final int MAP_INT32_FLOAT_FIELD_NUMBER = 11;
    private static final class MapInt32FloatDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Float> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Float>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FLOAT,
                  0F);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Float> mapInt32Float_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Float>
    internalGetMapInt32Float() {
      return mapInt32Float_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Float>
    internalGetMutableMapInt32Float() {
      if (!mapInt32Float_.isMutable()) {
        mapInt32Float_ = mapInt32Float_.mutableCopy();
      }
      return mapInt32Float_;
    }
    @java.lang.Override

    public int getMapInt32FloatCount() {
      return internalGetMapInt32Float().size();
    }
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */
    @java.lang.Override

    public boolean containsMapInt32Float(
        int key) {
      
      return internalGetMapInt32Float().containsKey(key);
    }
    /**
     * Use {@link #getMapInt32FloatMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Float> getMapInt32Float() {
      return getMapInt32FloatMap();
    }
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Float> getMapInt32FloatMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapInt32Float());
    }
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */
    @java.lang.Override

    public float getMapInt32FloatOrDefault(
        int key,
        float defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Float> map =
          internalGetMapInt32Float();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */
    @java.lang.Override

    public float getMapInt32FloatOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Float> map =
          internalGetMapInt32Float();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Float>
    getMutableMapInt32FloatMap() {
      return internalGetMutableMapInt32Float();
    }

    public static final int MAP_INT32_DOUBLE_FIELD_NUMBER = 12;
    private static final class MapInt32DoubleDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Double>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Double> mapInt32Double_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Double>
    internalGetMapInt32Double() {
      return mapInt32Double_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Double>
    internalGetMutableMapInt32Double() {
      if (!mapInt32Double_.isMutable()) {
        mapInt32Double_ = mapInt32Double_.mutableCopy();
      }
      return mapInt32Double_;
    }
    @java.lang.Override

    public int getMapInt32DoubleCount() {
      return internalGetMapInt32Double().size();
    }
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */
    @java.lang.Override

    public boolean containsMapInt32Double(
        int key) {
      
      return internalGetMapInt32Double().containsKey(key);
    }
    /**
     * Use {@link #getMapInt32DoubleMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Double> getMapInt32Double() {
      return getMapInt32DoubleMap();
    }
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Double> getMapInt32DoubleMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapInt32Double());
    }
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */
    @java.lang.Override

    public double getMapInt32DoubleOrDefault(
        int key,
        double defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Double> map =
          internalGetMapInt32Double();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */
    @java.lang.Override

    public double getMapInt32DoubleOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Double> map =
          internalGetMapInt32Double();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Double>
    getMutableMapInt32DoubleMap() {
      return internalGetMutableMapInt32Double();
    }

    public static final int MAP_BOOL_BOOL_FIELD_NUMBER = 13;
    private static final class MapBoolBoolDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.Boolean> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.Boolean>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.Boolean> mapBoolBool_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Boolean>
    internalGetMapBoolBool() {
      return mapBoolBool_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Boolean>
    internalGetMutableMapBoolBool() {
      if (!mapBoolBool_.isMutable()) {
        mapBoolBool_ = mapBoolBool_.mutableCopy();
      }
      return mapBoolBool_;
    }
    @java.lang.Override

    public int getMapBoolBoolCount() {
      return internalGetMapBoolBool().size();
    }
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */
    @java.lang.Override

    public boolean containsMapBoolBool(
        boolean key) {
      
      return internalGetMapBoolBool().containsKey(key);
    }
    /**
     * Use {@link #getMapBoolBoolMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Boolean> getMapBoolBool() {
      return getMapBoolBoolMap();
    }
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.Boolean> getMapBoolBoolMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapBoolBool());
    }
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */
    @java.lang.Override

    public boolean getMapBoolBoolOrDefault(
        boolean key,
        boolean defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Boolean> map =
          internalGetMapBoolBool();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */
    @java.lang.Override

    public boolean getMapBoolBoolOrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Boolean> map =
          internalGetMapBoolBool();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
     */
    private java.util.Map<java.lang.Boolean, java.lang.Boolean>
    getMutableMapBoolBoolMap() {
      return internalGetMutableMapBoolBool();
    }

    public static final int MAP_STRING_STRING_FIELD_NUMBER = 14;
    private static final class MapStringStringDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.String> mapStringString_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
    internalGetMapStringString() {
      return mapStringString_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
    internalGetMutableMapStringString() {
      if (!mapStringString_.isMutable()) {
        mapStringString_ = mapStringString_.mutableCopy();
      }
      return mapStringString_;
    }
    @java.lang.Override

    public int getMapStringStringCount() {
      return internalGetMapStringString().size();
    }
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */
    @java.lang.Override

    public boolean containsMapStringString(
        java.lang.String key) {
      key.getClass();
      return internalGetMapStringString().containsKey(key);
    }
    /**
     * Use {@link #getMapStringStringMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMapStringString() {
      return getMapStringStringMap();
    }
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getMapStringStringMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapStringString());
    }
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */
    @java.lang.Override

    public java.lang.String getMapStringStringOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMapStringString();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */
    @java.lang.Override

    public java.lang.String getMapStringStringOrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMapStringString();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, string&gt; map_string_string = 14;</code>
     */
    private java.util.Map<java.lang.String, java.lang.String>
    getMutableMapStringStringMap() {
      return internalGetMutableMapStringString();
    }

    public static final int MAP_INT32_BYTES_FIELD_NUMBER = 15;
    private static final class MapInt32BytesDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, com.google.protobuf.ByteString> mapInt32Bytes_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.ByteString>
    internalGetMapInt32Bytes() {
      return mapInt32Bytes_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.ByteString>
    internalGetMutableMapInt32Bytes() {
      if (!mapInt32Bytes_.isMutable()) {
        mapInt32Bytes_ = mapInt32Bytes_.mutableCopy();
      }
      return mapInt32Bytes_;
    }
    @java.lang.Override

    public int getMapInt32BytesCount() {
      return internalGetMapInt32Bytes().size();
    }
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */
    @java.lang.Override

    public boolean containsMapInt32Bytes(
        int key) {
      
      return internalGetMapInt32Bytes().containsKey(key);
    }
    /**
     * Use {@link #getMapInt32BytesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getMapInt32Bytes() {
      return getMapInt32BytesMap();
    }
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getMapInt32BytesMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapInt32Bytes());
    }
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getMapInt32BytesOrDefault(
        int key,
        com.google.protobuf.ByteString defaultValue) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
          internalGetMapInt32Bytes();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getMapInt32BytesOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
          internalGetMapInt32Bytes();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getMutableMapInt32BytesMap() {
      return internalGetMutableMapInt32Bytes();
    }

    public static final int MAP_INT32_ENUM_FIELD_NUMBER = 16;
    private static final class MapInt32EnumDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  protobuf_unittest.MapLiteUnittest.MapEnumLite.MAP_ENUM_FOO_LITE.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> mapInt32Enum_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMapInt32Enum() {
      return mapInt32Enum_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableMapInt32Enum() {
      if (!mapInt32Enum_.isMutable()) {
        mapInt32Enum_ = mapInt32Enum_.mutableCopy();
      }
      return mapInt32Enum_;
    }
    @java.lang.Override

    public int getMapInt32EnumCount() {
      return internalGetMapInt32Enum().size();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    @java.lang.Override

    public boolean containsMapInt32Enum(
        int key) {
      
      return internalGetMapInt32Enum().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite> mapInt32EnumValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                protobuf_unittest.MapLiteUnittest.MapEnumLite.internalGetValueMap(),
                protobuf_unittest.MapLiteUnittest.MapEnumLite.MAP_ENUM_FOO_LITE);
    /**
     * Use {@link #getMapInt32EnumMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite>
    getMapInt32Enum() {
      return getMapInt32EnumMap();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite>
    getMapInt32EnumMap() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite, java.lang.Integer>(
                internalGetMapInt32Enum(),
                mapInt32EnumValueConverter));
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    @java.lang.Override

    public protobuf_unittest.MapLiteUnittest.MapEnumLite getMapInt32EnumOrDefault(
        int key,
        protobuf_unittest.MapLiteUnittest.MapEnumLite defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapInt32Enum();
      return map.containsKey(key)
             ? mapInt32EnumValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    @java.lang.Override

    public protobuf_unittest.MapLiteUnittest.MapEnumLite getMapInt32EnumOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetMapInt32Enum();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return mapInt32EnumValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
     */
    private java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite>
    getMutableMapInt32EnumMap() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite, java.lang.Integer>(
              internalGetMutableMapInt32Enum(),
              mapInt32EnumValueConverter);
    }

    public static final int MAP_INT32_FOREIGN_MESSAGE_FIELD_NUMBER = 17;
    private static final class MapInt32ForeignMessageDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite> mapInt32ForeignMessage_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite>
    internalGetMapInt32ForeignMessage() {
      return mapInt32ForeignMessage_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite>
    internalGetMutableMapInt32ForeignMessage() {
      if (!mapInt32ForeignMessage_.isMutable()) {
        mapInt32ForeignMessage_ = mapInt32ForeignMessage_.mutableCopy();
      }
      return mapInt32ForeignMessage_;
    }
    @java.lang.Override

    public int getMapInt32ForeignMessageCount() {
      return internalGetMapInt32ForeignMessage().size();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
     */
    @java.lang.Override

    public boolean containsMapInt32ForeignMessage(
        int key) {
      
      return internalGetMapInt32ForeignMessage().containsKey(key);
    }
    /**
     * Use {@link #getMapInt32ForeignMessageMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite> getMapInt32ForeignMessage() {
      return getMapInt32ForeignMessageMap();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite> getMapInt32ForeignMessageMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapInt32ForeignMessage());
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
     */
    @java.lang.Override

    public protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite getMapInt32ForeignMessageOrDefault(
        int key,
        protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite defaultValue) {
      
      java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite> map =
          internalGetMapInt32ForeignMessage();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
     */
    @java.lang.Override

    public protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite getMapInt32ForeignMessageOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite> map =
          internalGetMapInt32ForeignMessage();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
     */
    private java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite>
    getMutableMapInt32ForeignMessageMap() {
      return internalGetMutableMapInt32ForeignMessage();
    }

    public static protobuf_unittest.MapLiteUnittest.TestArenaMapLite parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestArenaMapLite parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestArenaMapLite parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestArenaMapLite parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestArenaMapLite parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestArenaMapLite parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestArenaMapLite parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestArenaMapLite parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestArenaMapLite parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestArenaMapLite parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestArenaMapLite parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestArenaMapLite parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(protobuf_unittest.MapLiteUnittest.TestArenaMapLite prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code protobuf_unittest.TestArenaMapLite}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          protobuf_unittest.MapLiteUnittest.TestArenaMapLite, Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf_unittest.TestArenaMapLite)
        protobuf_unittest.MapLiteUnittest.TestArenaMapLiteOrBuilder {
      // Construct using protobuf_unittest.MapLiteUnittest.TestArenaMapLite.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      @java.lang.Override

      public int getMapInt32Int32Count() {
        return instance.getMapInt32Int32Map().size();
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
       */
      @java.lang.Override

      public boolean containsMapInt32Int32(
          int key) {
        
        return instance.getMapInt32Int32Map().containsKey(key);
      }

      public Builder clearMapInt32Int32() {
        copyOnWrite();
        instance.getMutableMapInt32Int32Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
       */

      public Builder removeMapInt32Int32(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapInt32Int32Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapInt32Int32Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapInt32Int32() {
        return getMapInt32Int32Map();
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapInt32Int32Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapInt32Int32Map());
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
       */
      @java.lang.Override

      public int getMapInt32Int32OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapInt32Int32Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
       */
      @java.lang.Override

      public int getMapInt32Int32OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapInt32Int32Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
       */
      public Builder putMapInt32Int32(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableMapInt32Int32Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 1;</code>
       */
      public Builder putAllMapInt32Int32(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableMapInt32Int32Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapInt64Int64Count() {
        return instance.getMapInt64Int64Map().size();
      }
      /**
       * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
       */
      @java.lang.Override

      public boolean containsMapInt64Int64(
          long key) {
        
        return instance.getMapInt64Int64Map().containsKey(key);
      }

      public Builder clearMapInt64Int64() {
        copyOnWrite();
        instance.getMutableMapInt64Int64Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
       */

      public Builder removeMapInt64Int64(
          long key) {
        
        copyOnWrite();
        instance.getMutableMapInt64Int64Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapInt64Int64Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getMapInt64Int64() {
        return getMapInt64Int64Map();
      }
      /**
       * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getMapInt64Int64Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapInt64Int64Map());
      }
      /**
       * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
       */
      @java.lang.Override

      public long getMapInt64Int64OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapInt64Int64Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
       */
      @java.lang.Override

      public long getMapInt64Int64OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapInt64Int64Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
       */
      public Builder putMapInt64Int64(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableMapInt64Int64Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, int64&gt; map_int64_int64 = 2;</code>
       */
      public Builder putAllMapInt64Int64(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableMapInt64Int64Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapUint32Uint32Count() {
        return instance.getMapUint32Uint32Map().size();
      }
      /**
       * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
       */
      @java.lang.Override

      public boolean containsMapUint32Uint32(
          int key) {
        
        return instance.getMapUint32Uint32Map().containsKey(key);
      }

      public Builder clearMapUint32Uint32() {
        copyOnWrite();
        instance.getMutableMapUint32Uint32Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
       */

      public Builder removeMapUint32Uint32(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapUint32Uint32Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapUint32Uint32Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapUint32Uint32() {
        return getMapUint32Uint32Map();
      }
      /**
       * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapUint32Uint32Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapUint32Uint32Map());
      }
      /**
       * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
       */
      @java.lang.Override

      public int getMapUint32Uint32OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapUint32Uint32Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
       */
      @java.lang.Override

      public int getMapUint32Uint32OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapUint32Uint32Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
       */
      public Builder putMapUint32Uint32(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableMapUint32Uint32Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, uint32&gt; map_uint32_uint32 = 3;</code>
       */
      public Builder putAllMapUint32Uint32(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableMapUint32Uint32Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapUint64Uint64Count() {
        return instance.getMapUint64Uint64Map().size();
      }
      /**
       * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
       */
      @java.lang.Override

      public boolean containsMapUint64Uint64(
          long key) {
        
        return instance.getMapUint64Uint64Map().containsKey(key);
      }

      public Builder clearMapUint64Uint64() {
        copyOnWrite();
        instance.getMutableMapUint64Uint64Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
       */

      public Builder removeMapUint64Uint64(
          long key) {
        
        copyOnWrite();
        instance.getMutableMapUint64Uint64Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapUint64Uint64Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getMapUint64Uint64() {
        return getMapUint64Uint64Map();
      }
      /**
       * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getMapUint64Uint64Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapUint64Uint64Map());
      }
      /**
       * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
       */
      @java.lang.Override

      public long getMapUint64Uint64OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapUint64Uint64Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
       */
      @java.lang.Override

      public long getMapUint64Uint64OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapUint64Uint64Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
       */
      public Builder putMapUint64Uint64(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableMapUint64Uint64Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, uint64&gt; map_uint64_uint64 = 4;</code>
       */
      public Builder putAllMapUint64Uint64(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableMapUint64Uint64Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapSint32Sint32Count() {
        return instance.getMapSint32Sint32Map().size();
      }
      /**
       * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
       */
      @java.lang.Override

      public boolean containsMapSint32Sint32(
          int key) {
        
        return instance.getMapSint32Sint32Map().containsKey(key);
      }

      public Builder clearMapSint32Sint32() {
        copyOnWrite();
        instance.getMutableMapSint32Sint32Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
       */

      public Builder removeMapSint32Sint32(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapSint32Sint32Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapSint32Sint32Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapSint32Sint32() {
        return getMapSint32Sint32Map();
      }
      /**
       * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapSint32Sint32Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapSint32Sint32Map());
      }
      /**
       * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
       */
      @java.lang.Override

      public int getMapSint32Sint32OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapSint32Sint32Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
       */
      @java.lang.Override

      public int getMapSint32Sint32OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapSint32Sint32Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
       */
      public Builder putMapSint32Sint32(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableMapSint32Sint32Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, sint32&gt; map_sint32_sint32 = 5;</code>
       */
      public Builder putAllMapSint32Sint32(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableMapSint32Sint32Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapSint64Sint64Count() {
        return instance.getMapSint64Sint64Map().size();
      }
      /**
       * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
       */
      @java.lang.Override

      public boolean containsMapSint64Sint64(
          long key) {
        
        return instance.getMapSint64Sint64Map().containsKey(key);
      }

      public Builder clearMapSint64Sint64() {
        copyOnWrite();
        instance.getMutableMapSint64Sint64Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
       */

      public Builder removeMapSint64Sint64(
          long key) {
        
        copyOnWrite();
        instance.getMutableMapSint64Sint64Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapSint64Sint64Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getMapSint64Sint64() {
        return getMapSint64Sint64Map();
      }
      /**
       * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getMapSint64Sint64Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapSint64Sint64Map());
      }
      /**
       * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
       */
      @java.lang.Override

      public long getMapSint64Sint64OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapSint64Sint64Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
       */
      @java.lang.Override

      public long getMapSint64Sint64OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapSint64Sint64Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
       */
      public Builder putMapSint64Sint64(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableMapSint64Sint64Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, sint64&gt; map_sint64_sint64 = 6;</code>
       */
      public Builder putAllMapSint64Sint64(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableMapSint64Sint64Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapFixed32Fixed32Count() {
        return instance.getMapFixed32Fixed32Map().size();
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
       */
      @java.lang.Override

      public boolean containsMapFixed32Fixed32(
          int key) {
        
        return instance.getMapFixed32Fixed32Map().containsKey(key);
      }

      public Builder clearMapFixed32Fixed32() {
        copyOnWrite();
        instance.getMutableMapFixed32Fixed32Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
       */

      public Builder removeMapFixed32Fixed32(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapFixed32Fixed32Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapFixed32Fixed32Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapFixed32Fixed32() {
        return getMapFixed32Fixed32Map();
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapFixed32Fixed32Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapFixed32Fixed32Map());
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
       */
      @java.lang.Override

      public int getMapFixed32Fixed32OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapFixed32Fixed32Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
       */
      @java.lang.Override

      public int getMapFixed32Fixed32OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapFixed32Fixed32Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
       */
      public Builder putMapFixed32Fixed32(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableMapFixed32Fixed32Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; map_fixed32_fixed32 = 7;</code>
       */
      public Builder putAllMapFixed32Fixed32(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableMapFixed32Fixed32Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapFixed64Fixed64Count() {
        return instance.getMapFixed64Fixed64Map().size();
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
       */
      @java.lang.Override

      public boolean containsMapFixed64Fixed64(
          long key) {
        
        return instance.getMapFixed64Fixed64Map().containsKey(key);
      }

      public Builder clearMapFixed64Fixed64() {
        copyOnWrite();
        instance.getMutableMapFixed64Fixed64Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
       */

      public Builder removeMapFixed64Fixed64(
          long key) {
        
        copyOnWrite();
        instance.getMutableMapFixed64Fixed64Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapFixed64Fixed64Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getMapFixed64Fixed64() {
        return getMapFixed64Fixed64Map();
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getMapFixed64Fixed64Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapFixed64Fixed64Map());
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
       */
      @java.lang.Override

      public long getMapFixed64Fixed64OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapFixed64Fixed64Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
       */
      @java.lang.Override

      public long getMapFixed64Fixed64OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapFixed64Fixed64Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
       */
      public Builder putMapFixed64Fixed64(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableMapFixed64Fixed64Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; map_fixed64_fixed64 = 8;</code>
       */
      public Builder putAllMapFixed64Fixed64(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableMapFixed64Fixed64Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapSfixed32Sfixed32Count() {
        return instance.getMapSfixed32Sfixed32Map().size();
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
       */
      @java.lang.Override

      public boolean containsMapSfixed32Sfixed32(
          int key) {
        
        return instance.getMapSfixed32Sfixed32Map().containsKey(key);
      }

      public Builder clearMapSfixed32Sfixed32() {
        copyOnWrite();
        instance.getMutableMapSfixed32Sfixed32Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
       */

      public Builder removeMapSfixed32Sfixed32(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapSfixed32Sfixed32Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapSfixed32Sfixed32Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapSfixed32Sfixed32() {
        return getMapSfixed32Sfixed32Map();
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getMapSfixed32Sfixed32Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapSfixed32Sfixed32Map());
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
       */
      @java.lang.Override

      public int getMapSfixed32Sfixed32OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapSfixed32Sfixed32Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
       */
      @java.lang.Override

      public int getMapSfixed32Sfixed32OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getMapSfixed32Sfixed32Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
       */
      public Builder putMapSfixed32Sfixed32(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableMapSfixed32Sfixed32Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; map_sfixed32_sfixed32 = 9;</code>
       */
      public Builder putAllMapSfixed32Sfixed32(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableMapSfixed32Sfixed32Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapSfixed64Sfixed64Count() {
        return instance.getMapSfixed64Sfixed64Map().size();
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
       */
      @java.lang.Override

      public boolean containsMapSfixed64Sfixed64(
          long key) {
        
        return instance.getMapSfixed64Sfixed64Map().containsKey(key);
      }

      public Builder clearMapSfixed64Sfixed64() {
        copyOnWrite();
        instance.getMutableMapSfixed64Sfixed64Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
       */

      public Builder removeMapSfixed64Sfixed64(
          long key) {
        
        copyOnWrite();
        instance.getMutableMapSfixed64Sfixed64Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapSfixed64Sfixed64Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getMapSfixed64Sfixed64() {
        return getMapSfixed64Sfixed64Map();
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getMapSfixed64Sfixed64Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapSfixed64Sfixed64Map());
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
       */
      @java.lang.Override

      public long getMapSfixed64Sfixed64OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapSfixed64Sfixed64Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
       */
      @java.lang.Override

      public long getMapSfixed64Sfixed64OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getMapSfixed64Sfixed64Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
       */
      public Builder putMapSfixed64Sfixed64(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableMapSfixed64Sfixed64Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; map_sfixed64_sfixed64 = 10;</code>
       */
      public Builder putAllMapSfixed64Sfixed64(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableMapSfixed64Sfixed64Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapInt32FloatCount() {
        return instance.getMapInt32FloatMap().size();
      }
      /**
       * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
       */
      @java.lang.Override

      public boolean containsMapInt32Float(
          int key) {
        
        return instance.getMapInt32FloatMap().containsKey(key);
      }

      public Builder clearMapInt32Float() {
        copyOnWrite();
        instance.getMutableMapInt32FloatMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
       */

      public Builder removeMapInt32Float(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapInt32FloatMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapInt32FloatMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Float> getMapInt32Float() {
        return getMapInt32FloatMap();
      }
      /**
       * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Float> getMapInt32FloatMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapInt32FloatMap());
      }
      /**
       * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
       */
      @java.lang.Override

      public float getMapInt32FloatOrDefault(
          int key,
          float defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Float> map =
            instance.getMapInt32FloatMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
       */
      @java.lang.Override

      public float getMapInt32FloatOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Float> map =
            instance.getMapInt32FloatMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
       */
      public Builder putMapInt32Float(
          int key,
          float value) {
        
        
        copyOnWrite();
        instance.getMutableMapInt32FloatMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, float&gt; map_int32_float = 11;</code>
       */
      public Builder putAllMapInt32Float(
          java.util.Map<java.lang.Integer, java.lang.Float> values) {
        copyOnWrite();
        instance.getMutableMapInt32FloatMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapInt32DoubleCount() {
        return instance.getMapInt32DoubleMap().size();
      }
      /**
       * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
       */
      @java.lang.Override

      public boolean containsMapInt32Double(
          int key) {
        
        return instance.getMapInt32DoubleMap().containsKey(key);
      }

      public Builder clearMapInt32Double() {
        copyOnWrite();
        instance.getMutableMapInt32DoubleMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
       */

      public Builder removeMapInt32Double(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapInt32DoubleMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapInt32DoubleMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Double> getMapInt32Double() {
        return getMapInt32DoubleMap();
      }
      /**
       * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Double> getMapInt32DoubleMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapInt32DoubleMap());
      }
      /**
       * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
       */
      @java.lang.Override

      public double getMapInt32DoubleOrDefault(
          int key,
          double defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Double> map =
            instance.getMapInt32DoubleMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
       */
      @java.lang.Override

      public double getMapInt32DoubleOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Double> map =
            instance.getMapInt32DoubleMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
       */
      public Builder putMapInt32Double(
          int key,
          double value) {
        
        
        copyOnWrite();
        instance.getMutableMapInt32DoubleMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, double&gt; map_int32_double = 12;</code>
       */
      public Builder putAllMapInt32Double(
          java.util.Map<java.lang.Integer, java.lang.Double> values) {
        copyOnWrite();
        instance.getMutableMapInt32DoubleMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapBoolBoolCount() {
        return instance.getMapBoolBoolMap().size();
      }
      /**
       * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
       */
      @java.lang.Override

      public boolean containsMapBoolBool(
          boolean key) {
        
        return instance.getMapBoolBoolMap().containsKey(key);
      }

      public Builder clearMapBoolBool() {
        copyOnWrite();
        instance.getMutableMapBoolBoolMap().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
       */

      public Builder removeMapBoolBool(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableMapBoolBoolMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapBoolBoolMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, java.lang.Boolean> getMapBoolBool() {
        return getMapBoolBoolMap();
      }
      /**
       * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, java.lang.Boolean> getMapBoolBoolMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapBoolBoolMap());
      }
      /**
       * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
       */
      @java.lang.Override

      public boolean getMapBoolBoolOrDefault(
          boolean key,
          boolean defaultValue) {
        
        java.util.Map<java.lang.Boolean, java.lang.Boolean> map =
            instance.getMapBoolBoolMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
       */
      @java.lang.Override

      public boolean getMapBoolBoolOrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, java.lang.Boolean> map =
            instance.getMapBoolBoolMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
       */
      public Builder putMapBoolBool(
          boolean key,
          boolean value) {
        
        
        copyOnWrite();
        instance.getMutableMapBoolBoolMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, bool&gt; map_bool_bool = 13;</code>
       */
      public Builder putAllMapBoolBool(
          java.util.Map<java.lang.Boolean, java.lang.Boolean> values) {
        copyOnWrite();
        instance.getMutableMapBoolBoolMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapStringStringCount() {
        return instance.getMapStringStringMap().size();
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 14;</code>
       */
      @java.lang.Override

      public boolean containsMapStringString(
          java.lang.String key) {
        key.getClass();
        return instance.getMapStringStringMap().containsKey(key);
      }

      public Builder clearMapStringString() {
        copyOnWrite();
        instance.getMutableMapStringStringMap().clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 14;</code>
       */

      public Builder removeMapStringString(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableMapStringStringMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapStringStringMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getMapStringString() {
        return getMapStringStringMap();
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 14;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.String> getMapStringStringMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapStringStringMap());
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 14;</code>
       */
      @java.lang.Override

      public java.lang.String getMapStringStringOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.String> map =
            instance.getMapStringStringMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 14;</code>
       */
      @java.lang.Override

      public java.lang.String getMapStringStringOrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.String> map =
            instance.getMapStringStringMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 14;</code>
       */
      public Builder putMapStringString(
          java.lang.String key,
          java.lang.String value) {
        key.getClass();
        value.getClass();
        copyOnWrite();
        instance.getMutableMapStringStringMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 14;</code>
       */
      public Builder putAllMapStringString(
          java.util.Map<java.lang.String, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableMapStringStringMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapInt32BytesCount() {
        return instance.getMapInt32BytesMap().size();
      }
      /**
       * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
       */
      @java.lang.Override

      public boolean containsMapInt32Bytes(
          int key) {
        
        return instance.getMapInt32BytesMap().containsKey(key);
      }

      public Builder clearMapInt32Bytes() {
        copyOnWrite();
        instance.getMutableMapInt32BytesMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
       */

      public Builder removeMapInt32Bytes(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapInt32BytesMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapInt32BytesMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getMapInt32Bytes() {
        return getMapInt32BytesMap();
      }
      /**
       * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getMapInt32BytesMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapInt32BytesMap());
      }
      /**
       * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getMapInt32BytesOrDefault(
          int key,
          com.google.protobuf.ByteString defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
            instance.getMapInt32BytesMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getMapInt32BytesOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
            instance.getMapInt32BytesMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
       */
      public Builder putMapInt32Bytes(
          int key,
          com.google.protobuf.ByteString value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableMapInt32BytesMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, bytes&gt; map_int32_bytes = 15;</code>
       */
      public Builder putAllMapInt32Bytes(
          java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableMapInt32BytesMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapInt32EnumCount() {
        return instance.getMapInt32EnumMap().size();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
       */
      @java.lang.Override

      public boolean containsMapInt32Enum(
          int key) {
        
        return instance.getMapInt32EnumMap().containsKey(key);
      }

      public Builder clearMapInt32Enum() {
        copyOnWrite();
        instance.getMutableMapInt32EnumMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
       */

      public Builder removeMapInt32Enum(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapInt32EnumMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapInt32EnumMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite>
      getMapInt32Enum() {
        return getMapInt32EnumMap();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite>
      getMapInt32EnumMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapInt32EnumMap());
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
       */
      @java.lang.Override

      public protobuf_unittest.MapLiteUnittest.MapEnumLite getMapInt32EnumOrDefault(
          int key,
          protobuf_unittest.MapLiteUnittest.MapEnumLite defaultValue) {
        
        java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite> map =
            instance.getMapInt32EnumMap();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
       */
      @java.lang.Override

      public protobuf_unittest.MapLiteUnittest.MapEnumLite getMapInt32EnumOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite> map =
            instance.getMapInt32EnumMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
       */
      public Builder putMapInt32Enum(
          int key,
          protobuf_unittest.MapLiteUnittest.MapEnumLite value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableMapInt32EnumMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.MapEnumLite&gt; map_int32_enum = 16;</code>
       */
      public Builder putAllMapInt32Enum(
          java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.MapEnumLite> values) {
        copyOnWrite();
        instance.getMutableMapInt32EnumMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getMapInt32ForeignMessageCount() {
        return instance.getMapInt32ForeignMessageMap().size();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
       */
      @java.lang.Override

      public boolean containsMapInt32ForeignMessage(
          int key) {
        
        return instance.getMapInt32ForeignMessageMap().containsKey(key);
      }

      public Builder clearMapInt32ForeignMessage() {
        copyOnWrite();
        instance.getMutableMapInt32ForeignMessageMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
       */

      public Builder removeMapInt32ForeignMessage(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapInt32ForeignMessageMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapInt32ForeignMessageMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite> getMapInt32ForeignMessage() {
        return getMapInt32ForeignMessageMap();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite> getMapInt32ForeignMessageMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapInt32ForeignMessageMap());
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
       */
      @java.lang.Override

      public protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite getMapInt32ForeignMessageOrDefault(
          int key,
          protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite defaultValue) {
        
        java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite> map =
            instance.getMapInt32ForeignMessageMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
       */
      @java.lang.Override

      public protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite getMapInt32ForeignMessageOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite> map =
            instance.getMapInt32ForeignMessageMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
       */
      public Builder putMapInt32ForeignMessage(
          int key,
          protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableMapInt32ForeignMessageMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.ForeignMessageArenaLite&gt; map_int32_foreign_message = 17;</code>
       */
      public Builder putAllMapInt32ForeignMessage(
          java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite> values) {
        copyOnWrite();
        instance.getMutableMapInt32ForeignMessageMap().putAll(values);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protobuf_unittest.TestArenaMapLite)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new protobuf_unittest.MapLiteUnittest.TestArenaMapLite();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "mapInt32Int32_",
              MapInt32Int32DefaultEntryHolder.defaultEntry,
              "mapInt64Int64_",
              MapInt64Int64DefaultEntryHolder.defaultEntry,
              "mapUint32Uint32_",
              MapUint32Uint32DefaultEntryHolder.defaultEntry,
              "mapUint64Uint64_",
              MapUint64Uint64DefaultEntryHolder.defaultEntry,
              "mapSint32Sint32_",
              MapSint32Sint32DefaultEntryHolder.defaultEntry,
              "mapSint64Sint64_",
              MapSint64Sint64DefaultEntryHolder.defaultEntry,
              "mapFixed32Fixed32_",
              MapFixed32Fixed32DefaultEntryHolder.defaultEntry,
              "mapFixed64Fixed64_",
              MapFixed64Fixed64DefaultEntryHolder.defaultEntry,
              "mapSfixed32Sfixed32_",
              MapSfixed32Sfixed32DefaultEntryHolder.defaultEntry,
              "mapSfixed64Sfixed64_",
              MapSfixed64Sfixed64DefaultEntryHolder.defaultEntry,
              "mapInt32Float_",
              MapInt32FloatDefaultEntryHolder.defaultEntry,
              "mapInt32Double_",
              MapInt32DoubleDefaultEntryHolder.defaultEntry,
              "mapBoolBool_",
              MapBoolBoolDefaultEntryHolder.defaultEntry,
              "mapStringString_",
              MapStringStringDefaultEntryHolder.defaultEntry,
              "mapInt32Bytes_",
              MapInt32BytesDefaultEntryHolder.defaultEntry,
              "mapInt32Enum_",
              MapInt32EnumDefaultEntryHolder.defaultEntry,
              protobuf_unittest.MapLiteUnittest.MapEnumLite.internalGetVerifier(),
              "mapInt32ForeignMessage_",
              MapInt32ForeignMessageDefaultEntryHolder.defaultEntry,
            };
            java.lang.String info =
                "\u0001\u0011\u0000\u0000\u0001\u0011\u0011\u0011\u0000\u0000\u00012\u00022\u0003" +
                "2\u00042\u00052\u00062\u00072\b2\t2\n2\u000b2\f2\r2\u000e2\u000f2\u0010\u0832\u0011" +
                "2";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<protobuf_unittest.MapLiteUnittest.TestArenaMapLite> parser = PARSER;
          if (parser == null) {
            synchronized (protobuf_unittest.MapLiteUnittest.TestArenaMapLite.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<protobuf_unittest.MapLiteUnittest.TestArenaMapLite>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:protobuf_unittest.TestArenaMapLite)
    private static final protobuf_unittest.MapLiteUnittest.TestArenaMapLite DEFAULT_INSTANCE;
    static {
      TestArenaMapLite defaultInstance = new TestArenaMapLite();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TestArenaMapLite.class, defaultInstance);
    }

    public static protobuf_unittest.MapLiteUnittest.TestArenaMapLite getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TestArenaMapLite> PARSER;

    public static com.google.protobuf.Parser<TestArenaMapLite> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TestRequiredMessageMapLiteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protobuf_unittest.TestRequiredMessageMapLite)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
     */
    int getMapFieldCount();
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
     */
    boolean containsMapField(
        int key);
    /**
     * Use {@link #getMapFieldMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite>
    getMapField();
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
     */
    java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite>
    getMapFieldMap();
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
     */

    protobuf_unittest.MapLiteUnittest.TestRequiredLite getMapFieldOrDefault(
        int key,
        protobuf_unittest.MapLiteUnittest.TestRequiredLite defaultValue);
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
     */

    protobuf_unittest.MapLiteUnittest.TestRequiredLite getMapFieldOrThrow(
        int key);
  }
  /**
   * <pre>
   * Test embedded message with required fields
   * </pre>
   *
   * Protobuf type {@code protobuf_unittest.TestRequiredMessageMapLite}
   */
  public  static final class TestRequiredMessageMapLite extends
      com.google.protobuf.GeneratedMessageLite<
          TestRequiredMessageMapLite, TestRequiredMessageMapLite.Builder> implements
      // @@protoc_insertion_point(message_implements:protobuf_unittest.TestRequiredMessageMapLite)
      TestRequiredMessageMapLiteOrBuilder {
    private TestRequiredMessageMapLite() {
    }
    public static final int MAP_FIELD_FIELD_NUMBER = 1;
    private static final class MapFieldDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  protobuf_unittest.MapLiteUnittest.TestRequiredLite.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite> mapField_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite>
    internalGetMapField() {
      return mapField_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite>
    internalGetMutableMapField() {
      if (!mapField_.isMutable()) {
        mapField_ = mapField_.mutableCopy();
      }
      return mapField_;
    }
    @java.lang.Override

    public int getMapFieldCount() {
      return internalGetMapField().size();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
     */
    @java.lang.Override

    public boolean containsMapField(
        int key) {
      
      return internalGetMapField().containsKey(key);
    }
    /**
     * Use {@link #getMapFieldMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite> getMapField() {
      return getMapFieldMap();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite> getMapFieldMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapField());
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
     */
    @java.lang.Override

    public protobuf_unittest.MapLiteUnittest.TestRequiredLite getMapFieldOrDefault(
        int key,
        protobuf_unittest.MapLiteUnittest.TestRequiredLite defaultValue) {
      
      java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite> map =
          internalGetMapField();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
     */
    @java.lang.Override

    public protobuf_unittest.MapLiteUnittest.TestRequiredLite getMapFieldOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite> map =
          internalGetMapField();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
     */
    private java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite>
    getMutableMapFieldMap() {
      return internalGetMutableMapField();
    }

    public static protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Test embedded message with required fields
     * </pre>
     *
     * Protobuf type {@code protobuf_unittest.TestRequiredMessageMapLite}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite, Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf_unittest.TestRequiredMessageMapLite)
        protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLiteOrBuilder {
      // Construct using protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      @java.lang.Override

      public int getMapFieldCount() {
        return instance.getMapFieldMap().size();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
       */
      @java.lang.Override

      public boolean containsMapField(
          int key) {
        
        return instance.getMapFieldMap().containsKey(key);
      }

      public Builder clearMapField() {
        copyOnWrite();
        instance.getMutableMapFieldMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
       */

      public Builder removeMapField(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapFieldMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapFieldMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite> getMapField() {
        return getMapFieldMap();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite> getMapFieldMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapFieldMap());
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
       */
      @java.lang.Override

      public protobuf_unittest.MapLiteUnittest.TestRequiredLite getMapFieldOrDefault(
          int key,
          protobuf_unittest.MapLiteUnittest.TestRequiredLite defaultValue) {
        
        java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite> map =
            instance.getMapFieldMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
       */
      @java.lang.Override

      public protobuf_unittest.MapLiteUnittest.TestRequiredLite getMapFieldOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite> map =
            instance.getMapFieldMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
       */
      public Builder putMapField(
          int key,
          protobuf_unittest.MapLiteUnittest.TestRequiredLite value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableMapFieldMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.TestRequiredLite&gt; map_field = 1;</code>
       */
      public Builder putAllMapField(
          java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.TestRequiredLite> values) {
        copyOnWrite();
        instance.getMutableMapFieldMap().putAll(values);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protobuf_unittest.TestRequiredMessageMapLite)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "mapField_",
              MapFieldDefaultEntryHolder.defaultEntry,
            };
            java.lang.String info =
                "\u0001\u0001\u0000\u0000\u0001\u0001\u0001\u0001\u0000\u0001\u0001\u0432";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite> parser = PARSER;
          if (parser == null) {
            synchronized (protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:protobuf_unittest.TestRequiredMessageMapLite)
    private static final protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite DEFAULT_INSTANCE;
    static {
      TestRequiredMessageMapLite defaultInstance = new TestRequiredMessageMapLite();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TestRequiredMessageMapLite.class, defaultInstance);
    }

    public static protobuf_unittest.MapLiteUnittest.TestRequiredMessageMapLite getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TestRequiredMessageMapLite> PARSER;

    public static com.google.protobuf.Parser<TestRequiredMessageMapLite> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TestEnumMapLiteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protobuf_unittest.TestEnumMapLite)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
     */
    int getKnownMapFieldCount();
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
     */
    boolean containsKnownMapField(
        int key);
    /**
     * Use {@link #getKnownMapFieldMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite>
    getKnownMapField();
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
     */
    java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite>
    getKnownMapFieldMap();
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
     */
    protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite getKnownMapFieldOrDefault(
        int key,
        protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite defaultValue);
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
     */
    protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite getKnownMapFieldOrThrow(
        int key);

    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
     */
    int getUnknownMapFieldCount();
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
     */
    boolean containsUnknownMapField(
        int key);
    /**
     * Use {@link #getUnknownMapFieldMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite>
    getUnknownMapField();
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
     */
    java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite>
    getUnknownMapFieldMap();
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
     */
    protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite getUnknownMapFieldOrDefault(
        int key,
        protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite defaultValue);
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
     */
    protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite getUnknownMapFieldOrThrow(
        int key);
  }
  /**
   * Protobuf type {@code protobuf_unittest.TestEnumMapLite}
   */
  public  static final class TestEnumMapLite extends
      com.google.protobuf.GeneratedMessageLite<
          TestEnumMapLite, TestEnumMapLite.Builder> implements
      // @@protoc_insertion_point(message_implements:protobuf_unittest.TestEnumMapLite)
      TestEnumMapLiteOrBuilder {
    private TestEnumMapLite() {
    }
    public static final int KNOWN_MAP_FIELD_FIELD_NUMBER = 101;
    private static final class KnownMapFieldDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite.PROTO2_MAP_ENUM_FOO_LITE.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> knownMapField_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetKnownMapField() {
      return knownMapField_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableKnownMapField() {
      if (!knownMapField_.isMutable()) {
        knownMapField_ = knownMapField_.mutableCopy();
      }
      return knownMapField_;
    }
    @java.lang.Override

    public int getKnownMapFieldCount() {
      return internalGetKnownMapField().size();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
     */
    @java.lang.Override

    public boolean containsKnownMapField(
        int key) {
      
      return internalGetKnownMapField().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite> knownMapFieldValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite.internalGetValueMap(),
                protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite.PROTO2_MAP_ENUM_FOO_LITE);
    /**
     * Use {@link #getKnownMapFieldMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite>
    getKnownMapField() {
      return getKnownMapFieldMap();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite>
    getKnownMapFieldMap() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite, java.lang.Integer>(
                internalGetKnownMapField(),
                knownMapFieldValueConverter));
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
     */
    @java.lang.Override

    public protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite getKnownMapFieldOrDefault(
        int key,
        protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetKnownMapField();
      return map.containsKey(key)
             ? knownMapFieldValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
     */
    @java.lang.Override

    public protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite getKnownMapFieldOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetKnownMapField();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return knownMapFieldValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
     */
    private java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite>
    getMutableKnownMapFieldMap() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite, java.lang.Integer>(
              internalGetMutableKnownMapField(),
              knownMapFieldValueConverter);
    }

    public static final int UNKNOWN_MAP_FIELD_FIELD_NUMBER = 102;
    private static final class UnknownMapFieldDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite.PROTO2_MAP_ENUM_FOO_LITE.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> unknownMapField_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetUnknownMapField() {
      return unknownMapField_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableUnknownMapField() {
      if (!unknownMapField_.isMutable()) {
        unknownMapField_ = unknownMapField_.mutableCopy();
      }
      return unknownMapField_;
    }
    @java.lang.Override

    public int getUnknownMapFieldCount() {
      return internalGetUnknownMapField().size();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
     */
    @java.lang.Override

    public boolean containsUnknownMapField(
        int key) {
      
      return internalGetUnknownMapField().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite> unknownMapFieldValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite.internalGetValueMap(),
                protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite.PROTO2_MAP_ENUM_FOO_LITE);
    /**
     * Use {@link #getUnknownMapFieldMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite>
    getUnknownMapField() {
      return getUnknownMapFieldMap();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite>
    getUnknownMapFieldMap() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite, java.lang.Integer>(
                internalGetUnknownMapField(),
                unknownMapFieldValueConverter));
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
     */
    @java.lang.Override

    public protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite getUnknownMapFieldOrDefault(
        int key,
        protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetUnknownMapField();
      return map.containsKey(key)
             ? unknownMapFieldValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
     */
    @java.lang.Override

    public protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite getUnknownMapFieldOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetUnknownMapField();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return unknownMapFieldValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
     */
    private java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite>
    getMutableUnknownMapFieldMap() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite, java.lang.Integer>(
              internalGetMutableUnknownMapField(),
              unknownMapFieldValueConverter);
    }

    public static protobuf_unittest.MapLiteUnittest.TestEnumMapLite parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapLite parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapLite parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapLite parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapLite parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapLite parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapLite parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapLite parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapLite parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapLite parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapLite parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapLite parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(protobuf_unittest.MapLiteUnittest.TestEnumMapLite prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code protobuf_unittest.TestEnumMapLite}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          protobuf_unittest.MapLiteUnittest.TestEnumMapLite, Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf_unittest.TestEnumMapLite)
        protobuf_unittest.MapLiteUnittest.TestEnumMapLiteOrBuilder {
      // Construct using protobuf_unittest.MapLiteUnittest.TestEnumMapLite.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      @java.lang.Override

      public int getKnownMapFieldCount() {
        return instance.getKnownMapFieldMap().size();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
       */
      @java.lang.Override

      public boolean containsKnownMapField(
          int key) {
        
        return instance.getKnownMapFieldMap().containsKey(key);
      }

      public Builder clearKnownMapField() {
        copyOnWrite();
        instance.getMutableKnownMapFieldMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
       */

      public Builder removeKnownMapField(
          int key) {
        
        copyOnWrite();
        instance.getMutableKnownMapFieldMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getKnownMapFieldMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite>
      getKnownMapField() {
        return getKnownMapFieldMap();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite>
      getKnownMapFieldMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getKnownMapFieldMap());
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
       */
      @java.lang.Override

      public protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite getKnownMapFieldOrDefault(
          int key,
          protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite defaultValue) {
        
        java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite> map =
            instance.getKnownMapFieldMap();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
       */
      @java.lang.Override

      public protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite getKnownMapFieldOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite> map =
            instance.getKnownMapFieldMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
       */
      public Builder putKnownMapField(
          int key,
          protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableKnownMapFieldMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; known_map_field = 101;</code>
       */
      public Builder putAllKnownMapField(
          java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite> values) {
        copyOnWrite();
        instance.getMutableKnownMapFieldMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getUnknownMapFieldCount() {
        return instance.getUnknownMapFieldMap().size();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
       */
      @java.lang.Override

      public boolean containsUnknownMapField(
          int key) {
        
        return instance.getUnknownMapFieldMap().containsKey(key);
      }

      public Builder clearUnknownMapField() {
        copyOnWrite();
        instance.getMutableUnknownMapFieldMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
       */

      public Builder removeUnknownMapField(
          int key) {
        
        copyOnWrite();
        instance.getMutableUnknownMapFieldMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getUnknownMapFieldMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite>
      getUnknownMapField() {
        return getUnknownMapFieldMap();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite>
      getUnknownMapFieldMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getUnknownMapFieldMap());
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
       */
      @java.lang.Override

      public protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite getUnknownMapFieldOrDefault(
          int key,
          protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite defaultValue) {
        
        java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite> map =
            instance.getUnknownMapFieldMap();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
       */
      @java.lang.Override

      public protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite getUnknownMapFieldOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite> map =
            instance.getUnknownMapFieldMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
       */
      public Builder putUnknownMapField(
          int key,
          protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableUnknownMapFieldMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumLite&gt; unknown_map_field = 102;</code>
       */
      public Builder putAllUnknownMapField(
          java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite> values) {
        copyOnWrite();
        instance.getMutableUnknownMapFieldMap().putAll(values);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protobuf_unittest.TestEnumMapLite)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new protobuf_unittest.MapLiteUnittest.TestEnumMapLite();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "knownMapField_",
              KnownMapFieldDefaultEntryHolder.defaultEntry,
              protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite.internalGetVerifier(),
              "unknownMapField_",
              UnknownMapFieldDefaultEntryHolder.defaultEntry,
              protobuf_unittest.MapLiteUnittest.Proto2MapEnumLite.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0001\u0002\u0000\u0000ef\u0002\u0002\u0000\u0000e\u0832f\u0832";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<protobuf_unittest.MapLiteUnittest.TestEnumMapLite> parser = PARSER;
          if (parser == null) {
            synchronized (protobuf_unittest.MapLiteUnittest.TestEnumMapLite.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<protobuf_unittest.MapLiteUnittest.TestEnumMapLite>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:protobuf_unittest.TestEnumMapLite)
    private static final protobuf_unittest.MapLiteUnittest.TestEnumMapLite DEFAULT_INSTANCE;
    static {
      TestEnumMapLite defaultInstance = new TestEnumMapLite();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TestEnumMapLite.class, defaultInstance);
    }

    public static protobuf_unittest.MapLiteUnittest.TestEnumMapLite getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TestEnumMapLite> PARSER;

    public static com.google.protobuf.Parser<TestEnumMapLite> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TestEnumMapPlusExtraLiteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protobuf_unittest.TestEnumMapPlusExtraLite)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
     */
    int getKnownMapFieldCount();
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
     */
    boolean containsKnownMapField(
        int key);
    /**
     * Use {@link #getKnownMapFieldMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite>
    getKnownMapField();
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
     */
    java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite>
    getKnownMapFieldMap();
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
     */
    protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite getKnownMapFieldOrDefault(
        int key,
        protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite defaultValue);
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
     */
    protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite getKnownMapFieldOrThrow(
        int key);

    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
     */
    int getUnknownMapFieldCount();
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
     */
    boolean containsUnknownMapField(
        int key);
    /**
     * Use {@link #getUnknownMapFieldMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite>
    getUnknownMapField();
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
     */
    java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite>
    getUnknownMapFieldMap();
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
     */
    protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite getUnknownMapFieldOrDefault(
        int key,
        protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite defaultValue);
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
     */
    protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite getUnknownMapFieldOrThrow(
        int key);
  }
  /**
   * Protobuf type {@code protobuf_unittest.TestEnumMapPlusExtraLite}
   */
  public  static final class TestEnumMapPlusExtraLite extends
      com.google.protobuf.GeneratedMessageLite<
          TestEnumMapPlusExtraLite, TestEnumMapPlusExtraLite.Builder> implements
      // @@protoc_insertion_point(message_implements:protobuf_unittest.TestEnumMapPlusExtraLite)
      TestEnumMapPlusExtraLiteOrBuilder {
    private TestEnumMapPlusExtraLite() {
    }
    public static final int KNOWN_MAP_FIELD_FIELD_NUMBER = 101;
    private static final class KnownMapFieldDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite.E_PROTO2_MAP_ENUM_FOO_LITE.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> knownMapField_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetKnownMapField() {
      return knownMapField_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableKnownMapField() {
      if (!knownMapField_.isMutable()) {
        knownMapField_ = knownMapField_.mutableCopy();
      }
      return knownMapField_;
    }
    @java.lang.Override

    public int getKnownMapFieldCount() {
      return internalGetKnownMapField().size();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
     */
    @java.lang.Override

    public boolean containsKnownMapField(
        int key) {
      
      return internalGetKnownMapField().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite> knownMapFieldValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite.internalGetValueMap(),
                protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite.E_PROTO2_MAP_ENUM_FOO_LITE);
    /**
     * Use {@link #getKnownMapFieldMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite>
    getKnownMapField() {
      return getKnownMapFieldMap();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite>
    getKnownMapFieldMap() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite, java.lang.Integer>(
                internalGetKnownMapField(),
                knownMapFieldValueConverter));
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
     */
    @java.lang.Override

    public protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite getKnownMapFieldOrDefault(
        int key,
        protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetKnownMapField();
      return map.containsKey(key)
             ? knownMapFieldValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
     */
    @java.lang.Override

    public protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite getKnownMapFieldOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetKnownMapField();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return knownMapFieldValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
     */
    private java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite>
    getMutableKnownMapFieldMap() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite, java.lang.Integer>(
              internalGetMutableKnownMapField(),
              knownMapFieldValueConverter);
    }

    public static final int UNKNOWN_MAP_FIELD_FIELD_NUMBER = 102;
    private static final class UnknownMapFieldDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite.E_PROTO2_MAP_ENUM_FOO_LITE.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> unknownMapField_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetUnknownMapField() {
      return unknownMapField_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableUnknownMapField() {
      if (!unknownMapField_.isMutable()) {
        unknownMapField_ = unknownMapField_.mutableCopy();
      }
      return unknownMapField_;
    }
    @java.lang.Override

    public int getUnknownMapFieldCount() {
      return internalGetUnknownMapField().size();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
     */
    @java.lang.Override

    public boolean containsUnknownMapField(
        int key) {
      
      return internalGetUnknownMapField().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite> unknownMapFieldValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite.internalGetValueMap(),
                protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite.E_PROTO2_MAP_ENUM_FOO_LITE);
    /**
     * Use {@link #getUnknownMapFieldMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite>
    getUnknownMapField() {
      return getUnknownMapFieldMap();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite>
    getUnknownMapFieldMap() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite, java.lang.Integer>(
                internalGetUnknownMapField(),
                unknownMapFieldValueConverter));
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
     */
    @java.lang.Override

    public protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite getUnknownMapFieldOrDefault(
        int key,
        protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetUnknownMapField();
      return map.containsKey(key)
             ? unknownMapFieldValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
     */
    @java.lang.Override

    public protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite getUnknownMapFieldOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetUnknownMapField();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return unknownMapFieldValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
     */
    private java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite>
    getMutableUnknownMapFieldMap() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite, java.lang.Integer>(
              internalGetMutableUnknownMapField(),
              unknownMapFieldValueConverter);
    }

    public static protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code protobuf_unittest.TestEnumMapPlusExtraLite}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite, Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf_unittest.TestEnumMapPlusExtraLite)
        protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLiteOrBuilder {
      // Construct using protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      @java.lang.Override

      public int getKnownMapFieldCount() {
        return instance.getKnownMapFieldMap().size();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
       */
      @java.lang.Override

      public boolean containsKnownMapField(
          int key) {
        
        return instance.getKnownMapFieldMap().containsKey(key);
      }

      public Builder clearKnownMapField() {
        copyOnWrite();
        instance.getMutableKnownMapFieldMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
       */

      public Builder removeKnownMapField(
          int key) {
        
        copyOnWrite();
        instance.getMutableKnownMapFieldMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getKnownMapFieldMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite>
      getKnownMapField() {
        return getKnownMapFieldMap();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite>
      getKnownMapFieldMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getKnownMapFieldMap());
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
       */
      @java.lang.Override

      public protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite getKnownMapFieldOrDefault(
          int key,
          protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite defaultValue) {
        
        java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite> map =
            instance.getKnownMapFieldMap();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
       */
      @java.lang.Override

      public protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite getKnownMapFieldOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite> map =
            instance.getKnownMapFieldMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
       */
      public Builder putKnownMapField(
          int key,
          protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableKnownMapFieldMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; known_map_field = 101;</code>
       */
      public Builder putAllKnownMapField(
          java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite> values) {
        copyOnWrite();
        instance.getMutableKnownMapFieldMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getUnknownMapFieldCount() {
        return instance.getUnknownMapFieldMap().size();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
       */
      @java.lang.Override

      public boolean containsUnknownMapField(
          int key) {
        
        return instance.getUnknownMapFieldMap().containsKey(key);
      }

      public Builder clearUnknownMapField() {
        copyOnWrite();
        instance.getMutableUnknownMapFieldMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
       */

      public Builder removeUnknownMapField(
          int key) {
        
        copyOnWrite();
        instance.getMutableUnknownMapFieldMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getUnknownMapFieldMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite>
      getUnknownMapField() {
        return getUnknownMapFieldMap();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite>
      getUnknownMapFieldMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getUnknownMapFieldMap());
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
       */
      @java.lang.Override

      public protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite getUnknownMapFieldOrDefault(
          int key,
          protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite defaultValue) {
        
        java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite> map =
            instance.getUnknownMapFieldMap();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
       */
      @java.lang.Override

      public protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite getUnknownMapFieldOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite> map =
            instance.getUnknownMapFieldMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
       */
      public Builder putUnknownMapField(
          int key,
          protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableUnknownMapFieldMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite&gt; unknown_map_field = 102;</code>
       */
      public Builder putAllUnknownMapField(
          java.util.Map<java.lang.Integer, protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite> values) {
        copyOnWrite();
        instance.getMutableUnknownMapFieldMap().putAll(values);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protobuf_unittest.TestEnumMapPlusExtraLite)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "knownMapField_",
              KnownMapFieldDefaultEntryHolder.defaultEntry,
              protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite.internalGetVerifier(),
              "unknownMapField_",
              UnknownMapFieldDefaultEntryHolder.defaultEntry,
              protobuf_unittest.MapLiteUnittest.Proto2MapEnumPlusExtraLite.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0001\u0002\u0000\u0000ef\u0002\u0002\u0000\u0000e\u0832f\u0832";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite> parser = PARSER;
          if (parser == null) {
            synchronized (protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:protobuf_unittest.TestEnumMapPlusExtraLite)
    private static final protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite DEFAULT_INSTANCE;
    static {
      TestEnumMapPlusExtraLite defaultInstance = new TestEnumMapPlusExtraLite();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TestEnumMapPlusExtraLite.class, defaultInstance);
    }

    public static protobuf_unittest.MapLiteUnittest.TestEnumMapPlusExtraLite getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TestEnumMapPlusExtraLite> PARSER;

    public static com.google.protobuf.Parser<TestEnumMapPlusExtraLite> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TestMessageMapLiteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protobuf_unittest.TestMessageMapLite)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
     */
    int getMapInt32MessageCount();
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
     */
    boolean containsMapInt32Message(
        int key);
    /**
     * Use {@link #getMapInt32MessageMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite>
    getMapInt32Message();
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite>
    getMapInt32MessageMap();
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
     */

    com.google.protobuf.UnittestLite.TestAllTypesLite getMapInt32MessageOrDefault(
        int key,
        com.google.protobuf.UnittestLite.TestAllTypesLite defaultValue);
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
     */

    com.google.protobuf.UnittestLite.TestAllTypesLite getMapInt32MessageOrThrow(
        int key);
  }
  /**
   * Protobuf type {@code protobuf_unittest.TestMessageMapLite}
   */
  public  static final class TestMessageMapLite extends
      com.google.protobuf.GeneratedMessageLite<
          TestMessageMapLite, TestMessageMapLite.Builder> implements
      // @@protoc_insertion_point(message_implements:protobuf_unittest.TestMessageMapLite)
      TestMessageMapLiteOrBuilder {
    private TestMessageMapLite() {
    }
    public static final int MAP_INT32_MESSAGE_FIELD_NUMBER = 1;
    private static final class MapInt32MessageDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.protobuf.UnittestLite.TestAllTypesLite.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite> mapInt32Message_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite>
    internalGetMapInt32Message() {
      return mapInt32Message_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite>
    internalGetMutableMapInt32Message() {
      if (!mapInt32Message_.isMutable()) {
        mapInt32Message_ = mapInt32Message_.mutableCopy();
      }
      return mapInt32Message_;
    }
    @java.lang.Override

    public int getMapInt32MessageCount() {
      return internalGetMapInt32Message().size();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
     */
    @java.lang.Override

    public boolean containsMapInt32Message(
        int key) {
      
      return internalGetMapInt32Message().containsKey(key);
    }
    /**
     * Use {@link #getMapInt32MessageMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite> getMapInt32Message() {
      return getMapInt32MessageMap();
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite> getMapInt32MessageMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetMapInt32Message());
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
     */
    @java.lang.Override

    public com.google.protobuf.UnittestLite.TestAllTypesLite getMapInt32MessageOrDefault(
        int key,
        com.google.protobuf.UnittestLite.TestAllTypesLite defaultValue) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite> map =
          internalGetMapInt32Message();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
     */
    @java.lang.Override

    public com.google.protobuf.UnittestLite.TestAllTypesLite getMapInt32MessageOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite> map =
          internalGetMapInt32Message();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite>
    getMutableMapInt32MessageMap() {
      return internalGetMutableMapInt32Message();
    }

    public static protobuf_unittest.MapLiteUnittest.TestMessageMapLite parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMessageMapLite parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMessageMapLite parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMessageMapLite parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMessageMapLite parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMessageMapLite parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMessageMapLite parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMessageMapLite parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMessageMapLite parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMessageMapLite parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMessageMapLite parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestMessageMapLite parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(protobuf_unittest.MapLiteUnittest.TestMessageMapLite prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code protobuf_unittest.TestMessageMapLite}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          protobuf_unittest.MapLiteUnittest.TestMessageMapLite, Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf_unittest.TestMessageMapLite)
        protobuf_unittest.MapLiteUnittest.TestMessageMapLiteOrBuilder {
      // Construct using protobuf_unittest.MapLiteUnittest.TestMessageMapLite.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      @java.lang.Override

      public int getMapInt32MessageCount() {
        return instance.getMapInt32MessageMap().size();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
       */
      @java.lang.Override

      public boolean containsMapInt32Message(
          int key) {
        
        return instance.getMapInt32MessageMap().containsKey(key);
      }

      public Builder clearMapInt32Message() {
        copyOnWrite();
        instance.getMutableMapInt32MessageMap().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
       */

      public Builder removeMapInt32Message(
          int key) {
        
        copyOnWrite();
        instance.getMutableMapInt32MessageMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getMapInt32MessageMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite> getMapInt32Message() {
        return getMapInt32MessageMap();
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite> getMapInt32MessageMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getMapInt32MessageMap());
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
       */
      @java.lang.Override

      public com.google.protobuf.UnittestLite.TestAllTypesLite getMapInt32MessageOrDefault(
          int key,
          com.google.protobuf.UnittestLite.TestAllTypesLite defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite> map =
            instance.getMapInt32MessageMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
       */
      @java.lang.Override

      public com.google.protobuf.UnittestLite.TestAllTypesLite getMapInt32MessageOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite> map =
            instance.getMapInt32MessageMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
       */
      public Builder putMapInt32Message(
          int key,
          com.google.protobuf.UnittestLite.TestAllTypesLite value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableMapInt32MessageMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf_unittest.TestAllTypesLite&gt; map_int32_message = 1;</code>
       */
      public Builder putAllMapInt32Message(
          java.util.Map<java.lang.Integer, com.google.protobuf.UnittestLite.TestAllTypesLite> values) {
        copyOnWrite();
        instance.getMutableMapInt32MessageMap().putAll(values);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protobuf_unittest.TestMessageMapLite)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new protobuf_unittest.MapLiteUnittest.TestMessageMapLite();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "mapInt32Message_",
              MapInt32MessageDefaultEntryHolder.defaultEntry,
            };
            java.lang.String info =
                "\u0001\u0001\u0000\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u00012";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<protobuf_unittest.MapLiteUnittest.TestMessageMapLite> parser = PARSER;
          if (parser == null) {
            synchronized (protobuf_unittest.MapLiteUnittest.TestMessageMapLite.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<protobuf_unittest.MapLiteUnittest.TestMessageMapLite>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:protobuf_unittest.TestMessageMapLite)
    private static final protobuf_unittest.MapLiteUnittest.TestMessageMapLite DEFAULT_INSTANCE;
    static {
      TestMessageMapLite defaultInstance = new TestMessageMapLite();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TestMessageMapLite.class, defaultInstance);
    }

    public static protobuf_unittest.MapLiteUnittest.TestMessageMapLite getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TestMessageMapLite> PARSER;

    public static com.google.protobuf.Parser<TestMessageMapLite> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TestRequiredLiteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protobuf_unittest.TestRequiredLite)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required int32 a = 1;</code>
     * @return Whether the a field is set.
     */
    boolean hasA();
    /**
     * <code>required int32 a = 1;</code>
     * @return The a.
     */
    int getA();

    /**
     * <code>required int32 b = 2;</code>
     * @return Whether the b field is set.
     */
    boolean hasB();
    /**
     * <code>required int32 b = 2;</code>
     * @return The b.
     */
    int getB();

    /**
     * <code>required int32 c = 3;</code>
     * @return Whether the c field is set.
     */
    boolean hasC();
    /**
     * <code>required int32 c = 3;</code>
     * @return The c.
     */
    int getC();
  }
  /**
   * Protobuf type {@code protobuf_unittest.TestRequiredLite}
   */
  public  static final class TestRequiredLite extends
      com.google.protobuf.GeneratedMessageLite<
          TestRequiredLite, TestRequiredLite.Builder> implements
      // @@protoc_insertion_point(message_implements:protobuf_unittest.TestRequiredLite)
      TestRequiredLiteOrBuilder {
    private TestRequiredLite() {
    }
    private int bitField0_;
    public static final int A_FIELD_NUMBER = 1;
    private int a_;
    /**
     * <code>required int32 a = 1;</code>
     * @return Whether the a field is set.
     */
    @java.lang.Override
    public boolean hasA() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required int32 a = 1;</code>
     * @return The a.
     */
    @java.lang.Override
    public int getA() {
      return a_;
    }
    /**
     * <code>required int32 a = 1;</code>
     * @param value The a to set.
     */
    private void setA(int value) {
      bitField0_ |= 0x00000001;
      a_ = value;
    }
    /**
     * <code>required int32 a = 1;</code>
     */
    private void clearA() {
      bitField0_ = (bitField0_ & ~0x00000001);
      a_ = 0;
    }

    public static final int B_FIELD_NUMBER = 2;
    private int b_;
    /**
     * <code>required int32 b = 2;</code>
     * @return Whether the b field is set.
     */
    @java.lang.Override
    public boolean hasB() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required int32 b = 2;</code>
     * @return The b.
     */
    @java.lang.Override
    public int getB() {
      return b_;
    }
    /**
     * <code>required int32 b = 2;</code>
     * @param value The b to set.
     */
    private void setB(int value) {
      bitField0_ |= 0x00000002;
      b_ = value;
    }
    /**
     * <code>required int32 b = 2;</code>
     */
    private void clearB() {
      bitField0_ = (bitField0_ & ~0x00000002);
      b_ = 0;
    }

    public static final int C_FIELD_NUMBER = 3;
    private int c_;
    /**
     * <code>required int32 c = 3;</code>
     * @return Whether the c field is set.
     */
    @java.lang.Override
    public boolean hasC() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>required int32 c = 3;</code>
     * @return The c.
     */
    @java.lang.Override
    public int getC() {
      return c_;
    }
    /**
     * <code>required int32 c = 3;</code>
     * @param value The c to set.
     */
    private void setC(int value) {
      bitField0_ |= 0x00000004;
      c_ = value;
    }
    /**
     * <code>required int32 c = 3;</code>
     */
    private void clearC() {
      bitField0_ = (bitField0_ & ~0x00000004);
      c_ = 0;
    }

    public static protobuf_unittest.MapLiteUnittest.TestRequiredLite parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredLite parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredLite parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredLite parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredLite parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredLite parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredLite parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredLite parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredLite parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredLite parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredLite parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.TestRequiredLite parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(protobuf_unittest.MapLiteUnittest.TestRequiredLite prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code protobuf_unittest.TestRequiredLite}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          protobuf_unittest.MapLiteUnittest.TestRequiredLite, Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf_unittest.TestRequiredLite)
        protobuf_unittest.MapLiteUnittest.TestRequiredLiteOrBuilder {
      // Construct using protobuf_unittest.MapLiteUnittest.TestRequiredLite.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>required int32 a = 1;</code>
       * @return Whether the a field is set.
       */
      @java.lang.Override
      public boolean hasA() {
        return instance.hasA();
      }
      /**
       * <code>required int32 a = 1;</code>
       * @return The a.
       */
      @java.lang.Override
      public int getA() {
        return instance.getA();
      }
      /**
       * <code>required int32 a = 1;</code>
       * @param value The a to set.
       * @return This builder for chaining.
       */
      public Builder setA(int value) {
        copyOnWrite();
        instance.setA(value);
        return this;
      }
      /**
       * <code>required int32 a = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearA() {
        copyOnWrite();
        instance.clearA();
        return this;
      }

      /**
       * <code>required int32 b = 2;</code>
       * @return Whether the b field is set.
       */
      @java.lang.Override
      public boolean hasB() {
        return instance.hasB();
      }
      /**
       * <code>required int32 b = 2;</code>
       * @return The b.
       */
      @java.lang.Override
      public int getB() {
        return instance.getB();
      }
      /**
       * <code>required int32 b = 2;</code>
       * @param value The b to set.
       * @return This builder for chaining.
       */
      public Builder setB(int value) {
        copyOnWrite();
        instance.setB(value);
        return this;
      }
      /**
       * <code>required int32 b = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearB() {
        copyOnWrite();
        instance.clearB();
        return this;
      }

      /**
       * <code>required int32 c = 3;</code>
       * @return Whether the c field is set.
       */
      @java.lang.Override
      public boolean hasC() {
        return instance.hasC();
      }
      /**
       * <code>required int32 c = 3;</code>
       * @return The c.
       */
      @java.lang.Override
      public int getC() {
        return instance.getC();
      }
      /**
       * <code>required int32 c = 3;</code>
       * @param value The c to set.
       * @return This builder for chaining.
       */
      public Builder setC(int value) {
        copyOnWrite();
        instance.setC(value);
        return this;
      }
      /**
       * <code>required int32 c = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearC() {
        copyOnWrite();
        instance.clearC();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protobuf_unittest.TestRequiredLite)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new protobuf_unittest.MapLiteUnittest.TestRequiredLite();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "a_",
              "b_",
              "c_",
            };
            java.lang.String info =
                "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0003\u0001\u1504\u0000\u0002" +
                "\u1504\u0001\u0003\u1504\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<protobuf_unittest.MapLiteUnittest.TestRequiredLite> parser = PARSER;
          if (parser == null) {
            synchronized (protobuf_unittest.MapLiteUnittest.TestRequiredLite.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<protobuf_unittest.MapLiteUnittest.TestRequiredLite>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:protobuf_unittest.TestRequiredLite)
    private static final protobuf_unittest.MapLiteUnittest.TestRequiredLite DEFAULT_INSTANCE;
    static {
      TestRequiredLite defaultInstance = new TestRequiredLite();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TestRequiredLite.class, defaultInstance);
    }

    public static protobuf_unittest.MapLiteUnittest.TestRequiredLite getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TestRequiredLite> PARSER;

    public static com.google.protobuf.Parser<TestRequiredLite> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ForeignMessageArenaLiteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protobuf_unittest.ForeignMessageArenaLite)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 c = 1;</code>
     * @return Whether the c field is set.
     */
    boolean hasC();
    /**
     * <code>optional int32 c = 1;</code>
     * @return The c.
     */
    int getC();
  }
  /**
   * Protobuf type {@code protobuf_unittest.ForeignMessageArenaLite}
   */
  public  static final class ForeignMessageArenaLite extends
      com.google.protobuf.GeneratedMessageLite<
          ForeignMessageArenaLite, ForeignMessageArenaLite.Builder> implements
      // @@protoc_insertion_point(message_implements:protobuf_unittest.ForeignMessageArenaLite)
      ForeignMessageArenaLiteOrBuilder {
    private ForeignMessageArenaLite() {
    }
    private int bitField0_;
    public static final int C_FIELD_NUMBER = 1;
    private int c_;
    /**
     * <code>optional int32 c = 1;</code>
     * @return Whether the c field is set.
     */
    @java.lang.Override
    public boolean hasC() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional int32 c = 1;</code>
     * @return The c.
     */
    @java.lang.Override
    public int getC() {
      return c_;
    }
    /**
     * <code>optional int32 c = 1;</code>
     * @param value The c to set.
     */
    private void setC(int value) {
      bitField0_ |= 0x00000001;
      c_ = value;
    }
    /**
     * <code>optional int32 c = 1;</code>
     */
    private void clearC() {
      bitField0_ = (bitField0_ & ~0x00000001);
      c_ = 0;
    }

    public static protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code protobuf_unittest.ForeignMessageArenaLite}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite, Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf_unittest.ForeignMessageArenaLite)
        protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLiteOrBuilder {
      // Construct using protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional int32 c = 1;</code>
       * @return Whether the c field is set.
       */
      @java.lang.Override
      public boolean hasC() {
        return instance.hasC();
      }
      /**
       * <code>optional int32 c = 1;</code>
       * @return The c.
       */
      @java.lang.Override
      public int getC() {
        return instance.getC();
      }
      /**
       * <code>optional int32 c = 1;</code>
       * @param value The c to set.
       * @return This builder for chaining.
       */
      public Builder setC(int value) {
        copyOnWrite();
        instance.setC(value);
        return this;
      }
      /**
       * <code>optional int32 c = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearC() {
        copyOnWrite();
        instance.clearC();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protobuf_unittest.ForeignMessageArenaLite)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "c_",
            };
            java.lang.String info =
                "\u0001\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u1004\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite> parser = PARSER;
          if (parser == null) {
            synchronized (protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:protobuf_unittest.ForeignMessageArenaLite)
    private static final protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite DEFAULT_INSTANCE;
    static {
      ForeignMessageArenaLite defaultInstance = new ForeignMessageArenaLite();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ForeignMessageArenaLite.class, defaultInstance);
    }

    public static protobuf_unittest.MapLiteUnittest.ForeignMessageArenaLite getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ForeignMessageArenaLite> PARSER;

    public static com.google.protobuf.Parser<ForeignMessageArenaLite> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
