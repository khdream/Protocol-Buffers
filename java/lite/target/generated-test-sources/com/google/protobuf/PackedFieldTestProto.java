// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/google/protobuf/packed_field_test.proto

package com.google.protobuf;

public final class PackedFieldTestProto {
  private PackedFieldTestProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface TestAllTypesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:packed_field_test.TestAllTypes)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @return A list containing the repeatedInt32.
     */
    java.util.List<java.lang.Integer> getRepeatedInt32List();
    /**
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @return The count of repeatedInt32.
     */
    int getRepeatedInt32Count();
    /**
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @param index The index of the element to return.
     * @return The repeatedInt32 at the given index.
     */
    int getRepeatedInt32(int index);

    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @return A list containing the repeatedInt64.
     */
    java.util.List<java.lang.Long> getRepeatedInt64List();
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @return The count of repeatedInt64.
     */
    int getRepeatedInt64Count();
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @param index The index of the element to return.
     * @return The repeatedInt64 at the given index.
     */
    long getRepeatedInt64(int index);

    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @return A list containing the repeatedUint32.
     */
    java.util.List<java.lang.Integer> getRepeatedUint32List();
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @return The count of repeatedUint32.
     */
    int getRepeatedUint32Count();
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @param index The index of the element to return.
     * @return The repeatedUint32 at the given index.
     */
    int getRepeatedUint32(int index);

    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @return A list containing the repeatedUint64.
     */
    java.util.List<java.lang.Long> getRepeatedUint64List();
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @return The count of repeatedUint64.
     */
    int getRepeatedUint64Count();
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @param index The index of the element to return.
     * @return The repeatedUint64 at the given index.
     */
    long getRepeatedUint64(int index);

    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @return A list containing the repeatedSint32.
     */
    java.util.List<java.lang.Integer> getRepeatedSint32List();
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @return The count of repeatedSint32.
     */
    int getRepeatedSint32Count();
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @param index The index of the element to return.
     * @return The repeatedSint32 at the given index.
     */
    int getRepeatedSint32(int index);

    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @return A list containing the repeatedSint64.
     */
    java.util.List<java.lang.Long> getRepeatedSint64List();
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @return The count of repeatedSint64.
     */
    int getRepeatedSint64Count();
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @param index The index of the element to return.
     * @return The repeatedSint64 at the given index.
     */
    long getRepeatedSint64(int index);

    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @return A list containing the repeatedFixed32.
     */
    java.util.List<java.lang.Integer> getRepeatedFixed32List();
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @return The count of repeatedFixed32.
     */
    int getRepeatedFixed32Count();
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @param index The index of the element to return.
     * @return The repeatedFixed32 at the given index.
     */
    int getRepeatedFixed32(int index);

    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @return A list containing the repeatedFixed64.
     */
    java.util.List<java.lang.Long> getRepeatedFixed64List();
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @return The count of repeatedFixed64.
     */
    int getRepeatedFixed64Count();
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @param index The index of the element to return.
     * @return The repeatedFixed64 at the given index.
     */
    long getRepeatedFixed64(int index);

    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @return A list containing the repeatedSfixed32.
     */
    java.util.List<java.lang.Integer> getRepeatedSfixed32List();
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @return The count of repeatedSfixed32.
     */
    int getRepeatedSfixed32Count();
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @param index The index of the element to return.
     * @return The repeatedSfixed32 at the given index.
     */
    int getRepeatedSfixed32(int index);

    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @return A list containing the repeatedSfixed64.
     */
    java.util.List<java.lang.Long> getRepeatedSfixed64List();
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @return The count of repeatedSfixed64.
     */
    int getRepeatedSfixed64Count();
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @param index The index of the element to return.
     * @return The repeatedSfixed64 at the given index.
     */
    long getRepeatedSfixed64(int index);

    /**
     * <code>repeated float repeated_float = 41;</code>
     * @return A list containing the repeatedFloat.
     */
    java.util.List<java.lang.Float> getRepeatedFloatList();
    /**
     * <code>repeated float repeated_float = 41;</code>
     * @return The count of repeatedFloat.
     */
    int getRepeatedFloatCount();
    /**
     * <code>repeated float repeated_float = 41;</code>
     * @param index The index of the element to return.
     * @return The repeatedFloat at the given index.
     */
    float getRepeatedFloat(int index);

    /**
     * <code>repeated double repeated_double = 42;</code>
     * @return A list containing the repeatedDouble.
     */
    java.util.List<java.lang.Double> getRepeatedDoubleList();
    /**
     * <code>repeated double repeated_double = 42;</code>
     * @return The count of repeatedDouble.
     */
    int getRepeatedDoubleCount();
    /**
     * <code>repeated double repeated_double = 42;</code>
     * @param index The index of the element to return.
     * @return The repeatedDouble at the given index.
     */
    double getRepeatedDouble(int index);

    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @return A list containing the repeatedBool.
     */
    java.util.List<java.lang.Boolean> getRepeatedBoolList();
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @return The count of repeatedBool.
     */
    int getRepeatedBoolCount();
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @param index The index of the element to return.
     * @return The repeatedBool at the given index.
     */
    boolean getRepeatedBool(int index);

    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @return A list containing the repeatedNestedEnum.
     */
    java.util.List<com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum> getRepeatedNestedEnumList();
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @return The count of repeatedNestedEnum.
     */
    int getRepeatedNestedEnumCount();
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param index The index of the element to return.
     * @return The repeatedNestedEnum at the given index.
     */
    com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum getRepeatedNestedEnum(int index);
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @return A list containing the enum numeric values on the wire for repeatedNestedEnum.
     */
    java.util.List<java.lang.Integer>
    getRepeatedNestedEnumValueList();
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of repeatedNestedEnum at the given index.
     */
    int getRepeatedNestedEnumValue(int index);
  }
  /**
   * Protobuf type {@code packed_field_test.TestAllTypes}
   */
  public  static final class TestAllTypes extends
      com.google.protobuf.GeneratedMessageLite<
          TestAllTypes, TestAllTypes.Builder> implements
      // @@protoc_insertion_point(message_implements:packed_field_test.TestAllTypes)
      TestAllTypesOrBuilder {
    private TestAllTypes() {
      repeatedInt32_ = emptyIntList();
      repeatedInt64_ = emptyLongList();
      repeatedUint32_ = emptyIntList();
      repeatedUint64_ = emptyLongList();
      repeatedSint32_ = emptyIntList();
      repeatedSint64_ = emptyLongList();
      repeatedFixed32_ = emptyIntList();
      repeatedFixed64_ = emptyLongList();
      repeatedSfixed32_ = emptyIntList();
      repeatedSfixed64_ = emptyLongList();
      repeatedFloat_ = emptyFloatList();
      repeatedDouble_ = emptyDoubleList();
      repeatedBool_ = emptyBooleanList();
      repeatedNestedEnum_ = emptyIntList();
    }
    /**
     * Protobuf enum {@code packed_field_test.TestAllTypes.NestedEnum}
     */
    public enum NestedEnum
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>FOO = 0;</code>
       */
      FOO(0),
      /**
       * <code>BAR = 1;</code>
       */
      BAR(1),
      /**
       * <code>BAZ = 2;</code>
       */
      BAZ(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>FOO = 0;</code>
       */
      public static final int FOO_VALUE = 0;
      /**
       * <code>BAR = 1;</code>
       */
      public static final int BAR_VALUE = 1;
      /**
       * <code>BAZ = 2;</code>
       */
      public static final int BAZ_VALUE = 2;


      @java.lang.Override
      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static NestedEnum valueOf(int value) {
        return forNumber(value);
      }

      public static NestedEnum forNumber(int value) {
        switch (value) {
          case 0: return FOO;
          case 1: return BAR;
          case 2: return BAZ;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<NestedEnum>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          NestedEnum> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<NestedEnum>() {
              @java.lang.Override
              public NestedEnum findValueByNumber(int number) {
                return NestedEnum.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return NestedEnumVerifier.INSTANCE;
      }

      private static final class NestedEnumVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new NestedEnumVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return NestedEnum.forNumber(number) != null;
              }
            };

      private final int value;

      private NestedEnum(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:packed_field_test.TestAllTypes.NestedEnum)
    }

    public static final int REPEATED_INT32_FIELD_NUMBER = 31;
    private com.google.protobuf.Internal.IntList repeatedInt32_;
    /**
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @return A list containing the repeatedInt32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedInt32List() {
      return repeatedInt32_;
    }
    /**
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @return The count of repeatedInt32.
     */
    @java.lang.Override
    public int getRepeatedInt32Count() {
      return repeatedInt32_.size();
    }
    /**
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @param index The index of the element to return.
     * @return The repeatedInt32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedInt32(int index) {
      return repeatedInt32_.getInt(index);
    }
    private int repeatedInt32MemoizedSerializedSize = -1;
    private void ensureRepeatedInt32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedInt32_;
      if (!tmp.isModifiable()) {
        repeatedInt32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @param index The index to set the value at.
     * @param value The repeatedInt32 to set.
     */
    private void setRepeatedInt32(
        int index, int value) {
      ensureRepeatedInt32IsMutable();
      repeatedInt32_.setInt(index, value);
    }
    /**
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @param value The repeatedInt32 to add.
     */
    private void addRepeatedInt32(int value) {
      ensureRepeatedInt32IsMutable();
      repeatedInt32_.addInt(value);
    }
    /**
     * <code>repeated int32 repeated_int32 = 31;</code>
     * @param values The repeatedInt32 to add.
     */
    private void addAllRepeatedInt32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedInt32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedInt32_);
    }
    /**
     * <code>repeated int32 repeated_int32 = 31;</code>
     */
    private void clearRepeatedInt32() {
      repeatedInt32_ = emptyIntList();
    }

    public static final int REPEATED_INT64_FIELD_NUMBER = 32;
    private com.google.protobuf.Internal.LongList repeatedInt64_;
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @return A list containing the repeatedInt64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedInt64List() {
      return repeatedInt64_;
    }
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @return The count of repeatedInt64.
     */
    @java.lang.Override
    public int getRepeatedInt64Count() {
      return repeatedInt64_.size();
    }
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @param index The index of the element to return.
     * @return The repeatedInt64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedInt64(int index) {
      return repeatedInt64_.getLong(index);
    }
    private int repeatedInt64MemoizedSerializedSize = -1;
    private void ensureRepeatedInt64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedInt64_;
      if (!tmp.isModifiable()) {
        repeatedInt64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @param index The index to set the value at.
     * @param value The repeatedInt64 to set.
     */
    private void setRepeatedInt64(
        int index, long value) {
      ensureRepeatedInt64IsMutable();
      repeatedInt64_.setLong(index, value);
    }
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @param value The repeatedInt64 to add.
     */
    private void addRepeatedInt64(long value) {
      ensureRepeatedInt64IsMutable();
      repeatedInt64_.addLong(value);
    }
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     * @param values The repeatedInt64 to add.
     */
    private void addAllRepeatedInt64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedInt64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedInt64_);
    }
    /**
     * <code>repeated int64 repeated_int64 = 32;</code>
     */
    private void clearRepeatedInt64() {
      repeatedInt64_ = emptyLongList();
    }

    public static final int REPEATED_UINT32_FIELD_NUMBER = 33;
    private com.google.protobuf.Internal.IntList repeatedUint32_;
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @return A list containing the repeatedUint32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedUint32List() {
      return repeatedUint32_;
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @return The count of repeatedUint32.
     */
    @java.lang.Override
    public int getRepeatedUint32Count() {
      return repeatedUint32_.size();
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @param index The index of the element to return.
     * @return The repeatedUint32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedUint32(int index) {
      return repeatedUint32_.getInt(index);
    }
    private int repeatedUint32MemoizedSerializedSize = -1;
    private void ensureRepeatedUint32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedUint32_;
      if (!tmp.isModifiable()) {
        repeatedUint32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @param index The index to set the value at.
     * @param value The repeatedUint32 to set.
     */
    private void setRepeatedUint32(
        int index, int value) {
      ensureRepeatedUint32IsMutable();
      repeatedUint32_.setInt(index, value);
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @param value The repeatedUint32 to add.
     */
    private void addRepeatedUint32(int value) {
      ensureRepeatedUint32IsMutable();
      repeatedUint32_.addInt(value);
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     * @param values The repeatedUint32 to add.
     */
    private void addAllRepeatedUint32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedUint32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedUint32_);
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 33;</code>
     */
    private void clearRepeatedUint32() {
      repeatedUint32_ = emptyIntList();
    }

    public static final int REPEATED_UINT64_FIELD_NUMBER = 34;
    private com.google.protobuf.Internal.LongList repeatedUint64_;
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @return A list containing the repeatedUint64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedUint64List() {
      return repeatedUint64_;
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @return The count of repeatedUint64.
     */
    @java.lang.Override
    public int getRepeatedUint64Count() {
      return repeatedUint64_.size();
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @param index The index of the element to return.
     * @return The repeatedUint64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedUint64(int index) {
      return repeatedUint64_.getLong(index);
    }
    private int repeatedUint64MemoizedSerializedSize = -1;
    private void ensureRepeatedUint64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedUint64_;
      if (!tmp.isModifiable()) {
        repeatedUint64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @param index The index to set the value at.
     * @param value The repeatedUint64 to set.
     */
    private void setRepeatedUint64(
        int index, long value) {
      ensureRepeatedUint64IsMutable();
      repeatedUint64_.setLong(index, value);
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @param value The repeatedUint64 to add.
     */
    private void addRepeatedUint64(long value) {
      ensureRepeatedUint64IsMutable();
      repeatedUint64_.addLong(value);
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     * @param values The repeatedUint64 to add.
     */
    private void addAllRepeatedUint64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedUint64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedUint64_);
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 34;</code>
     */
    private void clearRepeatedUint64() {
      repeatedUint64_ = emptyLongList();
    }

    public static final int REPEATED_SINT32_FIELD_NUMBER = 35;
    private com.google.protobuf.Internal.IntList repeatedSint32_;
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @return A list containing the repeatedSint32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedSint32List() {
      return repeatedSint32_;
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @return The count of repeatedSint32.
     */
    @java.lang.Override
    public int getRepeatedSint32Count() {
      return repeatedSint32_.size();
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @param index The index of the element to return.
     * @return The repeatedSint32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedSint32(int index) {
      return repeatedSint32_.getInt(index);
    }
    private int repeatedSint32MemoizedSerializedSize = -1;
    private void ensureRepeatedSint32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedSint32_;
      if (!tmp.isModifiable()) {
        repeatedSint32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @param index The index to set the value at.
     * @param value The repeatedSint32 to set.
     */
    private void setRepeatedSint32(
        int index, int value) {
      ensureRepeatedSint32IsMutable();
      repeatedSint32_.setInt(index, value);
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @param value The repeatedSint32 to add.
     */
    private void addRepeatedSint32(int value) {
      ensureRepeatedSint32IsMutable();
      repeatedSint32_.addInt(value);
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     * @param values The repeatedSint32 to add.
     */
    private void addAllRepeatedSint32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedSint32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedSint32_);
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 35;</code>
     */
    private void clearRepeatedSint32() {
      repeatedSint32_ = emptyIntList();
    }

    public static final int REPEATED_SINT64_FIELD_NUMBER = 36;
    private com.google.protobuf.Internal.LongList repeatedSint64_;
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @return A list containing the repeatedSint64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedSint64List() {
      return repeatedSint64_;
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @return The count of repeatedSint64.
     */
    @java.lang.Override
    public int getRepeatedSint64Count() {
      return repeatedSint64_.size();
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @param index The index of the element to return.
     * @return The repeatedSint64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedSint64(int index) {
      return repeatedSint64_.getLong(index);
    }
    private int repeatedSint64MemoizedSerializedSize = -1;
    private void ensureRepeatedSint64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedSint64_;
      if (!tmp.isModifiable()) {
        repeatedSint64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @param index The index to set the value at.
     * @param value The repeatedSint64 to set.
     */
    private void setRepeatedSint64(
        int index, long value) {
      ensureRepeatedSint64IsMutable();
      repeatedSint64_.setLong(index, value);
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @param value The repeatedSint64 to add.
     */
    private void addRepeatedSint64(long value) {
      ensureRepeatedSint64IsMutable();
      repeatedSint64_.addLong(value);
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     * @param values The repeatedSint64 to add.
     */
    private void addAllRepeatedSint64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedSint64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedSint64_);
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 36;</code>
     */
    private void clearRepeatedSint64() {
      repeatedSint64_ = emptyLongList();
    }

    public static final int REPEATED_FIXED32_FIELD_NUMBER = 37;
    private com.google.protobuf.Internal.IntList repeatedFixed32_;
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @return A list containing the repeatedFixed32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedFixed32List() {
      return repeatedFixed32_;
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @return The count of repeatedFixed32.
     */
    @java.lang.Override
    public int getRepeatedFixed32Count() {
      return repeatedFixed32_.size();
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @param index The index of the element to return.
     * @return The repeatedFixed32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedFixed32(int index) {
      return repeatedFixed32_.getInt(index);
    }
    private int repeatedFixed32MemoizedSerializedSize = -1;
    private void ensureRepeatedFixed32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedFixed32_;
      if (!tmp.isModifiable()) {
        repeatedFixed32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @param index The index to set the value at.
     * @param value The repeatedFixed32 to set.
     */
    private void setRepeatedFixed32(
        int index, int value) {
      ensureRepeatedFixed32IsMutable();
      repeatedFixed32_.setInt(index, value);
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @param value The repeatedFixed32 to add.
     */
    private void addRepeatedFixed32(int value) {
      ensureRepeatedFixed32IsMutable();
      repeatedFixed32_.addInt(value);
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     * @param values The repeatedFixed32 to add.
     */
    private void addAllRepeatedFixed32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedFixed32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedFixed32_);
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 37;</code>
     */
    private void clearRepeatedFixed32() {
      repeatedFixed32_ = emptyIntList();
    }

    public static final int REPEATED_FIXED64_FIELD_NUMBER = 38;
    private com.google.protobuf.Internal.LongList repeatedFixed64_;
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @return A list containing the repeatedFixed64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedFixed64List() {
      return repeatedFixed64_;
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @return The count of repeatedFixed64.
     */
    @java.lang.Override
    public int getRepeatedFixed64Count() {
      return repeatedFixed64_.size();
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @param index The index of the element to return.
     * @return The repeatedFixed64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedFixed64(int index) {
      return repeatedFixed64_.getLong(index);
    }
    private int repeatedFixed64MemoizedSerializedSize = -1;
    private void ensureRepeatedFixed64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedFixed64_;
      if (!tmp.isModifiable()) {
        repeatedFixed64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @param index The index to set the value at.
     * @param value The repeatedFixed64 to set.
     */
    private void setRepeatedFixed64(
        int index, long value) {
      ensureRepeatedFixed64IsMutable();
      repeatedFixed64_.setLong(index, value);
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @param value The repeatedFixed64 to add.
     */
    private void addRepeatedFixed64(long value) {
      ensureRepeatedFixed64IsMutable();
      repeatedFixed64_.addLong(value);
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     * @param values The repeatedFixed64 to add.
     */
    private void addAllRepeatedFixed64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedFixed64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedFixed64_);
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 38;</code>
     */
    private void clearRepeatedFixed64() {
      repeatedFixed64_ = emptyLongList();
    }

    public static final int REPEATED_SFIXED32_FIELD_NUMBER = 39;
    private com.google.protobuf.Internal.IntList repeatedSfixed32_;
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @return A list containing the repeatedSfixed32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedSfixed32List() {
      return repeatedSfixed32_;
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @return The count of repeatedSfixed32.
     */
    @java.lang.Override
    public int getRepeatedSfixed32Count() {
      return repeatedSfixed32_.size();
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @param index The index of the element to return.
     * @return The repeatedSfixed32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedSfixed32(int index) {
      return repeatedSfixed32_.getInt(index);
    }
    private int repeatedSfixed32MemoizedSerializedSize = -1;
    private void ensureRepeatedSfixed32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedSfixed32_;
      if (!tmp.isModifiable()) {
        repeatedSfixed32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @param index The index to set the value at.
     * @param value The repeatedSfixed32 to set.
     */
    private void setRepeatedSfixed32(
        int index, int value) {
      ensureRepeatedSfixed32IsMutable();
      repeatedSfixed32_.setInt(index, value);
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @param value The repeatedSfixed32 to add.
     */
    private void addRepeatedSfixed32(int value) {
      ensureRepeatedSfixed32IsMutable();
      repeatedSfixed32_.addInt(value);
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     * @param values The repeatedSfixed32 to add.
     */
    private void addAllRepeatedSfixed32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedSfixed32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedSfixed32_);
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
     */
    private void clearRepeatedSfixed32() {
      repeatedSfixed32_ = emptyIntList();
    }

    public static final int REPEATED_SFIXED64_FIELD_NUMBER = 40;
    private com.google.protobuf.Internal.LongList repeatedSfixed64_;
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @return A list containing the repeatedSfixed64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedSfixed64List() {
      return repeatedSfixed64_;
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @return The count of repeatedSfixed64.
     */
    @java.lang.Override
    public int getRepeatedSfixed64Count() {
      return repeatedSfixed64_.size();
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @param index The index of the element to return.
     * @return The repeatedSfixed64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedSfixed64(int index) {
      return repeatedSfixed64_.getLong(index);
    }
    private int repeatedSfixed64MemoizedSerializedSize = -1;
    private void ensureRepeatedSfixed64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedSfixed64_;
      if (!tmp.isModifiable()) {
        repeatedSfixed64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @param index The index to set the value at.
     * @param value The repeatedSfixed64 to set.
     */
    private void setRepeatedSfixed64(
        int index, long value) {
      ensureRepeatedSfixed64IsMutable();
      repeatedSfixed64_.setLong(index, value);
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @param value The repeatedSfixed64 to add.
     */
    private void addRepeatedSfixed64(long value) {
      ensureRepeatedSfixed64IsMutable();
      repeatedSfixed64_.addLong(value);
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     * @param values The repeatedSfixed64 to add.
     */
    private void addAllRepeatedSfixed64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedSfixed64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedSfixed64_);
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
     */
    private void clearRepeatedSfixed64() {
      repeatedSfixed64_ = emptyLongList();
    }

    public static final int REPEATED_FLOAT_FIELD_NUMBER = 41;
    private com.google.protobuf.Internal.FloatList repeatedFloat_;
    /**
     * <code>repeated float repeated_float = 41;</code>
     * @return A list containing the repeatedFloat.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getRepeatedFloatList() {
      return repeatedFloat_;
    }
    /**
     * <code>repeated float repeated_float = 41;</code>
     * @return The count of repeatedFloat.
     */
    @java.lang.Override
    public int getRepeatedFloatCount() {
      return repeatedFloat_.size();
    }
    /**
     * <code>repeated float repeated_float = 41;</code>
     * @param index The index of the element to return.
     * @return The repeatedFloat at the given index.
     */
    @java.lang.Override
    public float getRepeatedFloat(int index) {
      return repeatedFloat_.getFloat(index);
    }
    private int repeatedFloatMemoizedSerializedSize = -1;
    private void ensureRepeatedFloatIsMutable() {
      com.google.protobuf.Internal.FloatList tmp = repeatedFloat_;
      if (!tmp.isModifiable()) {
        repeatedFloat_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated float repeated_float = 41;</code>
     * @param index The index to set the value at.
     * @param value The repeatedFloat to set.
     */
    private void setRepeatedFloat(
        int index, float value) {
      ensureRepeatedFloatIsMutable();
      repeatedFloat_.setFloat(index, value);
    }
    /**
     * <code>repeated float repeated_float = 41;</code>
     * @param value The repeatedFloat to add.
     */
    private void addRepeatedFloat(float value) {
      ensureRepeatedFloatIsMutable();
      repeatedFloat_.addFloat(value);
    }
    /**
     * <code>repeated float repeated_float = 41;</code>
     * @param values The repeatedFloat to add.
     */
    private void addAllRepeatedFloat(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureRepeatedFloatIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedFloat_);
    }
    /**
     * <code>repeated float repeated_float = 41;</code>
     */
    private void clearRepeatedFloat() {
      repeatedFloat_ = emptyFloatList();
    }

    public static final int REPEATED_DOUBLE_FIELD_NUMBER = 42;
    private com.google.protobuf.Internal.DoubleList repeatedDouble_;
    /**
     * <code>repeated double repeated_double = 42;</code>
     * @return A list containing the repeatedDouble.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getRepeatedDoubleList() {
      return repeatedDouble_;
    }
    /**
     * <code>repeated double repeated_double = 42;</code>
     * @return The count of repeatedDouble.
     */
    @java.lang.Override
    public int getRepeatedDoubleCount() {
      return repeatedDouble_.size();
    }
    /**
     * <code>repeated double repeated_double = 42;</code>
     * @param index The index of the element to return.
     * @return The repeatedDouble at the given index.
     */
    @java.lang.Override
    public double getRepeatedDouble(int index) {
      return repeatedDouble_.getDouble(index);
    }
    private int repeatedDoubleMemoizedSerializedSize = -1;
    private void ensureRepeatedDoubleIsMutable() {
      com.google.protobuf.Internal.DoubleList tmp = repeatedDouble_;
      if (!tmp.isModifiable()) {
        repeatedDouble_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated double repeated_double = 42;</code>
     * @param index The index to set the value at.
     * @param value The repeatedDouble to set.
     */
    private void setRepeatedDouble(
        int index, double value) {
      ensureRepeatedDoubleIsMutable();
      repeatedDouble_.setDouble(index, value);
    }
    /**
     * <code>repeated double repeated_double = 42;</code>
     * @param value The repeatedDouble to add.
     */
    private void addRepeatedDouble(double value) {
      ensureRepeatedDoubleIsMutable();
      repeatedDouble_.addDouble(value);
    }
    /**
     * <code>repeated double repeated_double = 42;</code>
     * @param values The repeatedDouble to add.
     */
    private void addAllRepeatedDouble(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureRepeatedDoubleIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedDouble_);
    }
    /**
     * <code>repeated double repeated_double = 42;</code>
     */
    private void clearRepeatedDouble() {
      repeatedDouble_ = emptyDoubleList();
    }

    public static final int REPEATED_BOOL_FIELD_NUMBER = 43;
    private com.google.protobuf.Internal.BooleanList repeatedBool_;
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @return A list containing the repeatedBool.
     */
    @java.lang.Override
    public java.util.List<java.lang.Boolean>
        getRepeatedBoolList() {
      return repeatedBool_;
    }
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @return The count of repeatedBool.
     */
    @java.lang.Override
    public int getRepeatedBoolCount() {
      return repeatedBool_.size();
    }
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @param index The index of the element to return.
     * @return The repeatedBool at the given index.
     */
    @java.lang.Override
    public boolean getRepeatedBool(int index) {
      return repeatedBool_.getBoolean(index);
    }
    private int repeatedBoolMemoizedSerializedSize = -1;
    private void ensureRepeatedBoolIsMutable() {
      com.google.protobuf.Internal.BooleanList tmp = repeatedBool_;
      if (!tmp.isModifiable()) {
        repeatedBool_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @param index The index to set the value at.
     * @param value The repeatedBool to set.
     */
    private void setRepeatedBool(
        int index, boolean value) {
      ensureRepeatedBoolIsMutable();
      repeatedBool_.setBoolean(index, value);
    }
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @param value The repeatedBool to add.
     */
    private void addRepeatedBool(boolean value) {
      ensureRepeatedBoolIsMutable();
      repeatedBool_.addBoolean(value);
    }
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     * @param values The repeatedBool to add.
     */
    private void addAllRepeatedBool(
        java.lang.Iterable<? extends java.lang.Boolean> values) {
      ensureRepeatedBoolIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedBool_);
    }
    /**
     * <code>repeated bool repeated_bool = 43;</code>
     */
    private void clearRepeatedBool() {
      repeatedBool_ = emptyBooleanList();
    }

    public static final int REPEATED_NESTED_ENUM_FIELD_NUMBER = 51;
    private com.google.protobuf.Internal.IntList repeatedNestedEnum_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum> repeatedNestedEnum_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum>() {
              @java.lang.Override
              public com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum convert(java.lang.Integer from) {
                com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum result = com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum.forNumber(from);
                return result == null ? com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum.UNRECOGNIZED : result;
              }
            };
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @return A list containing the repeatedNestedEnum.
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum> getRepeatedNestedEnumList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum>(repeatedNestedEnum_, repeatedNestedEnum_converter_);
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @return The count of repeatedNestedEnum.
     */
    @java.lang.Override
    public int getRepeatedNestedEnumCount() {
      return repeatedNestedEnum_.size();
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param index The index of the element to return.
     * @return The repeatedNestedEnum at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum getRepeatedNestedEnum(int index) {
      return repeatedNestedEnum_converter_.convert(repeatedNestedEnum_.getInt(index));
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @return A list containing the enum numeric values on the wire for repeatedNestedEnum.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
    getRepeatedNestedEnumValueList() {
      return repeatedNestedEnum_;
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of repeatedNestedEnum at the given index.
     */
    @java.lang.Override
    public int getRepeatedNestedEnumValue(int index) {
      return repeatedNestedEnum_.getInt(index);
    }
    private int repeatedNestedEnumMemoizedSerializedSize;
    private void ensureRepeatedNestedEnumIsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedNestedEnum_;
      if (!tmp.isModifiable()) {
        repeatedNestedEnum_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
      }
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param index The index to set the value at.
     * @param value The repeatedNestedEnum to set.
     */
    private void setRepeatedNestedEnum(
        int index, com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum value) {
      value.getClass();
  ensureRepeatedNestedEnumIsMutable();
      repeatedNestedEnum_.setInt(index, value.getNumber());
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param value The repeatedNestedEnum to add.
     */
    private void addRepeatedNestedEnum(com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum value) {
      value.getClass();
  ensureRepeatedNestedEnumIsMutable();
      repeatedNestedEnum_.addInt(value.getNumber());
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param values The repeatedNestedEnum to add.
     */
    private void addAllRepeatedNestedEnum(
        java.lang.Iterable<? extends com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum> values) {
      ensureRepeatedNestedEnumIsMutable();
      for (com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum value : values) {
        repeatedNestedEnum_.addInt(value.getNumber());
      }
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     */
    private void clearRepeatedNestedEnum() {
      repeatedNestedEnum_ = emptyIntList();
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param value The enum numeric value on the wire for repeatedNestedEnum to set.
     */
    private void setRepeatedNestedEnumValue(
        int index, int value) {
      ensureRepeatedNestedEnumIsMutable();
      repeatedNestedEnum_.setInt(index, value);
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param value The enum numeric value on the wire for repeatedNestedEnum to add.
     */
    private void addRepeatedNestedEnumValue(int value) {
      ensureRepeatedNestedEnumIsMutable();
      repeatedNestedEnum_.addInt(value);
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
     * @param values The enum numeric values on the wire for repeatedNestedEnum to add.
     */
    private void addAllRepeatedNestedEnumValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureRepeatedNestedEnumIsMutable();
      for (int value : values) {
        repeatedNestedEnum_.addInt(value);
      }
    }

    public static com.google.protobuf.PackedFieldTestProto.TestAllTypes parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestAllTypes parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestAllTypes parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestAllTypes parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestAllTypes parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestAllTypes parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestAllTypes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestAllTypes parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestAllTypes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestAllTypes parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestAllTypes parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestAllTypes parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.protobuf.PackedFieldTestProto.TestAllTypes prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code packed_field_test.TestAllTypes}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.protobuf.PackedFieldTestProto.TestAllTypes, Builder> implements
        // @@protoc_insertion_point(builder_implements:packed_field_test.TestAllTypes)
        com.google.protobuf.PackedFieldTestProto.TestAllTypesOrBuilder {
      // Construct using com.google.protobuf.PackedFieldTestProto.TestAllTypes.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated int32 repeated_int32 = 31;</code>
       * @return A list containing the repeatedInt32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedInt32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedInt32List());
      }
      /**
       * <code>repeated int32 repeated_int32 = 31;</code>
       * @return The count of repeatedInt32.
       */
      @java.lang.Override
      public int getRepeatedInt32Count() {
        return instance.getRepeatedInt32Count();
      }
      /**
       * <code>repeated int32 repeated_int32 = 31;</code>
       * @param index The index of the element to return.
       * @return The repeatedInt32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedInt32(int index) {
        return instance.getRepeatedInt32(index);
      }
      /**
       * <code>repeated int32 repeated_int32 = 31;</code>
       * @param value The repeatedInt32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedInt32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedInt32(index, value);
        return this;
      }
      /**
       * <code>repeated int32 repeated_int32 = 31;</code>
       * @param value The repeatedInt32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedInt32(int value) {
        copyOnWrite();
        instance.addRepeatedInt32(value);
        return this;
      }
      /**
       * <code>repeated int32 repeated_int32 = 31;</code>
       * @param values The repeatedInt32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedInt32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedInt32(values);
        return this;
      }
      /**
       * <code>repeated int32 repeated_int32 = 31;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedInt32() {
        copyOnWrite();
        instance.clearRepeatedInt32();
        return this;
      }

      /**
       * <code>repeated int64 repeated_int64 = 32;</code>
       * @return A list containing the repeatedInt64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedInt64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedInt64List());
      }
      /**
       * <code>repeated int64 repeated_int64 = 32;</code>
       * @return The count of repeatedInt64.
       */
      @java.lang.Override
      public int getRepeatedInt64Count() {
        return instance.getRepeatedInt64Count();
      }
      /**
       * <code>repeated int64 repeated_int64 = 32;</code>
       * @param index The index of the element to return.
       * @return The repeatedInt64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedInt64(int index) {
        return instance.getRepeatedInt64(index);
      }
      /**
       * <code>repeated int64 repeated_int64 = 32;</code>
       * @param value The repeatedInt64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedInt64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedInt64(index, value);
        return this;
      }
      /**
       * <code>repeated int64 repeated_int64 = 32;</code>
       * @param value The repeatedInt64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedInt64(long value) {
        copyOnWrite();
        instance.addRepeatedInt64(value);
        return this;
      }
      /**
       * <code>repeated int64 repeated_int64 = 32;</code>
       * @param values The repeatedInt64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedInt64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedInt64(values);
        return this;
      }
      /**
       * <code>repeated int64 repeated_int64 = 32;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedInt64() {
        copyOnWrite();
        instance.clearRepeatedInt64();
        return this;
      }

      /**
       * <code>repeated uint32 repeated_uint32 = 33;</code>
       * @return A list containing the repeatedUint32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedUint32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedUint32List());
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 33;</code>
       * @return The count of repeatedUint32.
       */
      @java.lang.Override
      public int getRepeatedUint32Count() {
        return instance.getRepeatedUint32Count();
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 33;</code>
       * @param index The index of the element to return.
       * @return The repeatedUint32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedUint32(int index) {
        return instance.getRepeatedUint32(index);
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 33;</code>
       * @param value The repeatedUint32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedUint32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedUint32(index, value);
        return this;
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 33;</code>
       * @param value The repeatedUint32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedUint32(int value) {
        copyOnWrite();
        instance.addRepeatedUint32(value);
        return this;
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 33;</code>
       * @param values The repeatedUint32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedUint32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedUint32(values);
        return this;
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 33;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedUint32() {
        copyOnWrite();
        instance.clearRepeatedUint32();
        return this;
      }

      /**
       * <code>repeated uint64 repeated_uint64 = 34;</code>
       * @return A list containing the repeatedUint64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedUint64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedUint64List());
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 34;</code>
       * @return The count of repeatedUint64.
       */
      @java.lang.Override
      public int getRepeatedUint64Count() {
        return instance.getRepeatedUint64Count();
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 34;</code>
       * @param index The index of the element to return.
       * @return The repeatedUint64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedUint64(int index) {
        return instance.getRepeatedUint64(index);
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 34;</code>
       * @param value The repeatedUint64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedUint64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedUint64(index, value);
        return this;
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 34;</code>
       * @param value The repeatedUint64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedUint64(long value) {
        copyOnWrite();
        instance.addRepeatedUint64(value);
        return this;
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 34;</code>
       * @param values The repeatedUint64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedUint64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedUint64(values);
        return this;
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 34;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedUint64() {
        copyOnWrite();
        instance.clearRepeatedUint64();
        return this;
      }

      /**
       * <code>repeated sint32 repeated_sint32 = 35;</code>
       * @return A list containing the repeatedSint32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedSint32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedSint32List());
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 35;</code>
       * @return The count of repeatedSint32.
       */
      @java.lang.Override
      public int getRepeatedSint32Count() {
        return instance.getRepeatedSint32Count();
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 35;</code>
       * @param index The index of the element to return.
       * @return The repeatedSint32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedSint32(int index) {
        return instance.getRepeatedSint32(index);
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 35;</code>
       * @param value The repeatedSint32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedSint32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedSint32(index, value);
        return this;
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 35;</code>
       * @param value The repeatedSint32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedSint32(int value) {
        copyOnWrite();
        instance.addRepeatedSint32(value);
        return this;
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 35;</code>
       * @param values The repeatedSint32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedSint32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedSint32(values);
        return this;
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 35;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedSint32() {
        copyOnWrite();
        instance.clearRepeatedSint32();
        return this;
      }

      /**
       * <code>repeated sint64 repeated_sint64 = 36;</code>
       * @return A list containing the repeatedSint64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedSint64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedSint64List());
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 36;</code>
       * @return The count of repeatedSint64.
       */
      @java.lang.Override
      public int getRepeatedSint64Count() {
        return instance.getRepeatedSint64Count();
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 36;</code>
       * @param index The index of the element to return.
       * @return The repeatedSint64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedSint64(int index) {
        return instance.getRepeatedSint64(index);
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 36;</code>
       * @param value The repeatedSint64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedSint64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedSint64(index, value);
        return this;
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 36;</code>
       * @param value The repeatedSint64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedSint64(long value) {
        copyOnWrite();
        instance.addRepeatedSint64(value);
        return this;
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 36;</code>
       * @param values The repeatedSint64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedSint64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedSint64(values);
        return this;
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 36;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedSint64() {
        copyOnWrite();
        instance.clearRepeatedSint64();
        return this;
      }

      /**
       * <code>repeated fixed32 repeated_fixed32 = 37;</code>
       * @return A list containing the repeatedFixed32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedFixed32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedFixed32List());
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 37;</code>
       * @return The count of repeatedFixed32.
       */
      @java.lang.Override
      public int getRepeatedFixed32Count() {
        return instance.getRepeatedFixed32Count();
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 37;</code>
       * @param index The index of the element to return.
       * @return The repeatedFixed32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedFixed32(int index) {
        return instance.getRepeatedFixed32(index);
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 37;</code>
       * @param value The repeatedFixed32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedFixed32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedFixed32(index, value);
        return this;
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 37;</code>
       * @param value The repeatedFixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedFixed32(int value) {
        copyOnWrite();
        instance.addRepeatedFixed32(value);
        return this;
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 37;</code>
       * @param values The repeatedFixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedFixed32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedFixed32(values);
        return this;
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 37;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedFixed32() {
        copyOnWrite();
        instance.clearRepeatedFixed32();
        return this;
      }

      /**
       * <code>repeated fixed64 repeated_fixed64 = 38;</code>
       * @return A list containing the repeatedFixed64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedFixed64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedFixed64List());
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 38;</code>
       * @return The count of repeatedFixed64.
       */
      @java.lang.Override
      public int getRepeatedFixed64Count() {
        return instance.getRepeatedFixed64Count();
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 38;</code>
       * @param index The index of the element to return.
       * @return The repeatedFixed64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedFixed64(int index) {
        return instance.getRepeatedFixed64(index);
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 38;</code>
       * @param value The repeatedFixed64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedFixed64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedFixed64(index, value);
        return this;
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 38;</code>
       * @param value The repeatedFixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedFixed64(long value) {
        copyOnWrite();
        instance.addRepeatedFixed64(value);
        return this;
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 38;</code>
       * @param values The repeatedFixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedFixed64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedFixed64(values);
        return this;
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 38;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedFixed64() {
        copyOnWrite();
        instance.clearRepeatedFixed64();
        return this;
      }

      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
       * @return A list containing the repeatedSfixed32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedSfixed32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedSfixed32List());
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
       * @return The count of repeatedSfixed32.
       */
      @java.lang.Override
      public int getRepeatedSfixed32Count() {
        return instance.getRepeatedSfixed32Count();
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
       * @param index The index of the element to return.
       * @return The repeatedSfixed32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedSfixed32(int index) {
        return instance.getRepeatedSfixed32(index);
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
       * @param value The repeatedSfixed32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedSfixed32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedSfixed32(index, value);
        return this;
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
       * @param value The repeatedSfixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedSfixed32(int value) {
        copyOnWrite();
        instance.addRepeatedSfixed32(value);
        return this;
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
       * @param values The repeatedSfixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedSfixed32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedSfixed32(values);
        return this;
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 39;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedSfixed32() {
        copyOnWrite();
        instance.clearRepeatedSfixed32();
        return this;
      }

      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
       * @return A list containing the repeatedSfixed64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedSfixed64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedSfixed64List());
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
       * @return The count of repeatedSfixed64.
       */
      @java.lang.Override
      public int getRepeatedSfixed64Count() {
        return instance.getRepeatedSfixed64Count();
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
       * @param index The index of the element to return.
       * @return The repeatedSfixed64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedSfixed64(int index) {
        return instance.getRepeatedSfixed64(index);
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
       * @param value The repeatedSfixed64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedSfixed64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedSfixed64(index, value);
        return this;
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
       * @param value The repeatedSfixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedSfixed64(long value) {
        copyOnWrite();
        instance.addRepeatedSfixed64(value);
        return this;
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
       * @param values The repeatedSfixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedSfixed64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedSfixed64(values);
        return this;
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 40;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedSfixed64() {
        copyOnWrite();
        instance.clearRepeatedSfixed64();
        return this;
      }

      /**
       * <code>repeated float repeated_float = 41;</code>
       * @return A list containing the repeatedFloat.
       */
      @java.lang.Override
      public java.util.List<java.lang.Float>
          getRepeatedFloatList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedFloatList());
      }
      /**
       * <code>repeated float repeated_float = 41;</code>
       * @return The count of repeatedFloat.
       */
      @java.lang.Override
      public int getRepeatedFloatCount() {
        return instance.getRepeatedFloatCount();
      }
      /**
       * <code>repeated float repeated_float = 41;</code>
       * @param index The index of the element to return.
       * @return The repeatedFloat at the given index.
       */
      @java.lang.Override
      public float getRepeatedFloat(int index) {
        return instance.getRepeatedFloat(index);
      }
      /**
       * <code>repeated float repeated_float = 41;</code>
       * @param value The repeatedFloat to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedFloat(
          int index, float value) {
        copyOnWrite();
        instance.setRepeatedFloat(index, value);
        return this;
      }
      /**
       * <code>repeated float repeated_float = 41;</code>
       * @param value The repeatedFloat to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedFloat(float value) {
        copyOnWrite();
        instance.addRepeatedFloat(value);
        return this;
      }
      /**
       * <code>repeated float repeated_float = 41;</code>
       * @param values The repeatedFloat to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedFloat(
          java.lang.Iterable<? extends java.lang.Float> values) {
        copyOnWrite();
        instance.addAllRepeatedFloat(values);
        return this;
      }
      /**
       * <code>repeated float repeated_float = 41;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedFloat() {
        copyOnWrite();
        instance.clearRepeatedFloat();
        return this;
      }

      /**
       * <code>repeated double repeated_double = 42;</code>
       * @return A list containing the repeatedDouble.
       */
      @java.lang.Override
      public java.util.List<java.lang.Double>
          getRepeatedDoubleList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedDoubleList());
      }
      /**
       * <code>repeated double repeated_double = 42;</code>
       * @return The count of repeatedDouble.
       */
      @java.lang.Override
      public int getRepeatedDoubleCount() {
        return instance.getRepeatedDoubleCount();
      }
      /**
       * <code>repeated double repeated_double = 42;</code>
       * @param index The index of the element to return.
       * @return The repeatedDouble at the given index.
       */
      @java.lang.Override
      public double getRepeatedDouble(int index) {
        return instance.getRepeatedDouble(index);
      }
      /**
       * <code>repeated double repeated_double = 42;</code>
       * @param value The repeatedDouble to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedDouble(
          int index, double value) {
        copyOnWrite();
        instance.setRepeatedDouble(index, value);
        return this;
      }
      /**
       * <code>repeated double repeated_double = 42;</code>
       * @param value The repeatedDouble to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedDouble(double value) {
        copyOnWrite();
        instance.addRepeatedDouble(value);
        return this;
      }
      /**
       * <code>repeated double repeated_double = 42;</code>
       * @param values The repeatedDouble to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedDouble(
          java.lang.Iterable<? extends java.lang.Double> values) {
        copyOnWrite();
        instance.addAllRepeatedDouble(values);
        return this;
      }
      /**
       * <code>repeated double repeated_double = 42;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedDouble() {
        copyOnWrite();
        instance.clearRepeatedDouble();
        return this;
      }

      /**
       * <code>repeated bool repeated_bool = 43;</code>
       * @return A list containing the repeatedBool.
       */
      @java.lang.Override
      public java.util.List<java.lang.Boolean>
          getRepeatedBoolList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedBoolList());
      }
      /**
       * <code>repeated bool repeated_bool = 43;</code>
       * @return The count of repeatedBool.
       */
      @java.lang.Override
      public int getRepeatedBoolCount() {
        return instance.getRepeatedBoolCount();
      }
      /**
       * <code>repeated bool repeated_bool = 43;</code>
       * @param index The index of the element to return.
       * @return The repeatedBool at the given index.
       */
      @java.lang.Override
      public boolean getRepeatedBool(int index) {
        return instance.getRepeatedBool(index);
      }
      /**
       * <code>repeated bool repeated_bool = 43;</code>
       * @param value The repeatedBool to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedBool(
          int index, boolean value) {
        copyOnWrite();
        instance.setRepeatedBool(index, value);
        return this;
      }
      /**
       * <code>repeated bool repeated_bool = 43;</code>
       * @param value The repeatedBool to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedBool(boolean value) {
        copyOnWrite();
        instance.addRepeatedBool(value);
        return this;
      }
      /**
       * <code>repeated bool repeated_bool = 43;</code>
       * @param values The repeatedBool to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedBool(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        copyOnWrite();
        instance.addAllRepeatedBool(values);
        return this;
      }
      /**
       * <code>repeated bool repeated_bool = 43;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedBool() {
        copyOnWrite();
        instance.clearRepeatedBool();
        return this;
      }

      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @return A list containing the repeatedNestedEnum.
       */
      @java.lang.Override
      public java.util.List<com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum> getRepeatedNestedEnumList() {
        return instance.getRepeatedNestedEnumList();
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @return The count of repeatedNestedEnum.
       */
      @java.lang.Override
      public int getRepeatedNestedEnumCount() {
        return instance.getRepeatedNestedEnumCount();
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @param index The index of the element to return.
       * @return The repeatedNestedEnum at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum getRepeatedNestedEnum(int index) {
        return instance.getRepeatedNestedEnum(index);
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @param index The index to set the value at.
       * @param value The repeatedNestedEnum to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedNestedEnum(
          int index, com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum value) {
        copyOnWrite();
        instance.setRepeatedNestedEnum(index, value);
        return this;
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @param value The repeatedNestedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedNestedEnum(com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum value) {
        copyOnWrite();
        instance.addRepeatedNestedEnum(value);
        return this;
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @param values The repeatedNestedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedNestedEnum(
          java.lang.Iterable<? extends com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum> values) {
        copyOnWrite();
        instance.addAllRepeatedNestedEnum(values);  return this;
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedNestedEnum() {
        copyOnWrite();
        instance.clearRepeatedNestedEnum();
        return this;
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @return A list containing the enum numeric values on the wire for repeatedNestedEnum.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
      getRepeatedNestedEnumValueList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedNestedEnumValueList());
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @param index The index of the value to return.
       * @return The enum numeric value on the wire of repeatedNestedEnum at the given index.
       */
      @java.lang.Override
      public int getRepeatedNestedEnumValue(int index) {
        return instance.getRepeatedNestedEnumValue(index);
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @param index The index to set the value at.
       * @param value The enum numeric value on the wire for repeatedNestedEnum to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedNestedEnumValue(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedNestedEnumValue(index, value);
        return this;
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @param value The enum numeric value on the wire for repeatedNestedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedNestedEnumValue(int value) {
        instance.addRepeatedNestedEnumValue(value);
        return this;
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 51;</code>
       * @param values The enum numeric values on the wire for repeatedNestedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedNestedEnumValue(
          java.lang.Iterable<java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedNestedEnumValue(values);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packed_field_test.TestAllTypes)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.protobuf.PackedFieldTestProto.TestAllTypes();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "repeatedInt32_",
              "repeatedInt64_",
              "repeatedUint32_",
              "repeatedUint64_",
              "repeatedSint32_",
              "repeatedSint64_",
              "repeatedFixed32_",
              "repeatedFixed64_",
              "repeatedSfixed32_",
              "repeatedSfixed64_",
              "repeatedFloat_",
              "repeatedDouble_",
              "repeatedBool_",
              "repeatedNestedEnum_",
            };
            java.lang.String info =
                "\u0000\u000e\u0000\u0000\u001f3\u000e\u0000\u000e\u0000\u001f\' %!+\"&#/$0%)&(\'" +
                "-(.)$*#+*3,";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.protobuf.PackedFieldTestProto.TestAllTypes> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.protobuf.PackedFieldTestProto.TestAllTypes.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.protobuf.PackedFieldTestProto.TestAllTypes>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:packed_field_test.TestAllTypes)
    private static final com.google.protobuf.PackedFieldTestProto.TestAllTypes DEFAULT_INSTANCE;
    static {
      TestAllTypes defaultInstance = new TestAllTypes();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TestAllTypes.class, defaultInstance);
    }

    public static com.google.protobuf.PackedFieldTestProto.TestAllTypes getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TestAllTypes> PARSER;

    public static com.google.protobuf.Parser<TestAllTypes> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TestUnpackedTypesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:packed_field_test.TestUnpackedTypes)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @return A list containing the repeatedInt32.
     */
    java.util.List<java.lang.Integer> getRepeatedInt32List();
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @return The count of repeatedInt32.
     */
    int getRepeatedInt32Count();
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedInt32 at the given index.
     */
    int getRepeatedInt32(int index);

    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @return A list containing the repeatedInt64.
     */
    java.util.List<java.lang.Long> getRepeatedInt64List();
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @return The count of repeatedInt64.
     */
    int getRepeatedInt64Count();
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedInt64 at the given index.
     */
    long getRepeatedInt64(int index);

    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @return A list containing the repeatedUint32.
     */
    java.util.List<java.lang.Integer> getRepeatedUint32List();
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @return The count of repeatedUint32.
     */
    int getRepeatedUint32Count();
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedUint32 at the given index.
     */
    int getRepeatedUint32(int index);

    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @return A list containing the repeatedUint64.
     */
    java.util.List<java.lang.Long> getRepeatedUint64List();
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @return The count of repeatedUint64.
     */
    int getRepeatedUint64Count();
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedUint64 at the given index.
     */
    long getRepeatedUint64(int index);

    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @return A list containing the repeatedSint32.
     */
    java.util.List<java.lang.Integer> getRepeatedSint32List();
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @return The count of repeatedSint32.
     */
    int getRepeatedSint32Count();
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedSint32 at the given index.
     */
    int getRepeatedSint32(int index);

    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @return A list containing the repeatedSint64.
     */
    java.util.List<java.lang.Long> getRepeatedSint64List();
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @return The count of repeatedSint64.
     */
    int getRepeatedSint64Count();
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedSint64 at the given index.
     */
    long getRepeatedSint64(int index);

    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @return A list containing the repeatedFixed32.
     */
    java.util.List<java.lang.Integer> getRepeatedFixed32List();
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @return The count of repeatedFixed32.
     */
    int getRepeatedFixed32Count();
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedFixed32 at the given index.
     */
    int getRepeatedFixed32(int index);

    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @return A list containing the repeatedFixed64.
     */
    java.util.List<java.lang.Long> getRepeatedFixed64List();
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @return The count of repeatedFixed64.
     */
    int getRepeatedFixed64Count();
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedFixed64 at the given index.
     */
    long getRepeatedFixed64(int index);

    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @return A list containing the repeatedSfixed32.
     */
    java.util.List<java.lang.Integer> getRepeatedSfixed32List();
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @return The count of repeatedSfixed32.
     */
    int getRepeatedSfixed32Count();
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedSfixed32 at the given index.
     */
    int getRepeatedSfixed32(int index);

    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @return A list containing the repeatedSfixed64.
     */
    java.util.List<java.lang.Long> getRepeatedSfixed64List();
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @return The count of repeatedSfixed64.
     */
    int getRepeatedSfixed64Count();
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedSfixed64 at the given index.
     */
    long getRepeatedSfixed64(int index);

    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @return A list containing the repeatedFloat.
     */
    java.util.List<java.lang.Float> getRepeatedFloatList();
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @return The count of repeatedFloat.
     */
    int getRepeatedFloatCount();
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedFloat at the given index.
     */
    float getRepeatedFloat(int index);

    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @return A list containing the repeatedDouble.
     */
    java.util.List<java.lang.Double> getRepeatedDoubleList();
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @return The count of repeatedDouble.
     */
    int getRepeatedDoubleCount();
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedDouble at the given index.
     */
    double getRepeatedDouble(int index);

    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @return A list containing the repeatedBool.
     */
    java.util.List<java.lang.Boolean> getRepeatedBoolList();
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @return The count of repeatedBool.
     */
    int getRepeatedBoolCount();
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedBool at the given index.
     */
    boolean getRepeatedBool(int index);

    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @return A list containing the repeatedNestedEnum.
     */
    java.util.List<com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum> getRepeatedNestedEnumList();
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @return The count of repeatedNestedEnum.
     */
    int getRepeatedNestedEnumCount();
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedNestedEnum at the given index.
     */
    com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum getRepeatedNestedEnum(int index);
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @return A list containing the enum numeric values on the wire for repeatedNestedEnum.
     */
    java.util.List<java.lang.Integer>
    getRepeatedNestedEnumValueList();
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of repeatedNestedEnum at the given index.
     */
    int getRepeatedNestedEnumValue(int index);
  }
  /**
   * Protobuf type {@code packed_field_test.TestUnpackedTypes}
   */
  public  static final class TestUnpackedTypes extends
      com.google.protobuf.GeneratedMessageLite<
          TestUnpackedTypes, TestUnpackedTypes.Builder> implements
      // @@protoc_insertion_point(message_implements:packed_field_test.TestUnpackedTypes)
      TestUnpackedTypesOrBuilder {
    private TestUnpackedTypes() {
      repeatedInt32_ = emptyIntList();
      repeatedInt64_ = emptyLongList();
      repeatedUint32_ = emptyIntList();
      repeatedUint64_ = emptyLongList();
      repeatedSint32_ = emptyIntList();
      repeatedSint64_ = emptyLongList();
      repeatedFixed32_ = emptyIntList();
      repeatedFixed64_ = emptyLongList();
      repeatedSfixed32_ = emptyIntList();
      repeatedSfixed64_ = emptyLongList();
      repeatedFloat_ = emptyFloatList();
      repeatedDouble_ = emptyDoubleList();
      repeatedBool_ = emptyBooleanList();
      repeatedNestedEnum_ = emptyIntList();
    }
    public static final int REPEATED_INT32_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.IntList repeatedInt32_;
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @return A list containing the repeatedInt32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedInt32List() {
      return repeatedInt32_;
    }
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @return The count of repeatedInt32.
     */
    @java.lang.Override
    public int getRepeatedInt32Count() {
      return repeatedInt32_.size();
    }
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedInt32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedInt32(int index) {
      return repeatedInt32_.getInt(index);
    }
    private void ensureRepeatedInt32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedInt32_;
      if (!tmp.isModifiable()) {
        repeatedInt32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedInt32 to set.
     */
    private void setRepeatedInt32(
        int index, int value) {
      ensureRepeatedInt32IsMutable();
      repeatedInt32_.setInt(index, value);
    }
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @param value The repeatedInt32 to add.
     */
    private void addRepeatedInt32(int value) {
      ensureRepeatedInt32IsMutable();
      repeatedInt32_.addInt(value);
    }
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     * @param values The repeatedInt32 to add.
     */
    private void addAllRepeatedInt32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedInt32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedInt32_);
    }
    /**
     * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
     */
    private void clearRepeatedInt32() {
      repeatedInt32_ = emptyIntList();
    }

    public static final int REPEATED_INT64_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.LongList repeatedInt64_;
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @return A list containing the repeatedInt64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedInt64List() {
      return repeatedInt64_;
    }
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @return The count of repeatedInt64.
     */
    @java.lang.Override
    public int getRepeatedInt64Count() {
      return repeatedInt64_.size();
    }
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedInt64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedInt64(int index) {
      return repeatedInt64_.getLong(index);
    }
    private void ensureRepeatedInt64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedInt64_;
      if (!tmp.isModifiable()) {
        repeatedInt64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedInt64 to set.
     */
    private void setRepeatedInt64(
        int index, long value) {
      ensureRepeatedInt64IsMutable();
      repeatedInt64_.setLong(index, value);
    }
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @param value The repeatedInt64 to add.
     */
    private void addRepeatedInt64(long value) {
      ensureRepeatedInt64IsMutable();
      repeatedInt64_.addLong(value);
    }
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     * @param values The repeatedInt64 to add.
     */
    private void addAllRepeatedInt64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedInt64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedInt64_);
    }
    /**
     * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
     */
    private void clearRepeatedInt64() {
      repeatedInt64_ = emptyLongList();
    }

    public static final int REPEATED_UINT32_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.IntList repeatedUint32_;
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @return A list containing the repeatedUint32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedUint32List() {
      return repeatedUint32_;
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @return The count of repeatedUint32.
     */
    @java.lang.Override
    public int getRepeatedUint32Count() {
      return repeatedUint32_.size();
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedUint32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedUint32(int index) {
      return repeatedUint32_.getInt(index);
    }
    private void ensureRepeatedUint32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedUint32_;
      if (!tmp.isModifiable()) {
        repeatedUint32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedUint32 to set.
     */
    private void setRepeatedUint32(
        int index, int value) {
      ensureRepeatedUint32IsMutable();
      repeatedUint32_.setInt(index, value);
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @param value The repeatedUint32 to add.
     */
    private void addRepeatedUint32(int value) {
      ensureRepeatedUint32IsMutable();
      repeatedUint32_.addInt(value);
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     * @param values The repeatedUint32 to add.
     */
    private void addAllRepeatedUint32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedUint32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedUint32_);
    }
    /**
     * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
     */
    private void clearRepeatedUint32() {
      repeatedUint32_ = emptyIntList();
    }

    public static final int REPEATED_UINT64_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.LongList repeatedUint64_;
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @return A list containing the repeatedUint64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedUint64List() {
      return repeatedUint64_;
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @return The count of repeatedUint64.
     */
    @java.lang.Override
    public int getRepeatedUint64Count() {
      return repeatedUint64_.size();
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedUint64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedUint64(int index) {
      return repeatedUint64_.getLong(index);
    }
    private void ensureRepeatedUint64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedUint64_;
      if (!tmp.isModifiable()) {
        repeatedUint64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedUint64 to set.
     */
    private void setRepeatedUint64(
        int index, long value) {
      ensureRepeatedUint64IsMutable();
      repeatedUint64_.setLong(index, value);
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @param value The repeatedUint64 to add.
     */
    private void addRepeatedUint64(long value) {
      ensureRepeatedUint64IsMutable();
      repeatedUint64_.addLong(value);
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     * @param values The repeatedUint64 to add.
     */
    private void addAllRepeatedUint64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedUint64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedUint64_);
    }
    /**
     * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
     */
    private void clearRepeatedUint64() {
      repeatedUint64_ = emptyLongList();
    }

    public static final int REPEATED_SINT32_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.IntList repeatedSint32_;
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @return A list containing the repeatedSint32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedSint32List() {
      return repeatedSint32_;
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @return The count of repeatedSint32.
     */
    @java.lang.Override
    public int getRepeatedSint32Count() {
      return repeatedSint32_.size();
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedSint32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedSint32(int index) {
      return repeatedSint32_.getInt(index);
    }
    private void ensureRepeatedSint32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedSint32_;
      if (!tmp.isModifiable()) {
        repeatedSint32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedSint32 to set.
     */
    private void setRepeatedSint32(
        int index, int value) {
      ensureRepeatedSint32IsMutable();
      repeatedSint32_.setInt(index, value);
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @param value The repeatedSint32 to add.
     */
    private void addRepeatedSint32(int value) {
      ensureRepeatedSint32IsMutable();
      repeatedSint32_.addInt(value);
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     * @param values The repeatedSint32 to add.
     */
    private void addAllRepeatedSint32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedSint32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedSint32_);
    }
    /**
     * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
     */
    private void clearRepeatedSint32() {
      repeatedSint32_ = emptyIntList();
    }

    public static final int REPEATED_SINT64_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.LongList repeatedSint64_;
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @return A list containing the repeatedSint64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedSint64List() {
      return repeatedSint64_;
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @return The count of repeatedSint64.
     */
    @java.lang.Override
    public int getRepeatedSint64Count() {
      return repeatedSint64_.size();
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedSint64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedSint64(int index) {
      return repeatedSint64_.getLong(index);
    }
    private void ensureRepeatedSint64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedSint64_;
      if (!tmp.isModifiable()) {
        repeatedSint64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedSint64 to set.
     */
    private void setRepeatedSint64(
        int index, long value) {
      ensureRepeatedSint64IsMutable();
      repeatedSint64_.setLong(index, value);
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @param value The repeatedSint64 to add.
     */
    private void addRepeatedSint64(long value) {
      ensureRepeatedSint64IsMutable();
      repeatedSint64_.addLong(value);
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     * @param values The repeatedSint64 to add.
     */
    private void addAllRepeatedSint64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedSint64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedSint64_);
    }
    /**
     * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
     */
    private void clearRepeatedSint64() {
      repeatedSint64_ = emptyLongList();
    }

    public static final int REPEATED_FIXED32_FIELD_NUMBER = 7;
    private com.google.protobuf.Internal.IntList repeatedFixed32_;
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @return A list containing the repeatedFixed32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedFixed32List() {
      return repeatedFixed32_;
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @return The count of repeatedFixed32.
     */
    @java.lang.Override
    public int getRepeatedFixed32Count() {
      return repeatedFixed32_.size();
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedFixed32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedFixed32(int index) {
      return repeatedFixed32_.getInt(index);
    }
    private void ensureRepeatedFixed32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedFixed32_;
      if (!tmp.isModifiable()) {
        repeatedFixed32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedFixed32 to set.
     */
    private void setRepeatedFixed32(
        int index, int value) {
      ensureRepeatedFixed32IsMutable();
      repeatedFixed32_.setInt(index, value);
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @param value The repeatedFixed32 to add.
     */
    private void addRepeatedFixed32(int value) {
      ensureRepeatedFixed32IsMutable();
      repeatedFixed32_.addInt(value);
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     * @param values The repeatedFixed32 to add.
     */
    private void addAllRepeatedFixed32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedFixed32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedFixed32_);
    }
    /**
     * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
     */
    private void clearRepeatedFixed32() {
      repeatedFixed32_ = emptyIntList();
    }

    public static final int REPEATED_FIXED64_FIELD_NUMBER = 8;
    private com.google.protobuf.Internal.LongList repeatedFixed64_;
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @return A list containing the repeatedFixed64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedFixed64List() {
      return repeatedFixed64_;
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @return The count of repeatedFixed64.
     */
    @java.lang.Override
    public int getRepeatedFixed64Count() {
      return repeatedFixed64_.size();
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedFixed64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedFixed64(int index) {
      return repeatedFixed64_.getLong(index);
    }
    private void ensureRepeatedFixed64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedFixed64_;
      if (!tmp.isModifiable()) {
        repeatedFixed64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedFixed64 to set.
     */
    private void setRepeatedFixed64(
        int index, long value) {
      ensureRepeatedFixed64IsMutable();
      repeatedFixed64_.setLong(index, value);
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @param value The repeatedFixed64 to add.
     */
    private void addRepeatedFixed64(long value) {
      ensureRepeatedFixed64IsMutable();
      repeatedFixed64_.addLong(value);
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     * @param values The repeatedFixed64 to add.
     */
    private void addAllRepeatedFixed64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedFixed64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedFixed64_);
    }
    /**
     * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
     */
    private void clearRepeatedFixed64() {
      repeatedFixed64_ = emptyLongList();
    }

    public static final int REPEATED_SFIXED32_FIELD_NUMBER = 9;
    private com.google.protobuf.Internal.IntList repeatedSfixed32_;
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @return A list containing the repeatedSfixed32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRepeatedSfixed32List() {
      return repeatedSfixed32_;
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @return The count of repeatedSfixed32.
     */
    @java.lang.Override
    public int getRepeatedSfixed32Count() {
      return repeatedSfixed32_.size();
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedSfixed32 at the given index.
     */
    @java.lang.Override
    public int getRepeatedSfixed32(int index) {
      return repeatedSfixed32_.getInt(index);
    }
    private void ensureRepeatedSfixed32IsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedSfixed32_;
      if (!tmp.isModifiable()) {
        repeatedSfixed32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedSfixed32 to set.
     */
    private void setRepeatedSfixed32(
        int index, int value) {
      ensureRepeatedSfixed32IsMutable();
      repeatedSfixed32_.setInt(index, value);
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @param value The repeatedSfixed32 to add.
     */
    private void addRepeatedSfixed32(int value) {
      ensureRepeatedSfixed32IsMutable();
      repeatedSfixed32_.addInt(value);
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     * @param values The repeatedSfixed32 to add.
     */
    private void addAllRepeatedSfixed32(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureRepeatedSfixed32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedSfixed32_);
    }
    /**
     * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
     */
    private void clearRepeatedSfixed32() {
      repeatedSfixed32_ = emptyIntList();
    }

    public static final int REPEATED_SFIXED64_FIELD_NUMBER = 10;
    private com.google.protobuf.Internal.LongList repeatedSfixed64_;
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @return A list containing the repeatedSfixed64.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getRepeatedSfixed64List() {
      return repeatedSfixed64_;
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @return The count of repeatedSfixed64.
     */
    @java.lang.Override
    public int getRepeatedSfixed64Count() {
      return repeatedSfixed64_.size();
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedSfixed64 at the given index.
     */
    @java.lang.Override
    public long getRepeatedSfixed64(int index) {
      return repeatedSfixed64_.getLong(index);
    }
    private void ensureRepeatedSfixed64IsMutable() {
      com.google.protobuf.Internal.LongList tmp = repeatedSfixed64_;
      if (!tmp.isModifiable()) {
        repeatedSfixed64_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedSfixed64 to set.
     */
    private void setRepeatedSfixed64(
        int index, long value) {
      ensureRepeatedSfixed64IsMutable();
      repeatedSfixed64_.setLong(index, value);
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @param value The repeatedSfixed64 to add.
     */
    private void addRepeatedSfixed64(long value) {
      ensureRepeatedSfixed64IsMutable();
      repeatedSfixed64_.addLong(value);
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     * @param values The repeatedSfixed64 to add.
     */
    private void addAllRepeatedSfixed64(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureRepeatedSfixed64IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedSfixed64_);
    }
    /**
     * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
     */
    private void clearRepeatedSfixed64() {
      repeatedSfixed64_ = emptyLongList();
    }

    public static final int REPEATED_FLOAT_FIELD_NUMBER = 11;
    private com.google.protobuf.Internal.FloatList repeatedFloat_;
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @return A list containing the repeatedFloat.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getRepeatedFloatList() {
      return repeatedFloat_;
    }
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @return The count of repeatedFloat.
     */
    @java.lang.Override
    public int getRepeatedFloatCount() {
      return repeatedFloat_.size();
    }
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedFloat at the given index.
     */
    @java.lang.Override
    public float getRepeatedFloat(int index) {
      return repeatedFloat_.getFloat(index);
    }
    private void ensureRepeatedFloatIsMutable() {
      com.google.protobuf.Internal.FloatList tmp = repeatedFloat_;
      if (!tmp.isModifiable()) {
        repeatedFloat_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedFloat to set.
     */
    private void setRepeatedFloat(
        int index, float value) {
      ensureRepeatedFloatIsMutable();
      repeatedFloat_.setFloat(index, value);
    }
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @param value The repeatedFloat to add.
     */
    private void addRepeatedFloat(float value) {
      ensureRepeatedFloatIsMutable();
      repeatedFloat_.addFloat(value);
    }
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     * @param values The repeatedFloat to add.
     */
    private void addAllRepeatedFloat(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureRepeatedFloatIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedFloat_);
    }
    /**
     * <code>repeated float repeated_float = 11 [packed = false];</code>
     */
    private void clearRepeatedFloat() {
      repeatedFloat_ = emptyFloatList();
    }

    public static final int REPEATED_DOUBLE_FIELD_NUMBER = 12;
    private com.google.protobuf.Internal.DoubleList repeatedDouble_;
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @return A list containing the repeatedDouble.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getRepeatedDoubleList() {
      return repeatedDouble_;
    }
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @return The count of repeatedDouble.
     */
    @java.lang.Override
    public int getRepeatedDoubleCount() {
      return repeatedDouble_.size();
    }
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedDouble at the given index.
     */
    @java.lang.Override
    public double getRepeatedDouble(int index) {
      return repeatedDouble_.getDouble(index);
    }
    private void ensureRepeatedDoubleIsMutable() {
      com.google.protobuf.Internal.DoubleList tmp = repeatedDouble_;
      if (!tmp.isModifiable()) {
        repeatedDouble_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedDouble to set.
     */
    private void setRepeatedDouble(
        int index, double value) {
      ensureRepeatedDoubleIsMutable();
      repeatedDouble_.setDouble(index, value);
    }
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @param value The repeatedDouble to add.
     */
    private void addRepeatedDouble(double value) {
      ensureRepeatedDoubleIsMutable();
      repeatedDouble_.addDouble(value);
    }
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     * @param values The repeatedDouble to add.
     */
    private void addAllRepeatedDouble(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureRepeatedDoubleIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedDouble_);
    }
    /**
     * <code>repeated double repeated_double = 12 [packed = false];</code>
     */
    private void clearRepeatedDouble() {
      repeatedDouble_ = emptyDoubleList();
    }

    public static final int REPEATED_BOOL_FIELD_NUMBER = 13;
    private com.google.protobuf.Internal.BooleanList repeatedBool_;
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @return A list containing the repeatedBool.
     */
    @java.lang.Override
    public java.util.List<java.lang.Boolean>
        getRepeatedBoolList() {
      return repeatedBool_;
    }
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @return The count of repeatedBool.
     */
    @java.lang.Override
    public int getRepeatedBoolCount() {
      return repeatedBool_.size();
    }
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedBool at the given index.
     */
    @java.lang.Override
    public boolean getRepeatedBool(int index) {
      return repeatedBool_.getBoolean(index);
    }
    private void ensureRepeatedBoolIsMutable() {
      com.google.protobuf.Internal.BooleanList tmp = repeatedBool_;
      if (!tmp.isModifiable()) {
        repeatedBool_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedBool to set.
     */
    private void setRepeatedBool(
        int index, boolean value) {
      ensureRepeatedBoolIsMutable();
      repeatedBool_.setBoolean(index, value);
    }
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @param value The repeatedBool to add.
     */
    private void addRepeatedBool(boolean value) {
      ensureRepeatedBoolIsMutable();
      repeatedBool_.addBoolean(value);
    }
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     * @param values The repeatedBool to add.
     */
    private void addAllRepeatedBool(
        java.lang.Iterable<? extends java.lang.Boolean> values) {
      ensureRepeatedBoolIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, repeatedBool_);
    }
    /**
     * <code>repeated bool repeated_bool = 13 [packed = false];</code>
     */
    private void clearRepeatedBool() {
      repeatedBool_ = emptyBooleanList();
    }

    public static final int REPEATED_NESTED_ENUM_FIELD_NUMBER = 14;
    private com.google.protobuf.Internal.IntList repeatedNestedEnum_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum> repeatedNestedEnum_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum>() {
              @java.lang.Override
              public com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum convert(java.lang.Integer from) {
                com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum result = com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum.forNumber(from);
                return result == null ? com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum.UNRECOGNIZED : result;
              }
            };
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @return A list containing the repeatedNestedEnum.
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum> getRepeatedNestedEnumList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum>(repeatedNestedEnum_, repeatedNestedEnum_converter_);
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @return The count of repeatedNestedEnum.
     */
    @java.lang.Override
    public int getRepeatedNestedEnumCount() {
      return repeatedNestedEnum_.size();
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The repeatedNestedEnum at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum getRepeatedNestedEnum(int index) {
      return repeatedNestedEnum_converter_.convert(repeatedNestedEnum_.getInt(index));
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @return A list containing the enum numeric values on the wire for repeatedNestedEnum.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
    getRepeatedNestedEnumValueList() {
      return repeatedNestedEnum_;
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of repeatedNestedEnum at the given index.
     */
    @java.lang.Override
    public int getRepeatedNestedEnumValue(int index) {
      return repeatedNestedEnum_.getInt(index);
    }
    private void ensureRepeatedNestedEnumIsMutable() {
      com.google.protobuf.Internal.IntList tmp = repeatedNestedEnum_;
      if (!tmp.isModifiable()) {
        repeatedNestedEnum_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
      }
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The repeatedNestedEnum to set.
     */
    private void setRepeatedNestedEnum(
        int index, com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum value) {
      value.getClass();
  ensureRepeatedNestedEnumIsMutable();
      repeatedNestedEnum_.setInt(index, value.getNumber());
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param value The repeatedNestedEnum to add.
     */
    private void addRepeatedNestedEnum(com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum value) {
      value.getClass();
  ensureRepeatedNestedEnumIsMutable();
      repeatedNestedEnum_.addInt(value.getNumber());
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param values The repeatedNestedEnum to add.
     */
    private void addAllRepeatedNestedEnum(
        java.lang.Iterable<? extends com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum> values) {
      ensureRepeatedNestedEnumIsMutable();
      for (com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum value : values) {
        repeatedNestedEnum_.addInt(value.getNumber());
      }
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     */
    private void clearRepeatedNestedEnum() {
      repeatedNestedEnum_ = emptyIntList();
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param value The enum numeric value on the wire for repeatedNestedEnum to set.
     */
    private void setRepeatedNestedEnumValue(
        int index, int value) {
      ensureRepeatedNestedEnumIsMutable();
      repeatedNestedEnum_.setInt(index, value);
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param value The enum numeric value on the wire for repeatedNestedEnum to add.
     */
    private void addRepeatedNestedEnumValue(int value) {
      ensureRepeatedNestedEnumIsMutable();
      repeatedNestedEnum_.addInt(value);
    }
    /**
     * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
     * @param values The enum numeric values on the wire for repeatedNestedEnum to add.
     */
    private void addAllRepeatedNestedEnumValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureRepeatedNestedEnumIsMutable();
      for (int value : values) {
        repeatedNestedEnum_.addInt(value);
      }
    }

    public static com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code packed_field_test.TestUnpackedTypes}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes, Builder> implements
        // @@protoc_insertion_point(builder_implements:packed_field_test.TestUnpackedTypes)
        com.google.protobuf.PackedFieldTestProto.TestUnpackedTypesOrBuilder {
      // Construct using com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
       * @return A list containing the repeatedInt32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedInt32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedInt32List());
      }
      /**
       * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
       * @return The count of repeatedInt32.
       */
      @java.lang.Override
      public int getRepeatedInt32Count() {
        return instance.getRepeatedInt32Count();
      }
      /**
       * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedInt32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedInt32(int index) {
        return instance.getRepeatedInt32(index);
      }
      /**
       * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
       * @param value The repeatedInt32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedInt32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedInt32(index, value);
        return this;
      }
      /**
       * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
       * @param value The repeatedInt32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedInt32(int value) {
        copyOnWrite();
        instance.addRepeatedInt32(value);
        return this;
      }
      /**
       * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
       * @param values The repeatedInt32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedInt32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedInt32(values);
        return this;
      }
      /**
       * <code>repeated int32 repeated_int32 = 1 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedInt32() {
        copyOnWrite();
        instance.clearRepeatedInt32();
        return this;
      }

      /**
       * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
       * @return A list containing the repeatedInt64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedInt64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedInt64List());
      }
      /**
       * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
       * @return The count of repeatedInt64.
       */
      @java.lang.Override
      public int getRepeatedInt64Count() {
        return instance.getRepeatedInt64Count();
      }
      /**
       * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedInt64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedInt64(int index) {
        return instance.getRepeatedInt64(index);
      }
      /**
       * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
       * @param value The repeatedInt64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedInt64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedInt64(index, value);
        return this;
      }
      /**
       * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
       * @param value The repeatedInt64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedInt64(long value) {
        copyOnWrite();
        instance.addRepeatedInt64(value);
        return this;
      }
      /**
       * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
       * @param values The repeatedInt64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedInt64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedInt64(values);
        return this;
      }
      /**
       * <code>repeated int64 repeated_int64 = 2 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedInt64() {
        copyOnWrite();
        instance.clearRepeatedInt64();
        return this;
      }

      /**
       * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
       * @return A list containing the repeatedUint32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedUint32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedUint32List());
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
       * @return The count of repeatedUint32.
       */
      @java.lang.Override
      public int getRepeatedUint32Count() {
        return instance.getRepeatedUint32Count();
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedUint32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedUint32(int index) {
        return instance.getRepeatedUint32(index);
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
       * @param value The repeatedUint32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedUint32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedUint32(index, value);
        return this;
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
       * @param value The repeatedUint32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedUint32(int value) {
        copyOnWrite();
        instance.addRepeatedUint32(value);
        return this;
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
       * @param values The repeatedUint32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedUint32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedUint32(values);
        return this;
      }
      /**
       * <code>repeated uint32 repeated_uint32 = 3 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedUint32() {
        copyOnWrite();
        instance.clearRepeatedUint32();
        return this;
      }

      /**
       * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
       * @return A list containing the repeatedUint64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedUint64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedUint64List());
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
       * @return The count of repeatedUint64.
       */
      @java.lang.Override
      public int getRepeatedUint64Count() {
        return instance.getRepeatedUint64Count();
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedUint64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedUint64(int index) {
        return instance.getRepeatedUint64(index);
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
       * @param value The repeatedUint64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedUint64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedUint64(index, value);
        return this;
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
       * @param value The repeatedUint64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedUint64(long value) {
        copyOnWrite();
        instance.addRepeatedUint64(value);
        return this;
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
       * @param values The repeatedUint64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedUint64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedUint64(values);
        return this;
      }
      /**
       * <code>repeated uint64 repeated_uint64 = 4 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedUint64() {
        copyOnWrite();
        instance.clearRepeatedUint64();
        return this;
      }

      /**
       * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
       * @return A list containing the repeatedSint32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedSint32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedSint32List());
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
       * @return The count of repeatedSint32.
       */
      @java.lang.Override
      public int getRepeatedSint32Count() {
        return instance.getRepeatedSint32Count();
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedSint32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedSint32(int index) {
        return instance.getRepeatedSint32(index);
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
       * @param value The repeatedSint32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedSint32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedSint32(index, value);
        return this;
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
       * @param value The repeatedSint32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedSint32(int value) {
        copyOnWrite();
        instance.addRepeatedSint32(value);
        return this;
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
       * @param values The repeatedSint32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedSint32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedSint32(values);
        return this;
      }
      /**
       * <code>repeated sint32 repeated_sint32 = 5 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedSint32() {
        copyOnWrite();
        instance.clearRepeatedSint32();
        return this;
      }

      /**
       * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
       * @return A list containing the repeatedSint64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedSint64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedSint64List());
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
       * @return The count of repeatedSint64.
       */
      @java.lang.Override
      public int getRepeatedSint64Count() {
        return instance.getRepeatedSint64Count();
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedSint64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedSint64(int index) {
        return instance.getRepeatedSint64(index);
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
       * @param value The repeatedSint64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedSint64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedSint64(index, value);
        return this;
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
       * @param value The repeatedSint64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedSint64(long value) {
        copyOnWrite();
        instance.addRepeatedSint64(value);
        return this;
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
       * @param values The repeatedSint64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedSint64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedSint64(values);
        return this;
      }
      /**
       * <code>repeated sint64 repeated_sint64 = 6 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedSint64() {
        copyOnWrite();
        instance.clearRepeatedSint64();
        return this;
      }

      /**
       * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
       * @return A list containing the repeatedFixed32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedFixed32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedFixed32List());
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
       * @return The count of repeatedFixed32.
       */
      @java.lang.Override
      public int getRepeatedFixed32Count() {
        return instance.getRepeatedFixed32Count();
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedFixed32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedFixed32(int index) {
        return instance.getRepeatedFixed32(index);
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
       * @param value The repeatedFixed32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedFixed32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedFixed32(index, value);
        return this;
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
       * @param value The repeatedFixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedFixed32(int value) {
        copyOnWrite();
        instance.addRepeatedFixed32(value);
        return this;
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
       * @param values The repeatedFixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedFixed32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedFixed32(values);
        return this;
      }
      /**
       * <code>repeated fixed32 repeated_fixed32 = 7 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedFixed32() {
        copyOnWrite();
        instance.clearRepeatedFixed32();
        return this;
      }

      /**
       * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
       * @return A list containing the repeatedFixed64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedFixed64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedFixed64List());
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
       * @return The count of repeatedFixed64.
       */
      @java.lang.Override
      public int getRepeatedFixed64Count() {
        return instance.getRepeatedFixed64Count();
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedFixed64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedFixed64(int index) {
        return instance.getRepeatedFixed64(index);
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
       * @param value The repeatedFixed64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedFixed64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedFixed64(index, value);
        return this;
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
       * @param value The repeatedFixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedFixed64(long value) {
        copyOnWrite();
        instance.addRepeatedFixed64(value);
        return this;
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
       * @param values The repeatedFixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedFixed64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedFixed64(values);
        return this;
      }
      /**
       * <code>repeated fixed64 repeated_fixed64 = 8 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedFixed64() {
        copyOnWrite();
        instance.clearRepeatedFixed64();
        return this;
      }

      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
       * @return A list containing the repeatedSfixed32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getRepeatedSfixed32List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedSfixed32List());
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
       * @return The count of repeatedSfixed32.
       */
      @java.lang.Override
      public int getRepeatedSfixed32Count() {
        return instance.getRepeatedSfixed32Count();
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedSfixed32 at the given index.
       */
      @java.lang.Override
      public int getRepeatedSfixed32(int index) {
        return instance.getRepeatedSfixed32(index);
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
       * @param value The repeatedSfixed32 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedSfixed32(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedSfixed32(index, value);
        return this;
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
       * @param value The repeatedSfixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedSfixed32(int value) {
        copyOnWrite();
        instance.addRepeatedSfixed32(value);
        return this;
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
       * @param values The repeatedSfixed32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedSfixed32(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedSfixed32(values);
        return this;
      }
      /**
       * <code>repeated sfixed32 repeated_sfixed32 = 9 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedSfixed32() {
        copyOnWrite();
        instance.clearRepeatedSfixed32();
        return this;
      }

      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
       * @return A list containing the repeatedSfixed64.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getRepeatedSfixed64List() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedSfixed64List());
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
       * @return The count of repeatedSfixed64.
       */
      @java.lang.Override
      public int getRepeatedSfixed64Count() {
        return instance.getRepeatedSfixed64Count();
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedSfixed64 at the given index.
       */
      @java.lang.Override
      public long getRepeatedSfixed64(int index) {
        return instance.getRepeatedSfixed64(index);
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
       * @param value The repeatedSfixed64 to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedSfixed64(
          int index, long value) {
        copyOnWrite();
        instance.setRepeatedSfixed64(index, value);
        return this;
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
       * @param value The repeatedSfixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedSfixed64(long value) {
        copyOnWrite();
        instance.addRepeatedSfixed64(value);
        return this;
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
       * @param values The repeatedSfixed64 to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedSfixed64(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllRepeatedSfixed64(values);
        return this;
      }
      /**
       * <code>repeated sfixed64 repeated_sfixed64 = 10 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedSfixed64() {
        copyOnWrite();
        instance.clearRepeatedSfixed64();
        return this;
      }

      /**
       * <code>repeated float repeated_float = 11 [packed = false];</code>
       * @return A list containing the repeatedFloat.
       */
      @java.lang.Override
      public java.util.List<java.lang.Float>
          getRepeatedFloatList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedFloatList());
      }
      /**
       * <code>repeated float repeated_float = 11 [packed = false];</code>
       * @return The count of repeatedFloat.
       */
      @java.lang.Override
      public int getRepeatedFloatCount() {
        return instance.getRepeatedFloatCount();
      }
      /**
       * <code>repeated float repeated_float = 11 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedFloat at the given index.
       */
      @java.lang.Override
      public float getRepeatedFloat(int index) {
        return instance.getRepeatedFloat(index);
      }
      /**
       * <code>repeated float repeated_float = 11 [packed = false];</code>
       * @param value The repeatedFloat to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedFloat(
          int index, float value) {
        copyOnWrite();
        instance.setRepeatedFloat(index, value);
        return this;
      }
      /**
       * <code>repeated float repeated_float = 11 [packed = false];</code>
       * @param value The repeatedFloat to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedFloat(float value) {
        copyOnWrite();
        instance.addRepeatedFloat(value);
        return this;
      }
      /**
       * <code>repeated float repeated_float = 11 [packed = false];</code>
       * @param values The repeatedFloat to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedFloat(
          java.lang.Iterable<? extends java.lang.Float> values) {
        copyOnWrite();
        instance.addAllRepeatedFloat(values);
        return this;
      }
      /**
       * <code>repeated float repeated_float = 11 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedFloat() {
        copyOnWrite();
        instance.clearRepeatedFloat();
        return this;
      }

      /**
       * <code>repeated double repeated_double = 12 [packed = false];</code>
       * @return A list containing the repeatedDouble.
       */
      @java.lang.Override
      public java.util.List<java.lang.Double>
          getRepeatedDoubleList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedDoubleList());
      }
      /**
       * <code>repeated double repeated_double = 12 [packed = false];</code>
       * @return The count of repeatedDouble.
       */
      @java.lang.Override
      public int getRepeatedDoubleCount() {
        return instance.getRepeatedDoubleCount();
      }
      /**
       * <code>repeated double repeated_double = 12 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedDouble at the given index.
       */
      @java.lang.Override
      public double getRepeatedDouble(int index) {
        return instance.getRepeatedDouble(index);
      }
      /**
       * <code>repeated double repeated_double = 12 [packed = false];</code>
       * @param value The repeatedDouble to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedDouble(
          int index, double value) {
        copyOnWrite();
        instance.setRepeatedDouble(index, value);
        return this;
      }
      /**
       * <code>repeated double repeated_double = 12 [packed = false];</code>
       * @param value The repeatedDouble to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedDouble(double value) {
        copyOnWrite();
        instance.addRepeatedDouble(value);
        return this;
      }
      /**
       * <code>repeated double repeated_double = 12 [packed = false];</code>
       * @param values The repeatedDouble to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedDouble(
          java.lang.Iterable<? extends java.lang.Double> values) {
        copyOnWrite();
        instance.addAllRepeatedDouble(values);
        return this;
      }
      /**
       * <code>repeated double repeated_double = 12 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedDouble() {
        copyOnWrite();
        instance.clearRepeatedDouble();
        return this;
      }

      /**
       * <code>repeated bool repeated_bool = 13 [packed = false];</code>
       * @return A list containing the repeatedBool.
       */
      @java.lang.Override
      public java.util.List<java.lang.Boolean>
          getRepeatedBoolList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedBoolList());
      }
      /**
       * <code>repeated bool repeated_bool = 13 [packed = false];</code>
       * @return The count of repeatedBool.
       */
      @java.lang.Override
      public int getRepeatedBoolCount() {
        return instance.getRepeatedBoolCount();
      }
      /**
       * <code>repeated bool repeated_bool = 13 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedBool at the given index.
       */
      @java.lang.Override
      public boolean getRepeatedBool(int index) {
        return instance.getRepeatedBool(index);
      }
      /**
       * <code>repeated bool repeated_bool = 13 [packed = false];</code>
       * @param value The repeatedBool to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedBool(
          int index, boolean value) {
        copyOnWrite();
        instance.setRepeatedBool(index, value);
        return this;
      }
      /**
       * <code>repeated bool repeated_bool = 13 [packed = false];</code>
       * @param value The repeatedBool to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedBool(boolean value) {
        copyOnWrite();
        instance.addRepeatedBool(value);
        return this;
      }
      /**
       * <code>repeated bool repeated_bool = 13 [packed = false];</code>
       * @param values The repeatedBool to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedBool(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        copyOnWrite();
        instance.addAllRepeatedBool(values);
        return this;
      }
      /**
       * <code>repeated bool repeated_bool = 13 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedBool() {
        copyOnWrite();
        instance.clearRepeatedBool();
        return this;
      }

      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @return A list containing the repeatedNestedEnum.
       */
      @java.lang.Override
      public java.util.List<com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum> getRepeatedNestedEnumList() {
        return instance.getRepeatedNestedEnumList();
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @return The count of repeatedNestedEnum.
       */
      @java.lang.Override
      public int getRepeatedNestedEnumCount() {
        return instance.getRepeatedNestedEnumCount();
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The repeatedNestedEnum at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum getRepeatedNestedEnum(int index) {
        return instance.getRepeatedNestedEnum(index);
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @param index The index to set the value at.
       * @param value The repeatedNestedEnum to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedNestedEnum(
          int index, com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum value) {
        copyOnWrite();
        instance.setRepeatedNestedEnum(index, value);
        return this;
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @param value The repeatedNestedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedNestedEnum(com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum value) {
        copyOnWrite();
        instance.addRepeatedNestedEnum(value);
        return this;
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @param values The repeatedNestedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedNestedEnum(
          java.lang.Iterable<? extends com.google.protobuf.PackedFieldTestProto.TestAllTypes.NestedEnum> values) {
        copyOnWrite();
        instance.addAllRepeatedNestedEnum(values);  return this;
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeatedNestedEnum() {
        copyOnWrite();
        instance.clearRepeatedNestedEnum();
        return this;
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @return A list containing the enum numeric values on the wire for repeatedNestedEnum.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
      getRepeatedNestedEnumValueList() {
        return java.util.Collections.unmodifiableList(
            instance.getRepeatedNestedEnumValueList());
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @param index The index of the value to return.
       * @return The enum numeric value on the wire of repeatedNestedEnum at the given index.
       */
      @java.lang.Override
      public int getRepeatedNestedEnumValue(int index) {
        return instance.getRepeatedNestedEnumValue(index);
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @param index The index to set the value at.
       * @param value The enum numeric value on the wire for repeatedNestedEnum to set.
       * @return This builder for chaining.
       */
      public Builder setRepeatedNestedEnumValue(
          int index, int value) {
        copyOnWrite();
        instance.setRepeatedNestedEnumValue(index, value);
        return this;
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @param value The enum numeric value on the wire for repeatedNestedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addRepeatedNestedEnumValue(int value) {
        instance.addRepeatedNestedEnumValue(value);
        return this;
      }
      /**
       * <code>repeated .packed_field_test.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];</code>
       * @param values The enum numeric values on the wire for repeatedNestedEnum to add.
       * @return This builder for chaining.
       */
      public Builder addAllRepeatedNestedEnumValue(
          java.lang.Iterable<java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRepeatedNestedEnumValue(values);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:packed_field_test.TestUnpackedTypes)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "repeatedInt32_",
              "repeatedInt64_",
              "repeatedUint32_",
              "repeatedUint64_",
              "repeatedSint32_",
              "repeatedSint64_",
              "repeatedFixed32_",
              "repeatedFixed64_",
              "repeatedSfixed32_",
              "repeatedSfixed64_",
              "repeatedFloat_",
              "repeatedDouble_",
              "repeatedBool_",
              "repeatedNestedEnum_",
            };
            java.lang.String info =
                "\u0000\u000e\u0000\u0000\u0001\u000e\u000e\u0000\u000e\u0000\u0001\u0016\u0002\u0014" +
                "\u0003\u001d\u0004\u0015\u0005!\u0006\"\u0007\u0018\b\u0017\t\u001f\n \u000b\u0013" +
                "\f\u0012\r\u0019\u000e\u001e";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:packed_field_test.TestUnpackedTypes)
    private static final com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes DEFAULT_INSTANCE;
    static {
      TestUnpackedTypes defaultInstance = new TestUnpackedTypes();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TestUnpackedTypes.class, defaultInstance);
    }

    public static com.google.protobuf.PackedFieldTestProto.TestUnpackedTypes getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TestUnpackedTypes> PARSER;

    public static com.google.protobuf.Parser<TestUnpackedTypes> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
