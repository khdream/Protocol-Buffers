// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/google/protobuf/proto2_message.proto

package com.google.protobuf.testing;

public final class Proto2Testing {
  private Proto2Testing() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldDouble1);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldFloat2);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldInt643);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldUint644);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldInt325);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldFixed646);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldFixed327);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldBool8);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldString9);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldMessage10);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldBytes11);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldUint3212);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldEnum13);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldSfixed3214);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldSfixed6415);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldSint3216);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldSint6417);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldDoubleList18);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldFloatList19);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldInt64List20);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldUint64List21);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldInt32List22);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldFixed64List23);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldFixed32List24);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldBoolList25);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldStringList26);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldMessageList27);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldBytesList28);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldUint32List29);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldEnumList30);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldSfixed32List31);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldSfixed64List32);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldSint32List33);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldSint64List34);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldDoubleListPacked35);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldFloatListPacked36);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldInt64ListPacked37);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldUint64ListPacked38);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldInt32ListPacked39);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldFixed64ListPacked40);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldFixed32ListPacked41);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldBoolListPacked42);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldUint32ListPacked43);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldEnumListPacked44);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldSfixed32ListPacked45);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldSfixed64ListPacked46);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldSint32ListPacked47);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldSint64ListPacked48);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldGroup49);
    registry.add(com.google.protobuf.testing.Proto2Testing.fieldGroupList51);
  }
  public interface Proto2SpecialFieldNameOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protobuf.experimental.Proto2SpecialFieldName)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional double regular_name = 1;</code>
     * @return Whether the regularName field is set.
     */
    boolean hasRegularName();
    /**
     * <code>optional double regular_name = 1;</code>
     * @return The regularName.
     */
    double getRegularName();

    /**
     * <code>optional int32 cached_size = 2;</code>
     * @return Whether the cachedSize field is set.
     */
    boolean hasCachedSize_();
    /**
     * <code>optional int32 cached_size = 2;</code>
     * @return The cachedSize.
     */
    int getCachedSize_();

    /**
     * <code>optional int64 serialized_size = 3;</code>
     * @return Whether the serializedSize field is set.
     */
    boolean hasSerializedSize_();
    /**
     * <code>optional int64 serialized_size = 3;</code>
     * @return The serializedSize.
     */
    long getSerializedSize_();

    /**
     * <code>optional string class = 4;</code>
     * @return Whether the class field is set.
     */
    boolean hasClass_();
    /**
     * <code>optional string class = 4;</code>
     * @return The class.
     */
    java.lang.String getClass_();
    /**
     * <code>optional string class = 4;</code>
     * @return The bytes for class.
     */
    com.google.protobuf.ByteString
        getClass_Bytes();
  }
  /**
   * Protobuf type {@code protobuf.experimental.Proto2SpecialFieldName}
   */
  public  static final class Proto2SpecialFieldName extends
      com.google.protobuf.GeneratedMessageLite<
          Proto2SpecialFieldName, Proto2SpecialFieldName.Builder> implements
      // @@protoc_insertion_point(message_implements:protobuf.experimental.Proto2SpecialFieldName)
      Proto2SpecialFieldNameOrBuilder {
    private Proto2SpecialFieldName() {
      class__ = "";
    }
    private int bitField0_;
    public static final int REGULAR_NAME_FIELD_NUMBER = 1;
    private double regularName_;
    /**
     * <code>optional double regular_name = 1;</code>
     * @return Whether the regularName field is set.
     */
    @java.lang.Override
    public boolean hasRegularName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional double regular_name = 1;</code>
     * @return The regularName.
     */
    @java.lang.Override
    public double getRegularName() {
      return regularName_;
    }
    /**
     * <code>optional double regular_name = 1;</code>
     * @param value The regularName to set.
     */
    private void setRegularName(double value) {
      bitField0_ |= 0x00000001;
      regularName_ = value;
    }
    /**
     * <code>optional double regular_name = 1;</code>
     */
    private void clearRegularName() {
      bitField0_ = (bitField0_ & ~0x00000001);
      regularName_ = 0D;
    }

    public static final int CACHED_SIZE_FIELD_NUMBER = 2;
    private int cachedSize__;
    /**
     * <code>optional int32 cached_size = 2;</code>
     * @return Whether the cachedSize field is set.
     */
    @java.lang.Override
    public boolean hasCachedSize_() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional int32 cached_size = 2;</code>
     * @return The cachedSize.
     */
    @java.lang.Override
    public int getCachedSize_() {
      return cachedSize__;
    }
    /**
     * <code>optional int32 cached_size = 2;</code>
     * @param value The cachedSize to set.
     */
    private void setCachedSize_(int value) {
      bitField0_ |= 0x00000002;
      cachedSize__ = value;
    }
    /**
     * <code>optional int32 cached_size = 2;</code>
     */
    private void clearCachedSize_() {
      bitField0_ = (bitField0_ & ~0x00000002);
      cachedSize__ = 0;
    }

    public static final int SERIALIZED_SIZE_FIELD_NUMBER = 3;
    private long serializedSize__;
    /**
     * <code>optional int64 serialized_size = 3;</code>
     * @return Whether the serializedSize field is set.
     */
    @java.lang.Override
    public boolean hasSerializedSize_() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional int64 serialized_size = 3;</code>
     * @return The serializedSize.
     */
    @java.lang.Override
    public long getSerializedSize_() {
      return serializedSize__;
    }
    /**
     * <code>optional int64 serialized_size = 3;</code>
     * @param value The serializedSize to set.
     */
    private void setSerializedSize_(long value) {
      bitField0_ |= 0x00000004;
      serializedSize__ = value;
    }
    /**
     * <code>optional int64 serialized_size = 3;</code>
     */
    private void clearSerializedSize_() {
      bitField0_ = (bitField0_ & ~0x00000004);
      serializedSize__ = 0L;
    }

    public static final int CLASS_FIELD_NUMBER = 4;
    private java.lang.String class__;
    /**
     * <code>optional string class = 4;</code>
     * @return Whether the class field is set.
     */
    @java.lang.Override
    public boolean hasClass_() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional string class = 4;</code>
     * @return The class.
     */
    @java.lang.Override
    public java.lang.String getClass_() {
      return class__;
    }
    /**
     * <code>optional string class = 4;</code>
     * @return The bytes for class.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getClass_Bytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(class__);
    }
    /**
     * <code>optional string class = 4;</code>
     * @param value The class to set.
     */
    private void setClass_(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000008;
      class__ = value;
    }
    /**
     * <code>optional string class = 4;</code>
     */
    private void clearClass_() {
      bitField0_ = (bitField0_ & ~0x00000008);
      class__ = getDefaultInstance().getClass_();
    }
    /**
     * <code>optional string class = 4;</code>
     * @param value The bytes for class to set.
     */
    private void setClass_Bytes(
        com.google.protobuf.ByteString value) {
      class__ = value.toStringUtf8();
      bitField0_ |= 0x00000008;
    }

    public static com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code protobuf.experimental.Proto2SpecialFieldName}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName, Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf.experimental.Proto2SpecialFieldName)
        com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldNameOrBuilder {
      // Construct using com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional double regular_name = 1;</code>
       * @return Whether the regularName field is set.
       */
      @java.lang.Override
      public boolean hasRegularName() {
        return instance.hasRegularName();
      }
      /**
       * <code>optional double regular_name = 1;</code>
       * @return The regularName.
       */
      @java.lang.Override
      public double getRegularName() {
        return instance.getRegularName();
      }
      /**
       * <code>optional double regular_name = 1;</code>
       * @param value The regularName to set.
       * @return This builder for chaining.
       */
      public Builder setRegularName(double value) {
        copyOnWrite();
        instance.setRegularName(value);
        return this;
      }
      /**
       * <code>optional double regular_name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearRegularName() {
        copyOnWrite();
        instance.clearRegularName();
        return this;
      }

      /**
       * <code>optional int32 cached_size = 2;</code>
       * @return Whether the cachedSize field is set.
       */
      @java.lang.Override
      public boolean hasCachedSize_() {
        return instance.hasCachedSize_();
      }
      /**
       * <code>optional int32 cached_size = 2;</code>
       * @return The cachedSize.
       */
      @java.lang.Override
      public int getCachedSize_() {
        return instance.getCachedSize_();
      }
      /**
       * <code>optional int32 cached_size = 2;</code>
       * @param value The cachedSize to set.
       * @return This builder for chaining.
       */
      public Builder setCachedSize_(int value) {
        copyOnWrite();
        instance.setCachedSize_(value);
        return this;
      }
      /**
       * <code>optional int32 cached_size = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCachedSize_() {
        copyOnWrite();
        instance.clearCachedSize_();
        return this;
      }

      /**
       * <code>optional int64 serialized_size = 3;</code>
       * @return Whether the serializedSize field is set.
       */
      @java.lang.Override
      public boolean hasSerializedSize_() {
        return instance.hasSerializedSize_();
      }
      /**
       * <code>optional int64 serialized_size = 3;</code>
       * @return The serializedSize.
       */
      @java.lang.Override
      public long getSerializedSize_() {
        return instance.getSerializedSize_();
      }
      /**
       * <code>optional int64 serialized_size = 3;</code>
       * @param value The serializedSize to set.
       * @return This builder for chaining.
       */
      public Builder setSerializedSize_(long value) {
        copyOnWrite();
        instance.setSerializedSize_(value);
        return this;
      }
      /**
       * <code>optional int64 serialized_size = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSerializedSize_() {
        copyOnWrite();
        instance.clearSerializedSize_();
        return this;
      }

      /**
       * <code>optional string class = 4;</code>
       * @return Whether the class field is set.
       */
      @java.lang.Override
      public boolean hasClass_() {
        return instance.hasClass_();
      }
      /**
       * <code>optional string class = 4;</code>
       * @return The class.
       */
      @java.lang.Override
      public java.lang.String getClass_() {
        return instance.getClass_();
      }
      /**
       * <code>optional string class = 4;</code>
       * @return The bytes for class.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getClass_Bytes() {
        return instance.getClass_Bytes();
      }
      /**
       * <code>optional string class = 4;</code>
       * @param value The class to set.
       * @return This builder for chaining.
       */
      public Builder setClass_(
          java.lang.String value) {
        copyOnWrite();
        instance.setClass_(value);
        return this;
      }
      /**
       * <code>optional string class = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearClass_() {
        copyOnWrite();
        instance.clearClass_();
        return this;
      }
      /**
       * <code>optional string class = 4;</code>
       * @param value The bytes for class to set.
       * @return This builder for chaining.
       */
      public Builder setClass_Bytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setClass_Bytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protobuf.experimental.Proto2SpecialFieldName)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "regularName_",
              "cachedSize__",
              "serializedSize__",
              "class__",
            };
            java.lang.String info =
                "\u0001\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0000\u0000\u0001\u1000\u0000\u0002" +
                "\u1004\u0001\u0003\u1002\u0002\u0004\u1008\u0003";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:protobuf.experimental.Proto2SpecialFieldName)
    private static final com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName DEFAULT_INSTANCE;
    static {
      Proto2SpecialFieldName defaultInstance = new Proto2SpecialFieldName();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Proto2SpecialFieldName.class, defaultInstance);
    }

    public static com.google.protobuf.testing.Proto2Testing.Proto2SpecialFieldName getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Proto2SpecialFieldName> PARSER;

    public static com.google.protobuf.Parser<Proto2SpecialFieldName> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface Proto2MessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protobuf.experimental.Proto2Message)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional double field_double_1 = 1;</code>
     * @return Whether the fieldDouble1 field is set.
     */
    boolean hasFieldDouble1();
    /**
     * <code>optional double field_double_1 = 1;</code>
     * @return The fieldDouble1.
     */
    double getFieldDouble1();

    /**
     * <code>optional float field_float_2 = 2;</code>
     * @return Whether the fieldFloat2 field is set.
     */
    boolean hasFieldFloat2();
    /**
     * <code>optional float field_float_2 = 2;</code>
     * @return The fieldFloat2.
     */
    float getFieldFloat2();

    /**
     * <code>optional int64 field_int64_3 = 3;</code>
     * @return Whether the fieldInt643 field is set.
     */
    boolean hasFieldInt643();
    /**
     * <code>optional int64 field_int64_3 = 3;</code>
     * @return The fieldInt643.
     */
    long getFieldInt643();

    /**
     * <code>optional uint64 field_uint64_4 = 4;</code>
     * @return Whether the fieldUint644 field is set.
     */
    boolean hasFieldUint644();
    /**
     * <code>optional uint64 field_uint64_4 = 4;</code>
     * @return The fieldUint644.
     */
    long getFieldUint644();

    /**
     * <code>optional int32 field_int32_5 = 5;</code>
     * @return Whether the fieldInt325 field is set.
     */
    boolean hasFieldInt325();
    /**
     * <code>optional int32 field_int32_5 = 5;</code>
     * @return The fieldInt325.
     */
    int getFieldInt325();

    /**
     * <code>optional fixed64 field_fixed64_6 = 6;</code>
     * @return Whether the fieldFixed646 field is set.
     */
    boolean hasFieldFixed646();
    /**
     * <code>optional fixed64 field_fixed64_6 = 6;</code>
     * @return The fieldFixed646.
     */
    long getFieldFixed646();

    /**
     * <code>optional fixed32 field_fixed32_7 = 7;</code>
     * @return Whether the fieldFixed327 field is set.
     */
    boolean hasFieldFixed327();
    /**
     * <code>optional fixed32 field_fixed32_7 = 7;</code>
     * @return The fieldFixed327.
     */
    int getFieldFixed327();

    /**
     * <code>optional bool field_bool_8 = 8;</code>
     * @return Whether the fieldBool8 field is set.
     */
    boolean hasFieldBool8();
    /**
     * <code>optional bool field_bool_8 = 8;</code>
     * @return The fieldBool8.
     */
    boolean getFieldBool8();

    /**
     * <code>optional string field_string_9 = 9;</code>
     * @return Whether the fieldString9 field is set.
     */
    boolean hasFieldString9();
    /**
     * <code>optional string field_string_9 = 9;</code>
     * @return The fieldString9.
     */
    java.lang.String getFieldString9();
    /**
     * <code>optional string field_string_9 = 9;</code>
     * @return The bytes for fieldString9.
     */
    com.google.protobuf.ByteString
        getFieldString9Bytes();

    /**
     * <code>optional .protobuf.experimental.Proto2Message field_message_10 = 10;</code>
     * @return Whether the fieldMessage10 field is set.
     */
    boolean hasFieldMessage10();
    /**
     * <code>optional .protobuf.experimental.Proto2Message field_message_10 = 10;</code>
     * @return The fieldMessage10.
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMessage10();

    /**
     * <code>optional bytes field_bytes_11 = 11;</code>
     * @return Whether the fieldBytes11 field is set.
     */
    boolean hasFieldBytes11();
    /**
     * <code>optional bytes field_bytes_11 = 11;</code>
     * @return The fieldBytes11.
     */
    com.google.protobuf.ByteString getFieldBytes11();

    /**
     * <code>optional uint32 field_uint32_12 = 12;</code>
     * @return Whether the fieldUint3212 field is set.
     */
    boolean hasFieldUint3212();
    /**
     * <code>optional uint32 field_uint32_12 = 12;</code>
     * @return The fieldUint3212.
     */
    int getFieldUint3212();

    /**
     * <code>optional .protobuf.experimental.Proto2Message.TestEnum field_enum_13 = 13;</code>
     * @return Whether the fieldEnum13 field is set.
     */
    boolean hasFieldEnum13();
    /**
     * <code>optional .protobuf.experimental.Proto2Message.TestEnum field_enum_13 = 13;</code>
     * @return The fieldEnum13.
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldEnum13();

    /**
     * <code>optional sfixed32 field_sfixed32_14 = 14;</code>
     * @return Whether the fieldSfixed3214 field is set.
     */
    boolean hasFieldSfixed3214();
    /**
     * <code>optional sfixed32 field_sfixed32_14 = 14;</code>
     * @return The fieldSfixed3214.
     */
    int getFieldSfixed3214();

    /**
     * <code>optional sfixed64 field_sfixed64_15 = 15;</code>
     * @return Whether the fieldSfixed6415 field is set.
     */
    boolean hasFieldSfixed6415();
    /**
     * <code>optional sfixed64 field_sfixed64_15 = 15;</code>
     * @return The fieldSfixed6415.
     */
    long getFieldSfixed6415();

    /**
     * <code>optional sint32 field_sint32_16 = 16;</code>
     * @return Whether the fieldSint3216 field is set.
     */
    boolean hasFieldSint3216();
    /**
     * <code>optional sint32 field_sint32_16 = 16;</code>
     * @return The fieldSint3216.
     */
    int getFieldSint3216();

    /**
     * <code>optional sint64 field_sint64_17 = 17;</code>
     * @return Whether the fieldSint6417 field is set.
     */
    boolean hasFieldSint6417();
    /**
     * <code>optional sint64 field_sint64_17 = 17;</code>
     * @return The fieldSint6417.
     */
    long getFieldSint6417();

    /**
     * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
     * @return A list containing the fieldDoubleList18.
     */
    java.util.List<java.lang.Double> getFieldDoubleList18List();
    /**
     * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
     * @return The count of fieldDoubleList18.
     */
    int getFieldDoubleList18Count();
    /**
     * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldDoubleList18 at the given index.
     */
    double getFieldDoubleList18(int index);

    /**
     * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
     * @return A list containing the fieldFloatList19.
     */
    java.util.List<java.lang.Float> getFieldFloatList19List();
    /**
     * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
     * @return The count of fieldFloatList19.
     */
    int getFieldFloatList19Count();
    /**
     * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldFloatList19 at the given index.
     */
    float getFieldFloatList19(int index);

    /**
     * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
     * @return A list containing the fieldInt64List20.
     */
    java.util.List<java.lang.Long> getFieldInt64List20List();
    /**
     * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
     * @return The count of fieldInt64List20.
     */
    int getFieldInt64List20Count();
    /**
     * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldInt64List20 at the given index.
     */
    long getFieldInt64List20(int index);

    /**
     * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
     * @return A list containing the fieldUint64List21.
     */
    java.util.List<java.lang.Long> getFieldUint64List21List();
    /**
     * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
     * @return The count of fieldUint64List21.
     */
    int getFieldUint64List21Count();
    /**
     * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldUint64List21 at the given index.
     */
    long getFieldUint64List21(int index);

    /**
     * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
     * @return A list containing the fieldInt32List22.
     */
    java.util.List<java.lang.Integer> getFieldInt32List22List();
    /**
     * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
     * @return The count of fieldInt32List22.
     */
    int getFieldInt32List22Count();
    /**
     * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldInt32List22 at the given index.
     */
    int getFieldInt32List22(int index);

    /**
     * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
     * @return A list containing the fieldFixed64List23.
     */
    java.util.List<java.lang.Long> getFieldFixed64List23List();
    /**
     * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
     * @return The count of fieldFixed64List23.
     */
    int getFieldFixed64List23Count();
    /**
     * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldFixed64List23 at the given index.
     */
    long getFieldFixed64List23(int index);

    /**
     * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
     * @return A list containing the fieldFixed32List24.
     */
    java.util.List<java.lang.Integer> getFieldFixed32List24List();
    /**
     * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
     * @return The count of fieldFixed32List24.
     */
    int getFieldFixed32List24Count();
    /**
     * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldFixed32List24 at the given index.
     */
    int getFieldFixed32List24(int index);

    /**
     * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
     * @return A list containing the fieldBoolList25.
     */
    java.util.List<java.lang.Boolean> getFieldBoolList25List();
    /**
     * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
     * @return The count of fieldBoolList25.
     */
    int getFieldBoolList25Count();
    /**
     * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldBoolList25 at the given index.
     */
    boolean getFieldBoolList25(int index);

    /**
     * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
     * @return A list containing the fieldStringList26.
     */
    java.util.List<java.lang.String>
        getFieldStringList26List();
    /**
     * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
     * @return The count of fieldStringList26.
     */
    int getFieldStringList26Count();
    /**
     * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldStringList26 at the given index.
     */
    java.lang.String getFieldStringList26(int index);
    /**
     * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldStringList26 at the given index.
     */
    com.google.protobuf.ByteString
        getFieldStringList26Bytes(int index);

    /**
     * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
     */
    java.util.List<com.google.protobuf.testing.Proto2Testing.Proto2Message> 
        getFieldMessageList27List();
    /**
     * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMessageList27(int index);
    /**
     * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
     */
    int getFieldMessageList27Count();

    /**
     * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
     * @return A list containing the fieldBytesList28.
     */
    java.util.List<com.google.protobuf.ByteString> getFieldBytesList28List();
    /**
     * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
     * @return The count of fieldBytesList28.
     */
    int getFieldBytesList28Count();
    /**
     * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldBytesList28 at the given index.
     */
    com.google.protobuf.ByteString getFieldBytesList28(int index);

    /**
     * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
     * @return A list containing the fieldUint32List29.
     */
    java.util.List<java.lang.Integer> getFieldUint32List29List();
    /**
     * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
     * @return The count of fieldUint32List29.
     */
    int getFieldUint32List29Count();
    /**
     * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldUint32List29 at the given index.
     */
    int getFieldUint32List29(int index);

    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
     * @return A list containing the fieldEnumList30.
     */
    java.util.List<com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> getFieldEnumList30List();
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
     * @return The count of fieldEnumList30.
     */
    int getFieldEnumList30Count();
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldEnumList30 at the given index.
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldEnumList30(int index);

    /**
     * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
     * @return A list containing the fieldSfixed32List31.
     */
    java.util.List<java.lang.Integer> getFieldSfixed32List31List();
    /**
     * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
     * @return The count of fieldSfixed32List31.
     */
    int getFieldSfixed32List31Count();
    /**
     * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldSfixed32List31 at the given index.
     */
    int getFieldSfixed32List31(int index);

    /**
     * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
     * @return A list containing the fieldSfixed64List32.
     */
    java.util.List<java.lang.Long> getFieldSfixed64List32List();
    /**
     * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
     * @return The count of fieldSfixed64List32.
     */
    int getFieldSfixed64List32Count();
    /**
     * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldSfixed64List32 at the given index.
     */
    long getFieldSfixed64List32(int index);

    /**
     * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
     * @return A list containing the fieldSint32List33.
     */
    java.util.List<java.lang.Integer> getFieldSint32List33List();
    /**
     * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
     * @return The count of fieldSint32List33.
     */
    int getFieldSint32List33Count();
    /**
     * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldSint32List33 at the given index.
     */
    int getFieldSint32List33(int index);

    /**
     * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
     * @return A list containing the fieldSint64List34.
     */
    java.util.List<java.lang.Long> getFieldSint64List34List();
    /**
     * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
     * @return The count of fieldSint64List34.
     */
    int getFieldSint64List34Count();
    /**
     * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldSint64List34 at the given index.
     */
    long getFieldSint64List34(int index);

    /**
     * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
     * @return A list containing the fieldDoubleListPacked35.
     */
    java.util.List<java.lang.Double> getFieldDoubleListPacked35List();
    /**
     * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
     * @return The count of fieldDoubleListPacked35.
     */
    int getFieldDoubleListPacked35Count();
    /**
     * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldDoubleListPacked35 at the given index.
     */
    double getFieldDoubleListPacked35(int index);

    /**
     * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
     * @return A list containing the fieldFloatListPacked36.
     */
    java.util.List<java.lang.Float> getFieldFloatListPacked36List();
    /**
     * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
     * @return The count of fieldFloatListPacked36.
     */
    int getFieldFloatListPacked36Count();
    /**
     * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldFloatListPacked36 at the given index.
     */
    float getFieldFloatListPacked36(int index);

    /**
     * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
     * @return A list containing the fieldInt64ListPacked37.
     */
    java.util.List<java.lang.Long> getFieldInt64ListPacked37List();
    /**
     * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
     * @return The count of fieldInt64ListPacked37.
     */
    int getFieldInt64ListPacked37Count();
    /**
     * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldInt64ListPacked37 at the given index.
     */
    long getFieldInt64ListPacked37(int index);

    /**
     * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
     * @return A list containing the fieldUint64ListPacked38.
     */
    java.util.List<java.lang.Long> getFieldUint64ListPacked38List();
    /**
     * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
     * @return The count of fieldUint64ListPacked38.
     */
    int getFieldUint64ListPacked38Count();
    /**
     * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldUint64ListPacked38 at the given index.
     */
    long getFieldUint64ListPacked38(int index);

    /**
     * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
     * @return A list containing the fieldInt32ListPacked39.
     */
    java.util.List<java.lang.Integer> getFieldInt32ListPacked39List();
    /**
     * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
     * @return The count of fieldInt32ListPacked39.
     */
    int getFieldInt32ListPacked39Count();
    /**
     * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldInt32ListPacked39 at the given index.
     */
    int getFieldInt32ListPacked39(int index);

    /**
     * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
     * @return A list containing the fieldFixed64ListPacked40.
     */
    java.util.List<java.lang.Long> getFieldFixed64ListPacked40List();
    /**
     * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
     * @return The count of fieldFixed64ListPacked40.
     */
    int getFieldFixed64ListPacked40Count();
    /**
     * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldFixed64ListPacked40 at the given index.
     */
    long getFieldFixed64ListPacked40(int index);

    /**
     * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
     * @return A list containing the fieldFixed32ListPacked41.
     */
    java.util.List<java.lang.Integer> getFieldFixed32ListPacked41List();
    /**
     * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
     * @return The count of fieldFixed32ListPacked41.
     */
    int getFieldFixed32ListPacked41Count();
    /**
     * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldFixed32ListPacked41 at the given index.
     */
    int getFieldFixed32ListPacked41(int index);

    /**
     * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
     * @return A list containing the fieldBoolListPacked42.
     */
    java.util.List<java.lang.Boolean> getFieldBoolListPacked42List();
    /**
     * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
     * @return The count of fieldBoolListPacked42.
     */
    int getFieldBoolListPacked42Count();
    /**
     * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldBoolListPacked42 at the given index.
     */
    boolean getFieldBoolListPacked42(int index);

    /**
     * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
     * @return A list containing the fieldUint32ListPacked43.
     */
    java.util.List<java.lang.Integer> getFieldUint32ListPacked43List();
    /**
     * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
     * @return The count of fieldUint32ListPacked43.
     */
    int getFieldUint32ListPacked43Count();
    /**
     * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldUint32ListPacked43 at the given index.
     */
    int getFieldUint32ListPacked43(int index);

    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
     * @return A list containing the fieldEnumListPacked44.
     */
    java.util.List<com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> getFieldEnumListPacked44List();
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
     * @return The count of fieldEnumListPacked44.
     */
    int getFieldEnumListPacked44Count();
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldEnumListPacked44 at the given index.
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldEnumListPacked44(int index);

    /**
     * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
     * @return A list containing the fieldSfixed32ListPacked45.
     */
    java.util.List<java.lang.Integer> getFieldSfixed32ListPacked45List();
    /**
     * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
     * @return The count of fieldSfixed32ListPacked45.
     */
    int getFieldSfixed32ListPacked45Count();
    /**
     * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldSfixed32ListPacked45 at the given index.
     */
    int getFieldSfixed32ListPacked45(int index);

    /**
     * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
     * @return A list containing the fieldSfixed64ListPacked46.
     */
    java.util.List<java.lang.Long> getFieldSfixed64ListPacked46List();
    /**
     * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
     * @return The count of fieldSfixed64ListPacked46.
     */
    int getFieldSfixed64ListPacked46Count();
    /**
     * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldSfixed64ListPacked46 at the given index.
     */
    long getFieldSfixed64ListPacked46(int index);

    /**
     * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
     * @return A list containing the fieldSint32ListPacked47.
     */
    java.util.List<java.lang.Integer> getFieldSint32ListPacked47List();
    /**
     * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
     * @return The count of fieldSint32ListPacked47.
     */
    int getFieldSint32ListPacked47Count();
    /**
     * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldSint32ListPacked47 at the given index.
     */
    int getFieldSint32ListPacked47(int index);

    /**
     * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
     * @return A list containing the fieldSint64ListPacked48.
     */
    java.util.List<java.lang.Long> getFieldSint64ListPacked48List();
    /**
     * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
     * @return The count of fieldSint64ListPacked48.
     */
    int getFieldSint64ListPacked48Count();
    /**
     * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldSint64ListPacked48 at the given index.
     */
    long getFieldSint64ListPacked48(int index);

    /**
     * <code>optional group FieldGroup49 = 49 { ... }</code>
     * @return Whether the fieldgroup49 field is set.
     */
    boolean hasFieldGroup49();
    /**
     * <code>optional group FieldGroup49 = 49 { ... }</code>
     * @return The fieldgroup49.
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 getFieldGroup49();

    /**
     * <code>repeated group FieldGroupList51 = 51 { ... }</code>
     */
    java.util.List<com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51> 
        getFieldGroupList51List();
    /**
     * <code>repeated group FieldGroupList51 = 51 { ... }</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 getFieldGroupList51(int index);
    /**
     * <code>repeated group FieldGroupList51 = 51 { ... }</code>
     */
    int getFieldGroupList51Count();

    /**
     * <code>double field_double_53 = 53;</code>
     * @return Whether the fieldDouble53 field is set.
     */
    boolean hasFieldDouble53();
    /**
     * <code>double field_double_53 = 53;</code>
     * @return The fieldDouble53.
     */
    double getFieldDouble53();

    /**
     * <code>float field_float_54 = 54;</code>
     * @return Whether the fieldFloat54 field is set.
     */
    boolean hasFieldFloat54();
    /**
     * <code>float field_float_54 = 54;</code>
     * @return The fieldFloat54.
     */
    float getFieldFloat54();

    /**
     * <code>int64 field_int64_55 = 55;</code>
     * @return Whether the fieldInt6455 field is set.
     */
    boolean hasFieldInt6455();
    /**
     * <code>int64 field_int64_55 = 55;</code>
     * @return The fieldInt6455.
     */
    long getFieldInt6455();

    /**
     * <code>uint64 field_uint64_56 = 56;</code>
     * @return Whether the fieldUint6456 field is set.
     */
    boolean hasFieldUint6456();
    /**
     * <code>uint64 field_uint64_56 = 56;</code>
     * @return The fieldUint6456.
     */
    long getFieldUint6456();

    /**
     * <code>int32 field_int32_57 = 57;</code>
     * @return Whether the fieldInt3257 field is set.
     */
    boolean hasFieldInt3257();
    /**
     * <code>int32 field_int32_57 = 57;</code>
     * @return The fieldInt3257.
     */
    int getFieldInt3257();

    /**
     * <code>fixed64 field_fixed64_58 = 58;</code>
     * @return Whether the fieldFixed6458 field is set.
     */
    boolean hasFieldFixed6458();
    /**
     * <code>fixed64 field_fixed64_58 = 58;</code>
     * @return The fieldFixed6458.
     */
    long getFieldFixed6458();

    /**
     * <code>fixed32 field_fixed32_59 = 59;</code>
     * @return Whether the fieldFixed3259 field is set.
     */
    boolean hasFieldFixed3259();
    /**
     * <code>fixed32 field_fixed32_59 = 59;</code>
     * @return The fieldFixed3259.
     */
    int getFieldFixed3259();

    /**
     * <code>bool field_bool_60 = 60;</code>
     * @return Whether the fieldBool60 field is set.
     */
    boolean hasFieldBool60();
    /**
     * <code>bool field_bool_60 = 60;</code>
     * @return The fieldBool60.
     */
    boolean getFieldBool60();

    /**
     * <code>string field_string_61 = 61;</code>
     * @return Whether the fieldString61 field is set.
     */
    boolean hasFieldString61();
    /**
     * <code>string field_string_61 = 61;</code>
     * @return The fieldString61.
     */
    java.lang.String getFieldString61();
    /**
     * <code>string field_string_61 = 61;</code>
     * @return The bytes for fieldString61.
     */
    com.google.protobuf.ByteString
        getFieldString61Bytes();

    /**
     * <code>.protobuf.experimental.Proto2Message field_message_62 = 62;</code>
     * @return Whether the fieldMessage62 field is set.
     */
    boolean hasFieldMessage62();
    /**
     * <code>.protobuf.experimental.Proto2Message field_message_62 = 62;</code>
     * @return The fieldMessage62.
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMessage62();

    /**
     * <code>bytes field_bytes_63 = 63;</code>
     * @return Whether the fieldBytes63 field is set.
     */
    boolean hasFieldBytes63();
    /**
     * <code>bytes field_bytes_63 = 63;</code>
     * @return The fieldBytes63.
     */
    com.google.protobuf.ByteString getFieldBytes63();

    /**
     * <code>uint32 field_uint32_64 = 64;</code>
     * @return Whether the fieldUint3264 field is set.
     */
    boolean hasFieldUint3264();
    /**
     * <code>uint32 field_uint32_64 = 64;</code>
     * @return The fieldUint3264.
     */
    int getFieldUint3264();

    /**
     * <code>sfixed32 field_sfixed32_65 = 65;</code>
     * @return Whether the fieldSfixed3265 field is set.
     */
    boolean hasFieldSfixed3265();
    /**
     * <code>sfixed32 field_sfixed32_65 = 65;</code>
     * @return The fieldSfixed3265.
     */
    int getFieldSfixed3265();

    /**
     * <code>sfixed64 field_sfixed64_66 = 66;</code>
     * @return Whether the fieldSfixed6466 field is set.
     */
    boolean hasFieldSfixed6466();
    /**
     * <code>sfixed64 field_sfixed64_66 = 66;</code>
     * @return The fieldSfixed6466.
     */
    long getFieldSfixed6466();

    /**
     * <code>sint32 field_sint32_67 = 67;</code>
     * @return Whether the fieldSint3267 field is set.
     */
    boolean hasFieldSint3267();
    /**
     * <code>sint32 field_sint32_67 = 67;</code>
     * @return The fieldSint3267.
     */
    int getFieldSint3267();

    /**
     * <code>sint64 field_sint64_68 = 68;</code>
     * @return Whether the fieldSint6468 field is set.
     */
    boolean hasFieldSint6468();
    /**
     * <code>sint64 field_sint64_68 = 68;</code>
     * @return The fieldSint6468.
     */
    long getFieldSint6468();

    /**
     * <code>group FieldGroup69 = 69 { ... }</code>
     * @return Whether the fieldgroup69 field is set.
     */
    boolean hasFieldGroup69();
    /**
     * <code>group FieldGroup69 = 69 { ... }</code>
     * @return The fieldgroup69.
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 getFieldGroup69();

    /**
     * <code>required double field_required_double_71 = 71;</code>
     * @return Whether the fieldRequiredDouble71 field is set.
     */
    boolean hasFieldRequiredDouble71();
    /**
     * <code>required double field_required_double_71 = 71;</code>
     * @return The fieldRequiredDouble71.
     */
    double getFieldRequiredDouble71();

    /**
     * <code>required float field_required_float_72 = 72;</code>
     * @return Whether the fieldRequiredFloat72 field is set.
     */
    boolean hasFieldRequiredFloat72();
    /**
     * <code>required float field_required_float_72 = 72;</code>
     * @return The fieldRequiredFloat72.
     */
    float getFieldRequiredFloat72();

    /**
     * <code>required int64 field_required_int64_73 = 73;</code>
     * @return Whether the fieldRequiredInt6473 field is set.
     */
    boolean hasFieldRequiredInt6473();
    /**
     * <code>required int64 field_required_int64_73 = 73;</code>
     * @return The fieldRequiredInt6473.
     */
    long getFieldRequiredInt6473();

    /**
     * <code>required uint64 field_required_uint64_74 = 74;</code>
     * @return Whether the fieldRequiredUint6474 field is set.
     */
    boolean hasFieldRequiredUint6474();
    /**
     * <code>required uint64 field_required_uint64_74 = 74;</code>
     * @return The fieldRequiredUint6474.
     */
    long getFieldRequiredUint6474();

    /**
     * <code>required int32 field_required_int32_75 = 75;</code>
     * @return Whether the fieldRequiredInt3275 field is set.
     */
    boolean hasFieldRequiredInt3275();
    /**
     * <code>required int32 field_required_int32_75 = 75;</code>
     * @return The fieldRequiredInt3275.
     */
    int getFieldRequiredInt3275();

    /**
     * <code>required fixed64 field_required_fixed64_76 = 76;</code>
     * @return Whether the fieldRequiredFixed6476 field is set.
     */
    boolean hasFieldRequiredFixed6476();
    /**
     * <code>required fixed64 field_required_fixed64_76 = 76;</code>
     * @return The fieldRequiredFixed6476.
     */
    long getFieldRequiredFixed6476();

    /**
     * <code>required fixed32 field_required_fixed32_77 = 77;</code>
     * @return Whether the fieldRequiredFixed3277 field is set.
     */
    boolean hasFieldRequiredFixed3277();
    /**
     * <code>required fixed32 field_required_fixed32_77 = 77;</code>
     * @return The fieldRequiredFixed3277.
     */
    int getFieldRequiredFixed3277();

    /**
     * <code>required bool field_required_bool_78 = 78;</code>
     * @return Whether the fieldRequiredBool78 field is set.
     */
    boolean hasFieldRequiredBool78();
    /**
     * <code>required bool field_required_bool_78 = 78;</code>
     * @return The fieldRequiredBool78.
     */
    boolean getFieldRequiredBool78();

    /**
     * <code>required string field_required_string_79 = 79;</code>
     * @return Whether the fieldRequiredString79 field is set.
     */
    boolean hasFieldRequiredString79();
    /**
     * <code>required string field_required_string_79 = 79;</code>
     * @return The fieldRequiredString79.
     */
    java.lang.String getFieldRequiredString79();
    /**
     * <code>required string field_required_string_79 = 79;</code>
     * @return The bytes for fieldRequiredString79.
     */
    com.google.protobuf.ByteString
        getFieldRequiredString79Bytes();

    /**
     * <code>required .protobuf.experimental.Proto2Message.RequiredNestedMessage field_required_message_80 = 80;</code>
     * @return Whether the fieldRequiredMessage80 field is set.
     */
    boolean hasFieldRequiredMessage80();
    /**
     * <code>required .protobuf.experimental.Proto2Message.RequiredNestedMessage field_required_message_80 = 80;</code>
     * @return The fieldRequiredMessage80.
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage getFieldRequiredMessage80();

    /**
     * <code>required bytes field_required_bytes_81 = 81;</code>
     * @return Whether the fieldRequiredBytes81 field is set.
     */
    boolean hasFieldRequiredBytes81();
    /**
     * <code>required bytes field_required_bytes_81 = 81;</code>
     * @return The fieldRequiredBytes81.
     */
    com.google.protobuf.ByteString getFieldRequiredBytes81();

    /**
     * <code>required uint32 field_required_uint32_82 = 82;</code>
     * @return Whether the fieldRequiredUint3282 field is set.
     */
    boolean hasFieldRequiredUint3282();
    /**
     * <code>required uint32 field_required_uint32_82 = 82;</code>
     * @return The fieldRequiredUint3282.
     */
    int getFieldRequiredUint3282();

    /**
     * <code>required .protobuf.experimental.Proto2Message.TestEnum field_required_enum_83 = 83;</code>
     * @return Whether the fieldRequiredEnum83 field is set.
     */
    boolean hasFieldRequiredEnum83();
    /**
     * <code>required .protobuf.experimental.Proto2Message.TestEnum field_required_enum_83 = 83;</code>
     * @return The fieldRequiredEnum83.
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldRequiredEnum83();

    /**
     * <code>required sfixed32 field_required_sfixed32_84 = 84;</code>
     * @return Whether the fieldRequiredSfixed3284 field is set.
     */
    boolean hasFieldRequiredSfixed3284();
    /**
     * <code>required sfixed32 field_required_sfixed32_84 = 84;</code>
     * @return The fieldRequiredSfixed3284.
     */
    int getFieldRequiredSfixed3284();

    /**
     * <code>required sfixed64 field_required_sfixed64_85 = 85;</code>
     * @return Whether the fieldRequiredSfixed6485 field is set.
     */
    boolean hasFieldRequiredSfixed6485();
    /**
     * <code>required sfixed64 field_required_sfixed64_85 = 85;</code>
     * @return The fieldRequiredSfixed6485.
     */
    long getFieldRequiredSfixed6485();

    /**
     * <code>required sint32 field_required_sint32_86 = 86;</code>
     * @return Whether the fieldRequiredSint3286 field is set.
     */
    boolean hasFieldRequiredSint3286();
    /**
     * <code>required sint32 field_required_sint32_86 = 86;</code>
     * @return The fieldRequiredSint3286.
     */
    int getFieldRequiredSint3286();

    /**
     * <code>required sint64 field_required_sint64_87 = 87;</code>
     * @return Whether the fieldRequiredSint6487 field is set.
     */
    boolean hasFieldRequiredSint6487();
    /**
     * <code>required sint64 field_required_sint64_87 = 87;</code>
     * @return The fieldRequiredSint6487.
     */
    long getFieldRequiredSint6487();

    /**
     * <code>required group FieldRequiredGroup88 = 88 { ... }</code>
     * @return Whether the fieldrequiredgroup88 field is set.
     */
    boolean hasFieldRequiredGroup88();
    /**
     * <code>required group FieldRequiredGroup88 = 88 { ... }</code>
     * @return The fieldrequiredgroup88.
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 getFieldRequiredGroup88();

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestOneofCase getTestOneofCase();
  }
  /**
   * Protobuf type {@code protobuf.experimental.Proto2Message}
   */
  public  static final class Proto2Message extends
      com.google.protobuf.GeneratedMessageLite<
          Proto2Message, Proto2Message.Builder> implements
      // @@protoc_insertion_point(message_implements:protobuf.experimental.Proto2Message)
      Proto2MessageOrBuilder {
    private Proto2Message() {
      fieldString9_ = "";
      fieldBytes11_ = com.google.protobuf.ByteString.EMPTY;
      fieldDoubleList18_ = emptyDoubleList();
      fieldFloatList19_ = emptyFloatList();
      fieldInt64List20_ = emptyLongList();
      fieldUint64List21_ = emptyLongList();
      fieldInt32List22_ = emptyIntList();
      fieldFixed64List23_ = emptyLongList();
      fieldFixed32List24_ = emptyIntList();
      fieldBoolList25_ = emptyBooleanList();
      fieldStringList26_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      fieldMessageList27_ = emptyProtobufList();
      fieldBytesList28_ = emptyProtobufList();
      fieldUint32List29_ = emptyIntList();
      fieldEnumList30_ = emptyIntList();
      fieldSfixed32List31_ = emptyIntList();
      fieldSfixed64List32_ = emptyLongList();
      fieldSint32List33_ = emptyIntList();
      fieldSint64List34_ = emptyLongList();
      fieldDoubleListPacked35_ = emptyDoubleList();
      fieldFloatListPacked36_ = emptyFloatList();
      fieldInt64ListPacked37_ = emptyLongList();
      fieldUint64ListPacked38_ = emptyLongList();
      fieldInt32ListPacked39_ = emptyIntList();
      fieldFixed64ListPacked40_ = emptyLongList();
      fieldFixed32ListPacked41_ = emptyIntList();
      fieldBoolListPacked42_ = emptyBooleanList();
      fieldUint32ListPacked43_ = emptyIntList();
      fieldEnumListPacked44_ = emptyIntList();
      fieldSfixed32ListPacked45_ = emptyIntList();
      fieldSfixed64ListPacked46_ = emptyLongList();
      fieldSint32ListPacked47_ = emptyIntList();
      fieldSint64ListPacked48_ = emptyLongList();
      fieldGroupList51_ = emptyProtobufList();
      fieldRequiredString79_ = "";
      fieldRequiredBytes81_ = com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * Protobuf enum {@code protobuf.experimental.Proto2Message.TestEnum}
     */
    public enum TestEnum
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>ZERO = 0;</code>
       */
      ZERO(0),
      /**
       * <code>ONE = 1;</code>
       */
      ONE(1),
      /**
       * <code>TWO = 2;</code>
       */
      TWO(2),
      ;

      /**
       * <code>ZERO = 0;</code>
       */
      public static final int ZERO_VALUE = 0;
      /**
       * <code>ONE = 1;</code>
       */
      public static final int ONE_VALUE = 1;
      /**
       * <code>TWO = 2;</code>
       */
      public static final int TWO_VALUE = 2;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TestEnum valueOf(int value) {
        return forNumber(value);
      }

      public static TestEnum forNumber(int value) {
        switch (value) {
          case 0: return ZERO;
          case 1: return ONE;
          case 2: return TWO;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TestEnum>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          TestEnum> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TestEnum>() {
              @java.lang.Override
              public TestEnum findValueByNumber(int number) {
                return TestEnum.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return TestEnumVerifier.INSTANCE;
      }

      private static final class TestEnumVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new TestEnumVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return TestEnum.forNumber(number) != null;
              }
            };

      private final int value;

      private TestEnum(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:protobuf.experimental.Proto2Message.TestEnum)
    }

    public interface FieldGroup49OrBuilder extends
        // @@protoc_insertion_point(interface_extends:protobuf.experimental.Proto2Message.FieldGroup49)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <code>optional int32 field_int32_50 = 50;</code>
       * @return Whether the fieldInt3250 field is set.
       */
      boolean hasFieldInt3250();
      /**
       * <code>optional int32 field_int32_50 = 50;</code>
       * @return The fieldInt3250.
       */
      int getFieldInt3250();
    }
    /**
     * Protobuf type {@code protobuf.experimental.Proto2Message.FieldGroup49}
     */
    public  static final class FieldGroup49 extends
        com.google.protobuf.GeneratedMessageLite<
            FieldGroup49, FieldGroup49.Builder> implements
        // @@protoc_insertion_point(message_implements:protobuf.experimental.Proto2Message.FieldGroup49)
        FieldGroup49OrBuilder {
      private FieldGroup49() {
      }
      private int bitField0_;
      public static final int FIELD_INT32_50_FIELD_NUMBER = 50;
      private int fieldInt3250_;
      /**
       * <code>optional int32 field_int32_50 = 50;</code>
       * @return Whether the fieldInt3250 field is set.
       */
      @java.lang.Override
      public boolean hasFieldInt3250() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional int32 field_int32_50 = 50;</code>
       * @return The fieldInt3250.
       */
      @java.lang.Override
      public int getFieldInt3250() {
        return fieldInt3250_;
      }
      /**
       * <code>optional int32 field_int32_50 = 50;</code>
       * @param value The fieldInt3250 to set.
       */
      private void setFieldInt3250(int value) {
        bitField0_ |= 0x00000001;
        fieldInt3250_ = value;
      }
      /**
       * <code>optional int32 field_int32_50 = 50;</code>
       */
      private void clearFieldInt3250() {
        bitField0_ = (bitField0_ & ~0x00000001);
        fieldInt3250_ = 0;
      }

      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code protobuf.experimental.Proto2Message.FieldGroup49}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49, Builder> implements
          // @@protoc_insertion_point(builder_implements:protobuf.experimental.Proto2Message.FieldGroup49)
          com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49OrBuilder {
        // Construct using com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <code>optional int32 field_int32_50 = 50;</code>
         * @return Whether the fieldInt3250 field is set.
         */
        @java.lang.Override
        public boolean hasFieldInt3250() {
          return instance.hasFieldInt3250();
        }
        /**
         * <code>optional int32 field_int32_50 = 50;</code>
         * @return The fieldInt3250.
         */
        @java.lang.Override
        public int getFieldInt3250() {
          return instance.getFieldInt3250();
        }
        /**
         * <code>optional int32 field_int32_50 = 50;</code>
         * @param value The fieldInt3250 to set.
         * @return This builder for chaining.
         */
        public Builder setFieldInt3250(int value) {
          copyOnWrite();
          instance.setFieldInt3250(value);
          return this;
        }
        /**
         * <code>optional int32 field_int32_50 = 50;</code>
         * @return This builder for chaining.
         */
        public Builder clearFieldInt3250() {
          copyOnWrite();
          instance.clearFieldInt3250();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:protobuf.experimental.Proto2Message.FieldGroup49)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "fieldInt3250_",
              };
              java.lang.String info =
                  "\u0001\u0001\u0000\u000122\u0001\u0000\u0000\u00002\u1004\u0000";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49> parser = PARSER;
            if (parser == null) {
              synchronized (com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:protobuf.experimental.Proto2Message.FieldGroup49)
      private static final com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 DEFAULT_INSTANCE;
      static {
        FieldGroup49 defaultInstance = new FieldGroup49();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          FieldGroup49.class, defaultInstance);
      }

      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<FieldGroup49> PARSER;

      public static com.google.protobuf.Parser<FieldGroup49> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface FieldGroupList51OrBuilder extends
        // @@protoc_insertion_point(interface_extends:protobuf.experimental.Proto2Message.FieldGroupList51)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <code>optional int32 field_int32_52 = 52;</code>
       * @return Whether the fieldInt3252 field is set.
       */
      boolean hasFieldInt3252();
      /**
       * <code>optional int32 field_int32_52 = 52;</code>
       * @return The fieldInt3252.
       */
      int getFieldInt3252();
    }
    /**
     * Protobuf type {@code protobuf.experimental.Proto2Message.FieldGroupList51}
     */
    public  static final class FieldGroupList51 extends
        com.google.protobuf.GeneratedMessageLite<
            FieldGroupList51, FieldGroupList51.Builder> implements
        // @@protoc_insertion_point(message_implements:protobuf.experimental.Proto2Message.FieldGroupList51)
        FieldGroupList51OrBuilder {
      private FieldGroupList51() {
      }
      private int bitField0_;
      public static final int FIELD_INT32_52_FIELD_NUMBER = 52;
      private int fieldInt3252_;
      /**
       * <code>optional int32 field_int32_52 = 52;</code>
       * @return Whether the fieldInt3252 field is set.
       */
      @java.lang.Override
      public boolean hasFieldInt3252() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional int32 field_int32_52 = 52;</code>
       * @return The fieldInt3252.
       */
      @java.lang.Override
      public int getFieldInt3252() {
        return fieldInt3252_;
      }
      /**
       * <code>optional int32 field_int32_52 = 52;</code>
       * @param value The fieldInt3252 to set.
       */
      private void setFieldInt3252(int value) {
        bitField0_ |= 0x00000001;
        fieldInt3252_ = value;
      }
      /**
       * <code>optional int32 field_int32_52 = 52;</code>
       */
      private void clearFieldInt3252() {
        bitField0_ = (bitField0_ & ~0x00000001);
        fieldInt3252_ = 0;
      }

      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code protobuf.experimental.Proto2Message.FieldGroupList51}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51, Builder> implements
          // @@protoc_insertion_point(builder_implements:protobuf.experimental.Proto2Message.FieldGroupList51)
          com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51OrBuilder {
        // Construct using com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <code>optional int32 field_int32_52 = 52;</code>
         * @return Whether the fieldInt3252 field is set.
         */
        @java.lang.Override
        public boolean hasFieldInt3252() {
          return instance.hasFieldInt3252();
        }
        /**
         * <code>optional int32 field_int32_52 = 52;</code>
         * @return The fieldInt3252.
         */
        @java.lang.Override
        public int getFieldInt3252() {
          return instance.getFieldInt3252();
        }
        /**
         * <code>optional int32 field_int32_52 = 52;</code>
         * @param value The fieldInt3252 to set.
         * @return This builder for chaining.
         */
        public Builder setFieldInt3252(int value) {
          copyOnWrite();
          instance.setFieldInt3252(value);
          return this;
        }
        /**
         * <code>optional int32 field_int32_52 = 52;</code>
         * @return This builder for chaining.
         */
        public Builder clearFieldInt3252() {
          copyOnWrite();
          instance.clearFieldInt3252();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:protobuf.experimental.Proto2Message.FieldGroupList51)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "fieldInt3252_",
              };
              java.lang.String info =
                  "\u0001\u0001\u0000\u000144\u0001\u0000\u0000\u00004\u1004\u0000";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51> parser = PARSER;
            if (parser == null) {
              synchronized (com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:protobuf.experimental.Proto2Message.FieldGroupList51)
      private static final com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 DEFAULT_INSTANCE;
      static {
        FieldGroupList51 defaultInstance = new FieldGroupList51();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          FieldGroupList51.class, defaultInstance);
      }

      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<FieldGroupList51> PARSER;

      public static com.google.protobuf.Parser<FieldGroupList51> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface FieldGroup69OrBuilder extends
        // @@protoc_insertion_point(interface_extends:protobuf.experimental.Proto2Message.FieldGroup69)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <code>optional int32 field_int32_70 = 70;</code>
       * @return Whether the fieldInt3270 field is set.
       */
      boolean hasFieldInt3270();
      /**
       * <code>optional int32 field_int32_70 = 70;</code>
       * @return The fieldInt3270.
       */
      int getFieldInt3270();
    }
    /**
     * Protobuf type {@code protobuf.experimental.Proto2Message.FieldGroup69}
     */
    public  static final class FieldGroup69 extends
        com.google.protobuf.GeneratedMessageLite<
            FieldGroup69, FieldGroup69.Builder> implements
        // @@protoc_insertion_point(message_implements:protobuf.experimental.Proto2Message.FieldGroup69)
        FieldGroup69OrBuilder {
      private FieldGroup69() {
      }
      private int bitField0_;
      public static final int FIELD_INT32_70_FIELD_NUMBER = 70;
      private int fieldInt3270_;
      /**
       * <code>optional int32 field_int32_70 = 70;</code>
       * @return Whether the fieldInt3270 field is set.
       */
      @java.lang.Override
      public boolean hasFieldInt3270() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional int32 field_int32_70 = 70;</code>
       * @return The fieldInt3270.
       */
      @java.lang.Override
      public int getFieldInt3270() {
        return fieldInt3270_;
      }
      /**
       * <code>optional int32 field_int32_70 = 70;</code>
       * @param value The fieldInt3270 to set.
       */
      private void setFieldInt3270(int value) {
        bitField0_ |= 0x00000001;
        fieldInt3270_ = value;
      }
      /**
       * <code>optional int32 field_int32_70 = 70;</code>
       */
      private void clearFieldInt3270() {
        bitField0_ = (bitField0_ & ~0x00000001);
        fieldInt3270_ = 0;
      }

      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code protobuf.experimental.Proto2Message.FieldGroup69}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69, Builder> implements
          // @@protoc_insertion_point(builder_implements:protobuf.experimental.Proto2Message.FieldGroup69)
          com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69OrBuilder {
        // Construct using com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <code>optional int32 field_int32_70 = 70;</code>
         * @return Whether the fieldInt3270 field is set.
         */
        @java.lang.Override
        public boolean hasFieldInt3270() {
          return instance.hasFieldInt3270();
        }
        /**
         * <code>optional int32 field_int32_70 = 70;</code>
         * @return The fieldInt3270.
         */
        @java.lang.Override
        public int getFieldInt3270() {
          return instance.getFieldInt3270();
        }
        /**
         * <code>optional int32 field_int32_70 = 70;</code>
         * @param value The fieldInt3270 to set.
         * @return This builder for chaining.
         */
        public Builder setFieldInt3270(int value) {
          copyOnWrite();
          instance.setFieldInt3270(value);
          return this;
        }
        /**
         * <code>optional int32 field_int32_70 = 70;</code>
         * @return This builder for chaining.
         */
        public Builder clearFieldInt3270() {
          copyOnWrite();
          instance.clearFieldInt3270();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:protobuf.experimental.Proto2Message.FieldGroup69)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "fieldInt3270_",
              };
              java.lang.String info =
                  "\u0001\u0001\u0000\u0001FF\u0001\u0000\u0000\u0000F\u1004\u0000";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69> parser = PARSER;
            if (parser == null) {
              synchronized (com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:protobuf.experimental.Proto2Message.FieldGroup69)
      private static final com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 DEFAULT_INSTANCE;
      static {
        FieldGroup69 defaultInstance = new FieldGroup69();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          FieldGroup69.class, defaultInstance);
      }

      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<FieldGroup69> PARSER;

      public static com.google.protobuf.Parser<FieldGroup69> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface RequiredNestedMessageOrBuilder extends
        // @@protoc_insertion_point(interface_extends:protobuf.experimental.Proto2Message.RequiredNestedMessage)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <code>optional int32 value = 1;</code>
       * @return Whether the value field is set.
       */
      boolean hasValue();
      /**
       * <code>optional int32 value = 1;</code>
       * @return The value.
       */
      int getValue();
    }
    /**
     * Protobuf type {@code protobuf.experimental.Proto2Message.RequiredNestedMessage}
     */
    public  static final class RequiredNestedMessage extends
        com.google.protobuf.GeneratedMessageLite<
            RequiredNestedMessage, RequiredNestedMessage.Builder> implements
        // @@protoc_insertion_point(message_implements:protobuf.experimental.Proto2Message.RequiredNestedMessage)
        RequiredNestedMessageOrBuilder {
      private RequiredNestedMessage() {
      }
      private int bitField0_;
      public static final int VALUE_FIELD_NUMBER = 1;
      private int value_;
      /**
       * <code>optional int32 value = 1;</code>
       * @return Whether the value field is set.
       */
      @java.lang.Override
      public boolean hasValue() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional int32 value = 1;</code>
       * @return The value.
       */
      @java.lang.Override
      public int getValue() {
        return value_;
      }
      /**
       * <code>optional int32 value = 1;</code>
       * @param value The value to set.
       */
      private void setValue(int value) {
        bitField0_ |= 0x00000001;
        value_ = value;
      }
      /**
       * <code>optional int32 value = 1;</code>
       */
      private void clearValue() {
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0;
      }

      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code protobuf.experimental.Proto2Message.RequiredNestedMessage}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage, Builder> implements
          // @@protoc_insertion_point(builder_implements:protobuf.experimental.Proto2Message.RequiredNestedMessage)
          com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessageOrBuilder {
        // Construct using com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <code>optional int32 value = 1;</code>
         * @return Whether the value field is set.
         */
        @java.lang.Override
        public boolean hasValue() {
          return instance.hasValue();
        }
        /**
         * <code>optional int32 value = 1;</code>
         * @return The value.
         */
        @java.lang.Override
        public int getValue() {
          return instance.getValue();
        }
        /**
         * <code>optional int32 value = 1;</code>
         * @param value The value to set.
         * @return This builder for chaining.
         */
        public Builder setValue(int value) {
          copyOnWrite();
          instance.setValue(value);
          return this;
        }
        /**
         * <code>optional int32 value = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearValue() {
          copyOnWrite();
          instance.clearValue();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:protobuf.experimental.Proto2Message.RequiredNestedMessage)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "value_",
              };
              java.lang.String info =
                  "\u0001\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u1004\u0000";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage> parser = PARSER;
            if (parser == null) {
              synchronized (com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:protobuf.experimental.Proto2Message.RequiredNestedMessage)
      private static final com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage DEFAULT_INSTANCE;
      static {
        RequiredNestedMessage defaultInstance = new RequiredNestedMessage();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          RequiredNestedMessage.class, defaultInstance);
      }

      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<RequiredNestedMessage> PARSER;

      public static com.google.protobuf.Parser<RequiredNestedMessage> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface FieldRequiredGroup88OrBuilder extends
        // @@protoc_insertion_point(interface_extends:protobuf.experimental.Proto2Message.FieldRequiredGroup88)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <code>optional int32 field_int32_89 = 89;</code>
       * @return Whether the fieldInt3289 field is set.
       */
      boolean hasFieldInt3289();
      /**
       * <code>optional int32 field_int32_89 = 89;</code>
       * @return The fieldInt3289.
       */
      int getFieldInt3289();
    }
    /**
     * Protobuf type {@code protobuf.experimental.Proto2Message.FieldRequiredGroup88}
     */
    public  static final class FieldRequiredGroup88 extends
        com.google.protobuf.GeneratedMessageLite<
            FieldRequiredGroup88, FieldRequiredGroup88.Builder> implements
        // @@protoc_insertion_point(message_implements:protobuf.experimental.Proto2Message.FieldRequiredGroup88)
        FieldRequiredGroup88OrBuilder {
      private FieldRequiredGroup88() {
      }
      private int bitField0_;
      public static final int FIELD_INT32_89_FIELD_NUMBER = 89;
      private int fieldInt3289_;
      /**
       * <code>optional int32 field_int32_89 = 89;</code>
       * @return Whether the fieldInt3289 field is set.
       */
      @java.lang.Override
      public boolean hasFieldInt3289() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional int32 field_int32_89 = 89;</code>
       * @return The fieldInt3289.
       */
      @java.lang.Override
      public int getFieldInt3289() {
        return fieldInt3289_;
      }
      /**
       * <code>optional int32 field_int32_89 = 89;</code>
       * @param value The fieldInt3289 to set.
       */
      private void setFieldInt3289(int value) {
        bitField0_ |= 0x00000001;
        fieldInt3289_ = value;
      }
      /**
       * <code>optional int32 field_int32_89 = 89;</code>
       */
      private void clearFieldInt3289() {
        bitField0_ = (bitField0_ & ~0x00000001);
        fieldInt3289_ = 0;
      }

      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code protobuf.experimental.Proto2Message.FieldRequiredGroup88}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88, Builder> implements
          // @@protoc_insertion_point(builder_implements:protobuf.experimental.Proto2Message.FieldRequiredGroup88)
          com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88OrBuilder {
        // Construct using com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <code>optional int32 field_int32_89 = 89;</code>
         * @return Whether the fieldInt3289 field is set.
         */
        @java.lang.Override
        public boolean hasFieldInt3289() {
          return instance.hasFieldInt3289();
        }
        /**
         * <code>optional int32 field_int32_89 = 89;</code>
         * @return The fieldInt3289.
         */
        @java.lang.Override
        public int getFieldInt3289() {
          return instance.getFieldInt3289();
        }
        /**
         * <code>optional int32 field_int32_89 = 89;</code>
         * @param value The fieldInt3289 to set.
         * @return This builder for chaining.
         */
        public Builder setFieldInt3289(int value) {
          copyOnWrite();
          instance.setFieldInt3289(value);
          return this;
        }
        /**
         * <code>optional int32 field_int32_89 = 89;</code>
         * @return This builder for chaining.
         */
        public Builder clearFieldInt3289() {
          copyOnWrite();
          instance.clearFieldInt3289();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:protobuf.experimental.Proto2Message.FieldRequiredGroup88)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "fieldInt3289_",
              };
              java.lang.String info =
                  "\u0001\u0001\u0000\u0001YY\u0001\u0000\u0000\u0000Y\u1004\u0000";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88> parser = PARSER;
            if (parser == null) {
              synchronized (com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:protobuf.experimental.Proto2Message.FieldRequiredGroup88)
      private static final com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 DEFAULT_INSTANCE;
      static {
        FieldRequiredGroup88 defaultInstance = new FieldRequiredGroup88();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          FieldRequiredGroup88.class, defaultInstance);
      }

      public static com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<FieldRequiredGroup88> PARSER;

      public static com.google.protobuf.Parser<FieldRequiredGroup88> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    private int bitField1_;
    private int testOneofCase_ = 0;
    private java.lang.Object testOneof_;
    public enum TestOneofCase {
      FIELD_DOUBLE_53(53),
      FIELD_FLOAT_54(54),
      FIELD_INT64_55(55),
      FIELD_UINT64_56(56),
      FIELD_INT32_57(57),
      FIELD_FIXED64_58(58),
      FIELD_FIXED32_59(59),
      FIELD_BOOL_60(60),
      FIELD_STRING_61(61),
      FIELD_MESSAGE_62(62),
      FIELD_BYTES_63(63),
      FIELD_UINT32_64(64),
      FIELD_SFIXED32_65(65),
      FIELD_SFIXED64_66(66),
      FIELD_SINT32_67(67),
      FIELD_SINT64_68(68),
      FIELDGROUP69(69),
      TESTONEOF_NOT_SET(0);
      private final int value;
      private TestOneofCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TestOneofCase valueOf(int value) {
        return forNumber(value);
      }

      public static TestOneofCase forNumber(int value) {
        switch (value) {
          case 53: return FIELD_DOUBLE_53;
          case 54: return FIELD_FLOAT_54;
          case 55: return FIELD_INT64_55;
          case 56: return FIELD_UINT64_56;
          case 57: return FIELD_INT32_57;
          case 58: return FIELD_FIXED64_58;
          case 59: return FIELD_FIXED32_59;
          case 60: return FIELD_BOOL_60;
          case 61: return FIELD_STRING_61;
          case 62: return FIELD_MESSAGE_62;
          case 63: return FIELD_BYTES_63;
          case 64: return FIELD_UINT32_64;
          case 65: return FIELD_SFIXED32_65;
          case 66: return FIELD_SFIXED64_66;
          case 67: return FIELD_SINT32_67;
          case 68: return FIELD_SINT64_68;
          case 69: return FIELDGROUP69;
          case 0: return TESTONEOF_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public TestOneofCase
    getTestOneofCase() {
      return TestOneofCase.forNumber(
          testOneofCase_);
    }

    private void clearTestOneof() {
      testOneofCase_ = 0;
      testOneof_ = null;
    }

    public static final int FIELD_DOUBLE_1_FIELD_NUMBER = 1;
    private double fieldDouble1_;
    /**
     * <code>optional double field_double_1 = 1;</code>
     * @return Whether the fieldDouble1 field is set.
     */
    @java.lang.Override
    public boolean hasFieldDouble1() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional double field_double_1 = 1;</code>
     * @return The fieldDouble1.
     */
    @java.lang.Override
    public double getFieldDouble1() {
      return fieldDouble1_;
    }
    /**
     * <code>optional double field_double_1 = 1;</code>
     * @param value The fieldDouble1 to set.
     */
    private void setFieldDouble1(double value) {
      bitField0_ |= 0x00000001;
      fieldDouble1_ = value;
    }
    /**
     * <code>optional double field_double_1 = 1;</code>
     */
    private void clearFieldDouble1() {
      bitField0_ = (bitField0_ & ~0x00000001);
      fieldDouble1_ = 0D;
    }

    public static final int FIELD_FLOAT_2_FIELD_NUMBER = 2;
    private float fieldFloat2_;
    /**
     * <code>optional float field_float_2 = 2;</code>
     * @return Whether the fieldFloat2 field is set.
     */
    @java.lang.Override
    public boolean hasFieldFloat2() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional float field_float_2 = 2;</code>
     * @return The fieldFloat2.
     */
    @java.lang.Override
    public float getFieldFloat2() {
      return fieldFloat2_;
    }
    /**
     * <code>optional float field_float_2 = 2;</code>
     * @param value The fieldFloat2 to set.
     */
    private void setFieldFloat2(float value) {
      bitField0_ |= 0x00000002;
      fieldFloat2_ = value;
    }
    /**
     * <code>optional float field_float_2 = 2;</code>
     */
    private void clearFieldFloat2() {
      bitField0_ = (bitField0_ & ~0x00000002);
      fieldFloat2_ = 0F;
    }

    public static final int FIELD_INT64_3_FIELD_NUMBER = 3;
    private long fieldInt643_;
    /**
     * <code>optional int64 field_int64_3 = 3;</code>
     * @return Whether the fieldInt643 field is set.
     */
    @java.lang.Override
    public boolean hasFieldInt643() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional int64 field_int64_3 = 3;</code>
     * @return The fieldInt643.
     */
    @java.lang.Override
    public long getFieldInt643() {
      return fieldInt643_;
    }
    /**
     * <code>optional int64 field_int64_3 = 3;</code>
     * @param value The fieldInt643 to set.
     */
    private void setFieldInt643(long value) {
      bitField0_ |= 0x00000004;
      fieldInt643_ = value;
    }
    /**
     * <code>optional int64 field_int64_3 = 3;</code>
     */
    private void clearFieldInt643() {
      bitField0_ = (bitField0_ & ~0x00000004);
      fieldInt643_ = 0L;
    }

    public static final int FIELD_UINT64_4_FIELD_NUMBER = 4;
    private long fieldUint644_;
    /**
     * <code>optional uint64 field_uint64_4 = 4;</code>
     * @return Whether the fieldUint644 field is set.
     */
    @java.lang.Override
    public boolean hasFieldUint644() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional uint64 field_uint64_4 = 4;</code>
     * @return The fieldUint644.
     */
    @java.lang.Override
    public long getFieldUint644() {
      return fieldUint644_;
    }
    /**
     * <code>optional uint64 field_uint64_4 = 4;</code>
     * @param value The fieldUint644 to set.
     */
    private void setFieldUint644(long value) {
      bitField0_ |= 0x00000008;
      fieldUint644_ = value;
    }
    /**
     * <code>optional uint64 field_uint64_4 = 4;</code>
     */
    private void clearFieldUint644() {
      bitField0_ = (bitField0_ & ~0x00000008);
      fieldUint644_ = 0L;
    }

    public static final int FIELD_INT32_5_FIELD_NUMBER = 5;
    private int fieldInt325_;
    /**
     * <code>optional int32 field_int32_5 = 5;</code>
     * @return Whether the fieldInt325 field is set.
     */
    @java.lang.Override
    public boolean hasFieldInt325() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional int32 field_int32_5 = 5;</code>
     * @return The fieldInt325.
     */
    @java.lang.Override
    public int getFieldInt325() {
      return fieldInt325_;
    }
    /**
     * <code>optional int32 field_int32_5 = 5;</code>
     * @param value The fieldInt325 to set.
     */
    private void setFieldInt325(int value) {
      bitField0_ |= 0x00000010;
      fieldInt325_ = value;
    }
    /**
     * <code>optional int32 field_int32_5 = 5;</code>
     */
    private void clearFieldInt325() {
      bitField0_ = (bitField0_ & ~0x00000010);
      fieldInt325_ = 0;
    }

    public static final int FIELD_FIXED64_6_FIELD_NUMBER = 6;
    private long fieldFixed646_;
    /**
     * <code>optional fixed64 field_fixed64_6 = 6;</code>
     * @return Whether the fieldFixed646 field is set.
     */
    @java.lang.Override
    public boolean hasFieldFixed646() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional fixed64 field_fixed64_6 = 6;</code>
     * @return The fieldFixed646.
     */
    @java.lang.Override
    public long getFieldFixed646() {
      return fieldFixed646_;
    }
    /**
     * <code>optional fixed64 field_fixed64_6 = 6;</code>
     * @param value The fieldFixed646 to set.
     */
    private void setFieldFixed646(long value) {
      bitField0_ |= 0x00000020;
      fieldFixed646_ = value;
    }
    /**
     * <code>optional fixed64 field_fixed64_6 = 6;</code>
     */
    private void clearFieldFixed646() {
      bitField0_ = (bitField0_ & ~0x00000020);
      fieldFixed646_ = 0L;
    }

    public static final int FIELD_FIXED32_7_FIELD_NUMBER = 7;
    private int fieldFixed327_;
    /**
     * <code>optional fixed32 field_fixed32_7 = 7;</code>
     * @return Whether the fieldFixed327 field is set.
     */
    @java.lang.Override
    public boolean hasFieldFixed327() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional fixed32 field_fixed32_7 = 7;</code>
     * @return The fieldFixed327.
     */
    @java.lang.Override
    public int getFieldFixed327() {
      return fieldFixed327_;
    }
    /**
     * <code>optional fixed32 field_fixed32_7 = 7;</code>
     * @param value The fieldFixed327 to set.
     */
    private void setFieldFixed327(int value) {
      bitField0_ |= 0x00000040;
      fieldFixed327_ = value;
    }
    /**
     * <code>optional fixed32 field_fixed32_7 = 7;</code>
     */
    private void clearFieldFixed327() {
      bitField0_ = (bitField0_ & ~0x00000040);
      fieldFixed327_ = 0;
    }

    public static final int FIELD_BOOL_8_FIELD_NUMBER = 8;
    private boolean fieldBool8_;
    /**
     * <code>optional bool field_bool_8 = 8;</code>
     * @return Whether the fieldBool8 field is set.
     */
    @java.lang.Override
    public boolean hasFieldBool8() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional bool field_bool_8 = 8;</code>
     * @return The fieldBool8.
     */
    @java.lang.Override
    public boolean getFieldBool8() {
      return fieldBool8_;
    }
    /**
     * <code>optional bool field_bool_8 = 8;</code>
     * @param value The fieldBool8 to set.
     */
    private void setFieldBool8(boolean value) {
      bitField0_ |= 0x00000080;
      fieldBool8_ = value;
    }
    /**
     * <code>optional bool field_bool_8 = 8;</code>
     */
    private void clearFieldBool8() {
      bitField0_ = (bitField0_ & ~0x00000080);
      fieldBool8_ = false;
    }

    public static final int FIELD_STRING_9_FIELD_NUMBER = 9;
    private java.lang.String fieldString9_;
    /**
     * <code>optional string field_string_9 = 9;</code>
     * @return Whether the fieldString9 field is set.
     */
    @java.lang.Override
    public boolean hasFieldString9() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional string field_string_9 = 9;</code>
     * @return The fieldString9.
     */
    @java.lang.Override
    public java.lang.String getFieldString9() {
      return fieldString9_;
    }
    /**
     * <code>optional string field_string_9 = 9;</code>
     * @return The bytes for fieldString9.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFieldString9Bytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(fieldString9_);
    }
    /**
     * <code>optional string field_string_9 = 9;</code>
     * @param value The fieldString9 to set.
     */
    private void setFieldString9(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000100;
      fieldString9_ = value;
    }
    /**
     * <code>optional string field_string_9 = 9;</code>
     */
    private void clearFieldString9() {
      bitField0_ = (bitField0_ & ~0x00000100);
      fieldString9_ = getDefaultInstance().getFieldString9();
    }
    /**
     * <code>optional string field_string_9 = 9;</code>
     * @param value The bytes for fieldString9 to set.
     */
    private void setFieldString9Bytes(
        com.google.protobuf.ByteString value) {
      fieldString9_ = value.toStringUtf8();
      bitField0_ |= 0x00000100;
    }

    public static final int FIELD_MESSAGE_10_FIELD_NUMBER = 10;
    private com.google.protobuf.testing.Proto2Testing.Proto2Message fieldMessage10_;
    /**
     * <code>optional .protobuf.experimental.Proto2Message field_message_10 = 10;</code>
     */
    @java.lang.Override
    public boolean hasFieldMessage10() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional .protobuf.experimental.Proto2Message field_message_10 = 10;</code>
     */
    @java.lang.Override
    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMessage10() {
      return fieldMessage10_ == null ? com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance() : fieldMessage10_;
    }
    /**
     * <code>optional .protobuf.experimental.Proto2Message field_message_10 = 10;</code>
     */
    private void setFieldMessage10(com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
      value.getClass();
  fieldMessage10_ = value;
      bitField0_ |= 0x00000200;
      }
    /**
     * <code>optional .protobuf.experimental.Proto2Message field_message_10 = 10;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeFieldMessage10(com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
      value.getClass();
  if (fieldMessage10_ != null &&
          fieldMessage10_ != com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance()) {
        fieldMessage10_ =
          com.google.protobuf.testing.Proto2Testing.Proto2Message.newBuilder(fieldMessage10_).mergeFrom(value).buildPartial();
      } else {
        fieldMessage10_ = value;
      }
      bitField0_ |= 0x00000200;
    }
    /**
     * <code>optional .protobuf.experimental.Proto2Message field_message_10 = 10;</code>
     */
    private void clearFieldMessage10() {  fieldMessage10_ = null;
      bitField0_ = (bitField0_ & ~0x00000200);
    }

    public static final int FIELD_BYTES_11_FIELD_NUMBER = 11;
    private com.google.protobuf.ByteString fieldBytes11_;
    /**
     * <code>optional bytes field_bytes_11 = 11;</code>
     * @return Whether the fieldBytes11 field is set.
     */
    @java.lang.Override
    public boolean hasFieldBytes11() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <code>optional bytes field_bytes_11 = 11;</code>
     * @return The fieldBytes11.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getFieldBytes11() {
      return fieldBytes11_;
    }
    /**
     * <code>optional bytes field_bytes_11 = 11;</code>
     * @param value The fieldBytes11 to set.
     */
    private void setFieldBytes11(com.google.protobuf.ByteString value) {
      value.getClass();
  bitField0_ |= 0x00000400;
      fieldBytes11_ = value;
    }
    /**
     * <code>optional bytes field_bytes_11 = 11;</code>
     */
    private void clearFieldBytes11() {
      bitField0_ = (bitField0_ & ~0x00000400);
      fieldBytes11_ = getDefaultInstance().getFieldBytes11();
    }

    public static final int FIELD_UINT32_12_FIELD_NUMBER = 12;
    private int fieldUint3212_;
    /**
     * <code>optional uint32 field_uint32_12 = 12;</code>
     * @return Whether the fieldUint3212 field is set.
     */
    @java.lang.Override
    public boolean hasFieldUint3212() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <code>optional uint32 field_uint32_12 = 12;</code>
     * @return The fieldUint3212.
     */
    @java.lang.Override
    public int getFieldUint3212() {
      return fieldUint3212_;
    }
    /**
     * <code>optional uint32 field_uint32_12 = 12;</code>
     * @param value The fieldUint3212 to set.
     */
    private void setFieldUint3212(int value) {
      bitField0_ |= 0x00000800;
      fieldUint3212_ = value;
    }
    /**
     * <code>optional uint32 field_uint32_12 = 12;</code>
     */
    private void clearFieldUint3212() {
      bitField0_ = (bitField0_ & ~0x00000800);
      fieldUint3212_ = 0;
    }

    public static final int FIELD_ENUM_13_FIELD_NUMBER = 13;
    private int fieldEnum13_;
    /**
     * <code>optional .protobuf.experimental.Proto2Message.TestEnum field_enum_13 = 13;</code>
     * @return Whether the fieldEnum13 field is set.
     */
    @java.lang.Override
    public boolean hasFieldEnum13() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <code>optional .protobuf.experimental.Proto2Message.TestEnum field_enum_13 = 13;</code>
     * @return The fieldEnum13.
     */
    @java.lang.Override
    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldEnum13() {
      com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum result = com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.forNumber(fieldEnum13_);
      return result == null ? com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO : result;
    }
    /**
     * <code>optional .protobuf.experimental.Proto2Message.TestEnum field_enum_13 = 13;</code>
     * @param value The fieldEnum13 to set.
     */
    private void setFieldEnum13(com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
      fieldEnum13_ = value.getNumber();
      bitField0_ |= 0x00001000;
    }
    /**
     * <code>optional .protobuf.experimental.Proto2Message.TestEnum field_enum_13 = 13;</code>
     */
    private void clearFieldEnum13() {
      bitField0_ = (bitField0_ & ~0x00001000);
      fieldEnum13_ = 0;
    }

    public static final int FIELD_SFIXED32_14_FIELD_NUMBER = 14;
    private int fieldSfixed3214_;
    /**
     * <code>optional sfixed32 field_sfixed32_14 = 14;</code>
     * @return Whether the fieldSfixed3214 field is set.
     */
    @java.lang.Override
    public boolean hasFieldSfixed3214() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <code>optional sfixed32 field_sfixed32_14 = 14;</code>
     * @return The fieldSfixed3214.
     */
    @java.lang.Override
    public int getFieldSfixed3214() {
      return fieldSfixed3214_;
    }
    /**
     * <code>optional sfixed32 field_sfixed32_14 = 14;</code>
     * @param value The fieldSfixed3214 to set.
     */
    private void setFieldSfixed3214(int value) {
      bitField0_ |= 0x00002000;
      fieldSfixed3214_ = value;
    }
    /**
     * <code>optional sfixed32 field_sfixed32_14 = 14;</code>
     */
    private void clearFieldSfixed3214() {
      bitField0_ = (bitField0_ & ~0x00002000);
      fieldSfixed3214_ = 0;
    }

    public static final int FIELD_SFIXED64_15_FIELD_NUMBER = 15;
    private long fieldSfixed6415_;
    /**
     * <code>optional sfixed64 field_sfixed64_15 = 15;</code>
     * @return Whether the fieldSfixed6415 field is set.
     */
    @java.lang.Override
    public boolean hasFieldSfixed6415() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <code>optional sfixed64 field_sfixed64_15 = 15;</code>
     * @return The fieldSfixed6415.
     */
    @java.lang.Override
    public long getFieldSfixed6415() {
      return fieldSfixed6415_;
    }
    /**
     * <code>optional sfixed64 field_sfixed64_15 = 15;</code>
     * @param value The fieldSfixed6415 to set.
     */
    private void setFieldSfixed6415(long value) {
      bitField0_ |= 0x00004000;
      fieldSfixed6415_ = value;
    }
    /**
     * <code>optional sfixed64 field_sfixed64_15 = 15;</code>
     */
    private void clearFieldSfixed6415() {
      bitField0_ = (bitField0_ & ~0x00004000);
      fieldSfixed6415_ = 0L;
    }

    public static final int FIELD_SINT32_16_FIELD_NUMBER = 16;
    private int fieldSint3216_;
    /**
     * <code>optional sint32 field_sint32_16 = 16;</code>
     * @return Whether the fieldSint3216 field is set.
     */
    @java.lang.Override
    public boolean hasFieldSint3216() {
      return ((bitField0_ & 0x00008000) != 0);
    }
    /**
     * <code>optional sint32 field_sint32_16 = 16;</code>
     * @return The fieldSint3216.
     */
    @java.lang.Override
    public int getFieldSint3216() {
      return fieldSint3216_;
    }
    /**
     * <code>optional sint32 field_sint32_16 = 16;</code>
     * @param value The fieldSint3216 to set.
     */
    private void setFieldSint3216(int value) {
      bitField0_ |= 0x00008000;
      fieldSint3216_ = value;
    }
    /**
     * <code>optional sint32 field_sint32_16 = 16;</code>
     */
    private void clearFieldSint3216() {
      bitField0_ = (bitField0_ & ~0x00008000);
      fieldSint3216_ = 0;
    }

    public static final int FIELD_SINT64_17_FIELD_NUMBER = 17;
    private long fieldSint6417_;
    /**
     * <code>optional sint64 field_sint64_17 = 17;</code>
     * @return Whether the fieldSint6417 field is set.
     */
    @java.lang.Override
    public boolean hasFieldSint6417() {
      return ((bitField0_ & 0x00010000) != 0);
    }
    /**
     * <code>optional sint64 field_sint64_17 = 17;</code>
     * @return The fieldSint6417.
     */
    @java.lang.Override
    public long getFieldSint6417() {
      return fieldSint6417_;
    }
    /**
     * <code>optional sint64 field_sint64_17 = 17;</code>
     * @param value The fieldSint6417 to set.
     */
    private void setFieldSint6417(long value) {
      bitField0_ |= 0x00010000;
      fieldSint6417_ = value;
    }
    /**
     * <code>optional sint64 field_sint64_17 = 17;</code>
     */
    private void clearFieldSint6417() {
      bitField0_ = (bitField0_ & ~0x00010000);
      fieldSint6417_ = 0L;
    }

    public static final int FIELD_DOUBLE_LIST_18_FIELD_NUMBER = 18;
    private com.google.protobuf.Internal.DoubleList fieldDoubleList18_;
    /**
     * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
     * @return A list containing the fieldDoubleList18.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getFieldDoubleList18List() {
      return fieldDoubleList18_;
    }
    /**
     * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
     * @return The count of fieldDoubleList18.
     */
    @java.lang.Override
    public int getFieldDoubleList18Count() {
      return fieldDoubleList18_.size();
    }
    /**
     * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldDoubleList18 at the given index.
     */
    @java.lang.Override
    public double getFieldDoubleList18(int index) {
      return fieldDoubleList18_.getDouble(index);
    }
    private void ensureFieldDoubleList18IsMutable() {
      com.google.protobuf.Internal.DoubleList tmp = fieldDoubleList18_;
      if (!tmp.isModifiable()) {
        fieldDoubleList18_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The fieldDoubleList18 to set.
     */
    private void setFieldDoubleList18(
        int index, double value) {
      ensureFieldDoubleList18IsMutable();
      fieldDoubleList18_.setDouble(index, value);
    }
    /**
     * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
     * @param value The fieldDoubleList18 to add.
     */
    private void addFieldDoubleList18(double value) {
      ensureFieldDoubleList18IsMutable();
      fieldDoubleList18_.addDouble(value);
    }
    /**
     * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
     * @param values The fieldDoubleList18 to add.
     */
    private void addAllFieldDoubleList18(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureFieldDoubleList18IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldDoubleList18_);
    }
    /**
     * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
     */
    private void clearFieldDoubleList18() {
      fieldDoubleList18_ = emptyDoubleList();
    }

    public static final int FIELD_FLOAT_LIST_19_FIELD_NUMBER = 19;
    private com.google.protobuf.Internal.FloatList fieldFloatList19_;
    /**
     * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
     * @return A list containing the fieldFloatList19.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getFieldFloatList19List() {
      return fieldFloatList19_;
    }
    /**
     * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
     * @return The count of fieldFloatList19.
     */
    @java.lang.Override
    public int getFieldFloatList19Count() {
      return fieldFloatList19_.size();
    }
    /**
     * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldFloatList19 at the given index.
     */
    @java.lang.Override
    public float getFieldFloatList19(int index) {
      return fieldFloatList19_.getFloat(index);
    }
    private void ensureFieldFloatList19IsMutable() {
      com.google.protobuf.Internal.FloatList tmp = fieldFloatList19_;
      if (!tmp.isModifiable()) {
        fieldFloatList19_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The fieldFloatList19 to set.
     */
    private void setFieldFloatList19(
        int index, float value) {
      ensureFieldFloatList19IsMutable();
      fieldFloatList19_.setFloat(index, value);
    }
    /**
     * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
     * @param value The fieldFloatList19 to add.
     */
    private void addFieldFloatList19(float value) {
      ensureFieldFloatList19IsMutable();
      fieldFloatList19_.addFloat(value);
    }
    /**
     * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
     * @param values The fieldFloatList19 to add.
     */
    private void addAllFieldFloatList19(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureFieldFloatList19IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldFloatList19_);
    }
    /**
     * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
     */
    private void clearFieldFloatList19() {
      fieldFloatList19_ = emptyFloatList();
    }

    public static final int FIELD_INT64_LIST_20_FIELD_NUMBER = 20;
    private com.google.protobuf.Internal.LongList fieldInt64List20_;
    /**
     * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
     * @return A list containing the fieldInt64List20.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getFieldInt64List20List() {
      return fieldInt64List20_;
    }
    /**
     * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
     * @return The count of fieldInt64List20.
     */
    @java.lang.Override
    public int getFieldInt64List20Count() {
      return fieldInt64List20_.size();
    }
    /**
     * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldInt64List20 at the given index.
     */
    @java.lang.Override
    public long getFieldInt64List20(int index) {
      return fieldInt64List20_.getLong(index);
    }
    private void ensureFieldInt64List20IsMutable() {
      com.google.protobuf.Internal.LongList tmp = fieldInt64List20_;
      if (!tmp.isModifiable()) {
        fieldInt64List20_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The fieldInt64List20 to set.
     */
    private void setFieldInt64List20(
        int index, long value) {
      ensureFieldInt64List20IsMutable();
      fieldInt64List20_.setLong(index, value);
    }
    /**
     * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
     * @param value The fieldInt64List20 to add.
     */
    private void addFieldInt64List20(long value) {
      ensureFieldInt64List20IsMutable();
      fieldInt64List20_.addLong(value);
    }
    /**
     * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
     * @param values The fieldInt64List20 to add.
     */
    private void addAllFieldInt64List20(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureFieldInt64List20IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldInt64List20_);
    }
    /**
     * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
     */
    private void clearFieldInt64List20() {
      fieldInt64List20_ = emptyLongList();
    }

    public static final int FIELD_UINT64_LIST_21_FIELD_NUMBER = 21;
    private com.google.protobuf.Internal.LongList fieldUint64List21_;
    /**
     * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
     * @return A list containing the fieldUint64List21.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getFieldUint64List21List() {
      return fieldUint64List21_;
    }
    /**
     * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
     * @return The count of fieldUint64List21.
     */
    @java.lang.Override
    public int getFieldUint64List21Count() {
      return fieldUint64List21_.size();
    }
    /**
     * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldUint64List21 at the given index.
     */
    @java.lang.Override
    public long getFieldUint64List21(int index) {
      return fieldUint64List21_.getLong(index);
    }
    private void ensureFieldUint64List21IsMutable() {
      com.google.protobuf.Internal.LongList tmp = fieldUint64List21_;
      if (!tmp.isModifiable()) {
        fieldUint64List21_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The fieldUint64List21 to set.
     */
    private void setFieldUint64List21(
        int index, long value) {
      ensureFieldUint64List21IsMutable();
      fieldUint64List21_.setLong(index, value);
    }
    /**
     * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
     * @param value The fieldUint64List21 to add.
     */
    private void addFieldUint64List21(long value) {
      ensureFieldUint64List21IsMutable();
      fieldUint64List21_.addLong(value);
    }
    /**
     * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
     * @param values The fieldUint64List21 to add.
     */
    private void addAllFieldUint64List21(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureFieldUint64List21IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldUint64List21_);
    }
    /**
     * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
     */
    private void clearFieldUint64List21() {
      fieldUint64List21_ = emptyLongList();
    }

    public static final int FIELD_INT32_LIST_22_FIELD_NUMBER = 22;
    private com.google.protobuf.Internal.IntList fieldInt32List22_;
    /**
     * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
     * @return A list containing the fieldInt32List22.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getFieldInt32List22List() {
      return fieldInt32List22_;
    }
    /**
     * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
     * @return The count of fieldInt32List22.
     */
    @java.lang.Override
    public int getFieldInt32List22Count() {
      return fieldInt32List22_.size();
    }
    /**
     * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldInt32List22 at the given index.
     */
    @java.lang.Override
    public int getFieldInt32List22(int index) {
      return fieldInt32List22_.getInt(index);
    }
    private void ensureFieldInt32List22IsMutable() {
      com.google.protobuf.Internal.IntList tmp = fieldInt32List22_;
      if (!tmp.isModifiable()) {
        fieldInt32List22_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The fieldInt32List22 to set.
     */
    private void setFieldInt32List22(
        int index, int value) {
      ensureFieldInt32List22IsMutable();
      fieldInt32List22_.setInt(index, value);
    }
    /**
     * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
     * @param value The fieldInt32List22 to add.
     */
    private void addFieldInt32List22(int value) {
      ensureFieldInt32List22IsMutable();
      fieldInt32List22_.addInt(value);
    }
    /**
     * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
     * @param values The fieldInt32List22 to add.
     */
    private void addAllFieldInt32List22(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureFieldInt32List22IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldInt32List22_);
    }
    /**
     * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
     */
    private void clearFieldInt32List22() {
      fieldInt32List22_ = emptyIntList();
    }

    public static final int FIELD_FIXED64_LIST_23_FIELD_NUMBER = 23;
    private com.google.protobuf.Internal.LongList fieldFixed64List23_;
    /**
     * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
     * @return A list containing the fieldFixed64List23.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getFieldFixed64List23List() {
      return fieldFixed64List23_;
    }
    /**
     * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
     * @return The count of fieldFixed64List23.
     */
    @java.lang.Override
    public int getFieldFixed64List23Count() {
      return fieldFixed64List23_.size();
    }
    /**
     * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldFixed64List23 at the given index.
     */
    @java.lang.Override
    public long getFieldFixed64List23(int index) {
      return fieldFixed64List23_.getLong(index);
    }
    private void ensureFieldFixed64List23IsMutable() {
      com.google.protobuf.Internal.LongList tmp = fieldFixed64List23_;
      if (!tmp.isModifiable()) {
        fieldFixed64List23_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The fieldFixed64List23 to set.
     */
    private void setFieldFixed64List23(
        int index, long value) {
      ensureFieldFixed64List23IsMutable();
      fieldFixed64List23_.setLong(index, value);
    }
    /**
     * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
     * @param value The fieldFixed64List23 to add.
     */
    private void addFieldFixed64List23(long value) {
      ensureFieldFixed64List23IsMutable();
      fieldFixed64List23_.addLong(value);
    }
    /**
     * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
     * @param values The fieldFixed64List23 to add.
     */
    private void addAllFieldFixed64List23(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureFieldFixed64List23IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldFixed64List23_);
    }
    /**
     * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
     */
    private void clearFieldFixed64List23() {
      fieldFixed64List23_ = emptyLongList();
    }

    public static final int FIELD_FIXED32_LIST_24_FIELD_NUMBER = 24;
    private com.google.protobuf.Internal.IntList fieldFixed32List24_;
    /**
     * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
     * @return A list containing the fieldFixed32List24.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getFieldFixed32List24List() {
      return fieldFixed32List24_;
    }
    /**
     * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
     * @return The count of fieldFixed32List24.
     */
    @java.lang.Override
    public int getFieldFixed32List24Count() {
      return fieldFixed32List24_.size();
    }
    /**
     * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldFixed32List24 at the given index.
     */
    @java.lang.Override
    public int getFieldFixed32List24(int index) {
      return fieldFixed32List24_.getInt(index);
    }
    private void ensureFieldFixed32List24IsMutable() {
      com.google.protobuf.Internal.IntList tmp = fieldFixed32List24_;
      if (!tmp.isModifiable()) {
        fieldFixed32List24_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The fieldFixed32List24 to set.
     */
    private void setFieldFixed32List24(
        int index, int value) {
      ensureFieldFixed32List24IsMutable();
      fieldFixed32List24_.setInt(index, value);
    }
    /**
     * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
     * @param value The fieldFixed32List24 to add.
     */
    private void addFieldFixed32List24(int value) {
      ensureFieldFixed32List24IsMutable();
      fieldFixed32List24_.addInt(value);
    }
    /**
     * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
     * @param values The fieldFixed32List24 to add.
     */
    private void addAllFieldFixed32List24(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureFieldFixed32List24IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldFixed32List24_);
    }
    /**
     * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
     */
    private void clearFieldFixed32List24() {
      fieldFixed32List24_ = emptyIntList();
    }

    public static final int FIELD_BOOL_LIST_25_FIELD_NUMBER = 25;
    private com.google.protobuf.Internal.BooleanList fieldBoolList25_;
    /**
     * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
     * @return A list containing the fieldBoolList25.
     */
    @java.lang.Override
    public java.util.List<java.lang.Boolean>
        getFieldBoolList25List() {
      return fieldBoolList25_;
    }
    /**
     * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
     * @return The count of fieldBoolList25.
     */
    @java.lang.Override
    public int getFieldBoolList25Count() {
      return fieldBoolList25_.size();
    }
    /**
     * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldBoolList25 at the given index.
     */
    @java.lang.Override
    public boolean getFieldBoolList25(int index) {
      return fieldBoolList25_.getBoolean(index);
    }
    private void ensureFieldBoolList25IsMutable() {
      com.google.protobuf.Internal.BooleanList tmp = fieldBoolList25_;
      if (!tmp.isModifiable()) {
        fieldBoolList25_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The fieldBoolList25 to set.
     */
    private void setFieldBoolList25(
        int index, boolean value) {
      ensureFieldBoolList25IsMutable();
      fieldBoolList25_.setBoolean(index, value);
    }
    /**
     * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
     * @param value The fieldBoolList25 to add.
     */
    private void addFieldBoolList25(boolean value) {
      ensureFieldBoolList25IsMutable();
      fieldBoolList25_.addBoolean(value);
    }
    /**
     * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
     * @param values The fieldBoolList25 to add.
     */
    private void addAllFieldBoolList25(
        java.lang.Iterable<? extends java.lang.Boolean> values) {
      ensureFieldBoolList25IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldBoolList25_);
    }
    /**
     * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
     */
    private void clearFieldBoolList25() {
      fieldBoolList25_ = emptyBooleanList();
    }

    public static final int FIELD_STRING_LIST_26_FIELD_NUMBER = 26;
    private com.google.protobuf.Internal.ProtobufList<java.lang.String> fieldStringList26_;
    /**
     * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
     * @return A list containing the fieldStringList26.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getFieldStringList26List() {
      return fieldStringList26_;
    }
    /**
     * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
     * @return The count of fieldStringList26.
     */
    @java.lang.Override
    public int getFieldStringList26Count() {
      return fieldStringList26_.size();
    }
    /**
     * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldStringList26 at the given index.
     */
    @java.lang.Override
    public java.lang.String getFieldStringList26(int index) {
      return fieldStringList26_.get(index);
    }
    /**
     * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
     * @param index The index of the value to return.
     * @return The bytes of the fieldStringList26 at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFieldStringList26Bytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          fieldStringList26_.get(index));
    }
    private void ensureFieldStringList26IsMutable() {
      com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          fieldStringList26_;  if (!tmp.isModifiable()) {
        fieldStringList26_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The fieldStringList26 to set.
     */
    private void setFieldStringList26(
        int index, java.lang.String value) {
      value.getClass();
  ensureFieldStringList26IsMutable();
      fieldStringList26_.set(index, value);
    }
    /**
     * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
     * @param value The fieldStringList26 to add.
     */
    private void addFieldStringList26(
        java.lang.String value) {
      value.getClass();
  ensureFieldStringList26IsMutable();
      fieldStringList26_.add(value);
    }
    /**
     * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
     * @param values The fieldStringList26 to add.
     */
    private void addAllFieldStringList26(
        java.lang.Iterable<java.lang.String> values) {
      ensureFieldStringList26IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldStringList26_);
    }
    /**
     * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
     */
    private void clearFieldStringList26() {
      fieldStringList26_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
     * @param value The bytes of the fieldStringList26 to add.
     */
    private void addFieldStringList26Bytes(
        com.google.protobuf.ByteString value) {
      ensureFieldStringList26IsMutable();
      fieldStringList26_.add(value.toStringUtf8());
    }

    public static final int FIELD_MESSAGE_LIST_27_FIELD_NUMBER = 27;
    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.testing.Proto2Testing.Proto2Message> fieldMessageList27_;
    /**
     * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMessageList27List() {
      return fieldMessageList27_;
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
     */
    public java.util.List<? extends com.google.protobuf.testing.Proto2Testing.Proto2MessageOrBuilder> 
        getFieldMessageList27OrBuilderList() {
      return fieldMessageList27_;
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
     */
    @java.lang.Override
    public int getFieldMessageList27Count() {
      return fieldMessageList27_.size();
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
     */
    @java.lang.Override
    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMessageList27(int index) {
      return fieldMessageList27_.get(index);
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
     */
    public com.google.protobuf.testing.Proto2Testing.Proto2MessageOrBuilder getFieldMessageList27OrBuilder(
        int index) {
      return fieldMessageList27_.get(index);
    }
    private void ensureFieldMessageList27IsMutable() {
      com.google.protobuf.Internal.ProtobufList<com.google.protobuf.testing.Proto2Testing.Proto2Message> tmp = fieldMessageList27_;
      if (!tmp.isModifiable()) {
        fieldMessageList27_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
     */
    private void setFieldMessageList27(
        int index, com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
      value.getClass();
  ensureFieldMessageList27IsMutable();
      fieldMessageList27_.set(index, value);
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
     */
    private void addFieldMessageList27(com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
      value.getClass();
  ensureFieldMessageList27IsMutable();
      fieldMessageList27_.add(value);
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
     */
    private void addFieldMessageList27(
        int index, com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
      value.getClass();
  ensureFieldMessageList27IsMutable();
      fieldMessageList27_.add(index, value);
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
     */
    private void addAllFieldMessageList27(
        java.lang.Iterable<? extends com.google.protobuf.testing.Proto2Testing.Proto2Message> values) {
      ensureFieldMessageList27IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldMessageList27_);
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
     */
    private void clearFieldMessageList27() {
      fieldMessageList27_ = emptyProtobufList();
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
     */
    private void removeFieldMessageList27(int index) {
      ensureFieldMessageList27IsMutable();
      fieldMessageList27_.remove(index);
    }

    public static final int FIELD_BYTES_LIST_28_FIELD_NUMBER = 28;
    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> fieldBytesList28_;
    /**
     * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
     * @return A list containing the fieldBytesList28.
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.ByteString>
        getFieldBytesList28List() {
      return fieldBytesList28_;
    }
    /**
     * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
     * @return The count of fieldBytesList28.
     */
    @java.lang.Override
    public int getFieldBytesList28Count() {
      return fieldBytesList28_.size();
    }
    /**
     * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldBytesList28 at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getFieldBytesList28(int index) {
      return fieldBytesList28_.get(index);
    }
    private void ensureFieldBytesList28IsMutable() {
      com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> tmp = fieldBytesList28_;
      if (!tmp.isModifiable()) {
        fieldBytesList28_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The fieldBytesList28 to set.
     */
    private void setFieldBytesList28(
        int index, com.google.protobuf.ByteString value) {
      value.getClass();
  ensureFieldBytesList28IsMutable();
      fieldBytesList28_.set(index, value);
    }
    /**
     * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
     * @param value The fieldBytesList28 to add.
     */
    private void addFieldBytesList28(com.google.protobuf.ByteString value) {
      value.getClass();
  ensureFieldBytesList28IsMutable();
      fieldBytesList28_.add(value);
    }
    /**
     * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
     * @param values The fieldBytesList28 to add.
     */
    private void addAllFieldBytesList28(
        java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
      ensureFieldBytesList28IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldBytesList28_);
    }
    /**
     * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
     */
    private void clearFieldBytesList28() {
      fieldBytesList28_ = emptyProtobufList();
    }

    public static final int FIELD_UINT32_LIST_29_FIELD_NUMBER = 29;
    private com.google.protobuf.Internal.IntList fieldUint32List29_;
    /**
     * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
     * @return A list containing the fieldUint32List29.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getFieldUint32List29List() {
      return fieldUint32List29_;
    }
    /**
     * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
     * @return The count of fieldUint32List29.
     */
    @java.lang.Override
    public int getFieldUint32List29Count() {
      return fieldUint32List29_.size();
    }
    /**
     * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldUint32List29 at the given index.
     */
    @java.lang.Override
    public int getFieldUint32List29(int index) {
      return fieldUint32List29_.getInt(index);
    }
    private void ensureFieldUint32List29IsMutable() {
      com.google.protobuf.Internal.IntList tmp = fieldUint32List29_;
      if (!tmp.isModifiable()) {
        fieldUint32List29_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The fieldUint32List29 to set.
     */
    private void setFieldUint32List29(
        int index, int value) {
      ensureFieldUint32List29IsMutable();
      fieldUint32List29_.setInt(index, value);
    }
    /**
     * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
     * @param value The fieldUint32List29 to add.
     */
    private void addFieldUint32List29(int value) {
      ensureFieldUint32List29IsMutable();
      fieldUint32List29_.addInt(value);
    }
    /**
     * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
     * @param values The fieldUint32List29 to add.
     */
    private void addAllFieldUint32List29(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureFieldUint32List29IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldUint32List29_);
    }
    /**
     * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
     */
    private void clearFieldUint32List29() {
      fieldUint32List29_ = emptyIntList();
    }

    public static final int FIELD_ENUM_LIST_30_FIELD_NUMBER = 30;
    private com.google.protobuf.Internal.IntList fieldEnumList30_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> fieldEnumList30_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>() {
              @java.lang.Override
              public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum convert(java.lang.Integer from) {
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum result = com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.forNumber(from);
                return result == null ? com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO : result;
              }
            };
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
     * @return A list containing the fieldEnumList30.
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> getFieldEnumList30List() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>(fieldEnumList30_, fieldEnumList30_converter_);
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
     * @return The count of fieldEnumList30.
     */
    @java.lang.Override
    public int getFieldEnumList30Count() {
      return fieldEnumList30_.size();
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldEnumList30 at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldEnumList30(int index) {
      return fieldEnumList30_converter_.convert(fieldEnumList30_.getInt(index));
    }
    private void ensureFieldEnumList30IsMutable() {
      com.google.protobuf.Internal.IntList tmp = fieldEnumList30_;
      if (!tmp.isModifiable()) {
        fieldEnumList30_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
      }
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The fieldEnumList30 to set.
     */
    private void setFieldEnumList30(
        int index, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
      value.getClass();
  ensureFieldEnumList30IsMutable();
      fieldEnumList30_.setInt(index, value.getNumber());
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
     * @param value The fieldEnumList30 to add.
     */
    private void addFieldEnumList30(com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
      value.getClass();
  ensureFieldEnumList30IsMutable();
      fieldEnumList30_.addInt(value.getNumber());
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
     * @param values The fieldEnumList30 to add.
     */
    private void addAllFieldEnumList30(
        java.lang.Iterable<? extends com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> values) {
      ensureFieldEnumList30IsMutable();
      for (com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value : values) {
        fieldEnumList30_.addInt(value.getNumber());
      }
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
     */
    private void clearFieldEnumList30() {
      fieldEnumList30_ = emptyIntList();
    }

    public static final int FIELD_SFIXED32_LIST_31_FIELD_NUMBER = 31;
    private com.google.protobuf.Internal.IntList fieldSfixed32List31_;
    /**
     * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
     * @return A list containing the fieldSfixed32List31.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getFieldSfixed32List31List() {
      return fieldSfixed32List31_;
    }
    /**
     * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
     * @return The count of fieldSfixed32List31.
     */
    @java.lang.Override
    public int getFieldSfixed32List31Count() {
      return fieldSfixed32List31_.size();
    }
    /**
     * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldSfixed32List31 at the given index.
     */
    @java.lang.Override
    public int getFieldSfixed32List31(int index) {
      return fieldSfixed32List31_.getInt(index);
    }
    private void ensureFieldSfixed32List31IsMutable() {
      com.google.protobuf.Internal.IntList tmp = fieldSfixed32List31_;
      if (!tmp.isModifiable()) {
        fieldSfixed32List31_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The fieldSfixed32List31 to set.
     */
    private void setFieldSfixed32List31(
        int index, int value) {
      ensureFieldSfixed32List31IsMutable();
      fieldSfixed32List31_.setInt(index, value);
    }
    /**
     * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
     * @param value The fieldSfixed32List31 to add.
     */
    private void addFieldSfixed32List31(int value) {
      ensureFieldSfixed32List31IsMutable();
      fieldSfixed32List31_.addInt(value);
    }
    /**
     * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
     * @param values The fieldSfixed32List31 to add.
     */
    private void addAllFieldSfixed32List31(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureFieldSfixed32List31IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldSfixed32List31_);
    }
    /**
     * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
     */
    private void clearFieldSfixed32List31() {
      fieldSfixed32List31_ = emptyIntList();
    }

    public static final int FIELD_SFIXED64_LIST_32_FIELD_NUMBER = 32;
    private com.google.protobuf.Internal.LongList fieldSfixed64List32_;
    /**
     * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
     * @return A list containing the fieldSfixed64List32.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getFieldSfixed64List32List() {
      return fieldSfixed64List32_;
    }
    /**
     * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
     * @return The count of fieldSfixed64List32.
     */
    @java.lang.Override
    public int getFieldSfixed64List32Count() {
      return fieldSfixed64List32_.size();
    }
    /**
     * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldSfixed64List32 at the given index.
     */
    @java.lang.Override
    public long getFieldSfixed64List32(int index) {
      return fieldSfixed64List32_.getLong(index);
    }
    private void ensureFieldSfixed64List32IsMutable() {
      com.google.protobuf.Internal.LongList tmp = fieldSfixed64List32_;
      if (!tmp.isModifiable()) {
        fieldSfixed64List32_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The fieldSfixed64List32 to set.
     */
    private void setFieldSfixed64List32(
        int index, long value) {
      ensureFieldSfixed64List32IsMutable();
      fieldSfixed64List32_.setLong(index, value);
    }
    /**
     * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
     * @param value The fieldSfixed64List32 to add.
     */
    private void addFieldSfixed64List32(long value) {
      ensureFieldSfixed64List32IsMutable();
      fieldSfixed64List32_.addLong(value);
    }
    /**
     * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
     * @param values The fieldSfixed64List32 to add.
     */
    private void addAllFieldSfixed64List32(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureFieldSfixed64List32IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldSfixed64List32_);
    }
    /**
     * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
     */
    private void clearFieldSfixed64List32() {
      fieldSfixed64List32_ = emptyLongList();
    }

    public static final int FIELD_SINT32_LIST_33_FIELD_NUMBER = 33;
    private com.google.protobuf.Internal.IntList fieldSint32List33_;
    /**
     * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
     * @return A list containing the fieldSint32List33.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getFieldSint32List33List() {
      return fieldSint32List33_;
    }
    /**
     * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
     * @return The count of fieldSint32List33.
     */
    @java.lang.Override
    public int getFieldSint32List33Count() {
      return fieldSint32List33_.size();
    }
    /**
     * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldSint32List33 at the given index.
     */
    @java.lang.Override
    public int getFieldSint32List33(int index) {
      return fieldSint32List33_.getInt(index);
    }
    private void ensureFieldSint32List33IsMutable() {
      com.google.protobuf.Internal.IntList tmp = fieldSint32List33_;
      if (!tmp.isModifiable()) {
        fieldSint32List33_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The fieldSint32List33 to set.
     */
    private void setFieldSint32List33(
        int index, int value) {
      ensureFieldSint32List33IsMutable();
      fieldSint32List33_.setInt(index, value);
    }
    /**
     * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
     * @param value The fieldSint32List33 to add.
     */
    private void addFieldSint32List33(int value) {
      ensureFieldSint32List33IsMutable();
      fieldSint32List33_.addInt(value);
    }
    /**
     * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
     * @param values The fieldSint32List33 to add.
     */
    private void addAllFieldSint32List33(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureFieldSint32List33IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldSint32List33_);
    }
    /**
     * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
     */
    private void clearFieldSint32List33() {
      fieldSint32List33_ = emptyIntList();
    }

    public static final int FIELD_SINT64_LIST_34_FIELD_NUMBER = 34;
    private com.google.protobuf.Internal.LongList fieldSint64List34_;
    /**
     * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
     * @return A list containing the fieldSint64List34.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getFieldSint64List34List() {
      return fieldSint64List34_;
    }
    /**
     * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
     * @return The count of fieldSint64List34.
     */
    @java.lang.Override
    public int getFieldSint64List34Count() {
      return fieldSint64List34_.size();
    }
    /**
     * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
     * @param index The index of the element to return.
     * @return The fieldSint64List34 at the given index.
     */
    @java.lang.Override
    public long getFieldSint64List34(int index) {
      return fieldSint64List34_.getLong(index);
    }
    private void ensureFieldSint64List34IsMutable() {
      com.google.protobuf.Internal.LongList tmp = fieldSint64List34_;
      if (!tmp.isModifiable()) {
        fieldSint64List34_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
     * @param index The index to set the value at.
     * @param value The fieldSint64List34 to set.
     */
    private void setFieldSint64List34(
        int index, long value) {
      ensureFieldSint64List34IsMutable();
      fieldSint64List34_.setLong(index, value);
    }
    /**
     * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
     * @param value The fieldSint64List34 to add.
     */
    private void addFieldSint64List34(long value) {
      ensureFieldSint64List34IsMutable();
      fieldSint64List34_.addLong(value);
    }
    /**
     * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
     * @param values The fieldSint64List34 to add.
     */
    private void addAllFieldSint64List34(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureFieldSint64List34IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldSint64List34_);
    }
    /**
     * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
     */
    private void clearFieldSint64List34() {
      fieldSint64List34_ = emptyLongList();
    }

    public static final int FIELD_DOUBLE_LIST_PACKED_35_FIELD_NUMBER = 35;
    private com.google.protobuf.Internal.DoubleList fieldDoubleListPacked35_;
    /**
     * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
     * @return A list containing the fieldDoubleListPacked35.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getFieldDoubleListPacked35List() {
      return fieldDoubleListPacked35_;
    }
    /**
     * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
     * @return The count of fieldDoubleListPacked35.
     */
    @java.lang.Override
    public int getFieldDoubleListPacked35Count() {
      return fieldDoubleListPacked35_.size();
    }
    /**
     * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldDoubleListPacked35 at the given index.
     */
    @java.lang.Override
    public double getFieldDoubleListPacked35(int index) {
      return fieldDoubleListPacked35_.getDouble(index);
    }
    private int fieldDoubleListPacked35MemoizedSerializedSize = -1;
    private void ensureFieldDoubleListPacked35IsMutable() {
      com.google.protobuf.Internal.DoubleList tmp = fieldDoubleListPacked35_;
      if (!tmp.isModifiable()) {
        fieldDoubleListPacked35_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The fieldDoubleListPacked35 to set.
     */
    private void setFieldDoubleListPacked35(
        int index, double value) {
      ensureFieldDoubleListPacked35IsMutable();
      fieldDoubleListPacked35_.setDouble(index, value);
    }
    /**
     * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
     * @param value The fieldDoubleListPacked35 to add.
     */
    private void addFieldDoubleListPacked35(double value) {
      ensureFieldDoubleListPacked35IsMutable();
      fieldDoubleListPacked35_.addDouble(value);
    }
    /**
     * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
     * @param values The fieldDoubleListPacked35 to add.
     */
    private void addAllFieldDoubleListPacked35(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureFieldDoubleListPacked35IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldDoubleListPacked35_);
    }
    /**
     * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
     */
    private void clearFieldDoubleListPacked35() {
      fieldDoubleListPacked35_ = emptyDoubleList();
    }

    public static final int FIELD_FLOAT_LIST_PACKED_36_FIELD_NUMBER = 36;
    private com.google.protobuf.Internal.FloatList fieldFloatListPacked36_;
    /**
     * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
     * @return A list containing the fieldFloatListPacked36.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getFieldFloatListPacked36List() {
      return fieldFloatListPacked36_;
    }
    /**
     * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
     * @return The count of fieldFloatListPacked36.
     */
    @java.lang.Override
    public int getFieldFloatListPacked36Count() {
      return fieldFloatListPacked36_.size();
    }
    /**
     * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldFloatListPacked36 at the given index.
     */
    @java.lang.Override
    public float getFieldFloatListPacked36(int index) {
      return fieldFloatListPacked36_.getFloat(index);
    }
    private int fieldFloatListPacked36MemoizedSerializedSize = -1;
    private void ensureFieldFloatListPacked36IsMutable() {
      com.google.protobuf.Internal.FloatList tmp = fieldFloatListPacked36_;
      if (!tmp.isModifiable()) {
        fieldFloatListPacked36_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The fieldFloatListPacked36 to set.
     */
    private void setFieldFloatListPacked36(
        int index, float value) {
      ensureFieldFloatListPacked36IsMutable();
      fieldFloatListPacked36_.setFloat(index, value);
    }
    /**
     * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
     * @param value The fieldFloatListPacked36 to add.
     */
    private void addFieldFloatListPacked36(float value) {
      ensureFieldFloatListPacked36IsMutable();
      fieldFloatListPacked36_.addFloat(value);
    }
    /**
     * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
     * @param values The fieldFloatListPacked36 to add.
     */
    private void addAllFieldFloatListPacked36(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureFieldFloatListPacked36IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldFloatListPacked36_);
    }
    /**
     * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
     */
    private void clearFieldFloatListPacked36() {
      fieldFloatListPacked36_ = emptyFloatList();
    }

    public static final int FIELD_INT64_LIST_PACKED_37_FIELD_NUMBER = 37;
    private com.google.protobuf.Internal.LongList fieldInt64ListPacked37_;
    /**
     * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
     * @return A list containing the fieldInt64ListPacked37.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getFieldInt64ListPacked37List() {
      return fieldInt64ListPacked37_;
    }
    /**
     * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
     * @return The count of fieldInt64ListPacked37.
     */
    @java.lang.Override
    public int getFieldInt64ListPacked37Count() {
      return fieldInt64ListPacked37_.size();
    }
    /**
     * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldInt64ListPacked37 at the given index.
     */
    @java.lang.Override
    public long getFieldInt64ListPacked37(int index) {
      return fieldInt64ListPacked37_.getLong(index);
    }
    private int fieldInt64ListPacked37MemoizedSerializedSize = -1;
    private void ensureFieldInt64ListPacked37IsMutable() {
      com.google.protobuf.Internal.LongList tmp = fieldInt64ListPacked37_;
      if (!tmp.isModifiable()) {
        fieldInt64ListPacked37_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The fieldInt64ListPacked37 to set.
     */
    private void setFieldInt64ListPacked37(
        int index, long value) {
      ensureFieldInt64ListPacked37IsMutable();
      fieldInt64ListPacked37_.setLong(index, value);
    }
    /**
     * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
     * @param value The fieldInt64ListPacked37 to add.
     */
    private void addFieldInt64ListPacked37(long value) {
      ensureFieldInt64ListPacked37IsMutable();
      fieldInt64ListPacked37_.addLong(value);
    }
    /**
     * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
     * @param values The fieldInt64ListPacked37 to add.
     */
    private void addAllFieldInt64ListPacked37(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureFieldInt64ListPacked37IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldInt64ListPacked37_);
    }
    /**
     * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
     */
    private void clearFieldInt64ListPacked37() {
      fieldInt64ListPacked37_ = emptyLongList();
    }

    public static final int FIELD_UINT64_LIST_PACKED_38_FIELD_NUMBER = 38;
    private com.google.protobuf.Internal.LongList fieldUint64ListPacked38_;
    /**
     * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
     * @return A list containing the fieldUint64ListPacked38.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getFieldUint64ListPacked38List() {
      return fieldUint64ListPacked38_;
    }
    /**
     * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
     * @return The count of fieldUint64ListPacked38.
     */
    @java.lang.Override
    public int getFieldUint64ListPacked38Count() {
      return fieldUint64ListPacked38_.size();
    }
    /**
     * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldUint64ListPacked38 at the given index.
     */
    @java.lang.Override
    public long getFieldUint64ListPacked38(int index) {
      return fieldUint64ListPacked38_.getLong(index);
    }
    private int fieldUint64ListPacked38MemoizedSerializedSize = -1;
    private void ensureFieldUint64ListPacked38IsMutable() {
      com.google.protobuf.Internal.LongList tmp = fieldUint64ListPacked38_;
      if (!tmp.isModifiable()) {
        fieldUint64ListPacked38_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The fieldUint64ListPacked38 to set.
     */
    private void setFieldUint64ListPacked38(
        int index, long value) {
      ensureFieldUint64ListPacked38IsMutable();
      fieldUint64ListPacked38_.setLong(index, value);
    }
    /**
     * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
     * @param value The fieldUint64ListPacked38 to add.
     */
    private void addFieldUint64ListPacked38(long value) {
      ensureFieldUint64ListPacked38IsMutable();
      fieldUint64ListPacked38_.addLong(value);
    }
    /**
     * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
     * @param values The fieldUint64ListPacked38 to add.
     */
    private void addAllFieldUint64ListPacked38(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureFieldUint64ListPacked38IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldUint64ListPacked38_);
    }
    /**
     * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
     */
    private void clearFieldUint64ListPacked38() {
      fieldUint64ListPacked38_ = emptyLongList();
    }

    public static final int FIELD_INT32_LIST_PACKED_39_FIELD_NUMBER = 39;
    private com.google.protobuf.Internal.IntList fieldInt32ListPacked39_;
    /**
     * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
     * @return A list containing the fieldInt32ListPacked39.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getFieldInt32ListPacked39List() {
      return fieldInt32ListPacked39_;
    }
    /**
     * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
     * @return The count of fieldInt32ListPacked39.
     */
    @java.lang.Override
    public int getFieldInt32ListPacked39Count() {
      return fieldInt32ListPacked39_.size();
    }
    /**
     * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldInt32ListPacked39 at the given index.
     */
    @java.lang.Override
    public int getFieldInt32ListPacked39(int index) {
      return fieldInt32ListPacked39_.getInt(index);
    }
    private int fieldInt32ListPacked39MemoizedSerializedSize = -1;
    private void ensureFieldInt32ListPacked39IsMutable() {
      com.google.protobuf.Internal.IntList tmp = fieldInt32ListPacked39_;
      if (!tmp.isModifiable()) {
        fieldInt32ListPacked39_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The fieldInt32ListPacked39 to set.
     */
    private void setFieldInt32ListPacked39(
        int index, int value) {
      ensureFieldInt32ListPacked39IsMutable();
      fieldInt32ListPacked39_.setInt(index, value);
    }
    /**
     * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
     * @param value The fieldInt32ListPacked39 to add.
     */
    private void addFieldInt32ListPacked39(int value) {
      ensureFieldInt32ListPacked39IsMutable();
      fieldInt32ListPacked39_.addInt(value);
    }
    /**
     * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
     * @param values The fieldInt32ListPacked39 to add.
     */
    private void addAllFieldInt32ListPacked39(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureFieldInt32ListPacked39IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldInt32ListPacked39_);
    }
    /**
     * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
     */
    private void clearFieldInt32ListPacked39() {
      fieldInt32ListPacked39_ = emptyIntList();
    }

    public static final int FIELD_FIXED64_LIST_PACKED_40_FIELD_NUMBER = 40;
    private com.google.protobuf.Internal.LongList fieldFixed64ListPacked40_;
    /**
     * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
     * @return A list containing the fieldFixed64ListPacked40.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getFieldFixed64ListPacked40List() {
      return fieldFixed64ListPacked40_;
    }
    /**
     * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
     * @return The count of fieldFixed64ListPacked40.
     */
    @java.lang.Override
    public int getFieldFixed64ListPacked40Count() {
      return fieldFixed64ListPacked40_.size();
    }
    /**
     * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldFixed64ListPacked40 at the given index.
     */
    @java.lang.Override
    public long getFieldFixed64ListPacked40(int index) {
      return fieldFixed64ListPacked40_.getLong(index);
    }
    private int fieldFixed64ListPacked40MemoizedSerializedSize = -1;
    private void ensureFieldFixed64ListPacked40IsMutable() {
      com.google.protobuf.Internal.LongList tmp = fieldFixed64ListPacked40_;
      if (!tmp.isModifiable()) {
        fieldFixed64ListPacked40_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The fieldFixed64ListPacked40 to set.
     */
    private void setFieldFixed64ListPacked40(
        int index, long value) {
      ensureFieldFixed64ListPacked40IsMutable();
      fieldFixed64ListPacked40_.setLong(index, value);
    }
    /**
     * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
     * @param value The fieldFixed64ListPacked40 to add.
     */
    private void addFieldFixed64ListPacked40(long value) {
      ensureFieldFixed64ListPacked40IsMutable();
      fieldFixed64ListPacked40_.addLong(value);
    }
    /**
     * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
     * @param values The fieldFixed64ListPacked40 to add.
     */
    private void addAllFieldFixed64ListPacked40(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureFieldFixed64ListPacked40IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldFixed64ListPacked40_);
    }
    /**
     * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
     */
    private void clearFieldFixed64ListPacked40() {
      fieldFixed64ListPacked40_ = emptyLongList();
    }

    public static final int FIELD_FIXED32_LIST_PACKED_41_FIELD_NUMBER = 41;
    private com.google.protobuf.Internal.IntList fieldFixed32ListPacked41_;
    /**
     * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
     * @return A list containing the fieldFixed32ListPacked41.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getFieldFixed32ListPacked41List() {
      return fieldFixed32ListPacked41_;
    }
    /**
     * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
     * @return The count of fieldFixed32ListPacked41.
     */
    @java.lang.Override
    public int getFieldFixed32ListPacked41Count() {
      return fieldFixed32ListPacked41_.size();
    }
    /**
     * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldFixed32ListPacked41 at the given index.
     */
    @java.lang.Override
    public int getFieldFixed32ListPacked41(int index) {
      return fieldFixed32ListPacked41_.getInt(index);
    }
    private int fieldFixed32ListPacked41MemoizedSerializedSize = -1;
    private void ensureFieldFixed32ListPacked41IsMutable() {
      com.google.protobuf.Internal.IntList tmp = fieldFixed32ListPacked41_;
      if (!tmp.isModifiable()) {
        fieldFixed32ListPacked41_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The fieldFixed32ListPacked41 to set.
     */
    private void setFieldFixed32ListPacked41(
        int index, int value) {
      ensureFieldFixed32ListPacked41IsMutable();
      fieldFixed32ListPacked41_.setInt(index, value);
    }
    /**
     * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
     * @param value The fieldFixed32ListPacked41 to add.
     */
    private void addFieldFixed32ListPacked41(int value) {
      ensureFieldFixed32ListPacked41IsMutable();
      fieldFixed32ListPacked41_.addInt(value);
    }
    /**
     * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
     * @param values The fieldFixed32ListPacked41 to add.
     */
    private void addAllFieldFixed32ListPacked41(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureFieldFixed32ListPacked41IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldFixed32ListPacked41_);
    }
    /**
     * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
     */
    private void clearFieldFixed32ListPacked41() {
      fieldFixed32ListPacked41_ = emptyIntList();
    }

    public static final int FIELD_BOOL_LIST_PACKED_42_FIELD_NUMBER = 42;
    private com.google.protobuf.Internal.BooleanList fieldBoolListPacked42_;
    /**
     * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
     * @return A list containing the fieldBoolListPacked42.
     */
    @java.lang.Override
    public java.util.List<java.lang.Boolean>
        getFieldBoolListPacked42List() {
      return fieldBoolListPacked42_;
    }
    /**
     * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
     * @return The count of fieldBoolListPacked42.
     */
    @java.lang.Override
    public int getFieldBoolListPacked42Count() {
      return fieldBoolListPacked42_.size();
    }
    /**
     * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldBoolListPacked42 at the given index.
     */
    @java.lang.Override
    public boolean getFieldBoolListPacked42(int index) {
      return fieldBoolListPacked42_.getBoolean(index);
    }
    private int fieldBoolListPacked42MemoizedSerializedSize = -1;
    private void ensureFieldBoolListPacked42IsMutable() {
      com.google.protobuf.Internal.BooleanList tmp = fieldBoolListPacked42_;
      if (!tmp.isModifiable()) {
        fieldBoolListPacked42_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The fieldBoolListPacked42 to set.
     */
    private void setFieldBoolListPacked42(
        int index, boolean value) {
      ensureFieldBoolListPacked42IsMutable();
      fieldBoolListPacked42_.setBoolean(index, value);
    }
    /**
     * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
     * @param value The fieldBoolListPacked42 to add.
     */
    private void addFieldBoolListPacked42(boolean value) {
      ensureFieldBoolListPacked42IsMutable();
      fieldBoolListPacked42_.addBoolean(value);
    }
    /**
     * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
     * @param values The fieldBoolListPacked42 to add.
     */
    private void addAllFieldBoolListPacked42(
        java.lang.Iterable<? extends java.lang.Boolean> values) {
      ensureFieldBoolListPacked42IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldBoolListPacked42_);
    }
    /**
     * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
     */
    private void clearFieldBoolListPacked42() {
      fieldBoolListPacked42_ = emptyBooleanList();
    }

    public static final int FIELD_UINT32_LIST_PACKED_43_FIELD_NUMBER = 43;
    private com.google.protobuf.Internal.IntList fieldUint32ListPacked43_;
    /**
     * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
     * @return A list containing the fieldUint32ListPacked43.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getFieldUint32ListPacked43List() {
      return fieldUint32ListPacked43_;
    }
    /**
     * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
     * @return The count of fieldUint32ListPacked43.
     */
    @java.lang.Override
    public int getFieldUint32ListPacked43Count() {
      return fieldUint32ListPacked43_.size();
    }
    /**
     * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldUint32ListPacked43 at the given index.
     */
    @java.lang.Override
    public int getFieldUint32ListPacked43(int index) {
      return fieldUint32ListPacked43_.getInt(index);
    }
    private int fieldUint32ListPacked43MemoizedSerializedSize = -1;
    private void ensureFieldUint32ListPacked43IsMutable() {
      com.google.protobuf.Internal.IntList tmp = fieldUint32ListPacked43_;
      if (!tmp.isModifiable()) {
        fieldUint32ListPacked43_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The fieldUint32ListPacked43 to set.
     */
    private void setFieldUint32ListPacked43(
        int index, int value) {
      ensureFieldUint32ListPacked43IsMutable();
      fieldUint32ListPacked43_.setInt(index, value);
    }
    /**
     * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
     * @param value The fieldUint32ListPacked43 to add.
     */
    private void addFieldUint32ListPacked43(int value) {
      ensureFieldUint32ListPacked43IsMutable();
      fieldUint32ListPacked43_.addInt(value);
    }
    /**
     * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
     * @param values The fieldUint32ListPacked43 to add.
     */
    private void addAllFieldUint32ListPacked43(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureFieldUint32ListPacked43IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldUint32ListPacked43_);
    }
    /**
     * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
     */
    private void clearFieldUint32ListPacked43() {
      fieldUint32ListPacked43_ = emptyIntList();
    }

    public static final int FIELD_ENUM_LIST_PACKED_44_FIELD_NUMBER = 44;
    private com.google.protobuf.Internal.IntList fieldEnumListPacked44_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> fieldEnumListPacked44_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>() {
              @java.lang.Override
              public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum convert(java.lang.Integer from) {
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum result = com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.forNumber(from);
                return result == null ? com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO : result;
              }
            };
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
     * @return A list containing the fieldEnumListPacked44.
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> getFieldEnumListPacked44List() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>(fieldEnumListPacked44_, fieldEnumListPacked44_converter_);
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
     * @return The count of fieldEnumListPacked44.
     */
    @java.lang.Override
    public int getFieldEnumListPacked44Count() {
      return fieldEnumListPacked44_.size();
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldEnumListPacked44 at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldEnumListPacked44(int index) {
      return fieldEnumListPacked44_converter_.convert(fieldEnumListPacked44_.getInt(index));
    }
    private int fieldEnumListPacked44MemoizedSerializedSize;
    private void ensureFieldEnumListPacked44IsMutable() {
      com.google.protobuf.Internal.IntList tmp = fieldEnumListPacked44_;
      if (!tmp.isModifiable()) {
        fieldEnumListPacked44_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
      }
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The fieldEnumListPacked44 to set.
     */
    private void setFieldEnumListPacked44(
        int index, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
      value.getClass();
  ensureFieldEnumListPacked44IsMutable();
      fieldEnumListPacked44_.setInt(index, value.getNumber());
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
     * @param value The fieldEnumListPacked44 to add.
     */
    private void addFieldEnumListPacked44(com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
      value.getClass();
  ensureFieldEnumListPacked44IsMutable();
      fieldEnumListPacked44_.addInt(value.getNumber());
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
     * @param values The fieldEnumListPacked44 to add.
     */
    private void addAllFieldEnumListPacked44(
        java.lang.Iterable<? extends com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> values) {
      ensureFieldEnumListPacked44IsMutable();
      for (com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value : values) {
        fieldEnumListPacked44_.addInt(value.getNumber());
      }
    }
    /**
     * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
     */
    private void clearFieldEnumListPacked44() {
      fieldEnumListPacked44_ = emptyIntList();
    }

    public static final int FIELD_SFIXED32_LIST_PACKED_45_FIELD_NUMBER = 45;
    private com.google.protobuf.Internal.IntList fieldSfixed32ListPacked45_;
    /**
     * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
     * @return A list containing the fieldSfixed32ListPacked45.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getFieldSfixed32ListPacked45List() {
      return fieldSfixed32ListPacked45_;
    }
    /**
     * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
     * @return The count of fieldSfixed32ListPacked45.
     */
    @java.lang.Override
    public int getFieldSfixed32ListPacked45Count() {
      return fieldSfixed32ListPacked45_.size();
    }
    /**
     * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldSfixed32ListPacked45 at the given index.
     */
    @java.lang.Override
    public int getFieldSfixed32ListPacked45(int index) {
      return fieldSfixed32ListPacked45_.getInt(index);
    }
    private int fieldSfixed32ListPacked45MemoizedSerializedSize = -1;
    private void ensureFieldSfixed32ListPacked45IsMutable() {
      com.google.protobuf.Internal.IntList tmp = fieldSfixed32ListPacked45_;
      if (!tmp.isModifiable()) {
        fieldSfixed32ListPacked45_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The fieldSfixed32ListPacked45 to set.
     */
    private void setFieldSfixed32ListPacked45(
        int index, int value) {
      ensureFieldSfixed32ListPacked45IsMutable();
      fieldSfixed32ListPacked45_.setInt(index, value);
    }
    /**
     * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
     * @param value The fieldSfixed32ListPacked45 to add.
     */
    private void addFieldSfixed32ListPacked45(int value) {
      ensureFieldSfixed32ListPacked45IsMutable();
      fieldSfixed32ListPacked45_.addInt(value);
    }
    /**
     * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
     * @param values The fieldSfixed32ListPacked45 to add.
     */
    private void addAllFieldSfixed32ListPacked45(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureFieldSfixed32ListPacked45IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldSfixed32ListPacked45_);
    }
    /**
     * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
     */
    private void clearFieldSfixed32ListPacked45() {
      fieldSfixed32ListPacked45_ = emptyIntList();
    }

    public static final int FIELD_SFIXED64_LIST_PACKED_46_FIELD_NUMBER = 46;
    private com.google.protobuf.Internal.LongList fieldSfixed64ListPacked46_;
    /**
     * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
     * @return A list containing the fieldSfixed64ListPacked46.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getFieldSfixed64ListPacked46List() {
      return fieldSfixed64ListPacked46_;
    }
    /**
     * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
     * @return The count of fieldSfixed64ListPacked46.
     */
    @java.lang.Override
    public int getFieldSfixed64ListPacked46Count() {
      return fieldSfixed64ListPacked46_.size();
    }
    /**
     * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldSfixed64ListPacked46 at the given index.
     */
    @java.lang.Override
    public long getFieldSfixed64ListPacked46(int index) {
      return fieldSfixed64ListPacked46_.getLong(index);
    }
    private int fieldSfixed64ListPacked46MemoizedSerializedSize = -1;
    private void ensureFieldSfixed64ListPacked46IsMutable() {
      com.google.protobuf.Internal.LongList tmp = fieldSfixed64ListPacked46_;
      if (!tmp.isModifiable()) {
        fieldSfixed64ListPacked46_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The fieldSfixed64ListPacked46 to set.
     */
    private void setFieldSfixed64ListPacked46(
        int index, long value) {
      ensureFieldSfixed64ListPacked46IsMutable();
      fieldSfixed64ListPacked46_.setLong(index, value);
    }
    /**
     * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
     * @param value The fieldSfixed64ListPacked46 to add.
     */
    private void addFieldSfixed64ListPacked46(long value) {
      ensureFieldSfixed64ListPacked46IsMutable();
      fieldSfixed64ListPacked46_.addLong(value);
    }
    /**
     * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
     * @param values The fieldSfixed64ListPacked46 to add.
     */
    private void addAllFieldSfixed64ListPacked46(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureFieldSfixed64ListPacked46IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldSfixed64ListPacked46_);
    }
    /**
     * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
     */
    private void clearFieldSfixed64ListPacked46() {
      fieldSfixed64ListPacked46_ = emptyLongList();
    }

    public static final int FIELD_SINT32_LIST_PACKED_47_FIELD_NUMBER = 47;
    private com.google.protobuf.Internal.IntList fieldSint32ListPacked47_;
    /**
     * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
     * @return A list containing the fieldSint32ListPacked47.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getFieldSint32ListPacked47List() {
      return fieldSint32ListPacked47_;
    }
    /**
     * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
     * @return The count of fieldSint32ListPacked47.
     */
    @java.lang.Override
    public int getFieldSint32ListPacked47Count() {
      return fieldSint32ListPacked47_.size();
    }
    /**
     * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldSint32ListPacked47 at the given index.
     */
    @java.lang.Override
    public int getFieldSint32ListPacked47(int index) {
      return fieldSint32ListPacked47_.getInt(index);
    }
    private int fieldSint32ListPacked47MemoizedSerializedSize = -1;
    private void ensureFieldSint32ListPacked47IsMutable() {
      com.google.protobuf.Internal.IntList tmp = fieldSint32ListPacked47_;
      if (!tmp.isModifiable()) {
        fieldSint32ListPacked47_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The fieldSint32ListPacked47 to set.
     */
    private void setFieldSint32ListPacked47(
        int index, int value) {
      ensureFieldSint32ListPacked47IsMutable();
      fieldSint32ListPacked47_.setInt(index, value);
    }
    /**
     * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
     * @param value The fieldSint32ListPacked47 to add.
     */
    private void addFieldSint32ListPacked47(int value) {
      ensureFieldSint32ListPacked47IsMutable();
      fieldSint32ListPacked47_.addInt(value);
    }
    /**
     * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
     * @param values The fieldSint32ListPacked47 to add.
     */
    private void addAllFieldSint32ListPacked47(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureFieldSint32ListPacked47IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldSint32ListPacked47_);
    }
    /**
     * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
     */
    private void clearFieldSint32ListPacked47() {
      fieldSint32ListPacked47_ = emptyIntList();
    }

    public static final int FIELD_SINT64_LIST_PACKED_48_FIELD_NUMBER = 48;
    private com.google.protobuf.Internal.LongList fieldSint64ListPacked48_;
    /**
     * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
     * @return A list containing the fieldSint64ListPacked48.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getFieldSint64ListPacked48List() {
      return fieldSint64ListPacked48_;
    }
    /**
     * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
     * @return The count of fieldSint64ListPacked48.
     */
    @java.lang.Override
    public int getFieldSint64ListPacked48Count() {
      return fieldSint64ListPacked48_.size();
    }
    /**
     * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The fieldSint64ListPacked48 at the given index.
     */
    @java.lang.Override
    public long getFieldSint64ListPacked48(int index) {
      return fieldSint64ListPacked48_.getLong(index);
    }
    private int fieldSint64ListPacked48MemoizedSerializedSize = -1;
    private void ensureFieldSint64ListPacked48IsMutable() {
      com.google.protobuf.Internal.LongList tmp = fieldSint64ListPacked48_;
      if (!tmp.isModifiable()) {
        fieldSint64ListPacked48_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The fieldSint64ListPacked48 to set.
     */
    private void setFieldSint64ListPacked48(
        int index, long value) {
      ensureFieldSint64ListPacked48IsMutable();
      fieldSint64ListPacked48_.setLong(index, value);
    }
    /**
     * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
     * @param value The fieldSint64ListPacked48 to add.
     */
    private void addFieldSint64ListPacked48(long value) {
      ensureFieldSint64ListPacked48IsMutable();
      fieldSint64ListPacked48_.addLong(value);
    }
    /**
     * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
     * @param values The fieldSint64ListPacked48 to add.
     */
    private void addAllFieldSint64ListPacked48(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureFieldSint64ListPacked48IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldSint64ListPacked48_);
    }
    /**
     * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
     */
    private void clearFieldSint64ListPacked48() {
      fieldSint64ListPacked48_ = emptyLongList();
    }

    public static final int FIELDGROUP49_FIELD_NUMBER = 49;
    private com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 fieldGroup49_;
    /**
     * <code>optional group FieldGroup49 = 49 { ... }</code>
     */
    @java.lang.Override
    public boolean hasFieldGroup49() {
      return ((bitField0_ & 0x00020000) != 0);
    }
    /**
     * <code>optional group FieldGroup49 = 49 { ... }</code>
     */
    @java.lang.Override
    public com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 getFieldGroup49() {
      return fieldGroup49_ == null ? com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49.getDefaultInstance() : fieldGroup49_;
    }
    /**
     * <code>optional group FieldGroup49 = 49 { ... }</code>
     */
    private void setFieldGroup49(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 value) {
      value.getClass();
  fieldGroup49_ = value;
      bitField0_ |= 0x00020000;
      }
    /**
     * <code>optional group FieldGroup49 = 49 { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeFieldGroup49(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 value) {
      value.getClass();
  if (fieldGroup49_ != null &&
          fieldGroup49_ != com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49.getDefaultInstance()) {
        fieldGroup49_ =
          com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49.newBuilder(fieldGroup49_).mergeFrom(value).buildPartial();
      } else {
        fieldGroup49_ = value;
      }
      bitField0_ |= 0x00020000;
    }
    /**
     * <code>optional group FieldGroup49 = 49 { ... }</code>
     */
    private void clearFieldGroup49() {  fieldGroup49_ = null;
      bitField0_ = (bitField0_ & ~0x00020000);
    }

    public static final int FIELDGROUPLIST51_FIELD_NUMBER = 51;
    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51> fieldGroupList51_;
    /**
     * <code>repeated group FieldGroupList51 = 51 { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51> getFieldGroupList51List() {
      return fieldGroupList51_;
    }
    /**
     * <code>repeated group FieldGroupList51 = 51 { ... }</code>
     */
    public java.util.List<? extends com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51OrBuilder> 
        getFieldGroupList51OrBuilderList() {
      return fieldGroupList51_;
    }
    /**
     * <code>repeated group FieldGroupList51 = 51 { ... }</code>
     */
    @java.lang.Override
    public int getFieldGroupList51Count() {
      return fieldGroupList51_.size();
    }
    /**
     * <code>repeated group FieldGroupList51 = 51 { ... }</code>
     */
    @java.lang.Override
    public com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 getFieldGroupList51(int index) {
      return fieldGroupList51_.get(index);
    }
    /**
     * <code>repeated group FieldGroupList51 = 51 { ... }</code>
     */
    public com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51OrBuilder getFieldGroupList51OrBuilder(
        int index) {
      return fieldGroupList51_.get(index);
    }
    private void ensureFieldGroupList51IsMutable() {
      com.google.protobuf.Internal.ProtobufList<com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51> tmp = fieldGroupList51_;
      if (!tmp.isModifiable()) {
        fieldGroupList51_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated group FieldGroupList51 = 51 { ... }</code>
     */
    private void setFieldGroupList51(
        int index, com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 value) {
      value.getClass();
  ensureFieldGroupList51IsMutable();
      fieldGroupList51_.set(index, value);
    }
    /**
     * <code>repeated group FieldGroupList51 = 51 { ... }</code>
     */
    private void addFieldGroupList51(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 value) {
      value.getClass();
  ensureFieldGroupList51IsMutable();
      fieldGroupList51_.add(value);
    }
    /**
     * <code>repeated group FieldGroupList51 = 51 { ... }</code>
     */
    private void addFieldGroupList51(
        int index, com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 value) {
      value.getClass();
  ensureFieldGroupList51IsMutable();
      fieldGroupList51_.add(index, value);
    }
    /**
     * <code>repeated group FieldGroupList51 = 51 { ... }</code>
     */
    private void addAllFieldGroupList51(
        java.lang.Iterable<? extends com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51> values) {
      ensureFieldGroupList51IsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fieldGroupList51_);
    }
    /**
     * <code>repeated group FieldGroupList51 = 51 { ... }</code>
     */
    private void clearFieldGroupList51() {
      fieldGroupList51_ = emptyProtobufList();
    }
    /**
     * <code>repeated group FieldGroupList51 = 51 { ... }</code>
     */
    private void removeFieldGroupList51(int index) {
      ensureFieldGroupList51IsMutable();
      fieldGroupList51_.remove(index);
    }

    public static final int FIELD_DOUBLE_53_FIELD_NUMBER = 53;
    /**
     * <code>double field_double_53 = 53;</code>
     * @return Whether the fieldDouble53 field is set.
     */
    @java.lang.Override
    public boolean hasFieldDouble53() {
      return testOneofCase_ == 53;
    }
    /**
     * <code>double field_double_53 = 53;</code>
     * @return The fieldDouble53.
     */
    @java.lang.Override
    public double getFieldDouble53() {
      if (testOneofCase_ == 53) {
        return (java.lang.Double) testOneof_;
      }
      return 0D;
    }
    /**
     * <code>double field_double_53 = 53;</code>
     * @param value The fieldDouble53 to set.
     */
    private void setFieldDouble53(double value) {
      testOneofCase_ = 53;
      testOneof_ = value;
    }
    /**
     * <code>double field_double_53 = 53;</code>
     */
    private void clearFieldDouble53() {
      if (testOneofCase_ == 53) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }

    public static final int FIELD_FLOAT_54_FIELD_NUMBER = 54;
    /**
     * <code>float field_float_54 = 54;</code>
     * @return Whether the fieldFloat54 field is set.
     */
    @java.lang.Override
    public boolean hasFieldFloat54() {
      return testOneofCase_ == 54;
    }
    /**
     * <code>float field_float_54 = 54;</code>
     * @return The fieldFloat54.
     */
    @java.lang.Override
    public float getFieldFloat54() {
      if (testOneofCase_ == 54) {
        return (java.lang.Float) testOneof_;
      }
      return 0F;
    }
    /**
     * <code>float field_float_54 = 54;</code>
     * @param value The fieldFloat54 to set.
     */
    private void setFieldFloat54(float value) {
      testOneofCase_ = 54;
      testOneof_ = value;
    }
    /**
     * <code>float field_float_54 = 54;</code>
     */
    private void clearFieldFloat54() {
      if (testOneofCase_ == 54) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }

    public static final int FIELD_INT64_55_FIELD_NUMBER = 55;
    /**
     * <code>int64 field_int64_55 = 55;</code>
     * @return Whether the fieldInt6455 field is set.
     */
    @java.lang.Override
    public boolean hasFieldInt6455() {
      return testOneofCase_ == 55;
    }
    /**
     * <code>int64 field_int64_55 = 55;</code>
     * @return The fieldInt6455.
     */
    @java.lang.Override
    public long getFieldInt6455() {
      if (testOneofCase_ == 55) {
        return (java.lang.Long) testOneof_;
      }
      return 0L;
    }
    /**
     * <code>int64 field_int64_55 = 55;</code>
     * @param value The fieldInt6455 to set.
     */
    private void setFieldInt6455(long value) {
      testOneofCase_ = 55;
      testOneof_ = value;
    }
    /**
     * <code>int64 field_int64_55 = 55;</code>
     */
    private void clearFieldInt6455() {
      if (testOneofCase_ == 55) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }

    public static final int FIELD_UINT64_56_FIELD_NUMBER = 56;
    /**
     * <code>uint64 field_uint64_56 = 56;</code>
     * @return Whether the fieldUint6456 field is set.
     */
    @java.lang.Override
    public boolean hasFieldUint6456() {
      return testOneofCase_ == 56;
    }
    /**
     * <code>uint64 field_uint64_56 = 56;</code>
     * @return The fieldUint6456.
     */
    @java.lang.Override
    public long getFieldUint6456() {
      if (testOneofCase_ == 56) {
        return (java.lang.Long) testOneof_;
      }
      return 0L;
    }
    /**
     * <code>uint64 field_uint64_56 = 56;</code>
     * @param value The fieldUint6456 to set.
     */
    private void setFieldUint6456(long value) {
      testOneofCase_ = 56;
      testOneof_ = value;
    }
    /**
     * <code>uint64 field_uint64_56 = 56;</code>
     */
    private void clearFieldUint6456() {
      if (testOneofCase_ == 56) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }

    public static final int FIELD_INT32_57_FIELD_NUMBER = 57;
    /**
     * <code>int32 field_int32_57 = 57;</code>
     * @return Whether the fieldInt3257 field is set.
     */
    @java.lang.Override
    public boolean hasFieldInt3257() {
      return testOneofCase_ == 57;
    }
    /**
     * <code>int32 field_int32_57 = 57;</code>
     * @return The fieldInt3257.
     */
    @java.lang.Override
    public int getFieldInt3257() {
      if (testOneofCase_ == 57) {
        return (java.lang.Integer) testOneof_;
      }
      return 0;
    }
    /**
     * <code>int32 field_int32_57 = 57;</code>
     * @param value The fieldInt3257 to set.
     */
    private void setFieldInt3257(int value) {
      testOneofCase_ = 57;
      testOneof_ = value;
    }
    /**
     * <code>int32 field_int32_57 = 57;</code>
     */
    private void clearFieldInt3257() {
      if (testOneofCase_ == 57) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }

    public static final int FIELD_FIXED64_58_FIELD_NUMBER = 58;
    /**
     * <code>fixed64 field_fixed64_58 = 58;</code>
     * @return Whether the fieldFixed6458 field is set.
     */
    @java.lang.Override
    public boolean hasFieldFixed6458() {
      return testOneofCase_ == 58;
    }
    /**
     * <code>fixed64 field_fixed64_58 = 58;</code>
     * @return The fieldFixed6458.
     */
    @java.lang.Override
    public long getFieldFixed6458() {
      if (testOneofCase_ == 58) {
        return (java.lang.Long) testOneof_;
      }
      return 0L;
    }
    /**
     * <code>fixed64 field_fixed64_58 = 58;</code>
     * @param value The fieldFixed6458 to set.
     */
    private void setFieldFixed6458(long value) {
      testOneofCase_ = 58;
      testOneof_ = value;
    }
    /**
     * <code>fixed64 field_fixed64_58 = 58;</code>
     */
    private void clearFieldFixed6458() {
      if (testOneofCase_ == 58) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }

    public static final int FIELD_FIXED32_59_FIELD_NUMBER = 59;
    /**
     * <code>fixed32 field_fixed32_59 = 59;</code>
     * @return Whether the fieldFixed3259 field is set.
     */
    @java.lang.Override
    public boolean hasFieldFixed3259() {
      return testOneofCase_ == 59;
    }
    /**
     * <code>fixed32 field_fixed32_59 = 59;</code>
     * @return The fieldFixed3259.
     */
    @java.lang.Override
    public int getFieldFixed3259() {
      if (testOneofCase_ == 59) {
        return (java.lang.Integer) testOneof_;
      }
      return 0;
    }
    /**
     * <code>fixed32 field_fixed32_59 = 59;</code>
     * @param value The fieldFixed3259 to set.
     */
    private void setFieldFixed3259(int value) {
      testOneofCase_ = 59;
      testOneof_ = value;
    }
    /**
     * <code>fixed32 field_fixed32_59 = 59;</code>
     */
    private void clearFieldFixed3259() {
      if (testOneofCase_ == 59) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }

    public static final int FIELD_BOOL_60_FIELD_NUMBER = 60;
    /**
     * <code>bool field_bool_60 = 60;</code>
     * @return Whether the fieldBool60 field is set.
     */
    @java.lang.Override
    public boolean hasFieldBool60() {
      return testOneofCase_ == 60;
    }
    /**
     * <code>bool field_bool_60 = 60;</code>
     * @return The fieldBool60.
     */
    @java.lang.Override
    public boolean getFieldBool60() {
      if (testOneofCase_ == 60) {
        return (java.lang.Boolean) testOneof_;
      }
      return false;
    }
    /**
     * <code>bool field_bool_60 = 60;</code>
     * @param value The fieldBool60 to set.
     */
    private void setFieldBool60(boolean value) {
      testOneofCase_ = 60;
      testOneof_ = value;
    }
    /**
     * <code>bool field_bool_60 = 60;</code>
     */
    private void clearFieldBool60() {
      if (testOneofCase_ == 60) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }

    public static final int FIELD_STRING_61_FIELD_NUMBER = 61;
    /**
     * <code>string field_string_61 = 61;</code>
     * @return Whether the fieldString61 field is set.
     */
    @java.lang.Override
    public boolean hasFieldString61() {
      return testOneofCase_ == 61;
    }
    /**
     * <code>string field_string_61 = 61;</code>
     * @return The fieldString61.
     */
    @java.lang.Override
    public java.lang.String getFieldString61() {
      java.lang.String ref = "";
      if (testOneofCase_ == 61) {
        ref = (java.lang.String) testOneof_;
      }
      return ref;
    }
    /**
     * <code>string field_string_61 = 61;</code>
     * @return The bytes for fieldString61.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFieldString61Bytes() {
      java.lang.String ref = "";
      if (testOneofCase_ == 61) {
        ref = (java.lang.String) testOneof_;
      }
      return com.google.protobuf.ByteString.copyFromUtf8(ref);
    }
    /**
     * <code>string field_string_61 = 61;</code>
     * @param value The fieldString61 to set.
     */
    private void setFieldString61(
        java.lang.String value) {
      value.getClass();
  testOneofCase_ = 61;
      testOneof_ = value;
    }
    /**
     * <code>string field_string_61 = 61;</code>
     */
    private void clearFieldString61() {
      if (testOneofCase_ == 61) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }
    /**
     * <code>string field_string_61 = 61;</code>
     * @param value The bytes for fieldString61 to set.
     */
    private void setFieldString61Bytes(
        com.google.protobuf.ByteString value) {
      testOneof_ = value.toStringUtf8();
      testOneofCase_ = 61;
    }

    public static final int FIELD_MESSAGE_62_FIELD_NUMBER = 62;
    /**
     * <code>.protobuf.experimental.Proto2Message field_message_62 = 62;</code>
     */
    @java.lang.Override
    public boolean hasFieldMessage62() {
      return testOneofCase_ == 62;
    }
    /**
     * <code>.protobuf.experimental.Proto2Message field_message_62 = 62;</code>
     */
    @java.lang.Override
    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMessage62() {
      if (testOneofCase_ == 62) {
         return (com.google.protobuf.testing.Proto2Testing.Proto2Message) testOneof_;
      }
      return com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance();
    }
    /**
     * <code>.protobuf.experimental.Proto2Message field_message_62 = 62;</code>
     */
    private void setFieldMessage62(com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
      value.getClass();
  testOneof_ = value;
      testOneofCase_ = 62;
    }
    /**
     * <code>.protobuf.experimental.Proto2Message field_message_62 = 62;</code>
     */
    private void mergeFieldMessage62(com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
      value.getClass();
  if (testOneofCase_ == 62 &&
          testOneof_ != com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance()) {
        testOneof_ = com.google.protobuf.testing.Proto2Testing.Proto2Message.newBuilder((com.google.protobuf.testing.Proto2Testing.Proto2Message) testOneof_)
            .mergeFrom(value).buildPartial();
      } else {
        testOneof_ = value;
      }
      testOneofCase_ = 62;
    }
    /**
     * <code>.protobuf.experimental.Proto2Message field_message_62 = 62;</code>
     */
    private void clearFieldMessage62() {
      if (testOneofCase_ == 62) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }

    public static final int FIELD_BYTES_63_FIELD_NUMBER = 63;
    /**
     * <code>bytes field_bytes_63 = 63;</code>
     * @return Whether the fieldBytes63 field is set.
     */
    @java.lang.Override
    public boolean hasFieldBytes63() {
      return testOneofCase_ == 63;
    }
    /**
     * <code>bytes field_bytes_63 = 63;</code>
     * @return The fieldBytes63.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getFieldBytes63() {
      if (testOneofCase_ == 63) {
        return (com.google.protobuf.ByteString) testOneof_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * <code>bytes field_bytes_63 = 63;</code>
     * @param value The fieldBytes63 to set.
     */
    private void setFieldBytes63(com.google.protobuf.ByteString value) {
      value.getClass();
  testOneofCase_ = 63;
      testOneof_ = value;
    }
    /**
     * <code>bytes field_bytes_63 = 63;</code>
     */
    private void clearFieldBytes63() {
      if (testOneofCase_ == 63) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }

    public static final int FIELD_UINT32_64_FIELD_NUMBER = 64;
    /**
     * <code>uint32 field_uint32_64 = 64;</code>
     * @return Whether the fieldUint3264 field is set.
     */
    @java.lang.Override
    public boolean hasFieldUint3264() {
      return testOneofCase_ == 64;
    }
    /**
     * <code>uint32 field_uint32_64 = 64;</code>
     * @return The fieldUint3264.
     */
    @java.lang.Override
    public int getFieldUint3264() {
      if (testOneofCase_ == 64) {
        return (java.lang.Integer) testOneof_;
      }
      return 0;
    }
    /**
     * <code>uint32 field_uint32_64 = 64;</code>
     * @param value The fieldUint3264 to set.
     */
    private void setFieldUint3264(int value) {
      testOneofCase_ = 64;
      testOneof_ = value;
    }
    /**
     * <code>uint32 field_uint32_64 = 64;</code>
     */
    private void clearFieldUint3264() {
      if (testOneofCase_ == 64) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }

    public static final int FIELD_SFIXED32_65_FIELD_NUMBER = 65;
    /**
     * <code>sfixed32 field_sfixed32_65 = 65;</code>
     * @return Whether the fieldSfixed3265 field is set.
     */
    @java.lang.Override
    public boolean hasFieldSfixed3265() {
      return testOneofCase_ == 65;
    }
    /**
     * <code>sfixed32 field_sfixed32_65 = 65;</code>
     * @return The fieldSfixed3265.
     */
    @java.lang.Override
    public int getFieldSfixed3265() {
      if (testOneofCase_ == 65) {
        return (java.lang.Integer) testOneof_;
      }
      return 0;
    }
    /**
     * <code>sfixed32 field_sfixed32_65 = 65;</code>
     * @param value The fieldSfixed3265 to set.
     */
    private void setFieldSfixed3265(int value) {
      testOneofCase_ = 65;
      testOneof_ = value;
    }
    /**
     * <code>sfixed32 field_sfixed32_65 = 65;</code>
     */
    private void clearFieldSfixed3265() {
      if (testOneofCase_ == 65) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }

    public static final int FIELD_SFIXED64_66_FIELD_NUMBER = 66;
    /**
     * <code>sfixed64 field_sfixed64_66 = 66;</code>
     * @return Whether the fieldSfixed6466 field is set.
     */
    @java.lang.Override
    public boolean hasFieldSfixed6466() {
      return testOneofCase_ == 66;
    }
    /**
     * <code>sfixed64 field_sfixed64_66 = 66;</code>
     * @return The fieldSfixed6466.
     */
    @java.lang.Override
    public long getFieldSfixed6466() {
      if (testOneofCase_ == 66) {
        return (java.lang.Long) testOneof_;
      }
      return 0L;
    }
    /**
     * <code>sfixed64 field_sfixed64_66 = 66;</code>
     * @param value The fieldSfixed6466 to set.
     */
    private void setFieldSfixed6466(long value) {
      testOneofCase_ = 66;
      testOneof_ = value;
    }
    /**
     * <code>sfixed64 field_sfixed64_66 = 66;</code>
     */
    private void clearFieldSfixed6466() {
      if (testOneofCase_ == 66) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }

    public static final int FIELD_SINT32_67_FIELD_NUMBER = 67;
    /**
     * <code>sint32 field_sint32_67 = 67;</code>
     * @return Whether the fieldSint3267 field is set.
     */
    @java.lang.Override
    public boolean hasFieldSint3267() {
      return testOneofCase_ == 67;
    }
    /**
     * <code>sint32 field_sint32_67 = 67;</code>
     * @return The fieldSint3267.
     */
    @java.lang.Override
    public int getFieldSint3267() {
      if (testOneofCase_ == 67) {
        return (java.lang.Integer) testOneof_;
      }
      return 0;
    }
    /**
     * <code>sint32 field_sint32_67 = 67;</code>
     * @param value The fieldSint3267 to set.
     */
    private void setFieldSint3267(int value) {
      testOneofCase_ = 67;
      testOneof_ = value;
    }
    /**
     * <code>sint32 field_sint32_67 = 67;</code>
     */
    private void clearFieldSint3267() {
      if (testOneofCase_ == 67) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }

    public static final int FIELD_SINT64_68_FIELD_NUMBER = 68;
    /**
     * <code>sint64 field_sint64_68 = 68;</code>
     * @return Whether the fieldSint6468 field is set.
     */
    @java.lang.Override
    public boolean hasFieldSint6468() {
      return testOneofCase_ == 68;
    }
    /**
     * <code>sint64 field_sint64_68 = 68;</code>
     * @return The fieldSint6468.
     */
    @java.lang.Override
    public long getFieldSint6468() {
      if (testOneofCase_ == 68) {
        return (java.lang.Long) testOneof_;
      }
      return 0L;
    }
    /**
     * <code>sint64 field_sint64_68 = 68;</code>
     * @param value The fieldSint6468 to set.
     */
    private void setFieldSint6468(long value) {
      testOneofCase_ = 68;
      testOneof_ = value;
    }
    /**
     * <code>sint64 field_sint64_68 = 68;</code>
     */
    private void clearFieldSint6468() {
      if (testOneofCase_ == 68) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }

    public static final int FIELDGROUP69_FIELD_NUMBER = 69;
    /**
     * <code>group FieldGroup69 = 69 { ... }</code>
     */
    @java.lang.Override
    public boolean hasFieldGroup69() {
      return testOneofCase_ == 69;
    }
    /**
     * <code>group FieldGroup69 = 69 { ... }</code>
     */
    @java.lang.Override
    public com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 getFieldGroup69() {
      if (testOneofCase_ == 69) {
         return (com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69) testOneof_;
      }
      return com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69.getDefaultInstance();
    }
    /**
     * <code>group FieldGroup69 = 69 { ... }</code>
     */
    private void setFieldGroup69(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 value) {
      value.getClass();
  testOneof_ = value;
      testOneofCase_ = 69;
    }
    /**
     * <code>group FieldGroup69 = 69 { ... }</code>
     */
    private void mergeFieldGroup69(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 value) {
      value.getClass();
  if (testOneofCase_ == 69 &&
          testOneof_ != com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69.getDefaultInstance()) {
        testOneof_ = com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69.newBuilder((com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69) testOneof_)
            .mergeFrom(value).buildPartial();
      } else {
        testOneof_ = value;
      }
      testOneofCase_ = 69;
    }
    /**
     * <code>group FieldGroup69 = 69 { ... }</code>
     */
    private void clearFieldGroup69() {
      if (testOneofCase_ == 69) {
        testOneofCase_ = 0;
        testOneof_ = null;
      }
    }

    public static final int FIELD_REQUIRED_DOUBLE_71_FIELD_NUMBER = 71;
    private double fieldRequiredDouble71_;
    /**
     * <code>required double field_required_double_71 = 71;</code>
     * @return Whether the fieldRequiredDouble71 field is set.
     */
    @java.lang.Override
    public boolean hasFieldRequiredDouble71() {
      return ((bitField1_ & 0x00000008) != 0);
    }
    /**
     * <code>required double field_required_double_71 = 71;</code>
     * @return The fieldRequiredDouble71.
     */
    @java.lang.Override
    public double getFieldRequiredDouble71() {
      return fieldRequiredDouble71_;
    }
    /**
     * <code>required double field_required_double_71 = 71;</code>
     * @param value The fieldRequiredDouble71 to set.
     */
    private void setFieldRequiredDouble71(double value) {
      bitField1_ |= 0x00000008;
      fieldRequiredDouble71_ = value;
    }
    /**
     * <code>required double field_required_double_71 = 71;</code>
     */
    private void clearFieldRequiredDouble71() {
      bitField1_ = (bitField1_ & ~0x00000008);
      fieldRequiredDouble71_ = 0D;
    }

    public static final int FIELD_REQUIRED_FLOAT_72_FIELD_NUMBER = 72;
    private float fieldRequiredFloat72_;
    /**
     * <code>required float field_required_float_72 = 72;</code>
     * @return Whether the fieldRequiredFloat72 field is set.
     */
    @java.lang.Override
    public boolean hasFieldRequiredFloat72() {
      return ((bitField1_ & 0x00000010) != 0);
    }
    /**
     * <code>required float field_required_float_72 = 72;</code>
     * @return The fieldRequiredFloat72.
     */
    @java.lang.Override
    public float getFieldRequiredFloat72() {
      return fieldRequiredFloat72_;
    }
    /**
     * <code>required float field_required_float_72 = 72;</code>
     * @param value The fieldRequiredFloat72 to set.
     */
    private void setFieldRequiredFloat72(float value) {
      bitField1_ |= 0x00000010;
      fieldRequiredFloat72_ = value;
    }
    /**
     * <code>required float field_required_float_72 = 72;</code>
     */
    private void clearFieldRequiredFloat72() {
      bitField1_ = (bitField1_ & ~0x00000010);
      fieldRequiredFloat72_ = 0F;
    }

    public static final int FIELD_REQUIRED_INT64_73_FIELD_NUMBER = 73;
    private long fieldRequiredInt6473_;
    /**
     * <code>required int64 field_required_int64_73 = 73;</code>
     * @return Whether the fieldRequiredInt6473 field is set.
     */
    @java.lang.Override
    public boolean hasFieldRequiredInt6473() {
      return ((bitField1_ & 0x00000020) != 0);
    }
    /**
     * <code>required int64 field_required_int64_73 = 73;</code>
     * @return The fieldRequiredInt6473.
     */
    @java.lang.Override
    public long getFieldRequiredInt6473() {
      return fieldRequiredInt6473_;
    }
    /**
     * <code>required int64 field_required_int64_73 = 73;</code>
     * @param value The fieldRequiredInt6473 to set.
     */
    private void setFieldRequiredInt6473(long value) {
      bitField1_ |= 0x00000020;
      fieldRequiredInt6473_ = value;
    }
    /**
     * <code>required int64 field_required_int64_73 = 73;</code>
     */
    private void clearFieldRequiredInt6473() {
      bitField1_ = (bitField1_ & ~0x00000020);
      fieldRequiredInt6473_ = 0L;
    }

    public static final int FIELD_REQUIRED_UINT64_74_FIELD_NUMBER = 74;
    private long fieldRequiredUint6474_;
    /**
     * <code>required uint64 field_required_uint64_74 = 74;</code>
     * @return Whether the fieldRequiredUint6474 field is set.
     */
    @java.lang.Override
    public boolean hasFieldRequiredUint6474() {
      return ((bitField1_ & 0x00000040) != 0);
    }
    /**
     * <code>required uint64 field_required_uint64_74 = 74;</code>
     * @return The fieldRequiredUint6474.
     */
    @java.lang.Override
    public long getFieldRequiredUint6474() {
      return fieldRequiredUint6474_;
    }
    /**
     * <code>required uint64 field_required_uint64_74 = 74;</code>
     * @param value The fieldRequiredUint6474 to set.
     */
    private void setFieldRequiredUint6474(long value) {
      bitField1_ |= 0x00000040;
      fieldRequiredUint6474_ = value;
    }
    /**
     * <code>required uint64 field_required_uint64_74 = 74;</code>
     */
    private void clearFieldRequiredUint6474() {
      bitField1_ = (bitField1_ & ~0x00000040);
      fieldRequiredUint6474_ = 0L;
    }

    public static final int FIELD_REQUIRED_INT32_75_FIELD_NUMBER = 75;
    private int fieldRequiredInt3275_;
    /**
     * <code>required int32 field_required_int32_75 = 75;</code>
     * @return Whether the fieldRequiredInt3275 field is set.
     */
    @java.lang.Override
    public boolean hasFieldRequiredInt3275() {
      return ((bitField1_ & 0x00000080) != 0);
    }
    /**
     * <code>required int32 field_required_int32_75 = 75;</code>
     * @return The fieldRequiredInt3275.
     */
    @java.lang.Override
    public int getFieldRequiredInt3275() {
      return fieldRequiredInt3275_;
    }
    /**
     * <code>required int32 field_required_int32_75 = 75;</code>
     * @param value The fieldRequiredInt3275 to set.
     */
    private void setFieldRequiredInt3275(int value) {
      bitField1_ |= 0x00000080;
      fieldRequiredInt3275_ = value;
    }
    /**
     * <code>required int32 field_required_int32_75 = 75;</code>
     */
    private void clearFieldRequiredInt3275() {
      bitField1_ = (bitField1_ & ~0x00000080);
      fieldRequiredInt3275_ = 0;
    }

    public static final int FIELD_REQUIRED_FIXED64_76_FIELD_NUMBER = 76;
    private long fieldRequiredFixed6476_;
    /**
     * <code>required fixed64 field_required_fixed64_76 = 76;</code>
     * @return Whether the fieldRequiredFixed6476 field is set.
     */
    @java.lang.Override
    public boolean hasFieldRequiredFixed6476() {
      return ((bitField1_ & 0x00000100) != 0);
    }
    /**
     * <code>required fixed64 field_required_fixed64_76 = 76;</code>
     * @return The fieldRequiredFixed6476.
     */
    @java.lang.Override
    public long getFieldRequiredFixed6476() {
      return fieldRequiredFixed6476_;
    }
    /**
     * <code>required fixed64 field_required_fixed64_76 = 76;</code>
     * @param value The fieldRequiredFixed6476 to set.
     */
    private void setFieldRequiredFixed6476(long value) {
      bitField1_ |= 0x00000100;
      fieldRequiredFixed6476_ = value;
    }
    /**
     * <code>required fixed64 field_required_fixed64_76 = 76;</code>
     */
    private void clearFieldRequiredFixed6476() {
      bitField1_ = (bitField1_ & ~0x00000100);
      fieldRequiredFixed6476_ = 0L;
    }

    public static final int FIELD_REQUIRED_FIXED32_77_FIELD_NUMBER = 77;
    private int fieldRequiredFixed3277_;
    /**
     * <code>required fixed32 field_required_fixed32_77 = 77;</code>
     * @return Whether the fieldRequiredFixed3277 field is set.
     */
    @java.lang.Override
    public boolean hasFieldRequiredFixed3277() {
      return ((bitField1_ & 0x00000200) != 0);
    }
    /**
     * <code>required fixed32 field_required_fixed32_77 = 77;</code>
     * @return The fieldRequiredFixed3277.
     */
    @java.lang.Override
    public int getFieldRequiredFixed3277() {
      return fieldRequiredFixed3277_;
    }
    /**
     * <code>required fixed32 field_required_fixed32_77 = 77;</code>
     * @param value The fieldRequiredFixed3277 to set.
     */
    private void setFieldRequiredFixed3277(int value) {
      bitField1_ |= 0x00000200;
      fieldRequiredFixed3277_ = value;
    }
    /**
     * <code>required fixed32 field_required_fixed32_77 = 77;</code>
     */
    private void clearFieldRequiredFixed3277() {
      bitField1_ = (bitField1_ & ~0x00000200);
      fieldRequiredFixed3277_ = 0;
    }

    public static final int FIELD_REQUIRED_BOOL_78_FIELD_NUMBER = 78;
    private boolean fieldRequiredBool78_;
    /**
     * <code>required bool field_required_bool_78 = 78;</code>
     * @return Whether the fieldRequiredBool78 field is set.
     */
    @java.lang.Override
    public boolean hasFieldRequiredBool78() {
      return ((bitField1_ & 0x00000400) != 0);
    }
    /**
     * <code>required bool field_required_bool_78 = 78;</code>
     * @return The fieldRequiredBool78.
     */
    @java.lang.Override
    public boolean getFieldRequiredBool78() {
      return fieldRequiredBool78_;
    }
    /**
     * <code>required bool field_required_bool_78 = 78;</code>
     * @param value The fieldRequiredBool78 to set.
     */
    private void setFieldRequiredBool78(boolean value) {
      bitField1_ |= 0x00000400;
      fieldRequiredBool78_ = value;
    }
    /**
     * <code>required bool field_required_bool_78 = 78;</code>
     */
    private void clearFieldRequiredBool78() {
      bitField1_ = (bitField1_ & ~0x00000400);
      fieldRequiredBool78_ = false;
    }

    public static final int FIELD_REQUIRED_STRING_79_FIELD_NUMBER = 79;
    private java.lang.String fieldRequiredString79_;
    /**
     * <code>required string field_required_string_79 = 79;</code>
     * @return Whether the fieldRequiredString79 field is set.
     */
    @java.lang.Override
    public boolean hasFieldRequiredString79() {
      return ((bitField1_ & 0x00000800) != 0);
    }
    /**
     * <code>required string field_required_string_79 = 79;</code>
     * @return The fieldRequiredString79.
     */
    @java.lang.Override
    public java.lang.String getFieldRequiredString79() {
      return fieldRequiredString79_;
    }
    /**
     * <code>required string field_required_string_79 = 79;</code>
     * @return The bytes for fieldRequiredString79.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFieldRequiredString79Bytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(fieldRequiredString79_);
    }
    /**
     * <code>required string field_required_string_79 = 79;</code>
     * @param value The fieldRequiredString79 to set.
     */
    private void setFieldRequiredString79(
        java.lang.String value) {
      value.getClass();
  bitField1_ |= 0x00000800;
      fieldRequiredString79_ = value;
    }
    /**
     * <code>required string field_required_string_79 = 79;</code>
     */
    private void clearFieldRequiredString79() {
      bitField1_ = (bitField1_ & ~0x00000800);
      fieldRequiredString79_ = getDefaultInstance().getFieldRequiredString79();
    }
    /**
     * <code>required string field_required_string_79 = 79;</code>
     * @param value The bytes for fieldRequiredString79 to set.
     */
    private void setFieldRequiredString79Bytes(
        com.google.protobuf.ByteString value) {
      fieldRequiredString79_ = value.toStringUtf8();
      bitField1_ |= 0x00000800;
    }

    public static final int FIELD_REQUIRED_MESSAGE_80_FIELD_NUMBER = 80;
    private com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage fieldRequiredMessage80_;
    /**
     * <code>required .protobuf.experimental.Proto2Message.RequiredNestedMessage field_required_message_80 = 80;</code>
     */
    @java.lang.Override
    public boolean hasFieldRequiredMessage80() {
      return ((bitField1_ & 0x00001000) != 0);
    }
    /**
     * <code>required .protobuf.experimental.Proto2Message.RequiredNestedMessage field_required_message_80 = 80;</code>
     */
    @java.lang.Override
    public com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage getFieldRequiredMessage80() {
      return fieldRequiredMessage80_ == null ? com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage.getDefaultInstance() : fieldRequiredMessage80_;
    }
    /**
     * <code>required .protobuf.experimental.Proto2Message.RequiredNestedMessage field_required_message_80 = 80;</code>
     */
    private void setFieldRequiredMessage80(com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage value) {
      value.getClass();
  fieldRequiredMessage80_ = value;
      bitField1_ |= 0x00001000;
      }
    /**
     * <code>required .protobuf.experimental.Proto2Message.RequiredNestedMessage field_required_message_80 = 80;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeFieldRequiredMessage80(com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage value) {
      value.getClass();
  if (fieldRequiredMessage80_ != null &&
          fieldRequiredMessage80_ != com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage.getDefaultInstance()) {
        fieldRequiredMessage80_ =
          com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage.newBuilder(fieldRequiredMessage80_).mergeFrom(value).buildPartial();
      } else {
        fieldRequiredMessage80_ = value;
      }
      bitField1_ |= 0x00001000;
    }
    /**
     * <code>required .protobuf.experimental.Proto2Message.RequiredNestedMessage field_required_message_80 = 80;</code>
     */
    private void clearFieldRequiredMessage80() {  fieldRequiredMessage80_ = null;
      bitField1_ = (bitField1_ & ~0x00001000);
    }

    public static final int FIELD_REQUIRED_BYTES_81_FIELD_NUMBER = 81;
    private com.google.protobuf.ByteString fieldRequiredBytes81_;
    /**
     * <code>required bytes field_required_bytes_81 = 81;</code>
     * @return Whether the fieldRequiredBytes81 field is set.
     */
    @java.lang.Override
    public boolean hasFieldRequiredBytes81() {
      return ((bitField1_ & 0x00002000) != 0);
    }
    /**
     * <code>required bytes field_required_bytes_81 = 81;</code>
     * @return The fieldRequiredBytes81.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getFieldRequiredBytes81() {
      return fieldRequiredBytes81_;
    }
    /**
     * <code>required bytes field_required_bytes_81 = 81;</code>
     * @param value The fieldRequiredBytes81 to set.
     */
    private void setFieldRequiredBytes81(com.google.protobuf.ByteString value) {
      value.getClass();
  bitField1_ |= 0x00002000;
      fieldRequiredBytes81_ = value;
    }
    /**
     * <code>required bytes field_required_bytes_81 = 81;</code>
     */
    private void clearFieldRequiredBytes81() {
      bitField1_ = (bitField1_ & ~0x00002000);
      fieldRequiredBytes81_ = getDefaultInstance().getFieldRequiredBytes81();
    }

    public static final int FIELD_REQUIRED_UINT32_82_FIELD_NUMBER = 82;
    private int fieldRequiredUint3282_;
    /**
     * <code>required uint32 field_required_uint32_82 = 82;</code>
     * @return Whether the fieldRequiredUint3282 field is set.
     */
    @java.lang.Override
    public boolean hasFieldRequiredUint3282() {
      return ((bitField1_ & 0x00004000) != 0);
    }
    /**
     * <code>required uint32 field_required_uint32_82 = 82;</code>
     * @return The fieldRequiredUint3282.
     */
    @java.lang.Override
    public int getFieldRequiredUint3282() {
      return fieldRequiredUint3282_;
    }
    /**
     * <code>required uint32 field_required_uint32_82 = 82;</code>
     * @param value The fieldRequiredUint3282 to set.
     */
    private void setFieldRequiredUint3282(int value) {
      bitField1_ |= 0x00004000;
      fieldRequiredUint3282_ = value;
    }
    /**
     * <code>required uint32 field_required_uint32_82 = 82;</code>
     */
    private void clearFieldRequiredUint3282() {
      bitField1_ = (bitField1_ & ~0x00004000);
      fieldRequiredUint3282_ = 0;
    }

    public static final int FIELD_REQUIRED_ENUM_83_FIELD_NUMBER = 83;
    private int fieldRequiredEnum83_;
    /**
     * <code>required .protobuf.experimental.Proto2Message.TestEnum field_required_enum_83 = 83;</code>
     * @return Whether the fieldRequiredEnum83 field is set.
     */
    @java.lang.Override
    public boolean hasFieldRequiredEnum83() {
      return ((bitField1_ & 0x00008000) != 0);
    }
    /**
     * <code>required .protobuf.experimental.Proto2Message.TestEnum field_required_enum_83 = 83;</code>
     * @return The fieldRequiredEnum83.
     */
    @java.lang.Override
    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldRequiredEnum83() {
      com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum result = com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.forNumber(fieldRequiredEnum83_);
      return result == null ? com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO : result;
    }
    /**
     * <code>required .protobuf.experimental.Proto2Message.TestEnum field_required_enum_83 = 83;</code>
     * @param value The fieldRequiredEnum83 to set.
     */
    private void setFieldRequiredEnum83(com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
      fieldRequiredEnum83_ = value.getNumber();
      bitField1_ |= 0x00008000;
    }
    /**
     * <code>required .protobuf.experimental.Proto2Message.TestEnum field_required_enum_83 = 83;</code>
     */
    private void clearFieldRequiredEnum83() {
      bitField1_ = (bitField1_ & ~0x00008000);
      fieldRequiredEnum83_ = 0;
    }

    public static final int FIELD_REQUIRED_SFIXED32_84_FIELD_NUMBER = 84;
    private int fieldRequiredSfixed3284_;
    /**
     * <code>required sfixed32 field_required_sfixed32_84 = 84;</code>
     * @return Whether the fieldRequiredSfixed3284 field is set.
     */
    @java.lang.Override
    public boolean hasFieldRequiredSfixed3284() {
      return ((bitField1_ & 0x00010000) != 0);
    }
    /**
     * <code>required sfixed32 field_required_sfixed32_84 = 84;</code>
     * @return The fieldRequiredSfixed3284.
     */
    @java.lang.Override
    public int getFieldRequiredSfixed3284() {
      return fieldRequiredSfixed3284_;
    }
    /**
     * <code>required sfixed32 field_required_sfixed32_84 = 84;</code>
     * @param value The fieldRequiredSfixed3284 to set.
     */
    private void setFieldRequiredSfixed3284(int value) {
      bitField1_ |= 0x00010000;
      fieldRequiredSfixed3284_ = value;
    }
    /**
     * <code>required sfixed32 field_required_sfixed32_84 = 84;</code>
     */
    private void clearFieldRequiredSfixed3284() {
      bitField1_ = (bitField1_ & ~0x00010000);
      fieldRequiredSfixed3284_ = 0;
    }

    public static final int FIELD_REQUIRED_SFIXED64_85_FIELD_NUMBER = 85;
    private long fieldRequiredSfixed6485_;
    /**
     * <code>required sfixed64 field_required_sfixed64_85 = 85;</code>
     * @return Whether the fieldRequiredSfixed6485 field is set.
     */
    @java.lang.Override
    public boolean hasFieldRequiredSfixed6485() {
      return ((bitField1_ & 0x00020000) != 0);
    }
    /**
     * <code>required sfixed64 field_required_sfixed64_85 = 85;</code>
     * @return The fieldRequiredSfixed6485.
     */
    @java.lang.Override
    public long getFieldRequiredSfixed6485() {
      return fieldRequiredSfixed6485_;
    }
    /**
     * <code>required sfixed64 field_required_sfixed64_85 = 85;</code>
     * @param value The fieldRequiredSfixed6485 to set.
     */
    private void setFieldRequiredSfixed6485(long value) {
      bitField1_ |= 0x00020000;
      fieldRequiredSfixed6485_ = value;
    }
    /**
     * <code>required sfixed64 field_required_sfixed64_85 = 85;</code>
     */
    private void clearFieldRequiredSfixed6485() {
      bitField1_ = (bitField1_ & ~0x00020000);
      fieldRequiredSfixed6485_ = 0L;
    }

    public static final int FIELD_REQUIRED_SINT32_86_FIELD_NUMBER = 86;
    private int fieldRequiredSint3286_;
    /**
     * <code>required sint32 field_required_sint32_86 = 86;</code>
     * @return Whether the fieldRequiredSint3286 field is set.
     */
    @java.lang.Override
    public boolean hasFieldRequiredSint3286() {
      return ((bitField1_ & 0x00040000) != 0);
    }
    /**
     * <code>required sint32 field_required_sint32_86 = 86;</code>
     * @return The fieldRequiredSint3286.
     */
    @java.lang.Override
    public int getFieldRequiredSint3286() {
      return fieldRequiredSint3286_;
    }
    /**
     * <code>required sint32 field_required_sint32_86 = 86;</code>
     * @param value The fieldRequiredSint3286 to set.
     */
    private void setFieldRequiredSint3286(int value) {
      bitField1_ |= 0x00040000;
      fieldRequiredSint3286_ = value;
    }
    /**
     * <code>required sint32 field_required_sint32_86 = 86;</code>
     */
    private void clearFieldRequiredSint3286() {
      bitField1_ = (bitField1_ & ~0x00040000);
      fieldRequiredSint3286_ = 0;
    }

    public static final int FIELD_REQUIRED_SINT64_87_FIELD_NUMBER = 87;
    private long fieldRequiredSint6487_;
    /**
     * <code>required sint64 field_required_sint64_87 = 87;</code>
     * @return Whether the fieldRequiredSint6487 field is set.
     */
    @java.lang.Override
    public boolean hasFieldRequiredSint6487() {
      return ((bitField1_ & 0x00080000) != 0);
    }
    /**
     * <code>required sint64 field_required_sint64_87 = 87;</code>
     * @return The fieldRequiredSint6487.
     */
    @java.lang.Override
    public long getFieldRequiredSint6487() {
      return fieldRequiredSint6487_;
    }
    /**
     * <code>required sint64 field_required_sint64_87 = 87;</code>
     * @param value The fieldRequiredSint6487 to set.
     */
    private void setFieldRequiredSint6487(long value) {
      bitField1_ |= 0x00080000;
      fieldRequiredSint6487_ = value;
    }
    /**
     * <code>required sint64 field_required_sint64_87 = 87;</code>
     */
    private void clearFieldRequiredSint6487() {
      bitField1_ = (bitField1_ & ~0x00080000);
      fieldRequiredSint6487_ = 0L;
    }

    public static final int FIELDREQUIREDGROUP88_FIELD_NUMBER = 88;
    private com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 fieldRequiredGroup88_;
    /**
     * <code>required group FieldRequiredGroup88 = 88 { ... }</code>
     */
    @java.lang.Override
    public boolean hasFieldRequiredGroup88() {
      return ((bitField1_ & 0x00100000) != 0);
    }
    /**
     * <code>required group FieldRequiredGroup88 = 88 { ... }</code>
     */
    @java.lang.Override
    public com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 getFieldRequiredGroup88() {
      return fieldRequiredGroup88_ == null ? com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88.getDefaultInstance() : fieldRequiredGroup88_;
    }
    /**
     * <code>required group FieldRequiredGroup88 = 88 { ... }</code>
     */
    private void setFieldRequiredGroup88(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 value) {
      value.getClass();
  fieldRequiredGroup88_ = value;
      bitField1_ |= 0x00100000;
      }
    /**
     * <code>required group FieldRequiredGroup88 = 88 { ... }</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeFieldRequiredGroup88(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 value) {
      value.getClass();
  if (fieldRequiredGroup88_ != null &&
          fieldRequiredGroup88_ != com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88.getDefaultInstance()) {
        fieldRequiredGroup88_ =
          com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88.newBuilder(fieldRequiredGroup88_).mergeFrom(value).buildPartial();
      } else {
        fieldRequiredGroup88_ = value;
      }
      bitField1_ |= 0x00100000;
    }
    /**
     * <code>required group FieldRequiredGroup88 = 88 { ... }</code>
     */
    private void clearFieldRequiredGroup88() {  fieldRequiredGroup88_ = null;
      bitField1_ = (bitField1_ & ~0x00100000);
    }

    public static com.google.protobuf.testing.Proto2Testing.Proto2Message parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Message parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Message parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Message parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Message parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Message parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Message parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Message parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Message parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Message parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Message parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Message parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.protobuf.testing.Proto2Testing.Proto2Message prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code protobuf.experimental.Proto2Message}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.protobuf.testing.Proto2Testing.Proto2Message, Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf.experimental.Proto2Message)
        com.google.protobuf.testing.Proto2Testing.Proto2MessageOrBuilder {
      // Construct using com.google.protobuf.testing.Proto2Testing.Proto2Message.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @java.lang.Override
      public TestOneofCase
          getTestOneofCase() {
        return instance.getTestOneofCase();
      }

      public Builder clearTestOneof() {
        copyOnWrite();
        instance.clearTestOneof();
        return this;
      }


      /**
       * <code>optional double field_double_1 = 1;</code>
       * @return Whether the fieldDouble1 field is set.
       */
      @java.lang.Override
      public boolean hasFieldDouble1() {
        return instance.hasFieldDouble1();
      }
      /**
       * <code>optional double field_double_1 = 1;</code>
       * @return The fieldDouble1.
       */
      @java.lang.Override
      public double getFieldDouble1() {
        return instance.getFieldDouble1();
      }
      /**
       * <code>optional double field_double_1 = 1;</code>
       * @param value The fieldDouble1 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldDouble1(double value) {
        copyOnWrite();
        instance.setFieldDouble1(value);
        return this;
      }
      /**
       * <code>optional double field_double_1 = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldDouble1() {
        copyOnWrite();
        instance.clearFieldDouble1();
        return this;
      }

      /**
       * <code>optional float field_float_2 = 2;</code>
       * @return Whether the fieldFloat2 field is set.
       */
      @java.lang.Override
      public boolean hasFieldFloat2() {
        return instance.hasFieldFloat2();
      }
      /**
       * <code>optional float field_float_2 = 2;</code>
       * @return The fieldFloat2.
       */
      @java.lang.Override
      public float getFieldFloat2() {
        return instance.getFieldFloat2();
      }
      /**
       * <code>optional float field_float_2 = 2;</code>
       * @param value The fieldFloat2 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldFloat2(float value) {
        copyOnWrite();
        instance.setFieldFloat2(value);
        return this;
      }
      /**
       * <code>optional float field_float_2 = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldFloat2() {
        copyOnWrite();
        instance.clearFieldFloat2();
        return this;
      }

      /**
       * <code>optional int64 field_int64_3 = 3;</code>
       * @return Whether the fieldInt643 field is set.
       */
      @java.lang.Override
      public boolean hasFieldInt643() {
        return instance.hasFieldInt643();
      }
      /**
       * <code>optional int64 field_int64_3 = 3;</code>
       * @return The fieldInt643.
       */
      @java.lang.Override
      public long getFieldInt643() {
        return instance.getFieldInt643();
      }
      /**
       * <code>optional int64 field_int64_3 = 3;</code>
       * @param value The fieldInt643 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldInt643(long value) {
        copyOnWrite();
        instance.setFieldInt643(value);
        return this;
      }
      /**
       * <code>optional int64 field_int64_3 = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldInt643() {
        copyOnWrite();
        instance.clearFieldInt643();
        return this;
      }

      /**
       * <code>optional uint64 field_uint64_4 = 4;</code>
       * @return Whether the fieldUint644 field is set.
       */
      @java.lang.Override
      public boolean hasFieldUint644() {
        return instance.hasFieldUint644();
      }
      /**
       * <code>optional uint64 field_uint64_4 = 4;</code>
       * @return The fieldUint644.
       */
      @java.lang.Override
      public long getFieldUint644() {
        return instance.getFieldUint644();
      }
      /**
       * <code>optional uint64 field_uint64_4 = 4;</code>
       * @param value The fieldUint644 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldUint644(long value) {
        copyOnWrite();
        instance.setFieldUint644(value);
        return this;
      }
      /**
       * <code>optional uint64 field_uint64_4 = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldUint644() {
        copyOnWrite();
        instance.clearFieldUint644();
        return this;
      }

      /**
       * <code>optional int32 field_int32_5 = 5;</code>
       * @return Whether the fieldInt325 field is set.
       */
      @java.lang.Override
      public boolean hasFieldInt325() {
        return instance.hasFieldInt325();
      }
      /**
       * <code>optional int32 field_int32_5 = 5;</code>
       * @return The fieldInt325.
       */
      @java.lang.Override
      public int getFieldInt325() {
        return instance.getFieldInt325();
      }
      /**
       * <code>optional int32 field_int32_5 = 5;</code>
       * @param value The fieldInt325 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldInt325(int value) {
        copyOnWrite();
        instance.setFieldInt325(value);
        return this;
      }
      /**
       * <code>optional int32 field_int32_5 = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldInt325() {
        copyOnWrite();
        instance.clearFieldInt325();
        return this;
      }

      /**
       * <code>optional fixed64 field_fixed64_6 = 6;</code>
       * @return Whether the fieldFixed646 field is set.
       */
      @java.lang.Override
      public boolean hasFieldFixed646() {
        return instance.hasFieldFixed646();
      }
      /**
       * <code>optional fixed64 field_fixed64_6 = 6;</code>
       * @return The fieldFixed646.
       */
      @java.lang.Override
      public long getFieldFixed646() {
        return instance.getFieldFixed646();
      }
      /**
       * <code>optional fixed64 field_fixed64_6 = 6;</code>
       * @param value The fieldFixed646 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldFixed646(long value) {
        copyOnWrite();
        instance.setFieldFixed646(value);
        return this;
      }
      /**
       * <code>optional fixed64 field_fixed64_6 = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldFixed646() {
        copyOnWrite();
        instance.clearFieldFixed646();
        return this;
      }

      /**
       * <code>optional fixed32 field_fixed32_7 = 7;</code>
       * @return Whether the fieldFixed327 field is set.
       */
      @java.lang.Override
      public boolean hasFieldFixed327() {
        return instance.hasFieldFixed327();
      }
      /**
       * <code>optional fixed32 field_fixed32_7 = 7;</code>
       * @return The fieldFixed327.
       */
      @java.lang.Override
      public int getFieldFixed327() {
        return instance.getFieldFixed327();
      }
      /**
       * <code>optional fixed32 field_fixed32_7 = 7;</code>
       * @param value The fieldFixed327 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldFixed327(int value) {
        copyOnWrite();
        instance.setFieldFixed327(value);
        return this;
      }
      /**
       * <code>optional fixed32 field_fixed32_7 = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldFixed327() {
        copyOnWrite();
        instance.clearFieldFixed327();
        return this;
      }

      /**
       * <code>optional bool field_bool_8 = 8;</code>
       * @return Whether the fieldBool8 field is set.
       */
      @java.lang.Override
      public boolean hasFieldBool8() {
        return instance.hasFieldBool8();
      }
      /**
       * <code>optional bool field_bool_8 = 8;</code>
       * @return The fieldBool8.
       */
      @java.lang.Override
      public boolean getFieldBool8() {
        return instance.getFieldBool8();
      }
      /**
       * <code>optional bool field_bool_8 = 8;</code>
       * @param value The fieldBool8 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldBool8(boolean value) {
        copyOnWrite();
        instance.setFieldBool8(value);
        return this;
      }
      /**
       * <code>optional bool field_bool_8 = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldBool8() {
        copyOnWrite();
        instance.clearFieldBool8();
        return this;
      }

      /**
       * <code>optional string field_string_9 = 9;</code>
       * @return Whether the fieldString9 field is set.
       */
      @java.lang.Override
      public boolean hasFieldString9() {
        return instance.hasFieldString9();
      }
      /**
       * <code>optional string field_string_9 = 9;</code>
       * @return The fieldString9.
       */
      @java.lang.Override
      public java.lang.String getFieldString9() {
        return instance.getFieldString9();
      }
      /**
       * <code>optional string field_string_9 = 9;</code>
       * @return The bytes for fieldString9.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getFieldString9Bytes() {
        return instance.getFieldString9Bytes();
      }
      /**
       * <code>optional string field_string_9 = 9;</code>
       * @param value The fieldString9 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldString9(
          java.lang.String value) {
        copyOnWrite();
        instance.setFieldString9(value);
        return this;
      }
      /**
       * <code>optional string field_string_9 = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldString9() {
        copyOnWrite();
        instance.clearFieldString9();
        return this;
      }
      /**
       * <code>optional string field_string_9 = 9;</code>
       * @param value The bytes for fieldString9 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldString9Bytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFieldString9Bytes(value);
        return this;
      }

      /**
       * <code>optional .protobuf.experimental.Proto2Message field_message_10 = 10;</code>
       */
      @java.lang.Override
      public boolean hasFieldMessage10() {
        return instance.hasFieldMessage10();
      }
      /**
       * <code>optional .protobuf.experimental.Proto2Message field_message_10 = 10;</code>
       */
      @java.lang.Override
      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMessage10() {
        return instance.getFieldMessage10();
      }
      /**
       * <code>optional .protobuf.experimental.Proto2Message field_message_10 = 10;</code>
       */
      public Builder setFieldMessage10(com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        copyOnWrite();
        instance.setFieldMessage10(value);
        return this;
        }
      /**
       * <code>optional .protobuf.experimental.Proto2Message field_message_10 = 10;</code>
       */
      public Builder setFieldMessage10(
          com.google.protobuf.testing.Proto2Testing.Proto2Message.Builder builderForValue) {
        copyOnWrite();
        instance.setFieldMessage10(builderForValue.build());
        return this;
      }
      /**
       * <code>optional .protobuf.experimental.Proto2Message field_message_10 = 10;</code>
       */
      public Builder mergeFieldMessage10(com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        copyOnWrite();
        instance.mergeFieldMessage10(value);
        return this;
      }
      /**
       * <code>optional .protobuf.experimental.Proto2Message field_message_10 = 10;</code>
       */
      public Builder clearFieldMessage10() {  copyOnWrite();
        instance.clearFieldMessage10();
        return this;
      }

      /**
       * <code>optional bytes field_bytes_11 = 11;</code>
       * @return Whether the fieldBytes11 field is set.
       */
      @java.lang.Override
      public boolean hasFieldBytes11() {
        return instance.hasFieldBytes11();
      }
      /**
       * <code>optional bytes field_bytes_11 = 11;</code>
       * @return The fieldBytes11.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getFieldBytes11() {
        return instance.getFieldBytes11();
      }
      /**
       * <code>optional bytes field_bytes_11 = 11;</code>
       * @param value The fieldBytes11 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldBytes11(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFieldBytes11(value);
        return this;
      }
      /**
       * <code>optional bytes field_bytes_11 = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldBytes11() {
        copyOnWrite();
        instance.clearFieldBytes11();
        return this;
      }

      /**
       * <code>optional uint32 field_uint32_12 = 12;</code>
       * @return Whether the fieldUint3212 field is set.
       */
      @java.lang.Override
      public boolean hasFieldUint3212() {
        return instance.hasFieldUint3212();
      }
      /**
       * <code>optional uint32 field_uint32_12 = 12;</code>
       * @return The fieldUint3212.
       */
      @java.lang.Override
      public int getFieldUint3212() {
        return instance.getFieldUint3212();
      }
      /**
       * <code>optional uint32 field_uint32_12 = 12;</code>
       * @param value The fieldUint3212 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldUint3212(int value) {
        copyOnWrite();
        instance.setFieldUint3212(value);
        return this;
      }
      /**
       * <code>optional uint32 field_uint32_12 = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldUint3212() {
        copyOnWrite();
        instance.clearFieldUint3212();
        return this;
      }

      /**
       * <code>optional .protobuf.experimental.Proto2Message.TestEnum field_enum_13 = 13;</code>
       * @return Whether the fieldEnum13 field is set.
       */
      @java.lang.Override
      public boolean hasFieldEnum13() {
        return instance.hasFieldEnum13();
      }
      /**
       * <code>optional .protobuf.experimental.Proto2Message.TestEnum field_enum_13 = 13;</code>
       * @return The fieldEnum13.
       */
      @java.lang.Override
      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldEnum13() {
        return instance.getFieldEnum13();
      }
      /**
       * <code>optional .protobuf.experimental.Proto2Message.TestEnum field_enum_13 = 13;</code>
       * @param value The enum numeric value on the wire for fieldEnum13 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldEnum13(com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        copyOnWrite();
        instance.setFieldEnum13(value);
        return this;
      }
      /**
       * <code>optional .protobuf.experimental.Proto2Message.TestEnum field_enum_13 = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldEnum13() {
        copyOnWrite();
        instance.clearFieldEnum13();
        return this;
      }

      /**
       * <code>optional sfixed32 field_sfixed32_14 = 14;</code>
       * @return Whether the fieldSfixed3214 field is set.
       */
      @java.lang.Override
      public boolean hasFieldSfixed3214() {
        return instance.hasFieldSfixed3214();
      }
      /**
       * <code>optional sfixed32 field_sfixed32_14 = 14;</code>
       * @return The fieldSfixed3214.
       */
      @java.lang.Override
      public int getFieldSfixed3214() {
        return instance.getFieldSfixed3214();
      }
      /**
       * <code>optional sfixed32 field_sfixed32_14 = 14;</code>
       * @param value The fieldSfixed3214 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldSfixed3214(int value) {
        copyOnWrite();
        instance.setFieldSfixed3214(value);
        return this;
      }
      /**
       * <code>optional sfixed32 field_sfixed32_14 = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldSfixed3214() {
        copyOnWrite();
        instance.clearFieldSfixed3214();
        return this;
      }

      /**
       * <code>optional sfixed64 field_sfixed64_15 = 15;</code>
       * @return Whether the fieldSfixed6415 field is set.
       */
      @java.lang.Override
      public boolean hasFieldSfixed6415() {
        return instance.hasFieldSfixed6415();
      }
      /**
       * <code>optional sfixed64 field_sfixed64_15 = 15;</code>
       * @return The fieldSfixed6415.
       */
      @java.lang.Override
      public long getFieldSfixed6415() {
        return instance.getFieldSfixed6415();
      }
      /**
       * <code>optional sfixed64 field_sfixed64_15 = 15;</code>
       * @param value The fieldSfixed6415 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldSfixed6415(long value) {
        copyOnWrite();
        instance.setFieldSfixed6415(value);
        return this;
      }
      /**
       * <code>optional sfixed64 field_sfixed64_15 = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldSfixed6415() {
        copyOnWrite();
        instance.clearFieldSfixed6415();
        return this;
      }

      /**
       * <code>optional sint32 field_sint32_16 = 16;</code>
       * @return Whether the fieldSint3216 field is set.
       */
      @java.lang.Override
      public boolean hasFieldSint3216() {
        return instance.hasFieldSint3216();
      }
      /**
       * <code>optional sint32 field_sint32_16 = 16;</code>
       * @return The fieldSint3216.
       */
      @java.lang.Override
      public int getFieldSint3216() {
        return instance.getFieldSint3216();
      }
      /**
       * <code>optional sint32 field_sint32_16 = 16;</code>
       * @param value The fieldSint3216 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldSint3216(int value) {
        copyOnWrite();
        instance.setFieldSint3216(value);
        return this;
      }
      /**
       * <code>optional sint32 field_sint32_16 = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldSint3216() {
        copyOnWrite();
        instance.clearFieldSint3216();
        return this;
      }

      /**
       * <code>optional sint64 field_sint64_17 = 17;</code>
       * @return Whether the fieldSint6417 field is set.
       */
      @java.lang.Override
      public boolean hasFieldSint6417() {
        return instance.hasFieldSint6417();
      }
      /**
       * <code>optional sint64 field_sint64_17 = 17;</code>
       * @return The fieldSint6417.
       */
      @java.lang.Override
      public long getFieldSint6417() {
        return instance.getFieldSint6417();
      }
      /**
       * <code>optional sint64 field_sint64_17 = 17;</code>
       * @param value The fieldSint6417 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldSint6417(long value) {
        copyOnWrite();
        instance.setFieldSint6417(value);
        return this;
      }
      /**
       * <code>optional sint64 field_sint64_17 = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldSint6417() {
        copyOnWrite();
        instance.clearFieldSint6417();
        return this;
      }

      /**
       * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
       * @return A list containing the fieldDoubleList18.
       */
      @java.lang.Override
      public java.util.List<java.lang.Double>
          getFieldDoubleList18List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldDoubleList18List());
      }
      /**
       * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
       * @return The count of fieldDoubleList18.
       */
      @java.lang.Override
      public int getFieldDoubleList18Count() {
        return instance.getFieldDoubleList18Count();
      }
      /**
       * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The fieldDoubleList18 at the given index.
       */
      @java.lang.Override
      public double getFieldDoubleList18(int index) {
        return instance.getFieldDoubleList18(index);
      }
      /**
       * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
       * @param value The fieldDoubleList18 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldDoubleList18(
          int index, double value) {
        copyOnWrite();
        instance.setFieldDoubleList18(index, value);
        return this;
      }
      /**
       * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
       * @param value The fieldDoubleList18 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldDoubleList18(double value) {
        copyOnWrite();
        instance.addFieldDoubleList18(value);
        return this;
      }
      /**
       * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
       * @param values The fieldDoubleList18 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldDoubleList18(
          java.lang.Iterable<? extends java.lang.Double> values) {
        copyOnWrite();
        instance.addAllFieldDoubleList18(values);
        return this;
      }
      /**
       * <code>repeated double field_double_list_18 = 18 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldDoubleList18() {
        copyOnWrite();
        instance.clearFieldDoubleList18();
        return this;
      }

      /**
       * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
       * @return A list containing the fieldFloatList19.
       */
      @java.lang.Override
      public java.util.List<java.lang.Float>
          getFieldFloatList19List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldFloatList19List());
      }
      /**
       * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
       * @return The count of fieldFloatList19.
       */
      @java.lang.Override
      public int getFieldFloatList19Count() {
        return instance.getFieldFloatList19Count();
      }
      /**
       * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The fieldFloatList19 at the given index.
       */
      @java.lang.Override
      public float getFieldFloatList19(int index) {
        return instance.getFieldFloatList19(index);
      }
      /**
       * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
       * @param value The fieldFloatList19 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldFloatList19(
          int index, float value) {
        copyOnWrite();
        instance.setFieldFloatList19(index, value);
        return this;
      }
      /**
       * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
       * @param value The fieldFloatList19 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldFloatList19(float value) {
        copyOnWrite();
        instance.addFieldFloatList19(value);
        return this;
      }
      /**
       * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
       * @param values The fieldFloatList19 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldFloatList19(
          java.lang.Iterable<? extends java.lang.Float> values) {
        copyOnWrite();
        instance.addAllFieldFloatList19(values);
        return this;
      }
      /**
       * <code>repeated float field_float_list_19 = 19 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldFloatList19() {
        copyOnWrite();
        instance.clearFieldFloatList19();
        return this;
      }

      /**
       * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
       * @return A list containing the fieldInt64List20.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getFieldInt64List20List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldInt64List20List());
      }
      /**
       * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
       * @return The count of fieldInt64List20.
       */
      @java.lang.Override
      public int getFieldInt64List20Count() {
        return instance.getFieldInt64List20Count();
      }
      /**
       * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The fieldInt64List20 at the given index.
       */
      @java.lang.Override
      public long getFieldInt64List20(int index) {
        return instance.getFieldInt64List20(index);
      }
      /**
       * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
       * @param value The fieldInt64List20 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldInt64List20(
          int index, long value) {
        copyOnWrite();
        instance.setFieldInt64List20(index, value);
        return this;
      }
      /**
       * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
       * @param value The fieldInt64List20 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldInt64List20(long value) {
        copyOnWrite();
        instance.addFieldInt64List20(value);
        return this;
      }
      /**
       * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
       * @param values The fieldInt64List20 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldInt64List20(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllFieldInt64List20(values);
        return this;
      }
      /**
       * <code>repeated int64 field_int64_list_20 = 20 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldInt64List20() {
        copyOnWrite();
        instance.clearFieldInt64List20();
        return this;
      }

      /**
       * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
       * @return A list containing the fieldUint64List21.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getFieldUint64List21List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldUint64List21List());
      }
      /**
       * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
       * @return The count of fieldUint64List21.
       */
      @java.lang.Override
      public int getFieldUint64List21Count() {
        return instance.getFieldUint64List21Count();
      }
      /**
       * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The fieldUint64List21 at the given index.
       */
      @java.lang.Override
      public long getFieldUint64List21(int index) {
        return instance.getFieldUint64List21(index);
      }
      /**
       * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
       * @param value The fieldUint64List21 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldUint64List21(
          int index, long value) {
        copyOnWrite();
        instance.setFieldUint64List21(index, value);
        return this;
      }
      /**
       * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
       * @param value The fieldUint64List21 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldUint64List21(long value) {
        copyOnWrite();
        instance.addFieldUint64List21(value);
        return this;
      }
      /**
       * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
       * @param values The fieldUint64List21 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldUint64List21(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllFieldUint64List21(values);
        return this;
      }
      /**
       * <code>repeated uint64 field_uint64_list_21 = 21 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldUint64List21() {
        copyOnWrite();
        instance.clearFieldUint64List21();
        return this;
      }

      /**
       * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
       * @return A list containing the fieldInt32List22.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getFieldInt32List22List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldInt32List22List());
      }
      /**
       * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
       * @return The count of fieldInt32List22.
       */
      @java.lang.Override
      public int getFieldInt32List22Count() {
        return instance.getFieldInt32List22Count();
      }
      /**
       * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The fieldInt32List22 at the given index.
       */
      @java.lang.Override
      public int getFieldInt32List22(int index) {
        return instance.getFieldInt32List22(index);
      }
      /**
       * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
       * @param value The fieldInt32List22 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldInt32List22(
          int index, int value) {
        copyOnWrite();
        instance.setFieldInt32List22(index, value);
        return this;
      }
      /**
       * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
       * @param value The fieldInt32List22 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldInt32List22(int value) {
        copyOnWrite();
        instance.addFieldInt32List22(value);
        return this;
      }
      /**
       * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
       * @param values The fieldInt32List22 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldInt32List22(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllFieldInt32List22(values);
        return this;
      }
      /**
       * <code>repeated int32 field_int32_list_22 = 22 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldInt32List22() {
        copyOnWrite();
        instance.clearFieldInt32List22();
        return this;
      }

      /**
       * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
       * @return A list containing the fieldFixed64List23.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getFieldFixed64List23List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldFixed64List23List());
      }
      /**
       * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
       * @return The count of fieldFixed64List23.
       */
      @java.lang.Override
      public int getFieldFixed64List23Count() {
        return instance.getFieldFixed64List23Count();
      }
      /**
       * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The fieldFixed64List23 at the given index.
       */
      @java.lang.Override
      public long getFieldFixed64List23(int index) {
        return instance.getFieldFixed64List23(index);
      }
      /**
       * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
       * @param value The fieldFixed64List23 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldFixed64List23(
          int index, long value) {
        copyOnWrite();
        instance.setFieldFixed64List23(index, value);
        return this;
      }
      /**
       * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
       * @param value The fieldFixed64List23 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldFixed64List23(long value) {
        copyOnWrite();
        instance.addFieldFixed64List23(value);
        return this;
      }
      /**
       * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
       * @param values The fieldFixed64List23 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldFixed64List23(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllFieldFixed64List23(values);
        return this;
      }
      /**
       * <code>repeated fixed64 field_fixed64_list_23 = 23 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldFixed64List23() {
        copyOnWrite();
        instance.clearFieldFixed64List23();
        return this;
      }

      /**
       * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
       * @return A list containing the fieldFixed32List24.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getFieldFixed32List24List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldFixed32List24List());
      }
      /**
       * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
       * @return The count of fieldFixed32List24.
       */
      @java.lang.Override
      public int getFieldFixed32List24Count() {
        return instance.getFieldFixed32List24Count();
      }
      /**
       * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The fieldFixed32List24 at the given index.
       */
      @java.lang.Override
      public int getFieldFixed32List24(int index) {
        return instance.getFieldFixed32List24(index);
      }
      /**
       * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
       * @param value The fieldFixed32List24 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldFixed32List24(
          int index, int value) {
        copyOnWrite();
        instance.setFieldFixed32List24(index, value);
        return this;
      }
      /**
       * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
       * @param value The fieldFixed32List24 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldFixed32List24(int value) {
        copyOnWrite();
        instance.addFieldFixed32List24(value);
        return this;
      }
      /**
       * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
       * @param values The fieldFixed32List24 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldFixed32List24(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllFieldFixed32List24(values);
        return this;
      }
      /**
       * <code>repeated fixed32 field_fixed32_list_24 = 24 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldFixed32List24() {
        copyOnWrite();
        instance.clearFieldFixed32List24();
        return this;
      }

      /**
       * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
       * @return A list containing the fieldBoolList25.
       */
      @java.lang.Override
      public java.util.List<java.lang.Boolean>
          getFieldBoolList25List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldBoolList25List());
      }
      /**
       * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
       * @return The count of fieldBoolList25.
       */
      @java.lang.Override
      public int getFieldBoolList25Count() {
        return instance.getFieldBoolList25Count();
      }
      /**
       * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The fieldBoolList25 at the given index.
       */
      @java.lang.Override
      public boolean getFieldBoolList25(int index) {
        return instance.getFieldBoolList25(index);
      }
      /**
       * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
       * @param value The fieldBoolList25 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldBoolList25(
          int index, boolean value) {
        copyOnWrite();
        instance.setFieldBoolList25(index, value);
        return this;
      }
      /**
       * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
       * @param value The fieldBoolList25 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldBoolList25(boolean value) {
        copyOnWrite();
        instance.addFieldBoolList25(value);
        return this;
      }
      /**
       * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
       * @param values The fieldBoolList25 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldBoolList25(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        copyOnWrite();
        instance.addAllFieldBoolList25(values);
        return this;
      }
      /**
       * <code>repeated bool field_bool_list_25 = 25 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldBoolList25() {
        copyOnWrite();
        instance.clearFieldBoolList25();
        return this;
      }

      /**
       * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
       * @return A list containing the fieldStringList26.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getFieldStringList26List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldStringList26List());
      }
      /**
       * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
       * @return The count of fieldStringList26.
       */
      @java.lang.Override
      public int getFieldStringList26Count() {
        return instance.getFieldStringList26Count();
      }
      /**
       * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The fieldStringList26 at the given index.
       */
      @java.lang.Override
      public java.lang.String getFieldStringList26(int index) {
        return instance.getFieldStringList26(index);
      }
      /**
       * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
       * @param index The index of the value to return.
       * @return The bytes of the fieldStringList26 at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getFieldStringList26Bytes(int index) {
        return instance.getFieldStringList26Bytes(index);
      }
      /**
       * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
       * @param index The index to set the value at.
       * @param value The fieldStringList26 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldStringList26(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setFieldStringList26(index, value);
        return this;
      }
      /**
       * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
       * @param value The fieldStringList26 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldStringList26(
          java.lang.String value) {
        copyOnWrite();
        instance.addFieldStringList26(value);
        return this;
      }
      /**
       * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
       * @param values The fieldStringList26 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldStringList26(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllFieldStringList26(values);
        return this;
      }
      /**
       * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldStringList26() {
        copyOnWrite();
        instance.clearFieldStringList26();
        return this;
      }
      /**
       * <code>repeated string field_string_list_26 = 26 [packed = false];</code>
       * @param value The bytes of the fieldStringList26 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldStringList26Bytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addFieldStringList26Bytes(value);
        return this;
      }

      /**
       * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
       */
      @java.lang.Override
      public java.util.List<com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMessageList27List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldMessageList27List());
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
       */
      @java.lang.Override
      public int getFieldMessageList27Count() {
        return instance.getFieldMessageList27Count();
      }/**
       * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
       */
      @java.lang.Override
      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMessageList27(int index) {
        return instance.getFieldMessageList27(index);
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
       */
      public Builder setFieldMessageList27(
          int index, com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        copyOnWrite();
        instance.setFieldMessageList27(index, value);
        return this;
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
       */
      public Builder setFieldMessageList27(
          int index, com.google.protobuf.testing.Proto2Testing.Proto2Message.Builder builderForValue) {
        copyOnWrite();
        instance.setFieldMessageList27(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
       */
      public Builder addFieldMessageList27(com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        copyOnWrite();
        instance.addFieldMessageList27(value);
        return this;
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
       */
      public Builder addFieldMessageList27(
          int index, com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        copyOnWrite();
        instance.addFieldMessageList27(index, value);
        return this;
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
       */
      public Builder addFieldMessageList27(
          com.google.protobuf.testing.Proto2Testing.Proto2Message.Builder builderForValue) {
        copyOnWrite();
        instance.addFieldMessageList27(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
       */
      public Builder addFieldMessageList27(
          int index, com.google.protobuf.testing.Proto2Testing.Proto2Message.Builder builderForValue) {
        copyOnWrite();
        instance.addFieldMessageList27(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
       */
      public Builder addAllFieldMessageList27(
          java.lang.Iterable<? extends com.google.protobuf.testing.Proto2Testing.Proto2Message> values) {
        copyOnWrite();
        instance.addAllFieldMessageList27(values);
        return this;
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
       */
      public Builder clearFieldMessageList27() {
        copyOnWrite();
        instance.clearFieldMessageList27();
        return this;
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message field_message_list_27 = 27 [packed = false];</code>
       */
      public Builder removeFieldMessageList27(int index) {
        copyOnWrite();
        instance.removeFieldMessageList27(index);
        return this;
      }

      /**
       * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
       * @return A list containing the fieldBytesList28.
       */
      @java.lang.Override
      public java.util.List<com.google.protobuf.ByteString>
          getFieldBytesList28List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldBytesList28List());
      }
      /**
       * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
       * @return The count of fieldBytesList28.
       */
      @java.lang.Override
      public int getFieldBytesList28Count() {
        return instance.getFieldBytesList28Count();
      }
      /**
       * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The fieldBytesList28 at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getFieldBytesList28(int index) {
        return instance.getFieldBytesList28(index);
      }
      /**
       * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
       * @param value The fieldBytesList28 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldBytesList28(
          int index, com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFieldBytesList28(index, value);
        return this;
      }
      /**
       * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
       * @param value The fieldBytesList28 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldBytesList28(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addFieldBytesList28(value);
        return this;
      }
      /**
       * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
       * @param values The fieldBytesList28 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldBytesList28(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.addAllFieldBytesList28(values);
        return this;
      }
      /**
       * <code>repeated bytes field_bytes_list_28 = 28 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldBytesList28() {
        copyOnWrite();
        instance.clearFieldBytesList28();
        return this;
      }

      /**
       * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
       * @return A list containing the fieldUint32List29.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getFieldUint32List29List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldUint32List29List());
      }
      /**
       * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
       * @return The count of fieldUint32List29.
       */
      @java.lang.Override
      public int getFieldUint32List29Count() {
        return instance.getFieldUint32List29Count();
      }
      /**
       * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The fieldUint32List29 at the given index.
       */
      @java.lang.Override
      public int getFieldUint32List29(int index) {
        return instance.getFieldUint32List29(index);
      }
      /**
       * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
       * @param value The fieldUint32List29 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldUint32List29(
          int index, int value) {
        copyOnWrite();
        instance.setFieldUint32List29(index, value);
        return this;
      }
      /**
       * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
       * @param value The fieldUint32List29 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldUint32List29(int value) {
        copyOnWrite();
        instance.addFieldUint32List29(value);
        return this;
      }
      /**
       * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
       * @param values The fieldUint32List29 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldUint32List29(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllFieldUint32List29(values);
        return this;
      }
      /**
       * <code>repeated uint32 field_uint32_list_29 = 29 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldUint32List29() {
        copyOnWrite();
        instance.clearFieldUint32List29();
        return this;
      }

      /**
       * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
       * @return A list containing the fieldEnumList30.
       */
      @java.lang.Override
      public java.util.List<com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> getFieldEnumList30List() {
        return instance.getFieldEnumList30List();
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
       * @return The count of fieldEnumList30.
       */
      @java.lang.Override
      public int getFieldEnumList30Count() {
        return instance.getFieldEnumList30Count();
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The fieldEnumList30 at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldEnumList30(int index) {
        return instance.getFieldEnumList30(index);
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
       * @param index The index to set the value at.
       * @param value The fieldEnumList30 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldEnumList30(
          int index, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        copyOnWrite();
        instance.setFieldEnumList30(index, value);
        return this;
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
       * @param value The fieldEnumList30 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldEnumList30(com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        copyOnWrite();
        instance.addFieldEnumList30(value);
        return this;
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
       * @param values The fieldEnumList30 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldEnumList30(
          java.lang.Iterable<? extends com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> values) {
        copyOnWrite();
        instance.addAllFieldEnumList30(values);  return this;
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_30 = 30 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldEnumList30() {
        copyOnWrite();
        instance.clearFieldEnumList30();
        return this;
      }

      /**
       * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
       * @return A list containing the fieldSfixed32List31.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getFieldSfixed32List31List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldSfixed32List31List());
      }
      /**
       * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
       * @return The count of fieldSfixed32List31.
       */
      @java.lang.Override
      public int getFieldSfixed32List31Count() {
        return instance.getFieldSfixed32List31Count();
      }
      /**
       * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The fieldSfixed32List31 at the given index.
       */
      @java.lang.Override
      public int getFieldSfixed32List31(int index) {
        return instance.getFieldSfixed32List31(index);
      }
      /**
       * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
       * @param value The fieldSfixed32List31 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldSfixed32List31(
          int index, int value) {
        copyOnWrite();
        instance.setFieldSfixed32List31(index, value);
        return this;
      }
      /**
       * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
       * @param value The fieldSfixed32List31 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldSfixed32List31(int value) {
        copyOnWrite();
        instance.addFieldSfixed32List31(value);
        return this;
      }
      /**
       * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
       * @param values The fieldSfixed32List31 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldSfixed32List31(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllFieldSfixed32List31(values);
        return this;
      }
      /**
       * <code>repeated sfixed32 field_sfixed32_list_31 = 31 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldSfixed32List31() {
        copyOnWrite();
        instance.clearFieldSfixed32List31();
        return this;
      }

      /**
       * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
       * @return A list containing the fieldSfixed64List32.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getFieldSfixed64List32List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldSfixed64List32List());
      }
      /**
       * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
       * @return The count of fieldSfixed64List32.
       */
      @java.lang.Override
      public int getFieldSfixed64List32Count() {
        return instance.getFieldSfixed64List32Count();
      }
      /**
       * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The fieldSfixed64List32 at the given index.
       */
      @java.lang.Override
      public long getFieldSfixed64List32(int index) {
        return instance.getFieldSfixed64List32(index);
      }
      /**
       * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
       * @param value The fieldSfixed64List32 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldSfixed64List32(
          int index, long value) {
        copyOnWrite();
        instance.setFieldSfixed64List32(index, value);
        return this;
      }
      /**
       * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
       * @param value The fieldSfixed64List32 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldSfixed64List32(long value) {
        copyOnWrite();
        instance.addFieldSfixed64List32(value);
        return this;
      }
      /**
       * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
       * @param values The fieldSfixed64List32 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldSfixed64List32(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllFieldSfixed64List32(values);
        return this;
      }
      /**
       * <code>repeated sfixed64 field_sfixed64_list_32 = 32 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldSfixed64List32() {
        copyOnWrite();
        instance.clearFieldSfixed64List32();
        return this;
      }

      /**
       * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
       * @return A list containing the fieldSint32List33.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getFieldSint32List33List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldSint32List33List());
      }
      /**
       * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
       * @return The count of fieldSint32List33.
       */
      @java.lang.Override
      public int getFieldSint32List33Count() {
        return instance.getFieldSint32List33Count();
      }
      /**
       * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The fieldSint32List33 at the given index.
       */
      @java.lang.Override
      public int getFieldSint32List33(int index) {
        return instance.getFieldSint32List33(index);
      }
      /**
       * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
       * @param value The fieldSint32List33 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldSint32List33(
          int index, int value) {
        copyOnWrite();
        instance.setFieldSint32List33(index, value);
        return this;
      }
      /**
       * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
       * @param value The fieldSint32List33 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldSint32List33(int value) {
        copyOnWrite();
        instance.addFieldSint32List33(value);
        return this;
      }
      /**
       * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
       * @param values The fieldSint32List33 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldSint32List33(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllFieldSint32List33(values);
        return this;
      }
      /**
       * <code>repeated sint32 field_sint32_list_33 = 33 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldSint32List33() {
        copyOnWrite();
        instance.clearFieldSint32List33();
        return this;
      }

      /**
       * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
       * @return A list containing the fieldSint64List34.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getFieldSint64List34List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldSint64List34List());
      }
      /**
       * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
       * @return The count of fieldSint64List34.
       */
      @java.lang.Override
      public int getFieldSint64List34Count() {
        return instance.getFieldSint64List34Count();
      }
      /**
       * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
       * @param index The index of the element to return.
       * @return The fieldSint64List34 at the given index.
       */
      @java.lang.Override
      public long getFieldSint64List34(int index) {
        return instance.getFieldSint64List34(index);
      }
      /**
       * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
       * @param value The fieldSint64List34 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldSint64List34(
          int index, long value) {
        copyOnWrite();
        instance.setFieldSint64List34(index, value);
        return this;
      }
      /**
       * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
       * @param value The fieldSint64List34 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldSint64List34(long value) {
        copyOnWrite();
        instance.addFieldSint64List34(value);
        return this;
      }
      /**
       * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
       * @param values The fieldSint64List34 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldSint64List34(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllFieldSint64List34(values);
        return this;
      }
      /**
       * <code>repeated sint64 field_sint64_list_34 = 34 [packed = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldSint64List34() {
        copyOnWrite();
        instance.clearFieldSint64List34();
        return this;
      }

      /**
       * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
       * @return A list containing the fieldDoubleListPacked35.
       */
      @java.lang.Override
      public java.util.List<java.lang.Double>
          getFieldDoubleListPacked35List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldDoubleListPacked35List());
      }
      /**
       * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
       * @return The count of fieldDoubleListPacked35.
       */
      @java.lang.Override
      public int getFieldDoubleListPacked35Count() {
        return instance.getFieldDoubleListPacked35Count();
      }
      /**
       * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The fieldDoubleListPacked35 at the given index.
       */
      @java.lang.Override
      public double getFieldDoubleListPacked35(int index) {
        return instance.getFieldDoubleListPacked35(index);
      }
      /**
       * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
       * @param value The fieldDoubleListPacked35 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldDoubleListPacked35(
          int index, double value) {
        copyOnWrite();
        instance.setFieldDoubleListPacked35(index, value);
        return this;
      }
      /**
       * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
       * @param value The fieldDoubleListPacked35 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldDoubleListPacked35(double value) {
        copyOnWrite();
        instance.addFieldDoubleListPacked35(value);
        return this;
      }
      /**
       * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
       * @param values The fieldDoubleListPacked35 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldDoubleListPacked35(
          java.lang.Iterable<? extends java.lang.Double> values) {
        copyOnWrite();
        instance.addAllFieldDoubleListPacked35(values);
        return this;
      }
      /**
       * <code>repeated double field_double_list_packed_35 = 35 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldDoubleListPacked35() {
        copyOnWrite();
        instance.clearFieldDoubleListPacked35();
        return this;
      }

      /**
       * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
       * @return A list containing the fieldFloatListPacked36.
       */
      @java.lang.Override
      public java.util.List<java.lang.Float>
          getFieldFloatListPacked36List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldFloatListPacked36List());
      }
      /**
       * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
       * @return The count of fieldFloatListPacked36.
       */
      @java.lang.Override
      public int getFieldFloatListPacked36Count() {
        return instance.getFieldFloatListPacked36Count();
      }
      /**
       * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The fieldFloatListPacked36 at the given index.
       */
      @java.lang.Override
      public float getFieldFloatListPacked36(int index) {
        return instance.getFieldFloatListPacked36(index);
      }
      /**
       * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
       * @param value The fieldFloatListPacked36 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldFloatListPacked36(
          int index, float value) {
        copyOnWrite();
        instance.setFieldFloatListPacked36(index, value);
        return this;
      }
      /**
       * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
       * @param value The fieldFloatListPacked36 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldFloatListPacked36(float value) {
        copyOnWrite();
        instance.addFieldFloatListPacked36(value);
        return this;
      }
      /**
       * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
       * @param values The fieldFloatListPacked36 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldFloatListPacked36(
          java.lang.Iterable<? extends java.lang.Float> values) {
        copyOnWrite();
        instance.addAllFieldFloatListPacked36(values);
        return this;
      }
      /**
       * <code>repeated float field_float_list_packed_36 = 36 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldFloatListPacked36() {
        copyOnWrite();
        instance.clearFieldFloatListPacked36();
        return this;
      }

      /**
       * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
       * @return A list containing the fieldInt64ListPacked37.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getFieldInt64ListPacked37List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldInt64ListPacked37List());
      }
      /**
       * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
       * @return The count of fieldInt64ListPacked37.
       */
      @java.lang.Override
      public int getFieldInt64ListPacked37Count() {
        return instance.getFieldInt64ListPacked37Count();
      }
      /**
       * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The fieldInt64ListPacked37 at the given index.
       */
      @java.lang.Override
      public long getFieldInt64ListPacked37(int index) {
        return instance.getFieldInt64ListPacked37(index);
      }
      /**
       * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
       * @param value The fieldInt64ListPacked37 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldInt64ListPacked37(
          int index, long value) {
        copyOnWrite();
        instance.setFieldInt64ListPacked37(index, value);
        return this;
      }
      /**
       * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
       * @param value The fieldInt64ListPacked37 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldInt64ListPacked37(long value) {
        copyOnWrite();
        instance.addFieldInt64ListPacked37(value);
        return this;
      }
      /**
       * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
       * @param values The fieldInt64ListPacked37 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldInt64ListPacked37(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllFieldInt64ListPacked37(values);
        return this;
      }
      /**
       * <code>repeated int64 field_int64_list_packed_37 = 37 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldInt64ListPacked37() {
        copyOnWrite();
        instance.clearFieldInt64ListPacked37();
        return this;
      }

      /**
       * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
       * @return A list containing the fieldUint64ListPacked38.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getFieldUint64ListPacked38List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldUint64ListPacked38List());
      }
      /**
       * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
       * @return The count of fieldUint64ListPacked38.
       */
      @java.lang.Override
      public int getFieldUint64ListPacked38Count() {
        return instance.getFieldUint64ListPacked38Count();
      }
      /**
       * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The fieldUint64ListPacked38 at the given index.
       */
      @java.lang.Override
      public long getFieldUint64ListPacked38(int index) {
        return instance.getFieldUint64ListPacked38(index);
      }
      /**
       * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
       * @param value The fieldUint64ListPacked38 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldUint64ListPacked38(
          int index, long value) {
        copyOnWrite();
        instance.setFieldUint64ListPacked38(index, value);
        return this;
      }
      /**
       * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
       * @param value The fieldUint64ListPacked38 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldUint64ListPacked38(long value) {
        copyOnWrite();
        instance.addFieldUint64ListPacked38(value);
        return this;
      }
      /**
       * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
       * @param values The fieldUint64ListPacked38 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldUint64ListPacked38(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllFieldUint64ListPacked38(values);
        return this;
      }
      /**
       * <code>repeated uint64 field_uint64_list_packed_38 = 38 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldUint64ListPacked38() {
        copyOnWrite();
        instance.clearFieldUint64ListPacked38();
        return this;
      }

      /**
       * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
       * @return A list containing the fieldInt32ListPacked39.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getFieldInt32ListPacked39List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldInt32ListPacked39List());
      }
      /**
       * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
       * @return The count of fieldInt32ListPacked39.
       */
      @java.lang.Override
      public int getFieldInt32ListPacked39Count() {
        return instance.getFieldInt32ListPacked39Count();
      }
      /**
       * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The fieldInt32ListPacked39 at the given index.
       */
      @java.lang.Override
      public int getFieldInt32ListPacked39(int index) {
        return instance.getFieldInt32ListPacked39(index);
      }
      /**
       * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
       * @param value The fieldInt32ListPacked39 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldInt32ListPacked39(
          int index, int value) {
        copyOnWrite();
        instance.setFieldInt32ListPacked39(index, value);
        return this;
      }
      /**
       * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
       * @param value The fieldInt32ListPacked39 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldInt32ListPacked39(int value) {
        copyOnWrite();
        instance.addFieldInt32ListPacked39(value);
        return this;
      }
      /**
       * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
       * @param values The fieldInt32ListPacked39 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldInt32ListPacked39(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllFieldInt32ListPacked39(values);
        return this;
      }
      /**
       * <code>repeated int32 field_int32_list_packed_39 = 39 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldInt32ListPacked39() {
        copyOnWrite();
        instance.clearFieldInt32ListPacked39();
        return this;
      }

      /**
       * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
       * @return A list containing the fieldFixed64ListPacked40.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getFieldFixed64ListPacked40List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldFixed64ListPacked40List());
      }
      /**
       * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
       * @return The count of fieldFixed64ListPacked40.
       */
      @java.lang.Override
      public int getFieldFixed64ListPacked40Count() {
        return instance.getFieldFixed64ListPacked40Count();
      }
      /**
       * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The fieldFixed64ListPacked40 at the given index.
       */
      @java.lang.Override
      public long getFieldFixed64ListPacked40(int index) {
        return instance.getFieldFixed64ListPacked40(index);
      }
      /**
       * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
       * @param value The fieldFixed64ListPacked40 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldFixed64ListPacked40(
          int index, long value) {
        copyOnWrite();
        instance.setFieldFixed64ListPacked40(index, value);
        return this;
      }
      /**
       * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
       * @param value The fieldFixed64ListPacked40 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldFixed64ListPacked40(long value) {
        copyOnWrite();
        instance.addFieldFixed64ListPacked40(value);
        return this;
      }
      /**
       * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
       * @param values The fieldFixed64ListPacked40 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldFixed64ListPacked40(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllFieldFixed64ListPacked40(values);
        return this;
      }
      /**
       * <code>repeated fixed64 field_fixed64_list_packed_40 = 40 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldFixed64ListPacked40() {
        copyOnWrite();
        instance.clearFieldFixed64ListPacked40();
        return this;
      }

      /**
       * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
       * @return A list containing the fieldFixed32ListPacked41.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getFieldFixed32ListPacked41List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldFixed32ListPacked41List());
      }
      /**
       * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
       * @return The count of fieldFixed32ListPacked41.
       */
      @java.lang.Override
      public int getFieldFixed32ListPacked41Count() {
        return instance.getFieldFixed32ListPacked41Count();
      }
      /**
       * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The fieldFixed32ListPacked41 at the given index.
       */
      @java.lang.Override
      public int getFieldFixed32ListPacked41(int index) {
        return instance.getFieldFixed32ListPacked41(index);
      }
      /**
       * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
       * @param value The fieldFixed32ListPacked41 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldFixed32ListPacked41(
          int index, int value) {
        copyOnWrite();
        instance.setFieldFixed32ListPacked41(index, value);
        return this;
      }
      /**
       * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
       * @param value The fieldFixed32ListPacked41 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldFixed32ListPacked41(int value) {
        copyOnWrite();
        instance.addFieldFixed32ListPacked41(value);
        return this;
      }
      /**
       * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
       * @param values The fieldFixed32ListPacked41 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldFixed32ListPacked41(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllFieldFixed32ListPacked41(values);
        return this;
      }
      /**
       * <code>repeated fixed32 field_fixed32_list_packed_41 = 41 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldFixed32ListPacked41() {
        copyOnWrite();
        instance.clearFieldFixed32ListPacked41();
        return this;
      }

      /**
       * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
       * @return A list containing the fieldBoolListPacked42.
       */
      @java.lang.Override
      public java.util.List<java.lang.Boolean>
          getFieldBoolListPacked42List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldBoolListPacked42List());
      }
      /**
       * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
       * @return The count of fieldBoolListPacked42.
       */
      @java.lang.Override
      public int getFieldBoolListPacked42Count() {
        return instance.getFieldBoolListPacked42Count();
      }
      /**
       * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The fieldBoolListPacked42 at the given index.
       */
      @java.lang.Override
      public boolean getFieldBoolListPacked42(int index) {
        return instance.getFieldBoolListPacked42(index);
      }
      /**
       * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
       * @param value The fieldBoolListPacked42 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldBoolListPacked42(
          int index, boolean value) {
        copyOnWrite();
        instance.setFieldBoolListPacked42(index, value);
        return this;
      }
      /**
       * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
       * @param value The fieldBoolListPacked42 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldBoolListPacked42(boolean value) {
        copyOnWrite();
        instance.addFieldBoolListPacked42(value);
        return this;
      }
      /**
       * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
       * @param values The fieldBoolListPacked42 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldBoolListPacked42(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        copyOnWrite();
        instance.addAllFieldBoolListPacked42(values);
        return this;
      }
      /**
       * <code>repeated bool field_bool_list_packed_42 = 42 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldBoolListPacked42() {
        copyOnWrite();
        instance.clearFieldBoolListPacked42();
        return this;
      }

      /**
       * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
       * @return A list containing the fieldUint32ListPacked43.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getFieldUint32ListPacked43List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldUint32ListPacked43List());
      }
      /**
       * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
       * @return The count of fieldUint32ListPacked43.
       */
      @java.lang.Override
      public int getFieldUint32ListPacked43Count() {
        return instance.getFieldUint32ListPacked43Count();
      }
      /**
       * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The fieldUint32ListPacked43 at the given index.
       */
      @java.lang.Override
      public int getFieldUint32ListPacked43(int index) {
        return instance.getFieldUint32ListPacked43(index);
      }
      /**
       * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
       * @param value The fieldUint32ListPacked43 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldUint32ListPacked43(
          int index, int value) {
        copyOnWrite();
        instance.setFieldUint32ListPacked43(index, value);
        return this;
      }
      /**
       * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
       * @param value The fieldUint32ListPacked43 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldUint32ListPacked43(int value) {
        copyOnWrite();
        instance.addFieldUint32ListPacked43(value);
        return this;
      }
      /**
       * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
       * @param values The fieldUint32ListPacked43 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldUint32ListPacked43(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllFieldUint32ListPacked43(values);
        return this;
      }
      /**
       * <code>repeated uint32 field_uint32_list_packed_43 = 43 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldUint32ListPacked43() {
        copyOnWrite();
        instance.clearFieldUint32ListPacked43();
        return this;
      }

      /**
       * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
       * @return A list containing the fieldEnumListPacked44.
       */
      @java.lang.Override
      public java.util.List<com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> getFieldEnumListPacked44List() {
        return instance.getFieldEnumListPacked44List();
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
       * @return The count of fieldEnumListPacked44.
       */
      @java.lang.Override
      public int getFieldEnumListPacked44Count() {
        return instance.getFieldEnumListPacked44Count();
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The fieldEnumListPacked44 at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldEnumListPacked44(int index) {
        return instance.getFieldEnumListPacked44(index);
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
       * @param index The index to set the value at.
       * @param value The fieldEnumListPacked44 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldEnumListPacked44(
          int index, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        copyOnWrite();
        instance.setFieldEnumListPacked44(index, value);
        return this;
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
       * @param value The fieldEnumListPacked44 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldEnumListPacked44(com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        copyOnWrite();
        instance.addFieldEnumListPacked44(value);
        return this;
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
       * @param values The fieldEnumListPacked44 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldEnumListPacked44(
          java.lang.Iterable<? extends com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> values) {
        copyOnWrite();
        instance.addAllFieldEnumListPacked44(values);  return this;
      }
      /**
       * <code>repeated .protobuf.experimental.Proto2Message.TestEnum field_enum_list_packed_44 = 44 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldEnumListPacked44() {
        copyOnWrite();
        instance.clearFieldEnumListPacked44();
        return this;
      }

      /**
       * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
       * @return A list containing the fieldSfixed32ListPacked45.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getFieldSfixed32ListPacked45List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldSfixed32ListPacked45List());
      }
      /**
       * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
       * @return The count of fieldSfixed32ListPacked45.
       */
      @java.lang.Override
      public int getFieldSfixed32ListPacked45Count() {
        return instance.getFieldSfixed32ListPacked45Count();
      }
      /**
       * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The fieldSfixed32ListPacked45 at the given index.
       */
      @java.lang.Override
      public int getFieldSfixed32ListPacked45(int index) {
        return instance.getFieldSfixed32ListPacked45(index);
      }
      /**
       * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
       * @param value The fieldSfixed32ListPacked45 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldSfixed32ListPacked45(
          int index, int value) {
        copyOnWrite();
        instance.setFieldSfixed32ListPacked45(index, value);
        return this;
      }
      /**
       * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
       * @param value The fieldSfixed32ListPacked45 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldSfixed32ListPacked45(int value) {
        copyOnWrite();
        instance.addFieldSfixed32ListPacked45(value);
        return this;
      }
      /**
       * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
       * @param values The fieldSfixed32ListPacked45 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldSfixed32ListPacked45(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllFieldSfixed32ListPacked45(values);
        return this;
      }
      /**
       * <code>repeated sfixed32 field_sfixed32_list_packed_45 = 45 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldSfixed32ListPacked45() {
        copyOnWrite();
        instance.clearFieldSfixed32ListPacked45();
        return this;
      }

      /**
       * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
       * @return A list containing the fieldSfixed64ListPacked46.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getFieldSfixed64ListPacked46List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldSfixed64ListPacked46List());
      }
      /**
       * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
       * @return The count of fieldSfixed64ListPacked46.
       */
      @java.lang.Override
      public int getFieldSfixed64ListPacked46Count() {
        return instance.getFieldSfixed64ListPacked46Count();
      }
      /**
       * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The fieldSfixed64ListPacked46 at the given index.
       */
      @java.lang.Override
      public long getFieldSfixed64ListPacked46(int index) {
        return instance.getFieldSfixed64ListPacked46(index);
      }
      /**
       * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
       * @param value The fieldSfixed64ListPacked46 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldSfixed64ListPacked46(
          int index, long value) {
        copyOnWrite();
        instance.setFieldSfixed64ListPacked46(index, value);
        return this;
      }
      /**
       * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
       * @param value The fieldSfixed64ListPacked46 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldSfixed64ListPacked46(long value) {
        copyOnWrite();
        instance.addFieldSfixed64ListPacked46(value);
        return this;
      }
      /**
       * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
       * @param values The fieldSfixed64ListPacked46 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldSfixed64ListPacked46(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllFieldSfixed64ListPacked46(values);
        return this;
      }
      /**
       * <code>repeated sfixed64 field_sfixed64_list_packed_46 = 46 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldSfixed64ListPacked46() {
        copyOnWrite();
        instance.clearFieldSfixed64ListPacked46();
        return this;
      }

      /**
       * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
       * @return A list containing the fieldSint32ListPacked47.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getFieldSint32ListPacked47List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldSint32ListPacked47List());
      }
      /**
       * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
       * @return The count of fieldSint32ListPacked47.
       */
      @java.lang.Override
      public int getFieldSint32ListPacked47Count() {
        return instance.getFieldSint32ListPacked47Count();
      }
      /**
       * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The fieldSint32ListPacked47 at the given index.
       */
      @java.lang.Override
      public int getFieldSint32ListPacked47(int index) {
        return instance.getFieldSint32ListPacked47(index);
      }
      /**
       * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
       * @param value The fieldSint32ListPacked47 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldSint32ListPacked47(
          int index, int value) {
        copyOnWrite();
        instance.setFieldSint32ListPacked47(index, value);
        return this;
      }
      /**
       * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
       * @param value The fieldSint32ListPacked47 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldSint32ListPacked47(int value) {
        copyOnWrite();
        instance.addFieldSint32ListPacked47(value);
        return this;
      }
      /**
       * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
       * @param values The fieldSint32ListPacked47 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldSint32ListPacked47(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllFieldSint32ListPacked47(values);
        return this;
      }
      /**
       * <code>repeated sint32 field_sint32_list_packed_47 = 47 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldSint32ListPacked47() {
        copyOnWrite();
        instance.clearFieldSint32ListPacked47();
        return this;
      }

      /**
       * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
       * @return A list containing the fieldSint64ListPacked48.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getFieldSint64ListPacked48List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldSint64ListPacked48List());
      }
      /**
       * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
       * @return The count of fieldSint64ListPacked48.
       */
      @java.lang.Override
      public int getFieldSint64ListPacked48Count() {
        return instance.getFieldSint64ListPacked48Count();
      }
      /**
       * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The fieldSint64ListPacked48 at the given index.
       */
      @java.lang.Override
      public long getFieldSint64ListPacked48(int index) {
        return instance.getFieldSint64ListPacked48(index);
      }
      /**
       * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
       * @param value The fieldSint64ListPacked48 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldSint64ListPacked48(
          int index, long value) {
        copyOnWrite();
        instance.setFieldSint64ListPacked48(index, value);
        return this;
      }
      /**
       * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
       * @param value The fieldSint64ListPacked48 to add.
       * @return This builder for chaining.
       */
      public Builder addFieldSint64ListPacked48(long value) {
        copyOnWrite();
        instance.addFieldSint64ListPacked48(value);
        return this;
      }
      /**
       * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
       * @param values The fieldSint64ListPacked48 to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldSint64ListPacked48(
          java.lang.Iterable<? extends java.lang.Long> values) {
        copyOnWrite();
        instance.addAllFieldSint64ListPacked48(values);
        return this;
      }
      /**
       * <code>repeated sint64 field_sint64_list_packed_48 = 48 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldSint64ListPacked48() {
        copyOnWrite();
        instance.clearFieldSint64ListPacked48();
        return this;
      }

      /**
       * <code>optional group FieldGroup49 = 49 { ... }</code>
       */
      @java.lang.Override
      public boolean hasFieldGroup49() {
        return instance.hasFieldGroup49();
      }
      /**
       * <code>optional group FieldGroup49 = 49 { ... }</code>
       */
      @java.lang.Override
      public com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 getFieldGroup49() {
        return instance.getFieldGroup49();
      }
      /**
       * <code>optional group FieldGroup49 = 49 { ... }</code>
       */
      public Builder setFieldGroup49(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 value) {
        copyOnWrite();
        instance.setFieldGroup49(value);
        return this;
        }
      /**
       * <code>optional group FieldGroup49 = 49 { ... }</code>
       */
      public Builder setFieldGroup49(
          com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49.Builder builderForValue) {
        copyOnWrite();
        instance.setFieldGroup49(builderForValue.build());
        return this;
      }
      /**
       * <code>optional group FieldGroup49 = 49 { ... }</code>
       */
      public Builder mergeFieldGroup49(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup49 value) {
        copyOnWrite();
        instance.mergeFieldGroup49(value);
        return this;
      }
      /**
       * <code>optional group FieldGroup49 = 49 { ... }</code>
       */
      public Builder clearFieldGroup49() {  copyOnWrite();
        instance.clearFieldGroup49();
        return this;
      }

      /**
       * <code>repeated group FieldGroupList51 = 51 { ... }</code>
       */
      @java.lang.Override
      public java.util.List<com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51> getFieldGroupList51List() {
        return java.util.Collections.unmodifiableList(
            instance.getFieldGroupList51List());
      }
      /**
       * <code>repeated group FieldGroupList51 = 51 { ... }</code>
       */
      @java.lang.Override
      public int getFieldGroupList51Count() {
        return instance.getFieldGroupList51Count();
      }/**
       * <code>repeated group FieldGroupList51 = 51 { ... }</code>
       */
      @java.lang.Override
      public com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 getFieldGroupList51(int index) {
        return instance.getFieldGroupList51(index);
      }
      /**
       * <code>repeated group FieldGroupList51 = 51 { ... }</code>
       */
      public Builder setFieldGroupList51(
          int index, com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 value) {
        copyOnWrite();
        instance.setFieldGroupList51(index, value);
        return this;
      }
      /**
       * <code>repeated group FieldGroupList51 = 51 { ... }</code>
       */
      public Builder setFieldGroupList51(
          int index, com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51.Builder builderForValue) {
        copyOnWrite();
        instance.setFieldGroupList51(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated group FieldGroupList51 = 51 { ... }</code>
       */
      public Builder addFieldGroupList51(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 value) {
        copyOnWrite();
        instance.addFieldGroupList51(value);
        return this;
      }
      /**
       * <code>repeated group FieldGroupList51 = 51 { ... }</code>
       */
      public Builder addFieldGroupList51(
          int index, com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51 value) {
        copyOnWrite();
        instance.addFieldGroupList51(index, value);
        return this;
      }
      /**
       * <code>repeated group FieldGroupList51 = 51 { ... }</code>
       */
      public Builder addFieldGroupList51(
          com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51.Builder builderForValue) {
        copyOnWrite();
        instance.addFieldGroupList51(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated group FieldGroupList51 = 51 { ... }</code>
       */
      public Builder addFieldGroupList51(
          int index, com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51.Builder builderForValue) {
        copyOnWrite();
        instance.addFieldGroupList51(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated group FieldGroupList51 = 51 { ... }</code>
       */
      public Builder addAllFieldGroupList51(
          java.lang.Iterable<? extends com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51> values) {
        copyOnWrite();
        instance.addAllFieldGroupList51(values);
        return this;
      }
      /**
       * <code>repeated group FieldGroupList51 = 51 { ... }</code>
       */
      public Builder clearFieldGroupList51() {
        copyOnWrite();
        instance.clearFieldGroupList51();
        return this;
      }
      /**
       * <code>repeated group FieldGroupList51 = 51 { ... }</code>
       */
      public Builder removeFieldGroupList51(int index) {
        copyOnWrite();
        instance.removeFieldGroupList51(index);
        return this;
      }

      /**
       * <code>double field_double_53 = 53;</code>
       * @return Whether the fieldDouble53 field is set.
       */
      @java.lang.Override
      public boolean hasFieldDouble53() {
        return instance.hasFieldDouble53();
      }
      /**
       * <code>double field_double_53 = 53;</code>
       * @return The fieldDouble53.
       */
      @java.lang.Override
      public double getFieldDouble53() {
        return instance.getFieldDouble53();
      }
      /**
       * <code>double field_double_53 = 53;</code>
       * @param value The fieldDouble53 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldDouble53(double value) {
        copyOnWrite();
        instance.setFieldDouble53(value);
        return this;
      }
      /**
       * <code>double field_double_53 = 53;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldDouble53() {
        copyOnWrite();
        instance.clearFieldDouble53();
        return this;
      }

      /**
       * <code>float field_float_54 = 54;</code>
       * @return Whether the fieldFloat54 field is set.
       */
      @java.lang.Override
      public boolean hasFieldFloat54() {
        return instance.hasFieldFloat54();
      }
      /**
       * <code>float field_float_54 = 54;</code>
       * @return The fieldFloat54.
       */
      @java.lang.Override
      public float getFieldFloat54() {
        return instance.getFieldFloat54();
      }
      /**
       * <code>float field_float_54 = 54;</code>
       * @param value The fieldFloat54 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldFloat54(float value) {
        copyOnWrite();
        instance.setFieldFloat54(value);
        return this;
      }
      /**
       * <code>float field_float_54 = 54;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldFloat54() {
        copyOnWrite();
        instance.clearFieldFloat54();
        return this;
      }

      /**
       * <code>int64 field_int64_55 = 55;</code>
       * @return Whether the fieldInt6455 field is set.
       */
      @java.lang.Override
      public boolean hasFieldInt6455() {
        return instance.hasFieldInt6455();
      }
      /**
       * <code>int64 field_int64_55 = 55;</code>
       * @return The fieldInt6455.
       */
      @java.lang.Override
      public long getFieldInt6455() {
        return instance.getFieldInt6455();
      }
      /**
       * <code>int64 field_int64_55 = 55;</code>
       * @param value The fieldInt6455 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldInt6455(long value) {
        copyOnWrite();
        instance.setFieldInt6455(value);
        return this;
      }
      /**
       * <code>int64 field_int64_55 = 55;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldInt6455() {
        copyOnWrite();
        instance.clearFieldInt6455();
        return this;
      }

      /**
       * <code>uint64 field_uint64_56 = 56;</code>
       * @return Whether the fieldUint6456 field is set.
       */
      @java.lang.Override
      public boolean hasFieldUint6456() {
        return instance.hasFieldUint6456();
      }
      /**
       * <code>uint64 field_uint64_56 = 56;</code>
       * @return The fieldUint6456.
       */
      @java.lang.Override
      public long getFieldUint6456() {
        return instance.getFieldUint6456();
      }
      /**
       * <code>uint64 field_uint64_56 = 56;</code>
       * @param value The fieldUint6456 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldUint6456(long value) {
        copyOnWrite();
        instance.setFieldUint6456(value);
        return this;
      }
      /**
       * <code>uint64 field_uint64_56 = 56;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldUint6456() {
        copyOnWrite();
        instance.clearFieldUint6456();
        return this;
      }

      /**
       * <code>int32 field_int32_57 = 57;</code>
       * @return Whether the fieldInt3257 field is set.
       */
      @java.lang.Override
      public boolean hasFieldInt3257() {
        return instance.hasFieldInt3257();
      }
      /**
       * <code>int32 field_int32_57 = 57;</code>
       * @return The fieldInt3257.
       */
      @java.lang.Override
      public int getFieldInt3257() {
        return instance.getFieldInt3257();
      }
      /**
       * <code>int32 field_int32_57 = 57;</code>
       * @param value The fieldInt3257 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldInt3257(int value) {
        copyOnWrite();
        instance.setFieldInt3257(value);
        return this;
      }
      /**
       * <code>int32 field_int32_57 = 57;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldInt3257() {
        copyOnWrite();
        instance.clearFieldInt3257();
        return this;
      }

      /**
       * <code>fixed64 field_fixed64_58 = 58;</code>
       * @return Whether the fieldFixed6458 field is set.
       */
      @java.lang.Override
      public boolean hasFieldFixed6458() {
        return instance.hasFieldFixed6458();
      }
      /**
       * <code>fixed64 field_fixed64_58 = 58;</code>
       * @return The fieldFixed6458.
       */
      @java.lang.Override
      public long getFieldFixed6458() {
        return instance.getFieldFixed6458();
      }
      /**
       * <code>fixed64 field_fixed64_58 = 58;</code>
       * @param value The fieldFixed6458 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldFixed6458(long value) {
        copyOnWrite();
        instance.setFieldFixed6458(value);
        return this;
      }
      /**
       * <code>fixed64 field_fixed64_58 = 58;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldFixed6458() {
        copyOnWrite();
        instance.clearFieldFixed6458();
        return this;
      }

      /**
       * <code>fixed32 field_fixed32_59 = 59;</code>
       * @return Whether the fieldFixed3259 field is set.
       */
      @java.lang.Override
      public boolean hasFieldFixed3259() {
        return instance.hasFieldFixed3259();
      }
      /**
       * <code>fixed32 field_fixed32_59 = 59;</code>
       * @return The fieldFixed3259.
       */
      @java.lang.Override
      public int getFieldFixed3259() {
        return instance.getFieldFixed3259();
      }
      /**
       * <code>fixed32 field_fixed32_59 = 59;</code>
       * @param value The fieldFixed3259 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldFixed3259(int value) {
        copyOnWrite();
        instance.setFieldFixed3259(value);
        return this;
      }
      /**
       * <code>fixed32 field_fixed32_59 = 59;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldFixed3259() {
        copyOnWrite();
        instance.clearFieldFixed3259();
        return this;
      }

      /**
       * <code>bool field_bool_60 = 60;</code>
       * @return Whether the fieldBool60 field is set.
       */
      @java.lang.Override
      public boolean hasFieldBool60() {
        return instance.hasFieldBool60();
      }
      /**
       * <code>bool field_bool_60 = 60;</code>
       * @return The fieldBool60.
       */
      @java.lang.Override
      public boolean getFieldBool60() {
        return instance.getFieldBool60();
      }
      /**
       * <code>bool field_bool_60 = 60;</code>
       * @param value The fieldBool60 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldBool60(boolean value) {
        copyOnWrite();
        instance.setFieldBool60(value);
        return this;
      }
      /**
       * <code>bool field_bool_60 = 60;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldBool60() {
        copyOnWrite();
        instance.clearFieldBool60();
        return this;
      }

      /**
       * <code>string field_string_61 = 61;</code>
       * @return Whether the fieldString61 field is set.
       */
      @java.lang.Override
      public boolean hasFieldString61() {
        return instance.hasFieldString61();
      }
      /**
       * <code>string field_string_61 = 61;</code>
       * @return The fieldString61.
       */
      @java.lang.Override
      public java.lang.String getFieldString61() {
        return instance.getFieldString61();
      }
      /**
       * <code>string field_string_61 = 61;</code>
       * @return The bytes for fieldString61.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getFieldString61Bytes() {
        return instance.getFieldString61Bytes();
      }
      /**
       * <code>string field_string_61 = 61;</code>
       * @param value The fieldString61 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldString61(
          java.lang.String value) {
        copyOnWrite();
        instance.setFieldString61(value);
        return this;
      }
      /**
       * <code>string field_string_61 = 61;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldString61() {
        copyOnWrite();
        instance.clearFieldString61();
        return this;
      }
      /**
       * <code>string field_string_61 = 61;</code>
       * @param value The bytes for fieldString61 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldString61Bytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFieldString61Bytes(value);
        return this;
      }

      /**
       * <code>.protobuf.experimental.Proto2Message field_message_62 = 62;</code>
       */
      @java.lang.Override
      public boolean hasFieldMessage62() {
        return instance.hasFieldMessage62();
      }
      /**
       * <code>.protobuf.experimental.Proto2Message field_message_62 = 62;</code>
       */
      @java.lang.Override
      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMessage62() {
        return instance.getFieldMessage62();
      }
      /**
       * <code>.protobuf.experimental.Proto2Message field_message_62 = 62;</code>
       */
      public Builder setFieldMessage62(com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        copyOnWrite();
        instance.setFieldMessage62(value);
        return this;
      }
      /**
       * <code>.protobuf.experimental.Proto2Message field_message_62 = 62;</code>
       */
      public Builder setFieldMessage62(
          com.google.protobuf.testing.Proto2Testing.Proto2Message.Builder builderForValue) {
        copyOnWrite();
        instance.setFieldMessage62(builderForValue.build());
        return this;
      }
      /**
       * <code>.protobuf.experimental.Proto2Message field_message_62 = 62;</code>
       */
      public Builder mergeFieldMessage62(com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        copyOnWrite();
        instance.mergeFieldMessage62(value);
        return this;
      }
      /**
       * <code>.protobuf.experimental.Proto2Message field_message_62 = 62;</code>
       */
      public Builder clearFieldMessage62() {
        copyOnWrite();
        instance.clearFieldMessage62();
        return this;
      }

      /**
       * <code>bytes field_bytes_63 = 63;</code>
       * @return Whether the fieldBytes63 field is set.
       */
      @java.lang.Override
      public boolean hasFieldBytes63() {
        return instance.hasFieldBytes63();
      }
      /**
       * <code>bytes field_bytes_63 = 63;</code>
       * @return The fieldBytes63.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getFieldBytes63() {
        return instance.getFieldBytes63();
      }
      /**
       * <code>bytes field_bytes_63 = 63;</code>
       * @param value The fieldBytes63 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldBytes63(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFieldBytes63(value);
        return this;
      }
      /**
       * <code>bytes field_bytes_63 = 63;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldBytes63() {
        copyOnWrite();
        instance.clearFieldBytes63();
        return this;
      }

      /**
       * <code>uint32 field_uint32_64 = 64;</code>
       * @return Whether the fieldUint3264 field is set.
       */
      @java.lang.Override
      public boolean hasFieldUint3264() {
        return instance.hasFieldUint3264();
      }
      /**
       * <code>uint32 field_uint32_64 = 64;</code>
       * @return The fieldUint3264.
       */
      @java.lang.Override
      public int getFieldUint3264() {
        return instance.getFieldUint3264();
      }
      /**
       * <code>uint32 field_uint32_64 = 64;</code>
       * @param value The fieldUint3264 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldUint3264(int value) {
        copyOnWrite();
        instance.setFieldUint3264(value);
        return this;
      }
      /**
       * <code>uint32 field_uint32_64 = 64;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldUint3264() {
        copyOnWrite();
        instance.clearFieldUint3264();
        return this;
      }

      /**
       * <code>sfixed32 field_sfixed32_65 = 65;</code>
       * @return Whether the fieldSfixed3265 field is set.
       */
      @java.lang.Override
      public boolean hasFieldSfixed3265() {
        return instance.hasFieldSfixed3265();
      }
      /**
       * <code>sfixed32 field_sfixed32_65 = 65;</code>
       * @return The fieldSfixed3265.
       */
      @java.lang.Override
      public int getFieldSfixed3265() {
        return instance.getFieldSfixed3265();
      }
      /**
       * <code>sfixed32 field_sfixed32_65 = 65;</code>
       * @param value The fieldSfixed3265 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldSfixed3265(int value) {
        copyOnWrite();
        instance.setFieldSfixed3265(value);
        return this;
      }
      /**
       * <code>sfixed32 field_sfixed32_65 = 65;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldSfixed3265() {
        copyOnWrite();
        instance.clearFieldSfixed3265();
        return this;
      }

      /**
       * <code>sfixed64 field_sfixed64_66 = 66;</code>
       * @return Whether the fieldSfixed6466 field is set.
       */
      @java.lang.Override
      public boolean hasFieldSfixed6466() {
        return instance.hasFieldSfixed6466();
      }
      /**
       * <code>sfixed64 field_sfixed64_66 = 66;</code>
       * @return The fieldSfixed6466.
       */
      @java.lang.Override
      public long getFieldSfixed6466() {
        return instance.getFieldSfixed6466();
      }
      /**
       * <code>sfixed64 field_sfixed64_66 = 66;</code>
       * @param value The fieldSfixed6466 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldSfixed6466(long value) {
        copyOnWrite();
        instance.setFieldSfixed6466(value);
        return this;
      }
      /**
       * <code>sfixed64 field_sfixed64_66 = 66;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldSfixed6466() {
        copyOnWrite();
        instance.clearFieldSfixed6466();
        return this;
      }

      /**
       * <code>sint32 field_sint32_67 = 67;</code>
       * @return Whether the fieldSint3267 field is set.
       */
      @java.lang.Override
      public boolean hasFieldSint3267() {
        return instance.hasFieldSint3267();
      }
      /**
       * <code>sint32 field_sint32_67 = 67;</code>
       * @return The fieldSint3267.
       */
      @java.lang.Override
      public int getFieldSint3267() {
        return instance.getFieldSint3267();
      }
      /**
       * <code>sint32 field_sint32_67 = 67;</code>
       * @param value The fieldSint3267 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldSint3267(int value) {
        copyOnWrite();
        instance.setFieldSint3267(value);
        return this;
      }
      /**
       * <code>sint32 field_sint32_67 = 67;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldSint3267() {
        copyOnWrite();
        instance.clearFieldSint3267();
        return this;
      }

      /**
       * <code>sint64 field_sint64_68 = 68;</code>
       * @return Whether the fieldSint6468 field is set.
       */
      @java.lang.Override
      public boolean hasFieldSint6468() {
        return instance.hasFieldSint6468();
      }
      /**
       * <code>sint64 field_sint64_68 = 68;</code>
       * @return The fieldSint6468.
       */
      @java.lang.Override
      public long getFieldSint6468() {
        return instance.getFieldSint6468();
      }
      /**
       * <code>sint64 field_sint64_68 = 68;</code>
       * @param value The fieldSint6468 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldSint6468(long value) {
        copyOnWrite();
        instance.setFieldSint6468(value);
        return this;
      }
      /**
       * <code>sint64 field_sint64_68 = 68;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldSint6468() {
        copyOnWrite();
        instance.clearFieldSint6468();
        return this;
      }

      /**
       * <code>group FieldGroup69 = 69 { ... }</code>
       */
      @java.lang.Override
      public boolean hasFieldGroup69() {
        return instance.hasFieldGroup69();
      }
      /**
       * <code>group FieldGroup69 = 69 { ... }</code>
       */
      @java.lang.Override
      public com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 getFieldGroup69() {
        return instance.getFieldGroup69();
      }
      /**
       * <code>group FieldGroup69 = 69 { ... }</code>
       */
      public Builder setFieldGroup69(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 value) {
        copyOnWrite();
        instance.setFieldGroup69(value);
        return this;
      }
      /**
       * <code>group FieldGroup69 = 69 { ... }</code>
       */
      public Builder setFieldGroup69(
          com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69.Builder builderForValue) {
        copyOnWrite();
        instance.setFieldGroup69(builderForValue.build());
        return this;
      }
      /**
       * <code>group FieldGroup69 = 69 { ... }</code>
       */
      public Builder mergeFieldGroup69(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69 value) {
        copyOnWrite();
        instance.mergeFieldGroup69(value);
        return this;
      }
      /**
       * <code>group FieldGroup69 = 69 { ... }</code>
       */
      public Builder clearFieldGroup69() {
        copyOnWrite();
        instance.clearFieldGroup69();
        return this;
      }

      /**
       * <code>required double field_required_double_71 = 71;</code>
       * @return Whether the fieldRequiredDouble71 field is set.
       */
      @java.lang.Override
      public boolean hasFieldRequiredDouble71() {
        return instance.hasFieldRequiredDouble71();
      }
      /**
       * <code>required double field_required_double_71 = 71;</code>
       * @return The fieldRequiredDouble71.
       */
      @java.lang.Override
      public double getFieldRequiredDouble71() {
        return instance.getFieldRequiredDouble71();
      }
      /**
       * <code>required double field_required_double_71 = 71;</code>
       * @param value The fieldRequiredDouble71 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredDouble71(double value) {
        copyOnWrite();
        instance.setFieldRequiredDouble71(value);
        return this;
      }
      /**
       * <code>required double field_required_double_71 = 71;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldRequiredDouble71() {
        copyOnWrite();
        instance.clearFieldRequiredDouble71();
        return this;
      }

      /**
       * <code>required float field_required_float_72 = 72;</code>
       * @return Whether the fieldRequiredFloat72 field is set.
       */
      @java.lang.Override
      public boolean hasFieldRequiredFloat72() {
        return instance.hasFieldRequiredFloat72();
      }
      /**
       * <code>required float field_required_float_72 = 72;</code>
       * @return The fieldRequiredFloat72.
       */
      @java.lang.Override
      public float getFieldRequiredFloat72() {
        return instance.getFieldRequiredFloat72();
      }
      /**
       * <code>required float field_required_float_72 = 72;</code>
       * @param value The fieldRequiredFloat72 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredFloat72(float value) {
        copyOnWrite();
        instance.setFieldRequiredFloat72(value);
        return this;
      }
      /**
       * <code>required float field_required_float_72 = 72;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldRequiredFloat72() {
        copyOnWrite();
        instance.clearFieldRequiredFloat72();
        return this;
      }

      /**
       * <code>required int64 field_required_int64_73 = 73;</code>
       * @return Whether the fieldRequiredInt6473 field is set.
       */
      @java.lang.Override
      public boolean hasFieldRequiredInt6473() {
        return instance.hasFieldRequiredInt6473();
      }
      /**
       * <code>required int64 field_required_int64_73 = 73;</code>
       * @return The fieldRequiredInt6473.
       */
      @java.lang.Override
      public long getFieldRequiredInt6473() {
        return instance.getFieldRequiredInt6473();
      }
      /**
       * <code>required int64 field_required_int64_73 = 73;</code>
       * @param value The fieldRequiredInt6473 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredInt6473(long value) {
        copyOnWrite();
        instance.setFieldRequiredInt6473(value);
        return this;
      }
      /**
       * <code>required int64 field_required_int64_73 = 73;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldRequiredInt6473() {
        copyOnWrite();
        instance.clearFieldRequiredInt6473();
        return this;
      }

      /**
       * <code>required uint64 field_required_uint64_74 = 74;</code>
       * @return Whether the fieldRequiredUint6474 field is set.
       */
      @java.lang.Override
      public boolean hasFieldRequiredUint6474() {
        return instance.hasFieldRequiredUint6474();
      }
      /**
       * <code>required uint64 field_required_uint64_74 = 74;</code>
       * @return The fieldRequiredUint6474.
       */
      @java.lang.Override
      public long getFieldRequiredUint6474() {
        return instance.getFieldRequiredUint6474();
      }
      /**
       * <code>required uint64 field_required_uint64_74 = 74;</code>
       * @param value The fieldRequiredUint6474 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredUint6474(long value) {
        copyOnWrite();
        instance.setFieldRequiredUint6474(value);
        return this;
      }
      /**
       * <code>required uint64 field_required_uint64_74 = 74;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldRequiredUint6474() {
        copyOnWrite();
        instance.clearFieldRequiredUint6474();
        return this;
      }

      /**
       * <code>required int32 field_required_int32_75 = 75;</code>
       * @return Whether the fieldRequiredInt3275 field is set.
       */
      @java.lang.Override
      public boolean hasFieldRequiredInt3275() {
        return instance.hasFieldRequiredInt3275();
      }
      /**
       * <code>required int32 field_required_int32_75 = 75;</code>
       * @return The fieldRequiredInt3275.
       */
      @java.lang.Override
      public int getFieldRequiredInt3275() {
        return instance.getFieldRequiredInt3275();
      }
      /**
       * <code>required int32 field_required_int32_75 = 75;</code>
       * @param value The fieldRequiredInt3275 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredInt3275(int value) {
        copyOnWrite();
        instance.setFieldRequiredInt3275(value);
        return this;
      }
      /**
       * <code>required int32 field_required_int32_75 = 75;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldRequiredInt3275() {
        copyOnWrite();
        instance.clearFieldRequiredInt3275();
        return this;
      }

      /**
       * <code>required fixed64 field_required_fixed64_76 = 76;</code>
       * @return Whether the fieldRequiredFixed6476 field is set.
       */
      @java.lang.Override
      public boolean hasFieldRequiredFixed6476() {
        return instance.hasFieldRequiredFixed6476();
      }
      /**
       * <code>required fixed64 field_required_fixed64_76 = 76;</code>
       * @return The fieldRequiredFixed6476.
       */
      @java.lang.Override
      public long getFieldRequiredFixed6476() {
        return instance.getFieldRequiredFixed6476();
      }
      /**
       * <code>required fixed64 field_required_fixed64_76 = 76;</code>
       * @param value The fieldRequiredFixed6476 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredFixed6476(long value) {
        copyOnWrite();
        instance.setFieldRequiredFixed6476(value);
        return this;
      }
      /**
       * <code>required fixed64 field_required_fixed64_76 = 76;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldRequiredFixed6476() {
        copyOnWrite();
        instance.clearFieldRequiredFixed6476();
        return this;
      }

      /**
       * <code>required fixed32 field_required_fixed32_77 = 77;</code>
       * @return Whether the fieldRequiredFixed3277 field is set.
       */
      @java.lang.Override
      public boolean hasFieldRequiredFixed3277() {
        return instance.hasFieldRequiredFixed3277();
      }
      /**
       * <code>required fixed32 field_required_fixed32_77 = 77;</code>
       * @return The fieldRequiredFixed3277.
       */
      @java.lang.Override
      public int getFieldRequiredFixed3277() {
        return instance.getFieldRequiredFixed3277();
      }
      /**
       * <code>required fixed32 field_required_fixed32_77 = 77;</code>
       * @param value The fieldRequiredFixed3277 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredFixed3277(int value) {
        copyOnWrite();
        instance.setFieldRequiredFixed3277(value);
        return this;
      }
      /**
       * <code>required fixed32 field_required_fixed32_77 = 77;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldRequiredFixed3277() {
        copyOnWrite();
        instance.clearFieldRequiredFixed3277();
        return this;
      }

      /**
       * <code>required bool field_required_bool_78 = 78;</code>
       * @return Whether the fieldRequiredBool78 field is set.
       */
      @java.lang.Override
      public boolean hasFieldRequiredBool78() {
        return instance.hasFieldRequiredBool78();
      }
      /**
       * <code>required bool field_required_bool_78 = 78;</code>
       * @return The fieldRequiredBool78.
       */
      @java.lang.Override
      public boolean getFieldRequiredBool78() {
        return instance.getFieldRequiredBool78();
      }
      /**
       * <code>required bool field_required_bool_78 = 78;</code>
       * @param value The fieldRequiredBool78 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredBool78(boolean value) {
        copyOnWrite();
        instance.setFieldRequiredBool78(value);
        return this;
      }
      /**
       * <code>required bool field_required_bool_78 = 78;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldRequiredBool78() {
        copyOnWrite();
        instance.clearFieldRequiredBool78();
        return this;
      }

      /**
       * <code>required string field_required_string_79 = 79;</code>
       * @return Whether the fieldRequiredString79 field is set.
       */
      @java.lang.Override
      public boolean hasFieldRequiredString79() {
        return instance.hasFieldRequiredString79();
      }
      /**
       * <code>required string field_required_string_79 = 79;</code>
       * @return The fieldRequiredString79.
       */
      @java.lang.Override
      public java.lang.String getFieldRequiredString79() {
        return instance.getFieldRequiredString79();
      }
      /**
       * <code>required string field_required_string_79 = 79;</code>
       * @return The bytes for fieldRequiredString79.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getFieldRequiredString79Bytes() {
        return instance.getFieldRequiredString79Bytes();
      }
      /**
       * <code>required string field_required_string_79 = 79;</code>
       * @param value The fieldRequiredString79 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredString79(
          java.lang.String value) {
        copyOnWrite();
        instance.setFieldRequiredString79(value);
        return this;
      }
      /**
       * <code>required string field_required_string_79 = 79;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldRequiredString79() {
        copyOnWrite();
        instance.clearFieldRequiredString79();
        return this;
      }
      /**
       * <code>required string field_required_string_79 = 79;</code>
       * @param value The bytes for fieldRequiredString79 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredString79Bytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFieldRequiredString79Bytes(value);
        return this;
      }

      /**
       * <code>required .protobuf.experimental.Proto2Message.RequiredNestedMessage field_required_message_80 = 80;</code>
       */
      @java.lang.Override
      public boolean hasFieldRequiredMessage80() {
        return instance.hasFieldRequiredMessage80();
      }
      /**
       * <code>required .protobuf.experimental.Proto2Message.RequiredNestedMessage field_required_message_80 = 80;</code>
       */
      @java.lang.Override
      public com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage getFieldRequiredMessage80() {
        return instance.getFieldRequiredMessage80();
      }
      /**
       * <code>required .protobuf.experimental.Proto2Message.RequiredNestedMessage field_required_message_80 = 80;</code>
       */
      public Builder setFieldRequiredMessage80(com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage value) {
        copyOnWrite();
        instance.setFieldRequiredMessage80(value);
        return this;
        }
      /**
       * <code>required .protobuf.experimental.Proto2Message.RequiredNestedMessage field_required_message_80 = 80;</code>
       */
      public Builder setFieldRequiredMessage80(
          com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage.Builder builderForValue) {
        copyOnWrite();
        instance.setFieldRequiredMessage80(builderForValue.build());
        return this;
      }
      /**
       * <code>required .protobuf.experimental.Proto2Message.RequiredNestedMessage field_required_message_80 = 80;</code>
       */
      public Builder mergeFieldRequiredMessage80(com.google.protobuf.testing.Proto2Testing.Proto2Message.RequiredNestedMessage value) {
        copyOnWrite();
        instance.mergeFieldRequiredMessage80(value);
        return this;
      }
      /**
       * <code>required .protobuf.experimental.Proto2Message.RequiredNestedMessage field_required_message_80 = 80;</code>
       */
      public Builder clearFieldRequiredMessage80() {  copyOnWrite();
        instance.clearFieldRequiredMessage80();
        return this;
      }

      /**
       * <code>required bytes field_required_bytes_81 = 81;</code>
       * @return Whether the fieldRequiredBytes81 field is set.
       */
      @java.lang.Override
      public boolean hasFieldRequiredBytes81() {
        return instance.hasFieldRequiredBytes81();
      }
      /**
       * <code>required bytes field_required_bytes_81 = 81;</code>
       * @return The fieldRequiredBytes81.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getFieldRequiredBytes81() {
        return instance.getFieldRequiredBytes81();
      }
      /**
       * <code>required bytes field_required_bytes_81 = 81;</code>
       * @param value The fieldRequiredBytes81 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredBytes81(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFieldRequiredBytes81(value);
        return this;
      }
      /**
       * <code>required bytes field_required_bytes_81 = 81;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldRequiredBytes81() {
        copyOnWrite();
        instance.clearFieldRequiredBytes81();
        return this;
      }

      /**
       * <code>required uint32 field_required_uint32_82 = 82;</code>
       * @return Whether the fieldRequiredUint3282 field is set.
       */
      @java.lang.Override
      public boolean hasFieldRequiredUint3282() {
        return instance.hasFieldRequiredUint3282();
      }
      /**
       * <code>required uint32 field_required_uint32_82 = 82;</code>
       * @return The fieldRequiredUint3282.
       */
      @java.lang.Override
      public int getFieldRequiredUint3282() {
        return instance.getFieldRequiredUint3282();
      }
      /**
       * <code>required uint32 field_required_uint32_82 = 82;</code>
       * @param value The fieldRequiredUint3282 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredUint3282(int value) {
        copyOnWrite();
        instance.setFieldRequiredUint3282(value);
        return this;
      }
      /**
       * <code>required uint32 field_required_uint32_82 = 82;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldRequiredUint3282() {
        copyOnWrite();
        instance.clearFieldRequiredUint3282();
        return this;
      }

      /**
       * <code>required .protobuf.experimental.Proto2Message.TestEnum field_required_enum_83 = 83;</code>
       * @return Whether the fieldRequiredEnum83 field is set.
       */
      @java.lang.Override
      public boolean hasFieldRequiredEnum83() {
        return instance.hasFieldRequiredEnum83();
      }
      /**
       * <code>required .protobuf.experimental.Proto2Message.TestEnum field_required_enum_83 = 83;</code>
       * @return The fieldRequiredEnum83.
       */
      @java.lang.Override
      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldRequiredEnum83() {
        return instance.getFieldRequiredEnum83();
      }
      /**
       * <code>required .protobuf.experimental.Proto2Message.TestEnum field_required_enum_83 = 83;</code>
       * @param value The enum numeric value on the wire for fieldRequiredEnum83 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredEnum83(com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        copyOnWrite();
        instance.setFieldRequiredEnum83(value);
        return this;
      }
      /**
       * <code>required .protobuf.experimental.Proto2Message.TestEnum field_required_enum_83 = 83;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldRequiredEnum83() {
        copyOnWrite();
        instance.clearFieldRequiredEnum83();
        return this;
      }

      /**
       * <code>required sfixed32 field_required_sfixed32_84 = 84;</code>
       * @return Whether the fieldRequiredSfixed3284 field is set.
       */
      @java.lang.Override
      public boolean hasFieldRequiredSfixed3284() {
        return instance.hasFieldRequiredSfixed3284();
      }
      /**
       * <code>required sfixed32 field_required_sfixed32_84 = 84;</code>
       * @return The fieldRequiredSfixed3284.
       */
      @java.lang.Override
      public int getFieldRequiredSfixed3284() {
        return instance.getFieldRequiredSfixed3284();
      }
      /**
       * <code>required sfixed32 field_required_sfixed32_84 = 84;</code>
       * @param value The fieldRequiredSfixed3284 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredSfixed3284(int value) {
        copyOnWrite();
        instance.setFieldRequiredSfixed3284(value);
        return this;
      }
      /**
       * <code>required sfixed32 field_required_sfixed32_84 = 84;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldRequiredSfixed3284() {
        copyOnWrite();
        instance.clearFieldRequiredSfixed3284();
        return this;
      }

      /**
       * <code>required sfixed64 field_required_sfixed64_85 = 85;</code>
       * @return Whether the fieldRequiredSfixed6485 field is set.
       */
      @java.lang.Override
      public boolean hasFieldRequiredSfixed6485() {
        return instance.hasFieldRequiredSfixed6485();
      }
      /**
       * <code>required sfixed64 field_required_sfixed64_85 = 85;</code>
       * @return The fieldRequiredSfixed6485.
       */
      @java.lang.Override
      public long getFieldRequiredSfixed6485() {
        return instance.getFieldRequiredSfixed6485();
      }
      /**
       * <code>required sfixed64 field_required_sfixed64_85 = 85;</code>
       * @param value The fieldRequiredSfixed6485 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredSfixed6485(long value) {
        copyOnWrite();
        instance.setFieldRequiredSfixed6485(value);
        return this;
      }
      /**
       * <code>required sfixed64 field_required_sfixed64_85 = 85;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldRequiredSfixed6485() {
        copyOnWrite();
        instance.clearFieldRequiredSfixed6485();
        return this;
      }

      /**
       * <code>required sint32 field_required_sint32_86 = 86;</code>
       * @return Whether the fieldRequiredSint3286 field is set.
       */
      @java.lang.Override
      public boolean hasFieldRequiredSint3286() {
        return instance.hasFieldRequiredSint3286();
      }
      /**
       * <code>required sint32 field_required_sint32_86 = 86;</code>
       * @return The fieldRequiredSint3286.
       */
      @java.lang.Override
      public int getFieldRequiredSint3286() {
        return instance.getFieldRequiredSint3286();
      }
      /**
       * <code>required sint32 field_required_sint32_86 = 86;</code>
       * @param value The fieldRequiredSint3286 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredSint3286(int value) {
        copyOnWrite();
        instance.setFieldRequiredSint3286(value);
        return this;
      }
      /**
       * <code>required sint32 field_required_sint32_86 = 86;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldRequiredSint3286() {
        copyOnWrite();
        instance.clearFieldRequiredSint3286();
        return this;
      }

      /**
       * <code>required sint64 field_required_sint64_87 = 87;</code>
       * @return Whether the fieldRequiredSint6487 field is set.
       */
      @java.lang.Override
      public boolean hasFieldRequiredSint6487() {
        return instance.hasFieldRequiredSint6487();
      }
      /**
       * <code>required sint64 field_required_sint64_87 = 87;</code>
       * @return The fieldRequiredSint6487.
       */
      @java.lang.Override
      public long getFieldRequiredSint6487() {
        return instance.getFieldRequiredSint6487();
      }
      /**
       * <code>required sint64 field_required_sint64_87 = 87;</code>
       * @param value The fieldRequiredSint6487 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldRequiredSint6487(long value) {
        copyOnWrite();
        instance.setFieldRequiredSint6487(value);
        return this;
      }
      /**
       * <code>required sint64 field_required_sint64_87 = 87;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldRequiredSint6487() {
        copyOnWrite();
        instance.clearFieldRequiredSint6487();
        return this;
      }

      /**
       * <code>required group FieldRequiredGroup88 = 88 { ... }</code>
       */
      @java.lang.Override
      public boolean hasFieldRequiredGroup88() {
        return instance.hasFieldRequiredGroup88();
      }
      /**
       * <code>required group FieldRequiredGroup88 = 88 { ... }</code>
       */
      @java.lang.Override
      public com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 getFieldRequiredGroup88() {
        return instance.getFieldRequiredGroup88();
      }
      /**
       * <code>required group FieldRequiredGroup88 = 88 { ... }</code>
       */
      public Builder setFieldRequiredGroup88(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 value) {
        copyOnWrite();
        instance.setFieldRequiredGroup88(value);
        return this;
        }
      /**
       * <code>required group FieldRequiredGroup88 = 88 { ... }</code>
       */
      public Builder setFieldRequiredGroup88(
          com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88.Builder builderForValue) {
        copyOnWrite();
        instance.setFieldRequiredGroup88(builderForValue.build());
        return this;
      }
      /**
       * <code>required group FieldRequiredGroup88 = 88 { ... }</code>
       */
      public Builder mergeFieldRequiredGroup88(com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldRequiredGroup88 value) {
        copyOnWrite();
        instance.mergeFieldRequiredGroup88(value);
        return this;
      }
      /**
       * <code>required group FieldRequiredGroup88 = 88 { ... }</code>
       */
      public Builder clearFieldRequiredGroup88() {  copyOnWrite();
        instance.clearFieldRequiredGroup88();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protobuf.experimental.Proto2Message)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.protobuf.testing.Proto2Testing.Proto2Message();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "testOneof_",
              "testOneofCase_",
              "bitField0_",
              "bitField1_",
              "fieldDouble1_",
              "fieldFloat2_",
              "fieldInt643_",
              "fieldUint644_",
              "fieldInt325_",
              "fieldFixed646_",
              "fieldFixed327_",
              "fieldBool8_",
              "fieldString9_",
              "fieldMessage10_",
              "fieldBytes11_",
              "fieldUint3212_",
              "fieldEnum13_",
              com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetVerifier(),
              "fieldSfixed3214_",
              "fieldSfixed6415_",
              "fieldSint3216_",
              "fieldSint6417_",
              "fieldDoubleList18_",
              "fieldFloatList19_",
              "fieldInt64List20_",
              "fieldUint64List21_",
              "fieldInt32List22_",
              "fieldFixed64List23_",
              "fieldFixed32List24_",
              "fieldBoolList25_",
              "fieldStringList26_",
              "fieldMessageList27_",
              com.google.protobuf.testing.Proto2Testing.Proto2Message.class,
              "fieldBytesList28_",
              "fieldUint32List29_",
              "fieldEnumList30_",
              com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetVerifier(),
              "fieldSfixed32List31_",
              "fieldSfixed64List32_",
              "fieldSint32List33_",
              "fieldSint64List34_",
              "fieldDoubleListPacked35_",
              "fieldFloatListPacked36_",
              "fieldInt64ListPacked37_",
              "fieldUint64ListPacked38_",
              "fieldInt32ListPacked39_",
              "fieldFixed64ListPacked40_",
              "fieldFixed32ListPacked41_",
              "fieldBoolListPacked42_",
              "fieldUint32ListPacked43_",
              "fieldEnumListPacked44_",
              com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetVerifier(),
              "fieldSfixed32ListPacked45_",
              "fieldSfixed64ListPacked46_",
              "fieldSint32ListPacked47_",
              "fieldSint64ListPacked48_",
              "fieldGroup49_",
              "fieldGroupList51_",
              com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroupList51.class,
              com.google.protobuf.testing.Proto2Testing.Proto2Message.class,
              com.google.protobuf.testing.Proto2Testing.Proto2Message.FieldGroup69.class,
              "fieldRequiredDouble71_",
              "fieldRequiredFloat72_",
              "fieldRequiredInt6473_",
              "fieldRequiredUint6474_",
              "fieldRequiredInt3275_",
              "fieldRequiredFixed6476_",
              "fieldRequiredFixed3277_",
              "fieldRequiredBool78_",
              "fieldRequiredString79_",
              "fieldRequiredMessage80_",
              "fieldRequiredBytes81_",
              "fieldRequiredUint3282_",
              "fieldRequiredEnum83_",
              com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetVerifier(),
              "fieldRequiredSfixed3284_",
              "fieldRequiredSfixed6485_",
              "fieldRequiredSint3286_",
              "fieldRequiredSint6487_",
              "fieldRequiredGroup88_",
            };
            java.lang.String info =
                "\u0001U\u0001\u0002\u0001XU\u0000 \u0015\u0001\u1000\u0000\u0002\u1001\u0001\u0003" +
                "\u1002\u0002\u0004\u1003\u0003\u0005\u1004\u0004\u0006\u1005\u0005\u0007\u1006\u0006" +
                "\b\u1007\u0007\t\u1008\b\n\u1409\t\u000b\u100a\n\f\u100b\u000b\r\u100c\f\u000e\u100d" +
                "\r\u000f\u100e\u000e\u0010\u100f\u000f\u0011\u1010\u0010\u0012\u0012\u0013\u0013" +
                "\u0014\u0014\u0015\u0015\u0016\u0016\u0017\u0017\u0018\u0018\u0019\u0019\u001a\u001a" +
                "\u001b\u041b\u001c\u001c\u001d\u001d\u001e\u001e\u001f\u001f  !!\"\"##$$%%&&\'\'" +
                "(())**++,,--..//001\u1011\u0011315\u1033\u00006\u1034\u00007\u1035\u00008\u1036\u0000" +
                "9\u1037\u0000:\u1038\u0000;\u1039\u0000<\u103a\u0000=\u103b\u0000>\u143c\u0000?\u103d" +
                "\u0000@\u103e\u0000A\u1040\u0000B\u1041\u0000C\u1042\u0000D\u1043\u0000E\u1044\u0000" +
                "G\u1500#H\u1501$I\u1502%J\u1503&K\u1504\'L\u1505(M\u1506)N\u1507*O\u1508+P\u1509" +
                ",Q\u150a-R\u150b.S\u150c/T\u150d0U\u150e1V\u150f2W\u15103X\u15114";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.protobuf.testing.Proto2Testing.Proto2Message> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.protobuf.testing.Proto2Testing.Proto2Message.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.protobuf.testing.Proto2Testing.Proto2Message>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:protobuf.experimental.Proto2Message)
    private static final com.google.protobuf.testing.Proto2Testing.Proto2Message DEFAULT_INSTANCE;
    static {
      Proto2Message defaultInstance = new Proto2Message();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Proto2Message.class, defaultInstance);
    }

    public static com.google.protobuf.testing.Proto2Testing.Proto2Message getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Proto2Message> PARSER;

    public static com.google.protobuf.Parser<Proto2Message> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface Proto2EmptyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protobuf.experimental.Proto2Empty)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code protobuf.experimental.Proto2Empty}
   */
  public  static final class Proto2Empty extends
      com.google.protobuf.GeneratedMessageLite<
          Proto2Empty, Proto2Empty.Builder> implements
      // @@protoc_insertion_point(message_implements:protobuf.experimental.Proto2Empty)
      Proto2EmptyOrBuilder {
    private Proto2Empty() {
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Empty parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Empty parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Empty parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Empty parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Empty parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Empty parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Empty parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Empty parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Empty parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Empty parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Empty parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2Empty parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.protobuf.testing.Proto2Testing.Proto2Empty prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code protobuf.experimental.Proto2Empty}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.protobuf.testing.Proto2Testing.Proto2Empty, Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf.experimental.Proto2Empty)
        com.google.protobuf.testing.Proto2Testing.Proto2EmptyOrBuilder {
      // Construct using com.google.protobuf.testing.Proto2Testing.Proto2Empty.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:protobuf.experimental.Proto2Empty)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.protobuf.testing.Proto2Testing.Proto2Empty();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = null;java.lang.String info =
                "\u0001\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.protobuf.testing.Proto2Testing.Proto2Empty> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.protobuf.testing.Proto2Testing.Proto2Empty.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.protobuf.testing.Proto2Testing.Proto2Empty>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:protobuf.experimental.Proto2Empty)
    private static final com.google.protobuf.testing.Proto2Testing.Proto2Empty DEFAULT_INSTANCE;
    static {
      Proto2Empty defaultInstance = new Proto2Empty();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Proto2Empty.class, defaultInstance);
    }

    public static com.google.protobuf.testing.Proto2Testing.Proto2Empty getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Proto2Empty> PARSER;

    public static com.google.protobuf.Parser<Proto2Empty> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface Proto2MessageWithExtensionsOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:protobuf.experimental.Proto2MessageWithExtensions)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                Proto2MessageWithExtensions, Proto2MessageWithExtensions.Builder> {
  }
  /**
   * Protobuf type {@code protobuf.experimental.Proto2MessageWithExtensions}
   */
  public  static final class Proto2MessageWithExtensions extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        Proto2MessageWithExtensions, Proto2MessageWithExtensions.Builder> implements
      // @@protoc_insertion_point(message_implements:protobuf.experimental.Proto2MessageWithExtensions)
      Proto2MessageWithExtensionsOrBuilder {
    private Proto2MessageWithExtensions() {
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code protobuf.experimental.Proto2MessageWithExtensions}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions, Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf.experimental.Proto2MessageWithExtensions)
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensionsOrBuilder {
      // Construct using com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:protobuf.experimental.Proto2MessageWithExtensions)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = null;java.lang.String info =
                "\u0001\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:protobuf.experimental.Proto2MessageWithExtensions)
    private static final com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions DEFAULT_INSTANCE;
    static {
      Proto2MessageWithExtensions defaultInstance = new Proto2MessageWithExtensions();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Proto2MessageWithExtensions.class, defaultInstance);
    }

    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Proto2MessageWithExtensions> PARSER;

    public static com.google.protobuf.Parser<Proto2MessageWithExtensions> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface FieldGroup49OrBuilder extends
      // @@protoc_insertion_point(interface_extends:protobuf.experimental.FieldGroup49)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 field_int32_50 = 50;</code>
     * @return Whether the fieldInt3250 field is set.
     */
    boolean hasFieldInt3250();
    /**
     * <code>optional int32 field_int32_50 = 50;</code>
     * @return The fieldInt3250.
     */
    int getFieldInt3250();
  }
  /**
   * Protobuf type {@code protobuf.experimental.FieldGroup49}
   */
  public  static final class FieldGroup49 extends
      com.google.protobuf.GeneratedMessageLite<
          FieldGroup49, FieldGroup49.Builder> implements
      // @@protoc_insertion_point(message_implements:protobuf.experimental.FieldGroup49)
      FieldGroup49OrBuilder {
    private FieldGroup49() {
    }
    private int bitField0_;
    public static final int FIELD_INT32_50_FIELD_NUMBER = 50;
    private int fieldInt3250_;
    /**
     * <code>optional int32 field_int32_50 = 50;</code>
     * @return Whether the fieldInt3250 field is set.
     */
    @java.lang.Override
    public boolean hasFieldInt3250() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional int32 field_int32_50 = 50;</code>
     * @return The fieldInt3250.
     */
    @java.lang.Override
    public int getFieldInt3250() {
      return fieldInt3250_;
    }
    /**
     * <code>optional int32 field_int32_50 = 50;</code>
     * @param value The fieldInt3250 to set.
     */
    private void setFieldInt3250(int value) {
      bitField0_ |= 0x00000001;
      fieldInt3250_ = value;
    }
    /**
     * <code>optional int32 field_int32_50 = 50;</code>
     */
    private void clearFieldInt3250() {
      bitField0_ = (bitField0_ & ~0x00000001);
      fieldInt3250_ = 0;
    }

    public static com.google.protobuf.testing.Proto2Testing.FieldGroup49 parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroup49 parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroup49 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroup49 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroup49 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroup49 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroup49 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroup49 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroup49 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroup49 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroup49 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroup49 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.protobuf.testing.Proto2Testing.FieldGroup49 prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code protobuf.experimental.FieldGroup49}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.protobuf.testing.Proto2Testing.FieldGroup49, Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf.experimental.FieldGroup49)
        com.google.protobuf.testing.Proto2Testing.FieldGroup49OrBuilder {
      // Construct using com.google.protobuf.testing.Proto2Testing.FieldGroup49.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional int32 field_int32_50 = 50;</code>
       * @return Whether the fieldInt3250 field is set.
       */
      @java.lang.Override
      public boolean hasFieldInt3250() {
        return instance.hasFieldInt3250();
      }
      /**
       * <code>optional int32 field_int32_50 = 50;</code>
       * @return The fieldInt3250.
       */
      @java.lang.Override
      public int getFieldInt3250() {
        return instance.getFieldInt3250();
      }
      /**
       * <code>optional int32 field_int32_50 = 50;</code>
       * @param value The fieldInt3250 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldInt3250(int value) {
        copyOnWrite();
        instance.setFieldInt3250(value);
        return this;
      }
      /**
       * <code>optional int32 field_int32_50 = 50;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldInt3250() {
        copyOnWrite();
        instance.clearFieldInt3250();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protobuf.experimental.FieldGroup49)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.protobuf.testing.Proto2Testing.FieldGroup49();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "fieldInt3250_",
            };
            java.lang.String info =
                "\u0001\u0001\u0000\u000122\u0001\u0000\u0000\u00002\u1004\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.protobuf.testing.Proto2Testing.FieldGroup49> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.protobuf.testing.Proto2Testing.FieldGroup49.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.protobuf.testing.Proto2Testing.FieldGroup49>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:protobuf.experimental.FieldGroup49)
    private static final com.google.protobuf.testing.Proto2Testing.FieldGroup49 DEFAULT_INSTANCE;
    static {
      FieldGroup49 defaultInstance = new FieldGroup49();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        FieldGroup49.class, defaultInstance);
    }

    public static com.google.protobuf.testing.Proto2Testing.FieldGroup49 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<FieldGroup49> PARSER;

    public static com.google.protobuf.Parser<FieldGroup49> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface FieldGroupList51OrBuilder extends
      // @@protoc_insertion_point(interface_extends:protobuf.experimental.FieldGroupList51)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 field_int32_52 = 52;</code>
     * @return Whether the fieldInt3252 field is set.
     */
    boolean hasFieldInt3252();
    /**
     * <code>optional int32 field_int32_52 = 52;</code>
     * @return The fieldInt3252.
     */
    int getFieldInt3252();
  }
  /**
   * Protobuf type {@code protobuf.experimental.FieldGroupList51}
   */
  public  static final class FieldGroupList51 extends
      com.google.protobuf.GeneratedMessageLite<
          FieldGroupList51, FieldGroupList51.Builder> implements
      // @@protoc_insertion_point(message_implements:protobuf.experimental.FieldGroupList51)
      FieldGroupList51OrBuilder {
    private FieldGroupList51() {
    }
    private int bitField0_;
    public static final int FIELD_INT32_52_FIELD_NUMBER = 52;
    private int fieldInt3252_;
    /**
     * <code>optional int32 field_int32_52 = 52;</code>
     * @return Whether the fieldInt3252 field is set.
     */
    @java.lang.Override
    public boolean hasFieldInt3252() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional int32 field_int32_52 = 52;</code>
     * @return The fieldInt3252.
     */
    @java.lang.Override
    public int getFieldInt3252() {
      return fieldInt3252_;
    }
    /**
     * <code>optional int32 field_int32_52 = 52;</code>
     * @param value The fieldInt3252 to set.
     */
    private void setFieldInt3252(int value) {
      bitField0_ |= 0x00000001;
      fieldInt3252_ = value;
    }
    /**
     * <code>optional int32 field_int32_52 = 52;</code>
     */
    private void clearFieldInt3252() {
      bitField0_ = (bitField0_ & ~0x00000001);
      fieldInt3252_ = 0;
    }

    public static com.google.protobuf.testing.Proto2Testing.FieldGroupList51 parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroupList51 parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroupList51 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroupList51 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroupList51 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroupList51 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroupList51 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroupList51 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroupList51 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroupList51 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroupList51 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.FieldGroupList51 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.protobuf.testing.Proto2Testing.FieldGroupList51 prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code protobuf.experimental.FieldGroupList51}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.protobuf.testing.Proto2Testing.FieldGroupList51, Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf.experimental.FieldGroupList51)
        com.google.protobuf.testing.Proto2Testing.FieldGroupList51OrBuilder {
      // Construct using com.google.protobuf.testing.Proto2Testing.FieldGroupList51.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional int32 field_int32_52 = 52;</code>
       * @return Whether the fieldInt3252 field is set.
       */
      @java.lang.Override
      public boolean hasFieldInt3252() {
        return instance.hasFieldInt3252();
      }
      /**
       * <code>optional int32 field_int32_52 = 52;</code>
       * @return The fieldInt3252.
       */
      @java.lang.Override
      public int getFieldInt3252() {
        return instance.getFieldInt3252();
      }
      /**
       * <code>optional int32 field_int32_52 = 52;</code>
       * @param value The fieldInt3252 to set.
       * @return This builder for chaining.
       */
      public Builder setFieldInt3252(int value) {
        copyOnWrite();
        instance.setFieldInt3252(value);
        return this;
      }
      /**
       * <code>optional int32 field_int32_52 = 52;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldInt3252() {
        copyOnWrite();
        instance.clearFieldInt3252();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protobuf.experimental.FieldGroupList51)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.protobuf.testing.Proto2Testing.FieldGroupList51();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "fieldInt3252_",
            };
            java.lang.String info =
                "\u0001\u0001\u0000\u000144\u0001\u0000\u0000\u00004\u1004\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.protobuf.testing.Proto2Testing.FieldGroupList51> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.protobuf.testing.Proto2Testing.FieldGroupList51.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.protobuf.testing.Proto2Testing.FieldGroupList51>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:protobuf.experimental.FieldGroupList51)
    private static final com.google.protobuf.testing.Proto2Testing.FieldGroupList51 DEFAULT_INSTANCE;
    static {
      FieldGroupList51 defaultInstance = new FieldGroupList51();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        FieldGroupList51.class, defaultInstance);
    }

    public static com.google.protobuf.testing.Proto2Testing.FieldGroupList51 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<FieldGroupList51> PARSER;

    public static com.google.protobuf.Parser<FieldGroupList51> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface Proto2MessageWithMapsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protobuf.experimental.Proto2MessageWithMaps)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
     */
    int getFieldMapBoolBool1Count();
    /**
     * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
     */
    boolean containsFieldMapBoolBool1(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolBool1Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, java.lang.Boolean>
    getFieldMapBoolBool1();
    /**
     * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
     */
    java.util.Map<java.lang.Boolean, java.lang.Boolean>
    getFieldMapBoolBool1Map();
    /**
     * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
     */

    boolean getFieldMapBoolBool1OrDefault(
        boolean key,
        boolean defaultValue);
    /**
     * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
     */

    boolean getFieldMapBoolBool1OrThrow(
        boolean key);

    /**
     * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
     */
    int getFieldMapBoolBytes2Count();
    /**
     * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
     */
    boolean containsFieldMapBoolBytes2(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolBytes2Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, com.google.protobuf.ByteString>
    getFieldMapBoolBytes2();
    /**
     * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
     */
    java.util.Map<java.lang.Boolean, com.google.protobuf.ByteString>
    getFieldMapBoolBytes2Map();
    /**
     * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
     */

    com.google.protobuf.ByteString getFieldMapBoolBytes2OrDefault(
        boolean key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
     */

    com.google.protobuf.ByteString getFieldMapBoolBytes2OrThrow(
        boolean key);

    /**
     * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
     */
    int getFieldMapBoolDouble3Count();
    /**
     * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
     */
    boolean containsFieldMapBoolDouble3(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolDouble3Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, java.lang.Double>
    getFieldMapBoolDouble3();
    /**
     * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
     */
    java.util.Map<java.lang.Boolean, java.lang.Double>
    getFieldMapBoolDouble3Map();
    /**
     * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
     */

    double getFieldMapBoolDouble3OrDefault(
        boolean key,
        double defaultValue);
    /**
     * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
     */

    double getFieldMapBoolDouble3OrThrow(
        boolean key);

    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
     */
    int getFieldMapBoolEnum4Count();
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
     */
    boolean containsFieldMapBoolEnum4(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolEnum4Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapBoolEnum4();
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
     */
    java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapBoolEnum4Map();
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapBoolEnum4OrDefault(
        boolean key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue);
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapBoolEnum4OrThrow(
        boolean key);

    /**
     * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
     */
    int getFieldMapBoolFixed325Count();
    /**
     * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
     */
    boolean containsFieldMapBoolFixed325(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolFixed325Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, java.lang.Integer>
    getFieldMapBoolFixed325();
    /**
     * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
     */
    java.util.Map<java.lang.Boolean, java.lang.Integer>
    getFieldMapBoolFixed325Map();
    /**
     * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
     */

    int getFieldMapBoolFixed325OrDefault(
        boolean key,
        int defaultValue);
    /**
     * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
     */

    int getFieldMapBoolFixed325OrThrow(
        boolean key);

    /**
     * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
     */
    int getFieldMapBoolFixed646Count();
    /**
     * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
     */
    boolean containsFieldMapBoolFixed646(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolFixed646Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, java.lang.Long>
    getFieldMapBoolFixed646();
    /**
     * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
     */
    java.util.Map<java.lang.Boolean, java.lang.Long>
    getFieldMapBoolFixed646Map();
    /**
     * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
     */

    long getFieldMapBoolFixed646OrDefault(
        boolean key,
        long defaultValue);
    /**
     * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
     */

    long getFieldMapBoolFixed646OrThrow(
        boolean key);

    /**
     * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
     */
    int getFieldMapBoolFloat7Count();
    /**
     * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
     */
    boolean containsFieldMapBoolFloat7(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolFloat7Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, java.lang.Float>
    getFieldMapBoolFloat7();
    /**
     * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
     */
    java.util.Map<java.lang.Boolean, java.lang.Float>
    getFieldMapBoolFloat7Map();
    /**
     * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
     */

    float getFieldMapBoolFloat7OrDefault(
        boolean key,
        float defaultValue);
    /**
     * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
     */

    float getFieldMapBoolFloat7OrThrow(
        boolean key);

    /**
     * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
     */
    int getFieldMapBoolInt328Count();
    /**
     * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
     */
    boolean containsFieldMapBoolInt328(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolInt328Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, java.lang.Integer>
    getFieldMapBoolInt328();
    /**
     * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
     */
    java.util.Map<java.lang.Boolean, java.lang.Integer>
    getFieldMapBoolInt328Map();
    /**
     * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
     */

    int getFieldMapBoolInt328OrDefault(
        boolean key,
        int defaultValue);
    /**
     * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
     */

    int getFieldMapBoolInt328OrThrow(
        boolean key);

    /**
     * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
     */
    int getFieldMapBoolInt649Count();
    /**
     * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
     */
    boolean containsFieldMapBoolInt649(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolInt649Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, java.lang.Long>
    getFieldMapBoolInt649();
    /**
     * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
     */
    java.util.Map<java.lang.Boolean, java.lang.Long>
    getFieldMapBoolInt649Map();
    /**
     * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
     */

    long getFieldMapBoolInt649OrDefault(
        boolean key,
        long defaultValue);
    /**
     * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
     */

    long getFieldMapBoolInt649OrThrow(
        boolean key);

    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
     */
    int getFieldMapBoolMessage10Count();
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
     */
    boolean containsFieldMapBoolMessage10(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolMessage10Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapBoolMessage10();
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
     */
    java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapBoolMessage10Map();
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapBoolMessage10OrDefault(
        boolean key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue);
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapBoolMessage10OrThrow(
        boolean key);

    /**
     * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
     */
    int getFieldMapBoolSfixed3211Count();
    /**
     * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
     */
    boolean containsFieldMapBoolSfixed3211(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolSfixed3211Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, java.lang.Integer>
    getFieldMapBoolSfixed3211();
    /**
     * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
     */
    java.util.Map<java.lang.Boolean, java.lang.Integer>
    getFieldMapBoolSfixed3211Map();
    /**
     * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
     */

    int getFieldMapBoolSfixed3211OrDefault(
        boolean key,
        int defaultValue);
    /**
     * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
     */

    int getFieldMapBoolSfixed3211OrThrow(
        boolean key);

    /**
     * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
     */
    int getFieldMapBoolSfixed6412Count();
    /**
     * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
     */
    boolean containsFieldMapBoolSfixed6412(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolSfixed6412Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, java.lang.Long>
    getFieldMapBoolSfixed6412();
    /**
     * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
     */
    java.util.Map<java.lang.Boolean, java.lang.Long>
    getFieldMapBoolSfixed6412Map();
    /**
     * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
     */

    long getFieldMapBoolSfixed6412OrDefault(
        boolean key,
        long defaultValue);
    /**
     * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
     */

    long getFieldMapBoolSfixed6412OrThrow(
        boolean key);

    /**
     * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
     */
    int getFieldMapBoolSint3213Count();
    /**
     * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
     */
    boolean containsFieldMapBoolSint3213(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolSint3213Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, java.lang.Integer>
    getFieldMapBoolSint3213();
    /**
     * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
     */
    java.util.Map<java.lang.Boolean, java.lang.Integer>
    getFieldMapBoolSint3213Map();
    /**
     * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
     */

    int getFieldMapBoolSint3213OrDefault(
        boolean key,
        int defaultValue);
    /**
     * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
     */

    int getFieldMapBoolSint3213OrThrow(
        boolean key);

    /**
     * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
     */
    int getFieldMapBoolSint6414Count();
    /**
     * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
     */
    boolean containsFieldMapBoolSint6414(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolSint6414Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, java.lang.Long>
    getFieldMapBoolSint6414();
    /**
     * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
     */
    java.util.Map<java.lang.Boolean, java.lang.Long>
    getFieldMapBoolSint6414Map();
    /**
     * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
     */

    long getFieldMapBoolSint6414OrDefault(
        boolean key,
        long defaultValue);
    /**
     * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
     */

    long getFieldMapBoolSint6414OrThrow(
        boolean key);

    /**
     * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
     */
    int getFieldMapBoolString15Count();
    /**
     * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
     */
    boolean containsFieldMapBoolString15(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolString15Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, java.lang.String>
    getFieldMapBoolString15();
    /**
     * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
     */
    java.util.Map<java.lang.Boolean, java.lang.String>
    getFieldMapBoolString15Map();
    /**
     * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
     */

    java.lang.String getFieldMapBoolString15OrDefault(
        boolean key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
     */

    java.lang.String getFieldMapBoolString15OrThrow(
        boolean key);

    /**
     * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
     */
    int getFieldMapBoolUint3216Count();
    /**
     * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
     */
    boolean containsFieldMapBoolUint3216(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolUint3216Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, java.lang.Integer>
    getFieldMapBoolUint3216();
    /**
     * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
     */
    java.util.Map<java.lang.Boolean, java.lang.Integer>
    getFieldMapBoolUint3216Map();
    /**
     * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
     */

    int getFieldMapBoolUint3216OrDefault(
        boolean key,
        int defaultValue);
    /**
     * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
     */

    int getFieldMapBoolUint3216OrThrow(
        boolean key);

    /**
     * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
     */
    int getFieldMapBoolUint6417Count();
    /**
     * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
     */
    boolean containsFieldMapBoolUint6417(
        boolean key);
    /**
     * Use {@link #getFieldMapBoolUint6417Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Boolean, java.lang.Long>
    getFieldMapBoolUint6417();
    /**
     * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
     */
    java.util.Map<java.lang.Boolean, java.lang.Long>
    getFieldMapBoolUint6417Map();
    /**
     * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
     */

    long getFieldMapBoolUint6417OrDefault(
        boolean key,
        long defaultValue);
    /**
     * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
     */

    long getFieldMapBoolUint6417OrThrow(
        boolean key);

    /**
     * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
     */
    int getFieldMapFixed32Bool18Count();
    /**
     * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
     */
    boolean containsFieldMapFixed32Bool18(
        int key);
    /**
     * Use {@link #getFieldMapFixed32Bool18Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Boolean>
    getFieldMapFixed32Bool18();
    /**
     * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Boolean>
    getFieldMapFixed32Bool18Map();
    /**
     * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
     */

    boolean getFieldMapFixed32Bool18OrDefault(
        int key,
        boolean defaultValue);
    /**
     * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
     */

    boolean getFieldMapFixed32Bool18OrThrow(
        int key);

    /**
     * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
     */
    int getFieldMapFixed32Bytes19Count();
    /**
     * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
     */
    boolean containsFieldMapFixed32Bytes19(
        int key);
    /**
     * Use {@link #getFieldMapFixed32Bytes19Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getFieldMapFixed32Bytes19();
    /**
     * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getFieldMapFixed32Bytes19Map();
    /**
     * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
     */

    com.google.protobuf.ByteString getFieldMapFixed32Bytes19OrDefault(
        int key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
     */

    com.google.protobuf.ByteString getFieldMapFixed32Bytes19OrThrow(
        int key);

    /**
     * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
     */
    int getFieldMapFixed32Double20Count();
    /**
     * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
     */
    boolean containsFieldMapFixed32Double20(
        int key);
    /**
     * Use {@link #getFieldMapFixed32Double20Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Double>
    getFieldMapFixed32Double20();
    /**
     * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Double>
    getFieldMapFixed32Double20Map();
    /**
     * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
     */

    double getFieldMapFixed32Double20OrDefault(
        int key,
        double defaultValue);
    /**
     * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
     */

    double getFieldMapFixed32Double20OrThrow(
        int key);

    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
     */
    int getFieldMapFixed32Enum21Count();
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
     */
    boolean containsFieldMapFixed32Enum21(
        int key);
    /**
     * Use {@link #getFieldMapFixed32Enum21Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapFixed32Enum21();
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapFixed32Enum21Map();
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapFixed32Enum21OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue);
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapFixed32Enum21OrThrow(
        int key);

    /**
     * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
     */
    int getFieldMapFixed32Fixed3222Count();
    /**
     * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
     */
    boolean containsFieldMapFixed32Fixed3222(
        int key);
    /**
     * Use {@link #getFieldMapFixed32Fixed3222Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapFixed32Fixed3222();
    /**
     * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapFixed32Fixed3222Map();
    /**
     * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
     */

    int getFieldMapFixed32Fixed3222OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
     */

    int getFieldMapFixed32Fixed3222OrThrow(
        int key);

    /**
     * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
     */
    int getFieldMapFixed32Fixed6423Count();
    /**
     * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
     */
    boolean containsFieldMapFixed32Fixed6423(
        int key);
    /**
     * Use {@link #getFieldMapFixed32Fixed6423Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapFixed32Fixed6423();
    /**
     * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapFixed32Fixed6423Map();
    /**
     * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
     */

    long getFieldMapFixed32Fixed6423OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
     */

    long getFieldMapFixed32Fixed6423OrThrow(
        int key);

    /**
     * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
     */
    int getFieldMapFixed32Float24Count();
    /**
     * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
     */
    boolean containsFieldMapFixed32Float24(
        int key);
    /**
     * Use {@link #getFieldMapFixed32Float24Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Float>
    getFieldMapFixed32Float24();
    /**
     * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Float>
    getFieldMapFixed32Float24Map();
    /**
     * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
     */

    float getFieldMapFixed32Float24OrDefault(
        int key,
        float defaultValue);
    /**
     * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
     */

    float getFieldMapFixed32Float24OrThrow(
        int key);

    /**
     * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
     */
    int getFieldMapFixed32Int3225Count();
    /**
     * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
     */
    boolean containsFieldMapFixed32Int3225(
        int key);
    /**
     * Use {@link #getFieldMapFixed32Int3225Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapFixed32Int3225();
    /**
     * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapFixed32Int3225Map();
    /**
     * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
     */

    int getFieldMapFixed32Int3225OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
     */

    int getFieldMapFixed32Int3225OrThrow(
        int key);

    /**
     * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
     */
    int getFieldMapFixed32Int6426Count();
    /**
     * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
     */
    boolean containsFieldMapFixed32Int6426(
        int key);
    /**
     * Use {@link #getFieldMapFixed32Int6426Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapFixed32Int6426();
    /**
     * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapFixed32Int6426Map();
    /**
     * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
     */

    long getFieldMapFixed32Int6426OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
     */

    long getFieldMapFixed32Int6426OrThrow(
        int key);

    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
     */
    int getFieldMapFixed32Message27Count();
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
     */
    boolean containsFieldMapFixed32Message27(
        int key);
    /**
     * Use {@link #getFieldMapFixed32Message27Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapFixed32Message27();
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapFixed32Message27Map();
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapFixed32Message27OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue);
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapFixed32Message27OrThrow(
        int key);

    /**
     * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
     */
    int getFieldMapFixed32Sfixed3228Count();
    /**
     * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
     */
    boolean containsFieldMapFixed32Sfixed3228(
        int key);
    /**
     * Use {@link #getFieldMapFixed32Sfixed3228Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapFixed32Sfixed3228();
    /**
     * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapFixed32Sfixed3228Map();
    /**
     * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
     */

    int getFieldMapFixed32Sfixed3228OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
     */

    int getFieldMapFixed32Sfixed3228OrThrow(
        int key);

    /**
     * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
     */
    int getFieldMapFixed32Sfixed6429Count();
    /**
     * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
     */
    boolean containsFieldMapFixed32Sfixed6429(
        int key);
    /**
     * Use {@link #getFieldMapFixed32Sfixed6429Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapFixed32Sfixed6429();
    /**
     * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapFixed32Sfixed6429Map();
    /**
     * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
     */

    long getFieldMapFixed32Sfixed6429OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
     */

    long getFieldMapFixed32Sfixed6429OrThrow(
        int key);

    /**
     * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
     */
    int getFieldMapFixed32Sint3230Count();
    /**
     * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
     */
    boolean containsFieldMapFixed32Sint3230(
        int key);
    /**
     * Use {@link #getFieldMapFixed32Sint3230Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapFixed32Sint3230();
    /**
     * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapFixed32Sint3230Map();
    /**
     * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
     */

    int getFieldMapFixed32Sint3230OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
     */

    int getFieldMapFixed32Sint3230OrThrow(
        int key);

    /**
     * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
     */
    int getFieldMapFixed32Sint6431Count();
    /**
     * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
     */
    boolean containsFieldMapFixed32Sint6431(
        int key);
    /**
     * Use {@link #getFieldMapFixed32Sint6431Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapFixed32Sint6431();
    /**
     * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapFixed32Sint6431Map();
    /**
     * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
     */

    long getFieldMapFixed32Sint6431OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
     */

    long getFieldMapFixed32Sint6431OrThrow(
        int key);

    /**
     * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
     */
    int getFieldMapFixed32String32Count();
    /**
     * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
     */
    boolean containsFieldMapFixed32String32(
        int key);
    /**
     * Use {@link #getFieldMapFixed32String32Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.String>
    getFieldMapFixed32String32();
    /**
     * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.String>
    getFieldMapFixed32String32Map();
    /**
     * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
     */

    java.lang.String getFieldMapFixed32String32OrDefault(
        int key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
     */

    java.lang.String getFieldMapFixed32String32OrThrow(
        int key);

    /**
     * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
     */
    int getFieldMapFixed32Uint3233Count();
    /**
     * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
     */
    boolean containsFieldMapFixed32Uint3233(
        int key);
    /**
     * Use {@link #getFieldMapFixed32Uint3233Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapFixed32Uint3233();
    /**
     * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapFixed32Uint3233Map();
    /**
     * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
     */

    int getFieldMapFixed32Uint3233OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
     */

    int getFieldMapFixed32Uint3233OrThrow(
        int key);

    /**
     * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
     */
    int getFieldMapFixed32Uint6434Count();
    /**
     * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
     */
    boolean containsFieldMapFixed32Uint6434(
        int key);
    /**
     * Use {@link #getFieldMapFixed32Uint6434Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapFixed32Uint6434();
    /**
     * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapFixed32Uint6434Map();
    /**
     * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
     */

    long getFieldMapFixed32Uint6434OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
     */

    long getFieldMapFixed32Uint6434OrThrow(
        int key);

    /**
     * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
     */
    int getFieldMapFixed64Bool35Count();
    /**
     * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
     */
    boolean containsFieldMapFixed64Bool35(
        long key);
    /**
     * Use {@link #getFieldMapFixed64Bool35Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Boolean>
    getFieldMapFixed64Bool35();
    /**
     * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Boolean>
    getFieldMapFixed64Bool35Map();
    /**
     * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
     */

    boolean getFieldMapFixed64Bool35OrDefault(
        long key,
        boolean defaultValue);
    /**
     * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
     */

    boolean getFieldMapFixed64Bool35OrThrow(
        long key);

    /**
     * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
     */
    int getFieldMapFixed64Bytes36Count();
    /**
     * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
     */
    boolean containsFieldMapFixed64Bytes36(
        long key);
    /**
     * Use {@link #getFieldMapFixed64Bytes36Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, com.google.protobuf.ByteString>
    getFieldMapFixed64Bytes36();
    /**
     * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
     */
    java.util.Map<java.lang.Long, com.google.protobuf.ByteString>
    getFieldMapFixed64Bytes36Map();
    /**
     * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
     */

    com.google.protobuf.ByteString getFieldMapFixed64Bytes36OrDefault(
        long key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
     */

    com.google.protobuf.ByteString getFieldMapFixed64Bytes36OrThrow(
        long key);

    /**
     * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
     */
    int getFieldMapFixed64Double37Count();
    /**
     * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
     */
    boolean containsFieldMapFixed64Double37(
        long key);
    /**
     * Use {@link #getFieldMapFixed64Double37Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Double>
    getFieldMapFixed64Double37();
    /**
     * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Double>
    getFieldMapFixed64Double37Map();
    /**
     * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
     */

    double getFieldMapFixed64Double37OrDefault(
        long key,
        double defaultValue);
    /**
     * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
     */

    double getFieldMapFixed64Double37OrThrow(
        long key);

    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
     */
    int getFieldMapFixed64Enum38Count();
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
     */
    boolean containsFieldMapFixed64Enum38(
        long key);
    /**
     * Use {@link #getFieldMapFixed64Enum38Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapFixed64Enum38();
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
     */
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapFixed64Enum38Map();
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapFixed64Enum38OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue);
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapFixed64Enum38OrThrow(
        long key);

    /**
     * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
     */
    int getFieldMapFixed64Fixed3239Count();
    /**
     * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
     */
    boolean containsFieldMapFixed64Fixed3239(
        long key);
    /**
     * Use {@link #getFieldMapFixed64Fixed3239Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapFixed64Fixed3239();
    /**
     * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapFixed64Fixed3239Map();
    /**
     * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
     */

    int getFieldMapFixed64Fixed3239OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
     */

    int getFieldMapFixed64Fixed3239OrThrow(
        long key);

    /**
     * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
     */
    int getFieldMapFixed64Fixed6440Count();
    /**
     * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
     */
    boolean containsFieldMapFixed64Fixed6440(
        long key);
    /**
     * Use {@link #getFieldMapFixed64Fixed6440Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapFixed64Fixed6440();
    /**
     * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapFixed64Fixed6440Map();
    /**
     * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
     */

    long getFieldMapFixed64Fixed6440OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
     */

    long getFieldMapFixed64Fixed6440OrThrow(
        long key);

    /**
     * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
     */
    int getFieldMapFixed64Float41Count();
    /**
     * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
     */
    boolean containsFieldMapFixed64Float41(
        long key);
    /**
     * Use {@link #getFieldMapFixed64Float41Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Float>
    getFieldMapFixed64Float41();
    /**
     * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Float>
    getFieldMapFixed64Float41Map();
    /**
     * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
     */

    float getFieldMapFixed64Float41OrDefault(
        long key,
        float defaultValue);
    /**
     * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
     */

    float getFieldMapFixed64Float41OrThrow(
        long key);

    /**
     * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
     */
    int getFieldMapFixed64Int3242Count();
    /**
     * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
     */
    boolean containsFieldMapFixed64Int3242(
        long key);
    /**
     * Use {@link #getFieldMapFixed64Int3242Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapFixed64Int3242();
    /**
     * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapFixed64Int3242Map();
    /**
     * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
     */

    int getFieldMapFixed64Int3242OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
     */

    int getFieldMapFixed64Int3242OrThrow(
        long key);

    /**
     * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
     */
    int getFieldMapFixed64Int6443Count();
    /**
     * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
     */
    boolean containsFieldMapFixed64Int6443(
        long key);
    /**
     * Use {@link #getFieldMapFixed64Int6443Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapFixed64Int6443();
    /**
     * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapFixed64Int6443Map();
    /**
     * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
     */

    long getFieldMapFixed64Int6443OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
     */

    long getFieldMapFixed64Int6443OrThrow(
        long key);

    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
     */
    int getFieldMapFixed64Message44Count();
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
     */
    boolean containsFieldMapFixed64Message44(
        long key);
    /**
     * Use {@link #getFieldMapFixed64Message44Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapFixed64Message44();
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
     */
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapFixed64Message44Map();
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapFixed64Message44OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue);
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapFixed64Message44OrThrow(
        long key);

    /**
     * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
     */
    int getFieldMapFixed64Sfixed3245Count();
    /**
     * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
     */
    boolean containsFieldMapFixed64Sfixed3245(
        long key);
    /**
     * Use {@link #getFieldMapFixed64Sfixed3245Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapFixed64Sfixed3245();
    /**
     * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapFixed64Sfixed3245Map();
    /**
     * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
     */

    int getFieldMapFixed64Sfixed3245OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
     */

    int getFieldMapFixed64Sfixed3245OrThrow(
        long key);

    /**
     * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
     */
    int getFieldMapFixed64Sfixed6446Count();
    /**
     * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
     */
    boolean containsFieldMapFixed64Sfixed6446(
        long key);
    /**
     * Use {@link #getFieldMapFixed64Sfixed6446Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapFixed64Sfixed6446();
    /**
     * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapFixed64Sfixed6446Map();
    /**
     * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
     */

    long getFieldMapFixed64Sfixed6446OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
     */

    long getFieldMapFixed64Sfixed6446OrThrow(
        long key);

    /**
     * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
     */
    int getFieldMapFixed64Sint3247Count();
    /**
     * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
     */
    boolean containsFieldMapFixed64Sint3247(
        long key);
    /**
     * Use {@link #getFieldMapFixed64Sint3247Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapFixed64Sint3247();
    /**
     * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapFixed64Sint3247Map();
    /**
     * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
     */

    int getFieldMapFixed64Sint3247OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
     */

    int getFieldMapFixed64Sint3247OrThrow(
        long key);

    /**
     * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
     */
    int getFieldMapFixed64Sint6448Count();
    /**
     * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
     */
    boolean containsFieldMapFixed64Sint6448(
        long key);
    /**
     * Use {@link #getFieldMapFixed64Sint6448Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapFixed64Sint6448();
    /**
     * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapFixed64Sint6448Map();
    /**
     * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
     */

    long getFieldMapFixed64Sint6448OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
     */

    long getFieldMapFixed64Sint6448OrThrow(
        long key);

    /**
     * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
     */
    int getFieldMapFixed64String49Count();
    /**
     * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
     */
    boolean containsFieldMapFixed64String49(
        long key);
    /**
     * Use {@link #getFieldMapFixed64String49Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.String>
    getFieldMapFixed64String49();
    /**
     * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
     */
    java.util.Map<java.lang.Long, java.lang.String>
    getFieldMapFixed64String49Map();
    /**
     * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
     */

    java.lang.String getFieldMapFixed64String49OrDefault(
        long key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
     */

    java.lang.String getFieldMapFixed64String49OrThrow(
        long key);

    /**
     * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
     */
    int getFieldMapFixed64Uint3250Count();
    /**
     * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
     */
    boolean containsFieldMapFixed64Uint3250(
        long key);
    /**
     * Use {@link #getFieldMapFixed64Uint3250Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapFixed64Uint3250();
    /**
     * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapFixed64Uint3250Map();
    /**
     * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
     */

    int getFieldMapFixed64Uint3250OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
     */

    int getFieldMapFixed64Uint3250OrThrow(
        long key);

    /**
     * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
     */
    int getFieldMapFixed64Uint6451Count();
    /**
     * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
     */
    boolean containsFieldMapFixed64Uint6451(
        long key);
    /**
     * Use {@link #getFieldMapFixed64Uint6451Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapFixed64Uint6451();
    /**
     * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapFixed64Uint6451Map();
    /**
     * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
     */

    long getFieldMapFixed64Uint6451OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
     */

    long getFieldMapFixed64Uint6451OrThrow(
        long key);

    /**
     * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
     */
    int getFieldMapInt32Bool52Count();
    /**
     * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
     */
    boolean containsFieldMapInt32Bool52(
        int key);
    /**
     * Use {@link #getFieldMapInt32Bool52Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Boolean>
    getFieldMapInt32Bool52();
    /**
     * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Boolean>
    getFieldMapInt32Bool52Map();
    /**
     * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
     */

    boolean getFieldMapInt32Bool52OrDefault(
        int key,
        boolean defaultValue);
    /**
     * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
     */

    boolean getFieldMapInt32Bool52OrThrow(
        int key);

    /**
     * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
     */
    int getFieldMapInt32Bytes53Count();
    /**
     * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
     */
    boolean containsFieldMapInt32Bytes53(
        int key);
    /**
     * Use {@link #getFieldMapInt32Bytes53Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getFieldMapInt32Bytes53();
    /**
     * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getFieldMapInt32Bytes53Map();
    /**
     * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
     */

    com.google.protobuf.ByteString getFieldMapInt32Bytes53OrDefault(
        int key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
     */

    com.google.protobuf.ByteString getFieldMapInt32Bytes53OrThrow(
        int key);

    /**
     * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
     */
    int getFieldMapInt32Double54Count();
    /**
     * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
     */
    boolean containsFieldMapInt32Double54(
        int key);
    /**
     * Use {@link #getFieldMapInt32Double54Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Double>
    getFieldMapInt32Double54();
    /**
     * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Double>
    getFieldMapInt32Double54Map();
    /**
     * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
     */

    double getFieldMapInt32Double54OrDefault(
        int key,
        double defaultValue);
    /**
     * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
     */

    double getFieldMapInt32Double54OrThrow(
        int key);

    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
     */
    int getFieldMapInt32Enum55Count();
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
     */
    boolean containsFieldMapInt32Enum55(
        int key);
    /**
     * Use {@link #getFieldMapInt32Enum55Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapInt32Enum55();
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapInt32Enum55Map();
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapInt32Enum55OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue);
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapInt32Enum55OrThrow(
        int key);

    /**
     * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
     */
    int getFieldMapInt32Fixed3256Count();
    /**
     * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
     */
    boolean containsFieldMapInt32Fixed3256(
        int key);
    /**
     * Use {@link #getFieldMapInt32Fixed3256Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapInt32Fixed3256();
    /**
     * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapInt32Fixed3256Map();
    /**
     * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
     */

    int getFieldMapInt32Fixed3256OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
     */

    int getFieldMapInt32Fixed3256OrThrow(
        int key);

    /**
     * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
     */
    int getFieldMapInt32Fixed6457Count();
    /**
     * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
     */
    boolean containsFieldMapInt32Fixed6457(
        int key);
    /**
     * Use {@link #getFieldMapInt32Fixed6457Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapInt32Fixed6457();
    /**
     * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapInt32Fixed6457Map();
    /**
     * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
     */

    long getFieldMapInt32Fixed6457OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
     */

    long getFieldMapInt32Fixed6457OrThrow(
        int key);

    /**
     * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
     */
    int getFieldMapInt32Float58Count();
    /**
     * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
     */
    boolean containsFieldMapInt32Float58(
        int key);
    /**
     * Use {@link #getFieldMapInt32Float58Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Float>
    getFieldMapInt32Float58();
    /**
     * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Float>
    getFieldMapInt32Float58Map();
    /**
     * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
     */

    float getFieldMapInt32Float58OrDefault(
        int key,
        float defaultValue);
    /**
     * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
     */

    float getFieldMapInt32Float58OrThrow(
        int key);

    /**
     * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
     */
    int getFieldMapInt32Int3259Count();
    /**
     * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
     */
    boolean containsFieldMapInt32Int3259(
        int key);
    /**
     * Use {@link #getFieldMapInt32Int3259Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapInt32Int3259();
    /**
     * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapInt32Int3259Map();
    /**
     * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
     */

    int getFieldMapInt32Int3259OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
     */

    int getFieldMapInt32Int3259OrThrow(
        int key);

    /**
     * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
     */
    int getFieldMapInt32Int6460Count();
    /**
     * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
     */
    boolean containsFieldMapInt32Int6460(
        int key);
    /**
     * Use {@link #getFieldMapInt32Int6460Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapInt32Int6460();
    /**
     * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapInt32Int6460Map();
    /**
     * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
     */

    long getFieldMapInt32Int6460OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
     */

    long getFieldMapInt32Int6460OrThrow(
        int key);

    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
     */
    int getFieldMapInt32Message61Count();
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
     */
    boolean containsFieldMapInt32Message61(
        int key);
    /**
     * Use {@link #getFieldMapInt32Message61Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapInt32Message61();
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapInt32Message61Map();
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapInt32Message61OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue);
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapInt32Message61OrThrow(
        int key);

    /**
     * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
     */
    int getFieldMapInt32Sfixed3262Count();
    /**
     * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
     */
    boolean containsFieldMapInt32Sfixed3262(
        int key);
    /**
     * Use {@link #getFieldMapInt32Sfixed3262Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapInt32Sfixed3262();
    /**
     * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapInt32Sfixed3262Map();
    /**
     * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
     */

    int getFieldMapInt32Sfixed3262OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
     */

    int getFieldMapInt32Sfixed3262OrThrow(
        int key);

    /**
     * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
     */
    int getFieldMapInt32Sfixed6463Count();
    /**
     * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
     */
    boolean containsFieldMapInt32Sfixed6463(
        int key);
    /**
     * Use {@link #getFieldMapInt32Sfixed6463Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapInt32Sfixed6463();
    /**
     * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapInt32Sfixed6463Map();
    /**
     * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
     */

    long getFieldMapInt32Sfixed6463OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
     */

    long getFieldMapInt32Sfixed6463OrThrow(
        int key);

    /**
     * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
     */
    int getFieldMapInt32Sint3264Count();
    /**
     * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
     */
    boolean containsFieldMapInt32Sint3264(
        int key);
    /**
     * Use {@link #getFieldMapInt32Sint3264Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapInt32Sint3264();
    /**
     * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapInt32Sint3264Map();
    /**
     * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
     */

    int getFieldMapInt32Sint3264OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
     */

    int getFieldMapInt32Sint3264OrThrow(
        int key);

    /**
     * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
     */
    int getFieldMapInt32Sint6465Count();
    /**
     * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
     */
    boolean containsFieldMapInt32Sint6465(
        int key);
    /**
     * Use {@link #getFieldMapInt32Sint6465Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapInt32Sint6465();
    /**
     * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapInt32Sint6465Map();
    /**
     * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
     */

    long getFieldMapInt32Sint6465OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
     */

    long getFieldMapInt32Sint6465OrThrow(
        int key);

    /**
     * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
     */
    int getFieldMapInt32String66Count();
    /**
     * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
     */
    boolean containsFieldMapInt32String66(
        int key);
    /**
     * Use {@link #getFieldMapInt32String66Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.String>
    getFieldMapInt32String66();
    /**
     * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.String>
    getFieldMapInt32String66Map();
    /**
     * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
     */

    java.lang.String getFieldMapInt32String66OrDefault(
        int key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
     */

    java.lang.String getFieldMapInt32String66OrThrow(
        int key);

    /**
     * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
     */
    int getFieldMapInt32Uint3267Count();
    /**
     * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
     */
    boolean containsFieldMapInt32Uint3267(
        int key);
    /**
     * Use {@link #getFieldMapInt32Uint3267Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapInt32Uint3267();
    /**
     * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapInt32Uint3267Map();
    /**
     * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
     */

    int getFieldMapInt32Uint3267OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
     */

    int getFieldMapInt32Uint3267OrThrow(
        int key);

    /**
     * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
     */
    int getFieldMapInt32Uint6468Count();
    /**
     * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
     */
    boolean containsFieldMapInt32Uint6468(
        int key);
    /**
     * Use {@link #getFieldMapInt32Uint6468Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapInt32Uint6468();
    /**
     * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapInt32Uint6468Map();
    /**
     * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
     */

    long getFieldMapInt32Uint6468OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
     */

    long getFieldMapInt32Uint6468OrThrow(
        int key);

    /**
     * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
     */
    int getFieldMapInt64Bool69Count();
    /**
     * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
     */
    boolean containsFieldMapInt64Bool69(
        long key);
    /**
     * Use {@link #getFieldMapInt64Bool69Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Boolean>
    getFieldMapInt64Bool69();
    /**
     * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Boolean>
    getFieldMapInt64Bool69Map();
    /**
     * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
     */

    boolean getFieldMapInt64Bool69OrDefault(
        long key,
        boolean defaultValue);
    /**
     * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
     */

    boolean getFieldMapInt64Bool69OrThrow(
        long key);

    /**
     * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
     */
    int getFieldMapInt64Bytes70Count();
    /**
     * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
     */
    boolean containsFieldMapInt64Bytes70(
        long key);
    /**
     * Use {@link #getFieldMapInt64Bytes70Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, com.google.protobuf.ByteString>
    getFieldMapInt64Bytes70();
    /**
     * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
     */
    java.util.Map<java.lang.Long, com.google.protobuf.ByteString>
    getFieldMapInt64Bytes70Map();
    /**
     * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
     */

    com.google.protobuf.ByteString getFieldMapInt64Bytes70OrDefault(
        long key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
     */

    com.google.protobuf.ByteString getFieldMapInt64Bytes70OrThrow(
        long key);

    /**
     * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
     */
    int getFieldMapInt64Double71Count();
    /**
     * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
     */
    boolean containsFieldMapInt64Double71(
        long key);
    /**
     * Use {@link #getFieldMapInt64Double71Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Double>
    getFieldMapInt64Double71();
    /**
     * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Double>
    getFieldMapInt64Double71Map();
    /**
     * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
     */

    double getFieldMapInt64Double71OrDefault(
        long key,
        double defaultValue);
    /**
     * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
     */

    double getFieldMapInt64Double71OrThrow(
        long key);

    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
     */
    int getFieldMapInt64Enum72Count();
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
     */
    boolean containsFieldMapInt64Enum72(
        long key);
    /**
     * Use {@link #getFieldMapInt64Enum72Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapInt64Enum72();
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
     */
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapInt64Enum72Map();
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapInt64Enum72OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue);
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapInt64Enum72OrThrow(
        long key);

    /**
     * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
     */
    int getFieldMapInt64Fixed3273Count();
    /**
     * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
     */
    boolean containsFieldMapInt64Fixed3273(
        long key);
    /**
     * Use {@link #getFieldMapInt64Fixed3273Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapInt64Fixed3273();
    /**
     * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapInt64Fixed3273Map();
    /**
     * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
     */

    int getFieldMapInt64Fixed3273OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
     */

    int getFieldMapInt64Fixed3273OrThrow(
        long key);

    /**
     * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
     */
    int getFieldMapInt64Fixed6474Count();
    /**
     * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
     */
    boolean containsFieldMapInt64Fixed6474(
        long key);
    /**
     * Use {@link #getFieldMapInt64Fixed6474Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapInt64Fixed6474();
    /**
     * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapInt64Fixed6474Map();
    /**
     * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
     */

    long getFieldMapInt64Fixed6474OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
     */

    long getFieldMapInt64Fixed6474OrThrow(
        long key);

    /**
     * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
     */
    int getFieldMapInt64Float75Count();
    /**
     * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
     */
    boolean containsFieldMapInt64Float75(
        long key);
    /**
     * Use {@link #getFieldMapInt64Float75Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Float>
    getFieldMapInt64Float75();
    /**
     * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Float>
    getFieldMapInt64Float75Map();
    /**
     * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
     */

    float getFieldMapInt64Float75OrDefault(
        long key,
        float defaultValue);
    /**
     * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
     */

    float getFieldMapInt64Float75OrThrow(
        long key);

    /**
     * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
     */
    int getFieldMapInt64Int3276Count();
    /**
     * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
     */
    boolean containsFieldMapInt64Int3276(
        long key);
    /**
     * Use {@link #getFieldMapInt64Int3276Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapInt64Int3276();
    /**
     * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapInt64Int3276Map();
    /**
     * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
     */

    int getFieldMapInt64Int3276OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
     */

    int getFieldMapInt64Int3276OrThrow(
        long key);

    /**
     * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
     */
    int getFieldMapInt64Int6477Count();
    /**
     * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
     */
    boolean containsFieldMapInt64Int6477(
        long key);
    /**
     * Use {@link #getFieldMapInt64Int6477Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapInt64Int6477();
    /**
     * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapInt64Int6477Map();
    /**
     * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
     */

    long getFieldMapInt64Int6477OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
     */

    long getFieldMapInt64Int6477OrThrow(
        long key);

    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
     */
    int getFieldMapInt64Message78Count();
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
     */
    boolean containsFieldMapInt64Message78(
        long key);
    /**
     * Use {@link #getFieldMapInt64Message78Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapInt64Message78();
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
     */
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapInt64Message78Map();
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapInt64Message78OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue);
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapInt64Message78OrThrow(
        long key);

    /**
     * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
     */
    int getFieldMapInt64Sfixed3279Count();
    /**
     * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
     */
    boolean containsFieldMapInt64Sfixed3279(
        long key);
    /**
     * Use {@link #getFieldMapInt64Sfixed3279Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapInt64Sfixed3279();
    /**
     * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapInt64Sfixed3279Map();
    /**
     * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
     */

    int getFieldMapInt64Sfixed3279OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
     */

    int getFieldMapInt64Sfixed3279OrThrow(
        long key);

    /**
     * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
     */
    int getFieldMapInt64Sfixed6480Count();
    /**
     * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
     */
    boolean containsFieldMapInt64Sfixed6480(
        long key);
    /**
     * Use {@link #getFieldMapInt64Sfixed6480Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapInt64Sfixed6480();
    /**
     * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapInt64Sfixed6480Map();
    /**
     * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
     */

    long getFieldMapInt64Sfixed6480OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
     */

    long getFieldMapInt64Sfixed6480OrThrow(
        long key);

    /**
     * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
     */
    int getFieldMapInt64Sint3281Count();
    /**
     * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
     */
    boolean containsFieldMapInt64Sint3281(
        long key);
    /**
     * Use {@link #getFieldMapInt64Sint3281Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapInt64Sint3281();
    /**
     * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapInt64Sint3281Map();
    /**
     * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
     */

    int getFieldMapInt64Sint3281OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
     */

    int getFieldMapInt64Sint3281OrThrow(
        long key);

    /**
     * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
     */
    int getFieldMapInt64Sint6482Count();
    /**
     * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
     */
    boolean containsFieldMapInt64Sint6482(
        long key);
    /**
     * Use {@link #getFieldMapInt64Sint6482Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapInt64Sint6482();
    /**
     * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapInt64Sint6482Map();
    /**
     * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
     */

    long getFieldMapInt64Sint6482OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
     */

    long getFieldMapInt64Sint6482OrThrow(
        long key);

    /**
     * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
     */
    int getFieldMapInt64String83Count();
    /**
     * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
     */
    boolean containsFieldMapInt64String83(
        long key);
    /**
     * Use {@link #getFieldMapInt64String83Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.String>
    getFieldMapInt64String83();
    /**
     * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
     */
    java.util.Map<java.lang.Long, java.lang.String>
    getFieldMapInt64String83Map();
    /**
     * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
     */

    java.lang.String getFieldMapInt64String83OrDefault(
        long key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
     */

    java.lang.String getFieldMapInt64String83OrThrow(
        long key);

    /**
     * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
     */
    int getFieldMapInt64Uint3284Count();
    /**
     * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
     */
    boolean containsFieldMapInt64Uint3284(
        long key);
    /**
     * Use {@link #getFieldMapInt64Uint3284Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapInt64Uint3284();
    /**
     * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapInt64Uint3284Map();
    /**
     * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
     */

    int getFieldMapInt64Uint3284OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
     */

    int getFieldMapInt64Uint3284OrThrow(
        long key);

    /**
     * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
     */
    int getFieldMapInt64Uint6485Count();
    /**
     * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
     */
    boolean containsFieldMapInt64Uint6485(
        long key);
    /**
     * Use {@link #getFieldMapInt64Uint6485Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapInt64Uint6485();
    /**
     * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapInt64Uint6485Map();
    /**
     * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
     */

    long getFieldMapInt64Uint6485OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
     */

    long getFieldMapInt64Uint6485OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
     */
    int getFieldMapSfixed32Bool86Count();
    /**
     * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
     */
    boolean containsFieldMapSfixed32Bool86(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32Bool86Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Boolean>
    getFieldMapSfixed32Bool86();
    /**
     * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Boolean>
    getFieldMapSfixed32Bool86Map();
    /**
     * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
     */

    boolean getFieldMapSfixed32Bool86OrDefault(
        int key,
        boolean defaultValue);
    /**
     * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
     */

    boolean getFieldMapSfixed32Bool86OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
     */
    int getFieldMapSfixed32Bytes87Count();
    /**
     * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
     */
    boolean containsFieldMapSfixed32Bytes87(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32Bytes87Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getFieldMapSfixed32Bytes87();
    /**
     * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getFieldMapSfixed32Bytes87Map();
    /**
     * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
     */

    com.google.protobuf.ByteString getFieldMapSfixed32Bytes87OrDefault(
        int key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
     */

    com.google.protobuf.ByteString getFieldMapSfixed32Bytes87OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
     */
    int getFieldMapSfixed32Double88Count();
    /**
     * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
     */
    boolean containsFieldMapSfixed32Double88(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32Double88Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Double>
    getFieldMapSfixed32Double88();
    /**
     * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Double>
    getFieldMapSfixed32Double88Map();
    /**
     * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
     */

    double getFieldMapSfixed32Double88OrDefault(
        int key,
        double defaultValue);
    /**
     * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
     */

    double getFieldMapSfixed32Double88OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
     */
    int getFieldMapSfixed32Enum89Count();
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
     */
    boolean containsFieldMapSfixed32Enum89(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32Enum89Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapSfixed32Enum89();
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapSfixed32Enum89Map();
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSfixed32Enum89OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue);
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSfixed32Enum89OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
     */
    int getFieldMapSfixed32Fixed3290Count();
    /**
     * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
     */
    boolean containsFieldMapSfixed32Fixed3290(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32Fixed3290Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSfixed32Fixed3290();
    /**
     * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSfixed32Fixed3290Map();
    /**
     * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
     */

    int getFieldMapSfixed32Fixed3290OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
     */

    int getFieldMapSfixed32Fixed3290OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
     */
    int getFieldMapSfixed32Fixed6491Count();
    /**
     * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
     */
    boolean containsFieldMapSfixed32Fixed6491(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32Fixed6491Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSfixed32Fixed6491();
    /**
     * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSfixed32Fixed6491Map();
    /**
     * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
     */

    long getFieldMapSfixed32Fixed6491OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
     */

    long getFieldMapSfixed32Fixed6491OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
     */
    int getFieldMapSfixed32Float92Count();
    /**
     * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
     */
    boolean containsFieldMapSfixed32Float92(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32Float92Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Float>
    getFieldMapSfixed32Float92();
    /**
     * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Float>
    getFieldMapSfixed32Float92Map();
    /**
     * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
     */

    float getFieldMapSfixed32Float92OrDefault(
        int key,
        float defaultValue);
    /**
     * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
     */

    float getFieldMapSfixed32Float92OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
     */
    int getFieldMapSfixed32Int3293Count();
    /**
     * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
     */
    boolean containsFieldMapSfixed32Int3293(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32Int3293Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSfixed32Int3293();
    /**
     * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSfixed32Int3293Map();
    /**
     * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
     */

    int getFieldMapSfixed32Int3293OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
     */

    int getFieldMapSfixed32Int3293OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
     */
    int getFieldMapSfixed32Int6494Count();
    /**
     * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
     */
    boolean containsFieldMapSfixed32Int6494(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32Int6494Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSfixed32Int6494();
    /**
     * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSfixed32Int6494Map();
    /**
     * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
     */

    long getFieldMapSfixed32Int6494OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
     */

    long getFieldMapSfixed32Int6494OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
     */
    int getFieldMapSfixed32Message95Count();
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
     */
    boolean containsFieldMapSfixed32Message95(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32Message95Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapSfixed32Message95();
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapSfixed32Message95Map();
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSfixed32Message95OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue);
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSfixed32Message95OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
     */
    int getFieldMapSfixed32Sfixed3296Count();
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
     */
    boolean containsFieldMapSfixed32Sfixed3296(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32Sfixed3296Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSfixed32Sfixed3296();
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSfixed32Sfixed3296Map();
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
     */

    int getFieldMapSfixed32Sfixed3296OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
     */

    int getFieldMapSfixed32Sfixed3296OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
     */
    int getFieldMapSfixed32Sfixed6497Count();
    /**
     * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
     */
    boolean containsFieldMapSfixed32Sfixed6497(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32Sfixed6497Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSfixed32Sfixed6497();
    /**
     * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSfixed32Sfixed6497Map();
    /**
     * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
     */

    long getFieldMapSfixed32Sfixed6497OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
     */

    long getFieldMapSfixed32Sfixed6497OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
     */
    int getFieldMapSfixed32Sint3298Count();
    /**
     * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
     */
    boolean containsFieldMapSfixed32Sint3298(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32Sint3298Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSfixed32Sint3298();
    /**
     * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSfixed32Sint3298Map();
    /**
     * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
     */

    int getFieldMapSfixed32Sint3298OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
     */

    int getFieldMapSfixed32Sint3298OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
     */
    int getFieldMapSfixed32Sint6499Count();
    /**
     * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
     */
    boolean containsFieldMapSfixed32Sint6499(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32Sint6499Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSfixed32Sint6499();
    /**
     * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSfixed32Sint6499Map();
    /**
     * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
     */

    long getFieldMapSfixed32Sint6499OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
     */

    long getFieldMapSfixed32Sint6499OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
     */
    int getFieldMapSfixed32String100Count();
    /**
     * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
     */
    boolean containsFieldMapSfixed32String100(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32String100Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.String>
    getFieldMapSfixed32String100();
    /**
     * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.String>
    getFieldMapSfixed32String100Map();
    /**
     * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
     */

    java.lang.String getFieldMapSfixed32String100OrDefault(
        int key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
     */

    java.lang.String getFieldMapSfixed32String100OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
     */
    int getFieldMapSfixed32Uint32101Count();
    /**
     * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
     */
    boolean containsFieldMapSfixed32Uint32101(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32Uint32101Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSfixed32Uint32101();
    /**
     * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSfixed32Uint32101Map();
    /**
     * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
     */

    int getFieldMapSfixed32Uint32101OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
     */

    int getFieldMapSfixed32Uint32101OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
     */
    int getFieldMapSfixed32Uint64102Count();
    /**
     * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
     */
    boolean containsFieldMapSfixed32Uint64102(
        int key);
    /**
     * Use {@link #getFieldMapSfixed32Uint64102Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSfixed32Uint64102();
    /**
     * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSfixed32Uint64102Map();
    /**
     * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
     */

    long getFieldMapSfixed32Uint64102OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
     */

    long getFieldMapSfixed32Uint64102OrThrow(
        int key);

    /**
     * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
     */
    int getFieldMapSfixed64Bool103Count();
    /**
     * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
     */
    boolean containsFieldMapSfixed64Bool103(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64Bool103Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Boolean>
    getFieldMapSfixed64Bool103();
    /**
     * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Boolean>
    getFieldMapSfixed64Bool103Map();
    /**
     * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
     */

    boolean getFieldMapSfixed64Bool103OrDefault(
        long key,
        boolean defaultValue);
    /**
     * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
     */

    boolean getFieldMapSfixed64Bool103OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
     */
    int getFieldMapSfixed64Bytes104Count();
    /**
     * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
     */
    boolean containsFieldMapSfixed64Bytes104(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64Bytes104Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, com.google.protobuf.ByteString>
    getFieldMapSfixed64Bytes104();
    /**
     * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
     */
    java.util.Map<java.lang.Long, com.google.protobuf.ByteString>
    getFieldMapSfixed64Bytes104Map();
    /**
     * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
     */

    com.google.protobuf.ByteString getFieldMapSfixed64Bytes104OrDefault(
        long key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
     */

    com.google.protobuf.ByteString getFieldMapSfixed64Bytes104OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
     */
    int getFieldMapSfixed64Double105Count();
    /**
     * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
     */
    boolean containsFieldMapSfixed64Double105(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64Double105Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Double>
    getFieldMapSfixed64Double105();
    /**
     * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Double>
    getFieldMapSfixed64Double105Map();
    /**
     * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
     */

    double getFieldMapSfixed64Double105OrDefault(
        long key,
        double defaultValue);
    /**
     * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
     */

    double getFieldMapSfixed64Double105OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
     */
    int getFieldMapSfixed64Enum106Count();
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
     */
    boolean containsFieldMapSfixed64Enum106(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64Enum106Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapSfixed64Enum106();
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
     */
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapSfixed64Enum106Map();
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSfixed64Enum106OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue);
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSfixed64Enum106OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
     */
    int getFieldMapSfixed64Fixed32107Count();
    /**
     * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
     */
    boolean containsFieldMapSfixed64Fixed32107(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64Fixed32107Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSfixed64Fixed32107();
    /**
     * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSfixed64Fixed32107Map();
    /**
     * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
     */

    int getFieldMapSfixed64Fixed32107OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
     */

    int getFieldMapSfixed64Fixed32107OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
     */
    int getFieldMapSfixed64Fixed64108Count();
    /**
     * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
     */
    boolean containsFieldMapSfixed64Fixed64108(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64Fixed64108Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSfixed64Fixed64108();
    /**
     * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSfixed64Fixed64108Map();
    /**
     * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
     */

    long getFieldMapSfixed64Fixed64108OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
     */

    long getFieldMapSfixed64Fixed64108OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
     */
    int getFieldMapSfixed64Float109Count();
    /**
     * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
     */
    boolean containsFieldMapSfixed64Float109(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64Float109Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Float>
    getFieldMapSfixed64Float109();
    /**
     * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Float>
    getFieldMapSfixed64Float109Map();
    /**
     * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
     */

    float getFieldMapSfixed64Float109OrDefault(
        long key,
        float defaultValue);
    /**
     * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
     */

    float getFieldMapSfixed64Float109OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
     */
    int getFieldMapSfixed64Int32110Count();
    /**
     * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
     */
    boolean containsFieldMapSfixed64Int32110(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64Int32110Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSfixed64Int32110();
    /**
     * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSfixed64Int32110Map();
    /**
     * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
     */

    int getFieldMapSfixed64Int32110OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
     */

    int getFieldMapSfixed64Int32110OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
     */
    int getFieldMapSfixed64Int64111Count();
    /**
     * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
     */
    boolean containsFieldMapSfixed64Int64111(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64Int64111Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSfixed64Int64111();
    /**
     * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSfixed64Int64111Map();
    /**
     * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
     */

    long getFieldMapSfixed64Int64111OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
     */

    long getFieldMapSfixed64Int64111OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
     */
    int getFieldMapSfixed64Message112Count();
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
     */
    boolean containsFieldMapSfixed64Message112(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64Message112Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapSfixed64Message112();
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
     */
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapSfixed64Message112Map();
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSfixed64Message112OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue);
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSfixed64Message112OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
     */
    int getFieldMapSfixed64Sfixed32113Count();
    /**
     * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
     */
    boolean containsFieldMapSfixed64Sfixed32113(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64Sfixed32113Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSfixed64Sfixed32113();
    /**
     * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSfixed64Sfixed32113Map();
    /**
     * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
     */

    int getFieldMapSfixed64Sfixed32113OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
     */

    int getFieldMapSfixed64Sfixed32113OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
     */
    int getFieldMapSfixed64Sfixed64114Count();
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
     */
    boolean containsFieldMapSfixed64Sfixed64114(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64Sfixed64114Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSfixed64Sfixed64114();
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSfixed64Sfixed64114Map();
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
     */

    long getFieldMapSfixed64Sfixed64114OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
     */

    long getFieldMapSfixed64Sfixed64114OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
     */
    int getFieldMapSfixed64Sint32115Count();
    /**
     * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
     */
    boolean containsFieldMapSfixed64Sint32115(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64Sint32115Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSfixed64Sint32115();
    /**
     * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSfixed64Sint32115Map();
    /**
     * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
     */

    int getFieldMapSfixed64Sint32115OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
     */

    int getFieldMapSfixed64Sint32115OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
     */
    int getFieldMapSfixed64Sint64116Count();
    /**
     * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
     */
    boolean containsFieldMapSfixed64Sint64116(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64Sint64116Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSfixed64Sint64116();
    /**
     * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSfixed64Sint64116Map();
    /**
     * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
     */

    long getFieldMapSfixed64Sint64116OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
     */

    long getFieldMapSfixed64Sint64116OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
     */
    int getFieldMapSfixed64String117Count();
    /**
     * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
     */
    boolean containsFieldMapSfixed64String117(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64String117Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.String>
    getFieldMapSfixed64String117();
    /**
     * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
     */
    java.util.Map<java.lang.Long, java.lang.String>
    getFieldMapSfixed64String117Map();
    /**
     * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
     */

    java.lang.String getFieldMapSfixed64String117OrDefault(
        long key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
     */

    java.lang.String getFieldMapSfixed64String117OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
     */
    int getFieldMapSfixed64Uint32118Count();
    /**
     * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
     */
    boolean containsFieldMapSfixed64Uint32118(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64Uint32118Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSfixed64Uint32118();
    /**
     * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSfixed64Uint32118Map();
    /**
     * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
     */

    int getFieldMapSfixed64Uint32118OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
     */

    int getFieldMapSfixed64Uint32118OrThrow(
        long key);

    /**
     * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
     */
    int getFieldMapSfixed64Uint64119Count();
    /**
     * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
     */
    boolean containsFieldMapSfixed64Uint64119(
        long key);
    /**
     * Use {@link #getFieldMapSfixed64Uint64119Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSfixed64Uint64119();
    /**
     * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSfixed64Uint64119Map();
    /**
     * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
     */

    long getFieldMapSfixed64Uint64119OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
     */

    long getFieldMapSfixed64Uint64119OrThrow(
        long key);

    /**
     * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
     */
    int getFieldMapSint32Bool120Count();
    /**
     * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
     */
    boolean containsFieldMapSint32Bool120(
        int key);
    /**
     * Use {@link #getFieldMapSint32Bool120Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Boolean>
    getFieldMapSint32Bool120();
    /**
     * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Boolean>
    getFieldMapSint32Bool120Map();
    /**
     * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
     */

    boolean getFieldMapSint32Bool120OrDefault(
        int key,
        boolean defaultValue);
    /**
     * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
     */

    boolean getFieldMapSint32Bool120OrThrow(
        int key);

    /**
     * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
     */
    int getFieldMapSint32Bytes121Count();
    /**
     * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
     */
    boolean containsFieldMapSint32Bytes121(
        int key);
    /**
     * Use {@link #getFieldMapSint32Bytes121Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getFieldMapSint32Bytes121();
    /**
     * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getFieldMapSint32Bytes121Map();
    /**
     * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
     */

    com.google.protobuf.ByteString getFieldMapSint32Bytes121OrDefault(
        int key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
     */

    com.google.protobuf.ByteString getFieldMapSint32Bytes121OrThrow(
        int key);

    /**
     * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
     */
    int getFieldMapSint32Double122Count();
    /**
     * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
     */
    boolean containsFieldMapSint32Double122(
        int key);
    /**
     * Use {@link #getFieldMapSint32Double122Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Double>
    getFieldMapSint32Double122();
    /**
     * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Double>
    getFieldMapSint32Double122Map();
    /**
     * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
     */

    double getFieldMapSint32Double122OrDefault(
        int key,
        double defaultValue);
    /**
     * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
     */

    double getFieldMapSint32Double122OrThrow(
        int key);

    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
     */
    int getFieldMapSint32Enum123Count();
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
     */
    boolean containsFieldMapSint32Enum123(
        int key);
    /**
     * Use {@link #getFieldMapSint32Enum123Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapSint32Enum123();
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapSint32Enum123Map();
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSint32Enum123OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue);
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSint32Enum123OrThrow(
        int key);

    /**
     * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
     */
    int getFieldMapSint32Fixed32124Count();
    /**
     * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
     */
    boolean containsFieldMapSint32Fixed32124(
        int key);
    /**
     * Use {@link #getFieldMapSint32Fixed32124Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSint32Fixed32124();
    /**
     * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSint32Fixed32124Map();
    /**
     * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
     */

    int getFieldMapSint32Fixed32124OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
     */

    int getFieldMapSint32Fixed32124OrThrow(
        int key);

    /**
     * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
     */
    int getFieldMapSint32Fixed64125Count();
    /**
     * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
     */
    boolean containsFieldMapSint32Fixed64125(
        int key);
    /**
     * Use {@link #getFieldMapSint32Fixed64125Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSint32Fixed64125();
    /**
     * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSint32Fixed64125Map();
    /**
     * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
     */

    long getFieldMapSint32Fixed64125OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
     */

    long getFieldMapSint32Fixed64125OrThrow(
        int key);

    /**
     * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
     */
    int getFieldMapSint32Float126Count();
    /**
     * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
     */
    boolean containsFieldMapSint32Float126(
        int key);
    /**
     * Use {@link #getFieldMapSint32Float126Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Float>
    getFieldMapSint32Float126();
    /**
     * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Float>
    getFieldMapSint32Float126Map();
    /**
     * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
     */

    float getFieldMapSint32Float126OrDefault(
        int key,
        float defaultValue);
    /**
     * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
     */

    float getFieldMapSint32Float126OrThrow(
        int key);

    /**
     * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
     */
    int getFieldMapSint32Int32127Count();
    /**
     * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
     */
    boolean containsFieldMapSint32Int32127(
        int key);
    /**
     * Use {@link #getFieldMapSint32Int32127Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSint32Int32127();
    /**
     * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSint32Int32127Map();
    /**
     * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
     */

    int getFieldMapSint32Int32127OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
     */

    int getFieldMapSint32Int32127OrThrow(
        int key);

    /**
     * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
     */
    int getFieldMapSint32Int64128Count();
    /**
     * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
     */
    boolean containsFieldMapSint32Int64128(
        int key);
    /**
     * Use {@link #getFieldMapSint32Int64128Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSint32Int64128();
    /**
     * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSint32Int64128Map();
    /**
     * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
     */

    long getFieldMapSint32Int64128OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
     */

    long getFieldMapSint32Int64128OrThrow(
        int key);

    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
     */
    int getFieldMapSint32Message129Count();
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
     */
    boolean containsFieldMapSint32Message129(
        int key);
    /**
     * Use {@link #getFieldMapSint32Message129Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapSint32Message129();
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapSint32Message129Map();
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSint32Message129OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue);
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSint32Message129OrThrow(
        int key);

    /**
     * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
     */
    int getFieldMapSint32Sfixed32130Count();
    /**
     * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
     */
    boolean containsFieldMapSint32Sfixed32130(
        int key);
    /**
     * Use {@link #getFieldMapSint32Sfixed32130Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSint32Sfixed32130();
    /**
     * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSint32Sfixed32130Map();
    /**
     * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
     */

    int getFieldMapSint32Sfixed32130OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
     */

    int getFieldMapSint32Sfixed32130OrThrow(
        int key);

    /**
     * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
     */
    int getFieldMapSint32Sfixed64131Count();
    /**
     * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
     */
    boolean containsFieldMapSint32Sfixed64131(
        int key);
    /**
     * Use {@link #getFieldMapSint32Sfixed64131Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSint32Sfixed64131();
    /**
     * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSint32Sfixed64131Map();
    /**
     * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
     */

    long getFieldMapSint32Sfixed64131OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
     */

    long getFieldMapSint32Sfixed64131OrThrow(
        int key);

    /**
     * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
     */
    int getFieldMapSint32Sint32132Count();
    /**
     * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
     */
    boolean containsFieldMapSint32Sint32132(
        int key);
    /**
     * Use {@link #getFieldMapSint32Sint32132Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSint32Sint32132();
    /**
     * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSint32Sint32132Map();
    /**
     * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
     */

    int getFieldMapSint32Sint32132OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
     */

    int getFieldMapSint32Sint32132OrThrow(
        int key);

    /**
     * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
     */
    int getFieldMapSint32Sint64133Count();
    /**
     * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
     */
    boolean containsFieldMapSint32Sint64133(
        int key);
    /**
     * Use {@link #getFieldMapSint32Sint64133Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSint32Sint64133();
    /**
     * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSint32Sint64133Map();
    /**
     * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
     */

    long getFieldMapSint32Sint64133OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
     */

    long getFieldMapSint32Sint64133OrThrow(
        int key);

    /**
     * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
     */
    int getFieldMapSint32String134Count();
    /**
     * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
     */
    boolean containsFieldMapSint32String134(
        int key);
    /**
     * Use {@link #getFieldMapSint32String134Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.String>
    getFieldMapSint32String134();
    /**
     * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.String>
    getFieldMapSint32String134Map();
    /**
     * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
     */

    java.lang.String getFieldMapSint32String134OrDefault(
        int key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
     */

    java.lang.String getFieldMapSint32String134OrThrow(
        int key);

    /**
     * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
     */
    int getFieldMapSint32Uint32135Count();
    /**
     * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
     */
    boolean containsFieldMapSint32Uint32135(
        int key);
    /**
     * Use {@link #getFieldMapSint32Uint32135Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSint32Uint32135();
    /**
     * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapSint32Uint32135Map();
    /**
     * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
     */

    int getFieldMapSint32Uint32135OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
     */

    int getFieldMapSint32Uint32135OrThrow(
        int key);

    /**
     * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
     */
    int getFieldMapSint32Uint64136Count();
    /**
     * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
     */
    boolean containsFieldMapSint32Uint64136(
        int key);
    /**
     * Use {@link #getFieldMapSint32Uint64136Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSint32Uint64136();
    /**
     * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapSint32Uint64136Map();
    /**
     * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
     */

    long getFieldMapSint32Uint64136OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
     */

    long getFieldMapSint32Uint64136OrThrow(
        int key);

    /**
     * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
     */
    int getFieldMapSint64Bool137Count();
    /**
     * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
     */
    boolean containsFieldMapSint64Bool137(
        long key);
    /**
     * Use {@link #getFieldMapSint64Bool137Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Boolean>
    getFieldMapSint64Bool137();
    /**
     * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Boolean>
    getFieldMapSint64Bool137Map();
    /**
     * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
     */

    boolean getFieldMapSint64Bool137OrDefault(
        long key,
        boolean defaultValue);
    /**
     * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
     */

    boolean getFieldMapSint64Bool137OrThrow(
        long key);

    /**
     * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
     */
    int getFieldMapSint64Bytes138Count();
    /**
     * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
     */
    boolean containsFieldMapSint64Bytes138(
        long key);
    /**
     * Use {@link #getFieldMapSint64Bytes138Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, com.google.protobuf.ByteString>
    getFieldMapSint64Bytes138();
    /**
     * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
     */
    java.util.Map<java.lang.Long, com.google.protobuf.ByteString>
    getFieldMapSint64Bytes138Map();
    /**
     * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
     */

    com.google.protobuf.ByteString getFieldMapSint64Bytes138OrDefault(
        long key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
     */

    com.google.protobuf.ByteString getFieldMapSint64Bytes138OrThrow(
        long key);

    /**
     * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
     */
    int getFieldMapSint64Double139Count();
    /**
     * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
     */
    boolean containsFieldMapSint64Double139(
        long key);
    /**
     * Use {@link #getFieldMapSint64Double139Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Double>
    getFieldMapSint64Double139();
    /**
     * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Double>
    getFieldMapSint64Double139Map();
    /**
     * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
     */

    double getFieldMapSint64Double139OrDefault(
        long key,
        double defaultValue);
    /**
     * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
     */

    double getFieldMapSint64Double139OrThrow(
        long key);

    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
     */
    int getFieldMapSint64Enum140Count();
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
     */
    boolean containsFieldMapSint64Enum140(
        long key);
    /**
     * Use {@link #getFieldMapSint64Enum140Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapSint64Enum140();
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
     */
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapSint64Enum140Map();
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSint64Enum140OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue);
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSint64Enum140OrThrow(
        long key);

    /**
     * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
     */
    int getFieldMapSint64Fixed32141Count();
    /**
     * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
     */
    boolean containsFieldMapSint64Fixed32141(
        long key);
    /**
     * Use {@link #getFieldMapSint64Fixed32141Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSint64Fixed32141();
    /**
     * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSint64Fixed32141Map();
    /**
     * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
     */

    int getFieldMapSint64Fixed32141OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
     */

    int getFieldMapSint64Fixed32141OrThrow(
        long key);

    /**
     * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
     */
    int getFieldMapSint64Fixed64142Count();
    /**
     * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
     */
    boolean containsFieldMapSint64Fixed64142(
        long key);
    /**
     * Use {@link #getFieldMapSint64Fixed64142Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSint64Fixed64142();
    /**
     * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSint64Fixed64142Map();
    /**
     * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
     */

    long getFieldMapSint64Fixed64142OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
     */

    long getFieldMapSint64Fixed64142OrThrow(
        long key);

    /**
     * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
     */
    int getFieldMapSint64Float143Count();
    /**
     * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
     */
    boolean containsFieldMapSint64Float143(
        long key);
    /**
     * Use {@link #getFieldMapSint64Float143Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Float>
    getFieldMapSint64Float143();
    /**
     * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Float>
    getFieldMapSint64Float143Map();
    /**
     * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
     */

    float getFieldMapSint64Float143OrDefault(
        long key,
        float defaultValue);
    /**
     * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
     */

    float getFieldMapSint64Float143OrThrow(
        long key);

    /**
     * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
     */
    int getFieldMapSint64Int32144Count();
    /**
     * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
     */
    boolean containsFieldMapSint64Int32144(
        long key);
    /**
     * Use {@link #getFieldMapSint64Int32144Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSint64Int32144();
    /**
     * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSint64Int32144Map();
    /**
     * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
     */

    int getFieldMapSint64Int32144OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
     */

    int getFieldMapSint64Int32144OrThrow(
        long key);

    /**
     * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
     */
    int getFieldMapSint64Int64145Count();
    /**
     * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
     */
    boolean containsFieldMapSint64Int64145(
        long key);
    /**
     * Use {@link #getFieldMapSint64Int64145Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSint64Int64145();
    /**
     * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSint64Int64145Map();
    /**
     * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
     */

    long getFieldMapSint64Int64145OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
     */

    long getFieldMapSint64Int64145OrThrow(
        long key);

    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
     */
    int getFieldMapSint64Message146Count();
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
     */
    boolean containsFieldMapSint64Message146(
        long key);
    /**
     * Use {@link #getFieldMapSint64Message146Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapSint64Message146();
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
     */
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapSint64Message146Map();
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSint64Message146OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue);
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSint64Message146OrThrow(
        long key);

    /**
     * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
     */
    int getFieldMapSint64Sfixed32147Count();
    /**
     * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
     */
    boolean containsFieldMapSint64Sfixed32147(
        long key);
    /**
     * Use {@link #getFieldMapSint64Sfixed32147Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSint64Sfixed32147();
    /**
     * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSint64Sfixed32147Map();
    /**
     * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
     */

    int getFieldMapSint64Sfixed32147OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
     */

    int getFieldMapSint64Sfixed32147OrThrow(
        long key);

    /**
     * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
     */
    int getFieldMapSint64Sfixed64148Count();
    /**
     * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
     */
    boolean containsFieldMapSint64Sfixed64148(
        long key);
    /**
     * Use {@link #getFieldMapSint64Sfixed64148Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSint64Sfixed64148();
    /**
     * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSint64Sfixed64148Map();
    /**
     * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
     */

    long getFieldMapSint64Sfixed64148OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
     */

    long getFieldMapSint64Sfixed64148OrThrow(
        long key);

    /**
     * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
     */
    int getFieldMapSint64Sint32149Count();
    /**
     * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
     */
    boolean containsFieldMapSint64Sint32149(
        long key);
    /**
     * Use {@link #getFieldMapSint64Sint32149Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSint64Sint32149();
    /**
     * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSint64Sint32149Map();
    /**
     * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
     */

    int getFieldMapSint64Sint32149OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
     */

    int getFieldMapSint64Sint32149OrThrow(
        long key);

    /**
     * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
     */
    int getFieldMapSint64Sint64150Count();
    /**
     * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
     */
    boolean containsFieldMapSint64Sint64150(
        long key);
    /**
     * Use {@link #getFieldMapSint64Sint64150Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSint64Sint64150();
    /**
     * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSint64Sint64150Map();
    /**
     * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
     */

    long getFieldMapSint64Sint64150OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
     */

    long getFieldMapSint64Sint64150OrThrow(
        long key);

    /**
     * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
     */
    int getFieldMapSint64String151Count();
    /**
     * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
     */
    boolean containsFieldMapSint64String151(
        long key);
    /**
     * Use {@link #getFieldMapSint64String151Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.String>
    getFieldMapSint64String151();
    /**
     * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
     */
    java.util.Map<java.lang.Long, java.lang.String>
    getFieldMapSint64String151Map();
    /**
     * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
     */

    java.lang.String getFieldMapSint64String151OrDefault(
        long key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
     */

    java.lang.String getFieldMapSint64String151OrThrow(
        long key);

    /**
     * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
     */
    int getFieldMapSint64Uint32152Count();
    /**
     * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
     */
    boolean containsFieldMapSint64Uint32152(
        long key);
    /**
     * Use {@link #getFieldMapSint64Uint32152Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSint64Uint32152();
    /**
     * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapSint64Uint32152Map();
    /**
     * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
     */

    int getFieldMapSint64Uint32152OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
     */

    int getFieldMapSint64Uint32152OrThrow(
        long key);

    /**
     * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
     */
    int getFieldMapSint64Uint64153Count();
    /**
     * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
     */
    boolean containsFieldMapSint64Uint64153(
        long key);
    /**
     * Use {@link #getFieldMapSint64Uint64153Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSint64Uint64153();
    /**
     * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapSint64Uint64153Map();
    /**
     * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
     */

    long getFieldMapSint64Uint64153OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
     */

    long getFieldMapSint64Uint64153OrThrow(
        long key);

    /**
     * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
     */
    int getFieldMapStringBool154Count();
    /**
     * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
     */
    boolean containsFieldMapStringBool154(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringBool154Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Boolean>
    getFieldMapStringBool154();
    /**
     * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
     */
    java.util.Map<java.lang.String, java.lang.Boolean>
    getFieldMapStringBool154Map();
    /**
     * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
     */

    boolean getFieldMapStringBool154OrDefault(
        java.lang.String key,
        boolean defaultValue);
    /**
     * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
     */

    boolean getFieldMapStringBool154OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
     */
    int getFieldMapStringBytes155Count();
    /**
     * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
     */
    boolean containsFieldMapStringBytes155(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringBytes155Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getFieldMapStringBytes155();
    /**
     * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
     */
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getFieldMapStringBytes155Map();
    /**
     * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
     */

    com.google.protobuf.ByteString getFieldMapStringBytes155OrDefault(
        java.lang.String key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
     */

    com.google.protobuf.ByteString getFieldMapStringBytes155OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
     */
    int getFieldMapStringDouble156Count();
    /**
     * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
     */
    boolean containsFieldMapStringDouble156(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringDouble156Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Double>
    getFieldMapStringDouble156();
    /**
     * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
     */
    java.util.Map<java.lang.String, java.lang.Double>
    getFieldMapStringDouble156Map();
    /**
     * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
     */

    double getFieldMapStringDouble156OrDefault(
        java.lang.String key,
        double defaultValue);
    /**
     * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
     */

    double getFieldMapStringDouble156OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
     */
    int getFieldMapStringEnum157Count();
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
     */
    boolean containsFieldMapStringEnum157(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringEnum157Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapStringEnum157();
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
     */
    java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapStringEnum157Map();
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapStringEnum157OrDefault(
        java.lang.String key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue);
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapStringEnum157OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
     */
    int getFieldMapStringFixed32158Count();
    /**
     * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
     */
    boolean containsFieldMapStringFixed32158(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringFixed32158Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Integer>
    getFieldMapStringFixed32158();
    /**
     * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
     */
    java.util.Map<java.lang.String, java.lang.Integer>
    getFieldMapStringFixed32158Map();
    /**
     * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
     */

    int getFieldMapStringFixed32158OrDefault(
        java.lang.String key,
        int defaultValue);
    /**
     * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
     */

    int getFieldMapStringFixed32158OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
     */
    int getFieldMapStringFixed64159Count();
    /**
     * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
     */
    boolean containsFieldMapStringFixed64159(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringFixed64159Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Long>
    getFieldMapStringFixed64159();
    /**
     * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
     */
    java.util.Map<java.lang.String, java.lang.Long>
    getFieldMapStringFixed64159Map();
    /**
     * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
     */

    long getFieldMapStringFixed64159OrDefault(
        java.lang.String key,
        long defaultValue);
    /**
     * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
     */

    long getFieldMapStringFixed64159OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
     */
    int getFieldMapStringFloat160Count();
    /**
     * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
     */
    boolean containsFieldMapStringFloat160(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringFloat160Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Float>
    getFieldMapStringFloat160();
    /**
     * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
     */
    java.util.Map<java.lang.String, java.lang.Float>
    getFieldMapStringFloat160Map();
    /**
     * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
     */

    float getFieldMapStringFloat160OrDefault(
        java.lang.String key,
        float defaultValue);
    /**
     * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
     */

    float getFieldMapStringFloat160OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
     */
    int getFieldMapStringInt32161Count();
    /**
     * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
     */
    boolean containsFieldMapStringInt32161(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringInt32161Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Integer>
    getFieldMapStringInt32161();
    /**
     * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
     */
    java.util.Map<java.lang.String, java.lang.Integer>
    getFieldMapStringInt32161Map();
    /**
     * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
     */

    int getFieldMapStringInt32161OrDefault(
        java.lang.String key,
        int defaultValue);
    /**
     * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
     */

    int getFieldMapStringInt32161OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
     */
    int getFieldMapStringInt64162Count();
    /**
     * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
     */
    boolean containsFieldMapStringInt64162(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringInt64162Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Long>
    getFieldMapStringInt64162();
    /**
     * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
     */
    java.util.Map<java.lang.String, java.lang.Long>
    getFieldMapStringInt64162Map();
    /**
     * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
     */

    long getFieldMapStringInt64162OrDefault(
        java.lang.String key,
        long defaultValue);
    /**
     * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
     */

    long getFieldMapStringInt64162OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
     */
    int getFieldMapStringMessage163Count();
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
     */
    boolean containsFieldMapStringMessage163(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringMessage163Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapStringMessage163();
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
     */
    java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapStringMessage163Map();
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapStringMessage163OrDefault(
        java.lang.String key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue);
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapStringMessage163OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
     */
    int getFieldMapStringSfixed32164Count();
    /**
     * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
     */
    boolean containsFieldMapStringSfixed32164(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringSfixed32164Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Integer>
    getFieldMapStringSfixed32164();
    /**
     * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
     */
    java.util.Map<java.lang.String, java.lang.Integer>
    getFieldMapStringSfixed32164Map();
    /**
     * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
     */

    int getFieldMapStringSfixed32164OrDefault(
        java.lang.String key,
        int defaultValue);
    /**
     * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
     */

    int getFieldMapStringSfixed32164OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
     */
    int getFieldMapStringSfixed64165Count();
    /**
     * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
     */
    boolean containsFieldMapStringSfixed64165(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringSfixed64165Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Long>
    getFieldMapStringSfixed64165();
    /**
     * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
     */
    java.util.Map<java.lang.String, java.lang.Long>
    getFieldMapStringSfixed64165Map();
    /**
     * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
     */

    long getFieldMapStringSfixed64165OrDefault(
        java.lang.String key,
        long defaultValue);
    /**
     * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
     */

    long getFieldMapStringSfixed64165OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
     */
    int getFieldMapStringSint32166Count();
    /**
     * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
     */
    boolean containsFieldMapStringSint32166(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringSint32166Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Integer>
    getFieldMapStringSint32166();
    /**
     * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
     */
    java.util.Map<java.lang.String, java.lang.Integer>
    getFieldMapStringSint32166Map();
    /**
     * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
     */

    int getFieldMapStringSint32166OrDefault(
        java.lang.String key,
        int defaultValue);
    /**
     * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
     */

    int getFieldMapStringSint32166OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
     */
    int getFieldMapStringSint64167Count();
    /**
     * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
     */
    boolean containsFieldMapStringSint64167(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringSint64167Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Long>
    getFieldMapStringSint64167();
    /**
     * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
     */
    java.util.Map<java.lang.String, java.lang.Long>
    getFieldMapStringSint64167Map();
    /**
     * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
     */

    long getFieldMapStringSint64167OrDefault(
        java.lang.String key,
        long defaultValue);
    /**
     * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
     */

    long getFieldMapStringSint64167OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
     */
    int getFieldMapStringString168Count();
    /**
     * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
     */
    boolean containsFieldMapStringString168(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringString168Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getFieldMapStringString168();
    /**
     * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getFieldMapStringString168Map();
    /**
     * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
     */

    java.lang.String getFieldMapStringString168OrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
     */

    java.lang.String getFieldMapStringString168OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
     */
    int getFieldMapStringUint32169Count();
    /**
     * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
     */
    boolean containsFieldMapStringUint32169(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringUint32169Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Integer>
    getFieldMapStringUint32169();
    /**
     * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
     */
    java.util.Map<java.lang.String, java.lang.Integer>
    getFieldMapStringUint32169Map();
    /**
     * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
     */

    int getFieldMapStringUint32169OrDefault(
        java.lang.String key,
        int defaultValue);
    /**
     * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
     */

    int getFieldMapStringUint32169OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
     */
    int getFieldMapStringUint64170Count();
    /**
     * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
     */
    boolean containsFieldMapStringUint64170(
        java.lang.String key);
    /**
     * Use {@link #getFieldMapStringUint64170Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Long>
    getFieldMapStringUint64170();
    /**
     * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
     */
    java.util.Map<java.lang.String, java.lang.Long>
    getFieldMapStringUint64170Map();
    /**
     * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
     */

    long getFieldMapStringUint64170OrDefault(
        java.lang.String key,
        long defaultValue);
    /**
     * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
     */

    long getFieldMapStringUint64170OrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
     */
    int getFieldMapUint32Bool171Count();
    /**
     * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
     */
    boolean containsFieldMapUint32Bool171(
        int key);
    /**
     * Use {@link #getFieldMapUint32Bool171Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Boolean>
    getFieldMapUint32Bool171();
    /**
     * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Boolean>
    getFieldMapUint32Bool171Map();
    /**
     * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
     */

    boolean getFieldMapUint32Bool171OrDefault(
        int key,
        boolean defaultValue);
    /**
     * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
     */

    boolean getFieldMapUint32Bool171OrThrow(
        int key);

    /**
     * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
     */
    int getFieldMapUint32Bytes172Count();
    /**
     * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
     */
    boolean containsFieldMapUint32Bytes172(
        int key);
    /**
     * Use {@link #getFieldMapUint32Bytes172Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getFieldMapUint32Bytes172();
    /**
     * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getFieldMapUint32Bytes172Map();
    /**
     * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
     */

    com.google.protobuf.ByteString getFieldMapUint32Bytes172OrDefault(
        int key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
     */

    com.google.protobuf.ByteString getFieldMapUint32Bytes172OrThrow(
        int key);

    /**
     * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
     */
    int getFieldMapUint32Double173Count();
    /**
     * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
     */
    boolean containsFieldMapUint32Double173(
        int key);
    /**
     * Use {@link #getFieldMapUint32Double173Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Double>
    getFieldMapUint32Double173();
    /**
     * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Double>
    getFieldMapUint32Double173Map();
    /**
     * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
     */

    double getFieldMapUint32Double173OrDefault(
        int key,
        double defaultValue);
    /**
     * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
     */

    double getFieldMapUint32Double173OrThrow(
        int key);

    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
     */
    int getFieldMapUint32Enum174Count();
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
     */
    boolean containsFieldMapUint32Enum174(
        int key);
    /**
     * Use {@link #getFieldMapUint32Enum174Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapUint32Enum174();
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapUint32Enum174Map();
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapUint32Enum174OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue);
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapUint32Enum174OrThrow(
        int key);

    /**
     * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
     */
    int getFieldMapUint32Fixed32175Count();
    /**
     * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
     */
    boolean containsFieldMapUint32Fixed32175(
        int key);
    /**
     * Use {@link #getFieldMapUint32Fixed32175Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapUint32Fixed32175();
    /**
     * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapUint32Fixed32175Map();
    /**
     * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
     */

    int getFieldMapUint32Fixed32175OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
     */

    int getFieldMapUint32Fixed32175OrThrow(
        int key);

    /**
     * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
     */
    int getFieldMapUint32Fixed64176Count();
    /**
     * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
     */
    boolean containsFieldMapUint32Fixed64176(
        int key);
    /**
     * Use {@link #getFieldMapUint32Fixed64176Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapUint32Fixed64176();
    /**
     * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapUint32Fixed64176Map();
    /**
     * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
     */

    long getFieldMapUint32Fixed64176OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
     */

    long getFieldMapUint32Fixed64176OrThrow(
        int key);

    /**
     * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
     */
    int getFieldMapUint32Float177Count();
    /**
     * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
     */
    boolean containsFieldMapUint32Float177(
        int key);
    /**
     * Use {@link #getFieldMapUint32Float177Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Float>
    getFieldMapUint32Float177();
    /**
     * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Float>
    getFieldMapUint32Float177Map();
    /**
     * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
     */

    float getFieldMapUint32Float177OrDefault(
        int key,
        float defaultValue);
    /**
     * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
     */

    float getFieldMapUint32Float177OrThrow(
        int key);

    /**
     * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
     */
    int getFieldMapUint32Int32178Count();
    /**
     * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
     */
    boolean containsFieldMapUint32Int32178(
        int key);
    /**
     * Use {@link #getFieldMapUint32Int32178Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapUint32Int32178();
    /**
     * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapUint32Int32178Map();
    /**
     * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
     */

    int getFieldMapUint32Int32178OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
     */

    int getFieldMapUint32Int32178OrThrow(
        int key);

    /**
     * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
     */
    int getFieldMapUint32Int64179Count();
    /**
     * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
     */
    boolean containsFieldMapUint32Int64179(
        int key);
    /**
     * Use {@link #getFieldMapUint32Int64179Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapUint32Int64179();
    /**
     * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapUint32Int64179Map();
    /**
     * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
     */

    long getFieldMapUint32Int64179OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
     */

    long getFieldMapUint32Int64179OrThrow(
        int key);

    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
     */
    int getFieldMapUint32Message180Count();
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
     */
    boolean containsFieldMapUint32Message180(
        int key);
    /**
     * Use {@link #getFieldMapUint32Message180Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapUint32Message180();
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapUint32Message180Map();
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapUint32Message180OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue);
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapUint32Message180OrThrow(
        int key);

    /**
     * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
     */
    int getFieldMapUint32Sfixed32181Count();
    /**
     * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
     */
    boolean containsFieldMapUint32Sfixed32181(
        int key);
    /**
     * Use {@link #getFieldMapUint32Sfixed32181Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapUint32Sfixed32181();
    /**
     * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapUint32Sfixed32181Map();
    /**
     * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
     */

    int getFieldMapUint32Sfixed32181OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
     */

    int getFieldMapUint32Sfixed32181OrThrow(
        int key);

    /**
     * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
     */
    int getFieldMapUint32Sfixed64182Count();
    /**
     * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
     */
    boolean containsFieldMapUint32Sfixed64182(
        int key);
    /**
     * Use {@link #getFieldMapUint32Sfixed64182Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapUint32Sfixed64182();
    /**
     * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapUint32Sfixed64182Map();
    /**
     * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
     */

    long getFieldMapUint32Sfixed64182OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
     */

    long getFieldMapUint32Sfixed64182OrThrow(
        int key);

    /**
     * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
     */
    int getFieldMapUint32Sint32183Count();
    /**
     * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
     */
    boolean containsFieldMapUint32Sint32183(
        int key);
    /**
     * Use {@link #getFieldMapUint32Sint32183Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapUint32Sint32183();
    /**
     * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapUint32Sint32183Map();
    /**
     * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
     */

    int getFieldMapUint32Sint32183OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
     */

    int getFieldMapUint32Sint32183OrThrow(
        int key);

    /**
     * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
     */
    int getFieldMapUint32Sint64184Count();
    /**
     * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
     */
    boolean containsFieldMapUint32Sint64184(
        int key);
    /**
     * Use {@link #getFieldMapUint32Sint64184Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapUint32Sint64184();
    /**
     * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapUint32Sint64184Map();
    /**
     * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
     */

    long getFieldMapUint32Sint64184OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
     */

    long getFieldMapUint32Sint64184OrThrow(
        int key);

    /**
     * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
     */
    int getFieldMapUint32String185Count();
    /**
     * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
     */
    boolean containsFieldMapUint32String185(
        int key);
    /**
     * Use {@link #getFieldMapUint32String185Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.String>
    getFieldMapUint32String185();
    /**
     * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.String>
    getFieldMapUint32String185Map();
    /**
     * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
     */

    java.lang.String getFieldMapUint32String185OrDefault(
        int key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
     */

    java.lang.String getFieldMapUint32String185OrThrow(
        int key);

    /**
     * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
     */
    int getFieldMapUint32Uint32186Count();
    /**
     * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
     */
    boolean containsFieldMapUint32Uint32186(
        int key);
    /**
     * Use {@link #getFieldMapUint32Uint32186Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapUint32Uint32186();
    /**
     * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getFieldMapUint32Uint32186Map();
    /**
     * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
     */

    int getFieldMapUint32Uint32186OrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
     */

    int getFieldMapUint32Uint32186OrThrow(
        int key);

    /**
     * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
     */
    int getFieldMapUint32Uint64187Count();
    /**
     * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
     */
    boolean containsFieldMapUint32Uint64187(
        int key);
    /**
     * Use {@link #getFieldMapUint32Uint64187Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapUint32Uint64187();
    /**
     * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Long>
    getFieldMapUint32Uint64187Map();
    /**
     * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
     */

    long getFieldMapUint32Uint64187OrDefault(
        int key,
        long defaultValue);
    /**
     * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
     */

    long getFieldMapUint32Uint64187OrThrow(
        int key);

    /**
     * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
     */
    int getFieldMapUint64Bool188Count();
    /**
     * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
     */
    boolean containsFieldMapUint64Bool188(
        long key);
    /**
     * Use {@link #getFieldMapUint64Bool188Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Boolean>
    getFieldMapUint64Bool188();
    /**
     * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Boolean>
    getFieldMapUint64Bool188Map();
    /**
     * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
     */

    boolean getFieldMapUint64Bool188OrDefault(
        long key,
        boolean defaultValue);
    /**
     * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
     */

    boolean getFieldMapUint64Bool188OrThrow(
        long key);

    /**
     * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
     */
    int getFieldMapUint64Bytes189Count();
    /**
     * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
     */
    boolean containsFieldMapUint64Bytes189(
        long key);
    /**
     * Use {@link #getFieldMapUint64Bytes189Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, com.google.protobuf.ByteString>
    getFieldMapUint64Bytes189();
    /**
     * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
     */
    java.util.Map<java.lang.Long, com.google.protobuf.ByteString>
    getFieldMapUint64Bytes189Map();
    /**
     * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
     */

    com.google.protobuf.ByteString getFieldMapUint64Bytes189OrDefault(
        long key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
     */

    com.google.protobuf.ByteString getFieldMapUint64Bytes189OrThrow(
        long key);

    /**
     * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
     */
    int getFieldMapUint64Double190Count();
    /**
     * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
     */
    boolean containsFieldMapUint64Double190(
        long key);
    /**
     * Use {@link #getFieldMapUint64Double190Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Double>
    getFieldMapUint64Double190();
    /**
     * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Double>
    getFieldMapUint64Double190Map();
    /**
     * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
     */

    double getFieldMapUint64Double190OrDefault(
        long key,
        double defaultValue);
    /**
     * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
     */

    double getFieldMapUint64Double190OrThrow(
        long key);

    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
     */
    int getFieldMapUint64Enum191Count();
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
     */
    boolean containsFieldMapUint64Enum191(
        long key);
    /**
     * Use {@link #getFieldMapUint64Enum191Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapUint64Enum191();
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
     */
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapUint64Enum191Map();
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapUint64Enum191OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue);
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
     */
    com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapUint64Enum191OrThrow(
        long key);

    /**
     * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
     */
    int getFieldMapUint64Fixed32192Count();
    /**
     * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
     */
    boolean containsFieldMapUint64Fixed32192(
        long key);
    /**
     * Use {@link #getFieldMapUint64Fixed32192Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapUint64Fixed32192();
    /**
     * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapUint64Fixed32192Map();
    /**
     * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
     */

    int getFieldMapUint64Fixed32192OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
     */

    int getFieldMapUint64Fixed32192OrThrow(
        long key);

    /**
     * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
     */
    int getFieldMapUint64Fixed64193Count();
    /**
     * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
     */
    boolean containsFieldMapUint64Fixed64193(
        long key);
    /**
     * Use {@link #getFieldMapUint64Fixed64193Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapUint64Fixed64193();
    /**
     * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapUint64Fixed64193Map();
    /**
     * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
     */

    long getFieldMapUint64Fixed64193OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
     */

    long getFieldMapUint64Fixed64193OrThrow(
        long key);

    /**
     * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
     */
    int getFieldMapUint64Float194Count();
    /**
     * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
     */
    boolean containsFieldMapUint64Float194(
        long key);
    /**
     * Use {@link #getFieldMapUint64Float194Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Float>
    getFieldMapUint64Float194();
    /**
     * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Float>
    getFieldMapUint64Float194Map();
    /**
     * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
     */

    float getFieldMapUint64Float194OrDefault(
        long key,
        float defaultValue);
    /**
     * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
     */

    float getFieldMapUint64Float194OrThrow(
        long key);

    /**
     * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
     */
    int getFieldMapUint64Int32195Count();
    /**
     * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
     */
    boolean containsFieldMapUint64Int32195(
        long key);
    /**
     * Use {@link #getFieldMapUint64Int32195Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapUint64Int32195();
    /**
     * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapUint64Int32195Map();
    /**
     * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
     */

    int getFieldMapUint64Int32195OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
     */

    int getFieldMapUint64Int32195OrThrow(
        long key);

    /**
     * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
     */
    int getFieldMapUint64Int64196Count();
    /**
     * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
     */
    boolean containsFieldMapUint64Int64196(
        long key);
    /**
     * Use {@link #getFieldMapUint64Int64196Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapUint64Int64196();
    /**
     * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapUint64Int64196Map();
    /**
     * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
     */

    long getFieldMapUint64Int64196OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
     */

    long getFieldMapUint64Int64196OrThrow(
        long key);

    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
     */
    int getFieldMapUint64Message197Count();
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
     */
    boolean containsFieldMapUint64Message197(
        long key);
    /**
     * Use {@link #getFieldMapUint64Message197Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapUint64Message197();
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
     */
    java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getFieldMapUint64Message197Map();
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapUint64Message197OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue);
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
     */

    com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapUint64Message197OrThrow(
        long key);

    /**
     * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
     */
    int getFieldMapUint64Sfixed32198Count();
    /**
     * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
     */
    boolean containsFieldMapUint64Sfixed32198(
        long key);
    /**
     * Use {@link #getFieldMapUint64Sfixed32198Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapUint64Sfixed32198();
    /**
     * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapUint64Sfixed32198Map();
    /**
     * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
     */

    int getFieldMapUint64Sfixed32198OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
     */

    int getFieldMapUint64Sfixed32198OrThrow(
        long key);

    /**
     * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
     */
    int getFieldMapUint64Sfixed64199Count();
    /**
     * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
     */
    boolean containsFieldMapUint64Sfixed64199(
        long key);
    /**
     * Use {@link #getFieldMapUint64Sfixed64199Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapUint64Sfixed64199();
    /**
     * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapUint64Sfixed64199Map();
    /**
     * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
     */

    long getFieldMapUint64Sfixed64199OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
     */

    long getFieldMapUint64Sfixed64199OrThrow(
        long key);

    /**
     * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
     */
    int getFieldMapUint64Sint32200Count();
    /**
     * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
     */
    boolean containsFieldMapUint64Sint32200(
        long key);
    /**
     * Use {@link #getFieldMapUint64Sint32200Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapUint64Sint32200();
    /**
     * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapUint64Sint32200Map();
    /**
     * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
     */

    int getFieldMapUint64Sint32200OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
     */

    int getFieldMapUint64Sint32200OrThrow(
        long key);

    /**
     * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
     */
    int getFieldMapUint64Sint64201Count();
    /**
     * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
     */
    boolean containsFieldMapUint64Sint64201(
        long key);
    /**
     * Use {@link #getFieldMapUint64Sint64201Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapUint64Sint64201();
    /**
     * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapUint64Sint64201Map();
    /**
     * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
     */

    long getFieldMapUint64Sint64201OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
     */

    long getFieldMapUint64Sint64201OrThrow(
        long key);

    /**
     * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
     */
    int getFieldMapUint64String202Count();
    /**
     * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
     */
    boolean containsFieldMapUint64String202(
        long key);
    /**
     * Use {@link #getFieldMapUint64String202Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.String>
    getFieldMapUint64String202();
    /**
     * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
     */
    java.util.Map<java.lang.Long, java.lang.String>
    getFieldMapUint64String202Map();
    /**
     * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
     */

    java.lang.String getFieldMapUint64String202OrDefault(
        long key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
     */

    java.lang.String getFieldMapUint64String202OrThrow(
        long key);

    /**
     * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
     */
    int getFieldMapUint64Uint32203Count();
    /**
     * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
     */
    boolean containsFieldMapUint64Uint32203(
        long key);
    /**
     * Use {@link #getFieldMapUint64Uint32203Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapUint64Uint32203();
    /**
     * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Integer>
    getFieldMapUint64Uint32203Map();
    /**
     * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
     */

    int getFieldMapUint64Uint32203OrDefault(
        long key,
        int defaultValue);
    /**
     * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
     */

    int getFieldMapUint64Uint32203OrThrow(
        long key);

    /**
     * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
     */
    int getFieldMapUint64Uint64204Count();
    /**
     * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
     */
    boolean containsFieldMapUint64Uint64204(
        long key);
    /**
     * Use {@link #getFieldMapUint64Uint64204Map()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapUint64Uint64204();
    /**
     * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getFieldMapUint64Uint64204Map();
    /**
     * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
     */

    long getFieldMapUint64Uint64204OrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
     */

    long getFieldMapUint64Uint64204OrThrow(
        long key);
  }
  /**
   * Protobuf type {@code protobuf.experimental.Proto2MessageWithMaps}
   */
  public  static final class Proto2MessageWithMaps extends
      com.google.protobuf.GeneratedMessageLite<
          Proto2MessageWithMaps, Proto2MessageWithMaps.Builder> implements
      // @@protoc_insertion_point(message_implements:protobuf.experimental.Proto2MessageWithMaps)
      Proto2MessageWithMapsOrBuilder {
    private Proto2MessageWithMaps() {
    }
    public static final int FIELD_MAP_BOOL_BOOL_1_FIELD_NUMBER = 1;
    private static final class FieldMapBoolBool1DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.Boolean> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.Boolean>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.Boolean> fieldMapBoolBool1_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Boolean>
    internalGetFieldMapBoolBool1() {
      return fieldMapBoolBool1_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Boolean>
    internalGetMutableFieldMapBoolBool1() {
      if (!fieldMapBoolBool1_.isMutable()) {
        fieldMapBoolBool1_ = fieldMapBoolBool1_.mutableCopy();
      }
      return fieldMapBoolBool1_;
    }
    @java.lang.Override

    public int getFieldMapBoolBool1Count() {
      return internalGetFieldMapBoolBool1().size();
    }
    /**
     * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolBool1(
        boolean key) {
      
      return internalGetFieldMapBoolBool1().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapBoolBool1Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Boolean> getFieldMapBoolBool1() {
      return getFieldMapBoolBool1Map();
    }
    /**
     * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.Boolean> getFieldMapBoolBool1Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapBoolBool1());
    }
    /**
     * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
     */
    @java.lang.Override

    public boolean getFieldMapBoolBool1OrDefault(
        boolean key,
        boolean defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Boolean> map =
          internalGetFieldMapBoolBool1();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
     */
    @java.lang.Override

    public boolean getFieldMapBoolBool1OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Boolean> map =
          internalGetFieldMapBoolBool1();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
     */
    private java.util.Map<java.lang.Boolean, java.lang.Boolean>
    getMutableFieldMapBoolBool1Map() {
      return internalGetMutableFieldMapBoolBool1();
    }

    public static final int FIELD_MAP_BOOL_BYTES_2_FIELD_NUMBER = 2;
    private static final class FieldMapBoolBytes2DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, com.google.protobuf.ByteString> fieldMapBoolBytes2_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, com.google.protobuf.ByteString>
    internalGetFieldMapBoolBytes2() {
      return fieldMapBoolBytes2_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, com.google.protobuf.ByteString>
    internalGetMutableFieldMapBoolBytes2() {
      if (!fieldMapBoolBytes2_.isMutable()) {
        fieldMapBoolBytes2_ = fieldMapBoolBytes2_.mutableCopy();
      }
      return fieldMapBoolBytes2_;
    }
    @java.lang.Override

    public int getFieldMapBoolBytes2Count() {
      return internalGetFieldMapBoolBytes2().size();
    }
    /**
     * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolBytes2(
        boolean key) {
      
      return internalGetFieldMapBoolBytes2().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapBoolBytes2Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, com.google.protobuf.ByteString> getFieldMapBoolBytes2() {
      return getFieldMapBoolBytes2Map();
    }
    /**
     * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, com.google.protobuf.ByteString> getFieldMapBoolBytes2Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapBoolBytes2());
    }
    /**
     * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapBoolBytes2OrDefault(
        boolean key,
        com.google.protobuf.ByteString defaultValue) {
      
      java.util.Map<java.lang.Boolean, com.google.protobuf.ByteString> map =
          internalGetFieldMapBoolBytes2();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapBoolBytes2OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, com.google.protobuf.ByteString> map =
          internalGetFieldMapBoolBytes2();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
     */
    private java.util.Map<java.lang.Boolean, com.google.protobuf.ByteString>
    getMutableFieldMapBoolBytes2Map() {
      return internalGetMutableFieldMapBoolBytes2();
    }

    public static final int FIELD_MAP_BOOL_DOUBLE_3_FIELD_NUMBER = 3;
    private static final class FieldMapBoolDouble3DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.Double>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.Double> fieldMapBoolDouble3_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Double>
    internalGetFieldMapBoolDouble3() {
      return fieldMapBoolDouble3_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Double>
    internalGetMutableFieldMapBoolDouble3() {
      if (!fieldMapBoolDouble3_.isMutable()) {
        fieldMapBoolDouble3_ = fieldMapBoolDouble3_.mutableCopy();
      }
      return fieldMapBoolDouble3_;
    }
    @java.lang.Override

    public int getFieldMapBoolDouble3Count() {
      return internalGetFieldMapBoolDouble3().size();
    }
    /**
     * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolDouble3(
        boolean key) {
      
      return internalGetFieldMapBoolDouble3().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapBoolDouble3Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Double> getFieldMapBoolDouble3() {
      return getFieldMapBoolDouble3Map();
    }
    /**
     * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.Double> getFieldMapBoolDouble3Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapBoolDouble3());
    }
    /**
     * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
     */
    @java.lang.Override

    public double getFieldMapBoolDouble3OrDefault(
        boolean key,
        double defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Double> map =
          internalGetFieldMapBoolDouble3();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
     */
    @java.lang.Override

    public double getFieldMapBoolDouble3OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Double> map =
          internalGetFieldMapBoolDouble3();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
     */
    private java.util.Map<java.lang.Boolean, java.lang.Double>
    getMutableFieldMapBoolDouble3Map() {
      return internalGetMutableFieldMapBoolDouble3();
    }

    public static final int FIELD_MAP_BOOL_ENUM_4_FIELD_NUMBER = 4;
    private static final class FieldMapBoolEnum4DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.Integer> fieldMapBoolEnum4_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Integer>
    internalGetFieldMapBoolEnum4() {
      return fieldMapBoolEnum4_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Integer>
    internalGetMutableFieldMapBoolEnum4() {
      if (!fieldMapBoolEnum4_.isMutable()) {
        fieldMapBoolEnum4_ = fieldMapBoolEnum4_.mutableCopy();
      }
      return fieldMapBoolEnum4_;
    }
    @java.lang.Override

    public int getFieldMapBoolEnum4Count() {
      return internalGetFieldMapBoolEnum4().size();
    }
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolEnum4(
        boolean key) {
      
      return internalGetFieldMapBoolEnum4().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> fieldMapBoolEnum4ValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetValueMap(),
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO);
    /**
     * Use {@link #getFieldMapBoolEnum4Map()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapBoolEnum4() {
      return getFieldMapBoolEnum4Map();
    }
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapBoolEnum4Map() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
                internalGetFieldMapBoolEnum4(),
                fieldMapBoolEnum4ValueConverter));
    }
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapBoolEnum4OrDefault(
        boolean key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Integer> map =
          internalGetFieldMapBoolEnum4();
      return map.containsKey(key)
             ? fieldMapBoolEnum4ValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapBoolEnum4OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Integer> map =
          internalGetFieldMapBoolEnum4();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return fieldMapBoolEnum4ValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
     */
    private java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getMutableFieldMapBoolEnum4Map() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
              internalGetMutableFieldMapBoolEnum4(),
              fieldMapBoolEnum4ValueConverter);
    }

    public static final int FIELD_MAP_BOOL_FIXED32_5_FIELD_NUMBER = 5;
    private static final class FieldMapBoolFixed325DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.Integer> fieldMapBoolFixed325_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Integer>
    internalGetFieldMapBoolFixed325() {
      return fieldMapBoolFixed325_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Integer>
    internalGetMutableFieldMapBoolFixed325() {
      if (!fieldMapBoolFixed325_.isMutable()) {
        fieldMapBoolFixed325_ = fieldMapBoolFixed325_.mutableCopy();
      }
      return fieldMapBoolFixed325_;
    }
    @java.lang.Override

    public int getFieldMapBoolFixed325Count() {
      return internalGetFieldMapBoolFixed325().size();
    }
    /**
     * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolFixed325(
        boolean key) {
      
      return internalGetFieldMapBoolFixed325().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapBoolFixed325Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolFixed325() {
      return getFieldMapBoolFixed325Map();
    }
    /**
     * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolFixed325Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapBoolFixed325());
    }
    /**
     * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
     */
    @java.lang.Override

    public int getFieldMapBoolFixed325OrDefault(
        boolean key,
        int defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Integer> map =
          internalGetFieldMapBoolFixed325();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
     */
    @java.lang.Override

    public int getFieldMapBoolFixed325OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Integer> map =
          internalGetFieldMapBoolFixed325();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
     */
    private java.util.Map<java.lang.Boolean, java.lang.Integer>
    getMutableFieldMapBoolFixed325Map() {
      return internalGetMutableFieldMapBoolFixed325();
    }

    public static final int FIELD_MAP_BOOL_FIXED64_6_FIELD_NUMBER = 6;
    private static final class FieldMapBoolFixed646DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.Long> fieldMapBoolFixed646_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Long>
    internalGetFieldMapBoolFixed646() {
      return fieldMapBoolFixed646_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Long>
    internalGetMutableFieldMapBoolFixed646() {
      if (!fieldMapBoolFixed646_.isMutable()) {
        fieldMapBoolFixed646_ = fieldMapBoolFixed646_.mutableCopy();
      }
      return fieldMapBoolFixed646_;
    }
    @java.lang.Override

    public int getFieldMapBoolFixed646Count() {
      return internalGetFieldMapBoolFixed646().size();
    }
    /**
     * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolFixed646(
        boolean key) {
      
      return internalGetFieldMapBoolFixed646().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapBoolFixed646Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolFixed646() {
      return getFieldMapBoolFixed646Map();
    }
    /**
     * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolFixed646Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapBoolFixed646());
    }
    /**
     * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
     */
    @java.lang.Override

    public long getFieldMapBoolFixed646OrDefault(
        boolean key,
        long defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Long> map =
          internalGetFieldMapBoolFixed646();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
     */
    @java.lang.Override

    public long getFieldMapBoolFixed646OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Long> map =
          internalGetFieldMapBoolFixed646();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
     */
    private java.util.Map<java.lang.Boolean, java.lang.Long>
    getMutableFieldMapBoolFixed646Map() {
      return internalGetMutableFieldMapBoolFixed646();
    }

    public static final int FIELD_MAP_BOOL_FLOAT_7_FIELD_NUMBER = 7;
    private static final class FieldMapBoolFloat7DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.Float> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.Float>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.FLOAT,
                  0F);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.Float> fieldMapBoolFloat7_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Float>
    internalGetFieldMapBoolFloat7() {
      return fieldMapBoolFloat7_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Float>
    internalGetMutableFieldMapBoolFloat7() {
      if (!fieldMapBoolFloat7_.isMutable()) {
        fieldMapBoolFloat7_ = fieldMapBoolFloat7_.mutableCopy();
      }
      return fieldMapBoolFloat7_;
    }
    @java.lang.Override

    public int getFieldMapBoolFloat7Count() {
      return internalGetFieldMapBoolFloat7().size();
    }
    /**
     * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolFloat7(
        boolean key) {
      
      return internalGetFieldMapBoolFloat7().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapBoolFloat7Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Float> getFieldMapBoolFloat7() {
      return getFieldMapBoolFloat7Map();
    }
    /**
     * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.Float> getFieldMapBoolFloat7Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapBoolFloat7());
    }
    /**
     * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
     */
    @java.lang.Override

    public float getFieldMapBoolFloat7OrDefault(
        boolean key,
        float defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Float> map =
          internalGetFieldMapBoolFloat7();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
     */
    @java.lang.Override

    public float getFieldMapBoolFloat7OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Float> map =
          internalGetFieldMapBoolFloat7();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
     */
    private java.util.Map<java.lang.Boolean, java.lang.Float>
    getMutableFieldMapBoolFloat7Map() {
      return internalGetMutableFieldMapBoolFloat7();
    }

    public static final int FIELD_MAP_BOOL_INT32_8_FIELD_NUMBER = 8;
    private static final class FieldMapBoolInt328DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.Integer> fieldMapBoolInt328_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Integer>
    internalGetFieldMapBoolInt328() {
      return fieldMapBoolInt328_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Integer>
    internalGetMutableFieldMapBoolInt328() {
      if (!fieldMapBoolInt328_.isMutable()) {
        fieldMapBoolInt328_ = fieldMapBoolInt328_.mutableCopy();
      }
      return fieldMapBoolInt328_;
    }
    @java.lang.Override

    public int getFieldMapBoolInt328Count() {
      return internalGetFieldMapBoolInt328().size();
    }
    /**
     * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolInt328(
        boolean key) {
      
      return internalGetFieldMapBoolInt328().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapBoolInt328Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolInt328() {
      return getFieldMapBoolInt328Map();
    }
    /**
     * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolInt328Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapBoolInt328());
    }
    /**
     * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
     */
    @java.lang.Override

    public int getFieldMapBoolInt328OrDefault(
        boolean key,
        int defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Integer> map =
          internalGetFieldMapBoolInt328();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
     */
    @java.lang.Override

    public int getFieldMapBoolInt328OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Integer> map =
          internalGetFieldMapBoolInt328();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
     */
    private java.util.Map<java.lang.Boolean, java.lang.Integer>
    getMutableFieldMapBoolInt328Map() {
      return internalGetMutableFieldMapBoolInt328();
    }

    public static final int FIELD_MAP_BOOL_INT64_9_FIELD_NUMBER = 9;
    private static final class FieldMapBoolInt649DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.Long> fieldMapBoolInt649_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Long>
    internalGetFieldMapBoolInt649() {
      return fieldMapBoolInt649_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Long>
    internalGetMutableFieldMapBoolInt649() {
      if (!fieldMapBoolInt649_.isMutable()) {
        fieldMapBoolInt649_ = fieldMapBoolInt649_.mutableCopy();
      }
      return fieldMapBoolInt649_;
    }
    @java.lang.Override

    public int getFieldMapBoolInt649Count() {
      return internalGetFieldMapBoolInt649().size();
    }
    /**
     * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolInt649(
        boolean key) {
      
      return internalGetFieldMapBoolInt649().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapBoolInt649Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolInt649() {
      return getFieldMapBoolInt649Map();
    }
    /**
     * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolInt649Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapBoolInt649());
    }
    /**
     * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
     */
    @java.lang.Override

    public long getFieldMapBoolInt649OrDefault(
        boolean key,
        long defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Long> map =
          internalGetFieldMapBoolInt649();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
     */
    @java.lang.Override

    public long getFieldMapBoolInt649OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Long> map =
          internalGetFieldMapBoolInt649();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
     */
    private java.util.Map<java.lang.Boolean, java.lang.Long>
    getMutableFieldMapBoolInt649Map() {
      return internalGetMutableFieldMapBoolInt649();
    }

    public static final int FIELD_MAP_BOOL_MESSAGE_10_FIELD_NUMBER = 10;
    private static final class FieldMapBoolMessage10DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message> fieldMapBoolMessage10_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetFieldMapBoolMessage10() {
      return fieldMapBoolMessage10_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetMutableFieldMapBoolMessage10() {
      if (!fieldMapBoolMessage10_.isMutable()) {
        fieldMapBoolMessage10_ = fieldMapBoolMessage10_.mutableCopy();
      }
      return fieldMapBoolMessage10_;
    }
    @java.lang.Override

    public int getFieldMapBoolMessage10Count() {
      return internalGetFieldMapBoolMessage10().size();
    }
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolMessage10(
        boolean key) {
      
      return internalGetFieldMapBoolMessage10().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapBoolMessage10Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapBoolMessage10() {
      return getFieldMapBoolMessage10Map();
    }
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapBoolMessage10Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapBoolMessage10());
    }
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapBoolMessage10OrDefault(
        boolean key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
      
      java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapBoolMessage10();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapBoolMessage10OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapBoolMessage10();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
     */
    private java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getMutableFieldMapBoolMessage10Map() {
      return internalGetMutableFieldMapBoolMessage10();
    }

    public static final int FIELD_MAP_BOOL_SFIXED32_11_FIELD_NUMBER = 11;
    private static final class FieldMapBoolSfixed3211DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.Integer> fieldMapBoolSfixed3211_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Integer>
    internalGetFieldMapBoolSfixed3211() {
      return fieldMapBoolSfixed3211_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Integer>
    internalGetMutableFieldMapBoolSfixed3211() {
      if (!fieldMapBoolSfixed3211_.isMutable()) {
        fieldMapBoolSfixed3211_ = fieldMapBoolSfixed3211_.mutableCopy();
      }
      return fieldMapBoolSfixed3211_;
    }
    @java.lang.Override

    public int getFieldMapBoolSfixed3211Count() {
      return internalGetFieldMapBoolSfixed3211().size();
    }
    /**
     * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolSfixed3211(
        boolean key) {
      
      return internalGetFieldMapBoolSfixed3211().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapBoolSfixed3211Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolSfixed3211() {
      return getFieldMapBoolSfixed3211Map();
    }
    /**
     * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolSfixed3211Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapBoolSfixed3211());
    }
    /**
     * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
     */
    @java.lang.Override

    public int getFieldMapBoolSfixed3211OrDefault(
        boolean key,
        int defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Integer> map =
          internalGetFieldMapBoolSfixed3211();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
     */
    @java.lang.Override

    public int getFieldMapBoolSfixed3211OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Integer> map =
          internalGetFieldMapBoolSfixed3211();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
     */
    private java.util.Map<java.lang.Boolean, java.lang.Integer>
    getMutableFieldMapBoolSfixed3211Map() {
      return internalGetMutableFieldMapBoolSfixed3211();
    }

    public static final int FIELD_MAP_BOOL_SFIXED64_12_FIELD_NUMBER = 12;
    private static final class FieldMapBoolSfixed6412DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.Long> fieldMapBoolSfixed6412_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Long>
    internalGetFieldMapBoolSfixed6412() {
      return fieldMapBoolSfixed6412_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Long>
    internalGetMutableFieldMapBoolSfixed6412() {
      if (!fieldMapBoolSfixed6412_.isMutable()) {
        fieldMapBoolSfixed6412_ = fieldMapBoolSfixed6412_.mutableCopy();
      }
      return fieldMapBoolSfixed6412_;
    }
    @java.lang.Override

    public int getFieldMapBoolSfixed6412Count() {
      return internalGetFieldMapBoolSfixed6412().size();
    }
    /**
     * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolSfixed6412(
        boolean key) {
      
      return internalGetFieldMapBoolSfixed6412().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapBoolSfixed6412Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolSfixed6412() {
      return getFieldMapBoolSfixed6412Map();
    }
    /**
     * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolSfixed6412Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapBoolSfixed6412());
    }
    /**
     * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
     */
    @java.lang.Override

    public long getFieldMapBoolSfixed6412OrDefault(
        boolean key,
        long defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Long> map =
          internalGetFieldMapBoolSfixed6412();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
     */
    @java.lang.Override

    public long getFieldMapBoolSfixed6412OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Long> map =
          internalGetFieldMapBoolSfixed6412();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
     */
    private java.util.Map<java.lang.Boolean, java.lang.Long>
    getMutableFieldMapBoolSfixed6412Map() {
      return internalGetMutableFieldMapBoolSfixed6412();
    }

    public static final int FIELD_MAP_BOOL_SINT32_13_FIELD_NUMBER = 13;
    private static final class FieldMapBoolSint3213DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.Integer> fieldMapBoolSint3213_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Integer>
    internalGetFieldMapBoolSint3213() {
      return fieldMapBoolSint3213_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Integer>
    internalGetMutableFieldMapBoolSint3213() {
      if (!fieldMapBoolSint3213_.isMutable()) {
        fieldMapBoolSint3213_ = fieldMapBoolSint3213_.mutableCopy();
      }
      return fieldMapBoolSint3213_;
    }
    @java.lang.Override

    public int getFieldMapBoolSint3213Count() {
      return internalGetFieldMapBoolSint3213().size();
    }
    /**
     * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolSint3213(
        boolean key) {
      
      return internalGetFieldMapBoolSint3213().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapBoolSint3213Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolSint3213() {
      return getFieldMapBoolSint3213Map();
    }
    /**
     * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolSint3213Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapBoolSint3213());
    }
    /**
     * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
     */
    @java.lang.Override

    public int getFieldMapBoolSint3213OrDefault(
        boolean key,
        int defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Integer> map =
          internalGetFieldMapBoolSint3213();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
     */
    @java.lang.Override

    public int getFieldMapBoolSint3213OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Integer> map =
          internalGetFieldMapBoolSint3213();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
     */
    private java.util.Map<java.lang.Boolean, java.lang.Integer>
    getMutableFieldMapBoolSint3213Map() {
      return internalGetMutableFieldMapBoolSint3213();
    }

    public static final int FIELD_MAP_BOOL_SINT64_14_FIELD_NUMBER = 14;
    private static final class FieldMapBoolSint6414DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.Long> fieldMapBoolSint6414_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Long>
    internalGetFieldMapBoolSint6414() {
      return fieldMapBoolSint6414_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Long>
    internalGetMutableFieldMapBoolSint6414() {
      if (!fieldMapBoolSint6414_.isMutable()) {
        fieldMapBoolSint6414_ = fieldMapBoolSint6414_.mutableCopy();
      }
      return fieldMapBoolSint6414_;
    }
    @java.lang.Override

    public int getFieldMapBoolSint6414Count() {
      return internalGetFieldMapBoolSint6414().size();
    }
    /**
     * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolSint6414(
        boolean key) {
      
      return internalGetFieldMapBoolSint6414().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapBoolSint6414Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolSint6414() {
      return getFieldMapBoolSint6414Map();
    }
    /**
     * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolSint6414Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapBoolSint6414());
    }
    /**
     * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
     */
    @java.lang.Override

    public long getFieldMapBoolSint6414OrDefault(
        boolean key,
        long defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Long> map =
          internalGetFieldMapBoolSint6414();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
     */
    @java.lang.Override

    public long getFieldMapBoolSint6414OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Long> map =
          internalGetFieldMapBoolSint6414();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
     */
    private java.util.Map<java.lang.Boolean, java.lang.Long>
    getMutableFieldMapBoolSint6414Map() {
      return internalGetMutableFieldMapBoolSint6414();
    }

    public static final int FIELD_MAP_BOOL_STRING_15_FIELD_NUMBER = 15;
    private static final class FieldMapBoolString15DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.String> fieldMapBoolString15_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.String>
    internalGetFieldMapBoolString15() {
      return fieldMapBoolString15_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.String>
    internalGetMutableFieldMapBoolString15() {
      if (!fieldMapBoolString15_.isMutable()) {
        fieldMapBoolString15_ = fieldMapBoolString15_.mutableCopy();
      }
      return fieldMapBoolString15_;
    }
    @java.lang.Override

    public int getFieldMapBoolString15Count() {
      return internalGetFieldMapBoolString15().size();
    }
    /**
     * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolString15(
        boolean key) {
      
      return internalGetFieldMapBoolString15().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapBoolString15Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.String> getFieldMapBoolString15() {
      return getFieldMapBoolString15Map();
    }
    /**
     * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.String> getFieldMapBoolString15Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapBoolString15());
    }
    /**
     * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapBoolString15OrDefault(
        boolean key,
        java.lang.String defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.String> map =
          internalGetFieldMapBoolString15();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapBoolString15OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.String> map =
          internalGetFieldMapBoolString15();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
     */
    private java.util.Map<java.lang.Boolean, java.lang.String>
    getMutableFieldMapBoolString15Map() {
      return internalGetMutableFieldMapBoolString15();
    }

    public static final int FIELD_MAP_BOOL_UINT32_16_FIELD_NUMBER = 16;
    private static final class FieldMapBoolUint3216DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.Integer> fieldMapBoolUint3216_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Integer>
    internalGetFieldMapBoolUint3216() {
      return fieldMapBoolUint3216_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Integer>
    internalGetMutableFieldMapBoolUint3216() {
      if (!fieldMapBoolUint3216_.isMutable()) {
        fieldMapBoolUint3216_ = fieldMapBoolUint3216_.mutableCopy();
      }
      return fieldMapBoolUint3216_;
    }
    @java.lang.Override

    public int getFieldMapBoolUint3216Count() {
      return internalGetFieldMapBoolUint3216().size();
    }
    /**
     * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolUint3216(
        boolean key) {
      
      return internalGetFieldMapBoolUint3216().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapBoolUint3216Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolUint3216() {
      return getFieldMapBoolUint3216Map();
    }
    /**
     * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolUint3216Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapBoolUint3216());
    }
    /**
     * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
     */
    @java.lang.Override

    public int getFieldMapBoolUint3216OrDefault(
        boolean key,
        int defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Integer> map =
          internalGetFieldMapBoolUint3216();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
     */
    @java.lang.Override

    public int getFieldMapBoolUint3216OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Integer> map =
          internalGetFieldMapBoolUint3216();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
     */
    private java.util.Map<java.lang.Boolean, java.lang.Integer>
    getMutableFieldMapBoolUint3216Map() {
      return internalGetMutableFieldMapBoolUint3216();
    }

    public static final int FIELD_MAP_BOOL_UINT64_17_FIELD_NUMBER = 17;
    private static final class FieldMapBoolUint6417DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Boolean, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Boolean, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false,
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Boolean, java.lang.Long> fieldMapBoolUint6417_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Long>
    internalGetFieldMapBoolUint6417() {
      return fieldMapBoolUint6417_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Boolean, java.lang.Long>
    internalGetMutableFieldMapBoolUint6417() {
      if (!fieldMapBoolUint6417_.isMutable()) {
        fieldMapBoolUint6417_ = fieldMapBoolUint6417_.mutableCopy();
      }
      return fieldMapBoolUint6417_;
    }
    @java.lang.Override

    public int getFieldMapBoolUint6417Count() {
      return internalGetFieldMapBoolUint6417().size();
    }
    /**
     * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapBoolUint6417(
        boolean key) {
      
      return internalGetFieldMapBoolUint6417().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapBoolUint6417Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolUint6417() {
      return getFieldMapBoolUint6417Map();
    }
    /**
     * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolUint6417Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapBoolUint6417());
    }
    /**
     * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
     */
    @java.lang.Override

    public long getFieldMapBoolUint6417OrDefault(
        boolean key,
        long defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Long> map =
          internalGetFieldMapBoolUint6417();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
     */
    @java.lang.Override

    public long getFieldMapBoolUint6417OrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Long> map =
          internalGetFieldMapBoolUint6417();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
     */
    private java.util.Map<java.lang.Boolean, java.lang.Long>
    getMutableFieldMapBoolUint6417Map() {
      return internalGetMutableFieldMapBoolUint6417();
    }

    public static final int FIELD_MAP_FIXED32_BOOL_18_FIELD_NUMBER = 18;
    private static final class FieldMapFixed32Bool18DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Boolean> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Boolean>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Boolean> fieldMapFixed32Bool18_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Boolean>
    internalGetFieldMapFixed32Bool18() {
      return fieldMapFixed32Bool18_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Boolean>
    internalGetMutableFieldMapFixed32Bool18() {
      if (!fieldMapFixed32Bool18_.isMutable()) {
        fieldMapFixed32Bool18_ = fieldMapFixed32Bool18_.mutableCopy();
      }
      return fieldMapFixed32Bool18_;
    }
    @java.lang.Override

    public int getFieldMapFixed32Bool18Count() {
      return internalGetFieldMapFixed32Bool18().size();
    }
    /**
     * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32Bool18(
        int key) {
      
      return internalGetFieldMapFixed32Bool18().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed32Bool18Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapFixed32Bool18() {
      return getFieldMapFixed32Bool18Map();
    }
    /**
     * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapFixed32Bool18Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed32Bool18());
    }
    /**
     * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
     */
    @java.lang.Override

    public boolean getFieldMapFixed32Bool18OrDefault(
        int key,
        boolean defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Boolean> map =
          internalGetFieldMapFixed32Bool18();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
     */
    @java.lang.Override

    public boolean getFieldMapFixed32Bool18OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Boolean> map =
          internalGetFieldMapFixed32Bool18();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Boolean>
    getMutableFieldMapFixed32Bool18Map() {
      return internalGetMutableFieldMapFixed32Bool18();
    }

    public static final int FIELD_MAP_FIXED32_BYTES_19_FIELD_NUMBER = 19;
    private static final class FieldMapFixed32Bytes19DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, com.google.protobuf.ByteString> fieldMapFixed32Bytes19_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.ByteString>
    internalGetFieldMapFixed32Bytes19() {
      return fieldMapFixed32Bytes19_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.ByteString>
    internalGetMutableFieldMapFixed32Bytes19() {
      if (!fieldMapFixed32Bytes19_.isMutable()) {
        fieldMapFixed32Bytes19_ = fieldMapFixed32Bytes19_.mutableCopy();
      }
      return fieldMapFixed32Bytes19_;
    }
    @java.lang.Override

    public int getFieldMapFixed32Bytes19Count() {
      return internalGetFieldMapFixed32Bytes19().size();
    }
    /**
     * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32Bytes19(
        int key) {
      
      return internalGetFieldMapFixed32Bytes19().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed32Bytes19Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapFixed32Bytes19() {
      return getFieldMapFixed32Bytes19Map();
    }
    /**
     * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapFixed32Bytes19Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed32Bytes19());
    }
    /**
     * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapFixed32Bytes19OrDefault(
        int key,
        com.google.protobuf.ByteString defaultValue) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
          internalGetFieldMapFixed32Bytes19();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapFixed32Bytes19OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
          internalGetFieldMapFixed32Bytes19();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getMutableFieldMapFixed32Bytes19Map() {
      return internalGetMutableFieldMapFixed32Bytes19();
    }

    public static final int FIELD_MAP_FIXED32_DOUBLE_20_FIELD_NUMBER = 20;
    private static final class FieldMapFixed32Double20DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Double>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Double> fieldMapFixed32Double20_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Double>
    internalGetFieldMapFixed32Double20() {
      return fieldMapFixed32Double20_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Double>
    internalGetMutableFieldMapFixed32Double20() {
      if (!fieldMapFixed32Double20_.isMutable()) {
        fieldMapFixed32Double20_ = fieldMapFixed32Double20_.mutableCopy();
      }
      return fieldMapFixed32Double20_;
    }
    @java.lang.Override

    public int getFieldMapFixed32Double20Count() {
      return internalGetFieldMapFixed32Double20().size();
    }
    /**
     * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32Double20(
        int key) {
      
      return internalGetFieldMapFixed32Double20().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed32Double20Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapFixed32Double20() {
      return getFieldMapFixed32Double20Map();
    }
    /**
     * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapFixed32Double20Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed32Double20());
    }
    /**
     * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
     */
    @java.lang.Override

    public double getFieldMapFixed32Double20OrDefault(
        int key,
        double defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Double> map =
          internalGetFieldMapFixed32Double20();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
     */
    @java.lang.Override

    public double getFieldMapFixed32Double20OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Double> map =
          internalGetFieldMapFixed32Double20();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Double>
    getMutableFieldMapFixed32Double20Map() {
      return internalGetMutableFieldMapFixed32Double20();
    }

    public static final int FIELD_MAP_FIXED32_ENUM_21_FIELD_NUMBER = 21;
    private static final class FieldMapFixed32Enum21DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapFixed32Enum21_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapFixed32Enum21() {
      return fieldMapFixed32Enum21_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapFixed32Enum21() {
      if (!fieldMapFixed32Enum21_.isMutable()) {
        fieldMapFixed32Enum21_ = fieldMapFixed32Enum21_.mutableCopy();
      }
      return fieldMapFixed32Enum21_;
    }
    @java.lang.Override

    public int getFieldMapFixed32Enum21Count() {
      return internalGetFieldMapFixed32Enum21().size();
    }
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32Enum21(
        int key) {
      
      return internalGetFieldMapFixed32Enum21().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> fieldMapFixed32Enum21ValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetValueMap(),
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO);
    /**
     * Use {@link #getFieldMapFixed32Enum21Map()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapFixed32Enum21() {
      return getFieldMapFixed32Enum21Map();
    }
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapFixed32Enum21Map() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
                internalGetFieldMapFixed32Enum21(),
                fieldMapFixed32Enum21ValueConverter));
    }
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapFixed32Enum21OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapFixed32Enum21();
      return map.containsKey(key)
             ? fieldMapFixed32Enum21ValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapFixed32Enum21OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapFixed32Enum21();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return fieldMapFixed32Enum21ValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getMutableFieldMapFixed32Enum21Map() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
              internalGetMutableFieldMapFixed32Enum21(),
              fieldMapFixed32Enum21ValueConverter);
    }

    public static final int FIELD_MAP_FIXED32_FIXED32_22_FIELD_NUMBER = 22;
    private static final class FieldMapFixed32Fixed3222DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapFixed32Fixed3222_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapFixed32Fixed3222() {
      return fieldMapFixed32Fixed3222_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapFixed32Fixed3222() {
      if (!fieldMapFixed32Fixed3222_.isMutable()) {
        fieldMapFixed32Fixed3222_ = fieldMapFixed32Fixed3222_.mutableCopy();
      }
      return fieldMapFixed32Fixed3222_;
    }
    @java.lang.Override

    public int getFieldMapFixed32Fixed3222Count() {
      return internalGetFieldMapFixed32Fixed3222().size();
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32Fixed3222(
        int key) {
      
      return internalGetFieldMapFixed32Fixed3222().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed32Fixed3222Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Fixed3222() {
      return getFieldMapFixed32Fixed3222Map();
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Fixed3222Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed32Fixed3222());
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed32Fixed3222OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapFixed32Fixed3222();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed32Fixed3222OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapFixed32Fixed3222();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapFixed32Fixed3222Map() {
      return internalGetMutableFieldMapFixed32Fixed3222();
    }

    public static final int FIELD_MAP_FIXED32_FIXED64_23_FIELD_NUMBER = 23;
    private static final class FieldMapFixed32Fixed6423DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapFixed32Fixed6423_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapFixed32Fixed6423() {
      return fieldMapFixed32Fixed6423_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapFixed32Fixed6423() {
      if (!fieldMapFixed32Fixed6423_.isMutable()) {
        fieldMapFixed32Fixed6423_ = fieldMapFixed32Fixed6423_.mutableCopy();
      }
      return fieldMapFixed32Fixed6423_;
    }
    @java.lang.Override

    public int getFieldMapFixed32Fixed6423Count() {
      return internalGetFieldMapFixed32Fixed6423().size();
    }
    /**
     * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32Fixed6423(
        int key) {
      
      return internalGetFieldMapFixed32Fixed6423().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed32Fixed6423Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Fixed6423() {
      return getFieldMapFixed32Fixed6423Map();
    }
    /**
     * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Fixed6423Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed32Fixed6423());
    }
    /**
     * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed32Fixed6423OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapFixed32Fixed6423();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed32Fixed6423OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapFixed32Fixed6423();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapFixed32Fixed6423Map() {
      return internalGetMutableFieldMapFixed32Fixed6423();
    }

    public static final int FIELD_MAP_FIXED32_FLOAT_24_FIELD_NUMBER = 24;
    private static final class FieldMapFixed32Float24DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Float> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Float>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FLOAT,
                  0F);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Float> fieldMapFixed32Float24_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Float>
    internalGetFieldMapFixed32Float24() {
      return fieldMapFixed32Float24_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Float>
    internalGetMutableFieldMapFixed32Float24() {
      if (!fieldMapFixed32Float24_.isMutable()) {
        fieldMapFixed32Float24_ = fieldMapFixed32Float24_.mutableCopy();
      }
      return fieldMapFixed32Float24_;
    }
    @java.lang.Override

    public int getFieldMapFixed32Float24Count() {
      return internalGetFieldMapFixed32Float24().size();
    }
    /**
     * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32Float24(
        int key) {
      
      return internalGetFieldMapFixed32Float24().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed32Float24Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapFixed32Float24() {
      return getFieldMapFixed32Float24Map();
    }
    /**
     * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapFixed32Float24Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed32Float24());
    }
    /**
     * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
     */
    @java.lang.Override

    public float getFieldMapFixed32Float24OrDefault(
        int key,
        float defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Float> map =
          internalGetFieldMapFixed32Float24();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
     */
    @java.lang.Override

    public float getFieldMapFixed32Float24OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Float> map =
          internalGetFieldMapFixed32Float24();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Float>
    getMutableFieldMapFixed32Float24Map() {
      return internalGetMutableFieldMapFixed32Float24();
    }

    public static final int FIELD_MAP_FIXED32_INT32_25_FIELD_NUMBER = 25;
    private static final class FieldMapFixed32Int3225DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapFixed32Int3225_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapFixed32Int3225() {
      return fieldMapFixed32Int3225_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapFixed32Int3225() {
      if (!fieldMapFixed32Int3225_.isMutable()) {
        fieldMapFixed32Int3225_ = fieldMapFixed32Int3225_.mutableCopy();
      }
      return fieldMapFixed32Int3225_;
    }
    @java.lang.Override

    public int getFieldMapFixed32Int3225Count() {
      return internalGetFieldMapFixed32Int3225().size();
    }
    /**
     * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32Int3225(
        int key) {
      
      return internalGetFieldMapFixed32Int3225().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed32Int3225Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Int3225() {
      return getFieldMapFixed32Int3225Map();
    }
    /**
     * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Int3225Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed32Int3225());
    }
    /**
     * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed32Int3225OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapFixed32Int3225();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed32Int3225OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapFixed32Int3225();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapFixed32Int3225Map() {
      return internalGetMutableFieldMapFixed32Int3225();
    }

    public static final int FIELD_MAP_FIXED32_INT64_26_FIELD_NUMBER = 26;
    private static final class FieldMapFixed32Int6426DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapFixed32Int6426_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapFixed32Int6426() {
      return fieldMapFixed32Int6426_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapFixed32Int6426() {
      if (!fieldMapFixed32Int6426_.isMutable()) {
        fieldMapFixed32Int6426_ = fieldMapFixed32Int6426_.mutableCopy();
      }
      return fieldMapFixed32Int6426_;
    }
    @java.lang.Override

    public int getFieldMapFixed32Int6426Count() {
      return internalGetFieldMapFixed32Int6426().size();
    }
    /**
     * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32Int6426(
        int key) {
      
      return internalGetFieldMapFixed32Int6426().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed32Int6426Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Int6426() {
      return getFieldMapFixed32Int6426Map();
    }
    /**
     * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Int6426Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed32Int6426());
    }
    /**
     * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed32Int6426OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapFixed32Int6426();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed32Int6426OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapFixed32Int6426();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapFixed32Int6426Map() {
      return internalGetMutableFieldMapFixed32Int6426();
    }

    public static final int FIELD_MAP_FIXED32_MESSAGE_27_FIELD_NUMBER = 27;
    private static final class FieldMapFixed32Message27DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> fieldMapFixed32Message27_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetFieldMapFixed32Message27() {
      return fieldMapFixed32Message27_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetMutableFieldMapFixed32Message27() {
      if (!fieldMapFixed32Message27_.isMutable()) {
        fieldMapFixed32Message27_ = fieldMapFixed32Message27_.mutableCopy();
      }
      return fieldMapFixed32Message27_;
    }
    @java.lang.Override

    public int getFieldMapFixed32Message27Count() {
      return internalGetFieldMapFixed32Message27().size();
    }
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32Message27(
        int key) {
      
      return internalGetFieldMapFixed32Message27().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed32Message27Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapFixed32Message27() {
      return getFieldMapFixed32Message27Map();
    }
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapFixed32Message27Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed32Message27());
    }
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapFixed32Message27OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapFixed32Message27();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapFixed32Message27OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapFixed32Message27();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getMutableFieldMapFixed32Message27Map() {
      return internalGetMutableFieldMapFixed32Message27();
    }

    public static final int FIELD_MAP_FIXED32_SFIXED32_28_FIELD_NUMBER = 28;
    private static final class FieldMapFixed32Sfixed3228DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapFixed32Sfixed3228_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapFixed32Sfixed3228() {
      return fieldMapFixed32Sfixed3228_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapFixed32Sfixed3228() {
      if (!fieldMapFixed32Sfixed3228_.isMutable()) {
        fieldMapFixed32Sfixed3228_ = fieldMapFixed32Sfixed3228_.mutableCopy();
      }
      return fieldMapFixed32Sfixed3228_;
    }
    @java.lang.Override

    public int getFieldMapFixed32Sfixed3228Count() {
      return internalGetFieldMapFixed32Sfixed3228().size();
    }
    /**
     * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32Sfixed3228(
        int key) {
      
      return internalGetFieldMapFixed32Sfixed3228().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed32Sfixed3228Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Sfixed3228() {
      return getFieldMapFixed32Sfixed3228Map();
    }
    /**
     * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Sfixed3228Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed32Sfixed3228());
    }
    /**
     * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed32Sfixed3228OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapFixed32Sfixed3228();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed32Sfixed3228OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapFixed32Sfixed3228();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapFixed32Sfixed3228Map() {
      return internalGetMutableFieldMapFixed32Sfixed3228();
    }

    public static final int FIELD_MAP_FIXED32_SFIXED64_29_FIELD_NUMBER = 29;
    private static final class FieldMapFixed32Sfixed6429DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapFixed32Sfixed6429_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapFixed32Sfixed6429() {
      return fieldMapFixed32Sfixed6429_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapFixed32Sfixed6429() {
      if (!fieldMapFixed32Sfixed6429_.isMutable()) {
        fieldMapFixed32Sfixed6429_ = fieldMapFixed32Sfixed6429_.mutableCopy();
      }
      return fieldMapFixed32Sfixed6429_;
    }
    @java.lang.Override

    public int getFieldMapFixed32Sfixed6429Count() {
      return internalGetFieldMapFixed32Sfixed6429().size();
    }
    /**
     * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32Sfixed6429(
        int key) {
      
      return internalGetFieldMapFixed32Sfixed6429().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed32Sfixed6429Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Sfixed6429() {
      return getFieldMapFixed32Sfixed6429Map();
    }
    /**
     * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Sfixed6429Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed32Sfixed6429());
    }
    /**
     * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed32Sfixed6429OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapFixed32Sfixed6429();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed32Sfixed6429OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapFixed32Sfixed6429();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapFixed32Sfixed6429Map() {
      return internalGetMutableFieldMapFixed32Sfixed6429();
    }

    public static final int FIELD_MAP_FIXED32_SINT32_30_FIELD_NUMBER = 30;
    private static final class FieldMapFixed32Sint3230DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapFixed32Sint3230_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapFixed32Sint3230() {
      return fieldMapFixed32Sint3230_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapFixed32Sint3230() {
      if (!fieldMapFixed32Sint3230_.isMutable()) {
        fieldMapFixed32Sint3230_ = fieldMapFixed32Sint3230_.mutableCopy();
      }
      return fieldMapFixed32Sint3230_;
    }
    @java.lang.Override

    public int getFieldMapFixed32Sint3230Count() {
      return internalGetFieldMapFixed32Sint3230().size();
    }
    /**
     * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32Sint3230(
        int key) {
      
      return internalGetFieldMapFixed32Sint3230().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed32Sint3230Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Sint3230() {
      return getFieldMapFixed32Sint3230Map();
    }
    /**
     * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Sint3230Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed32Sint3230());
    }
    /**
     * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed32Sint3230OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapFixed32Sint3230();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed32Sint3230OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapFixed32Sint3230();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapFixed32Sint3230Map() {
      return internalGetMutableFieldMapFixed32Sint3230();
    }

    public static final int FIELD_MAP_FIXED32_SINT64_31_FIELD_NUMBER = 31;
    private static final class FieldMapFixed32Sint6431DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapFixed32Sint6431_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapFixed32Sint6431() {
      return fieldMapFixed32Sint6431_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapFixed32Sint6431() {
      if (!fieldMapFixed32Sint6431_.isMutable()) {
        fieldMapFixed32Sint6431_ = fieldMapFixed32Sint6431_.mutableCopy();
      }
      return fieldMapFixed32Sint6431_;
    }
    @java.lang.Override

    public int getFieldMapFixed32Sint6431Count() {
      return internalGetFieldMapFixed32Sint6431().size();
    }
    /**
     * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32Sint6431(
        int key) {
      
      return internalGetFieldMapFixed32Sint6431().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed32Sint6431Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Sint6431() {
      return getFieldMapFixed32Sint6431Map();
    }
    /**
     * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Sint6431Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed32Sint6431());
    }
    /**
     * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed32Sint6431OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapFixed32Sint6431();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed32Sint6431OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapFixed32Sint6431();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapFixed32Sint6431Map() {
      return internalGetMutableFieldMapFixed32Sint6431();
    }

    public static final int FIELD_MAP_FIXED32_STRING_32_FIELD_NUMBER = 32;
    private static final class FieldMapFixed32String32DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.String> fieldMapFixed32String32_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.String>
    internalGetFieldMapFixed32String32() {
      return fieldMapFixed32String32_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.String>
    internalGetMutableFieldMapFixed32String32() {
      if (!fieldMapFixed32String32_.isMutable()) {
        fieldMapFixed32String32_ = fieldMapFixed32String32_.mutableCopy();
      }
      return fieldMapFixed32String32_;
    }
    @java.lang.Override

    public int getFieldMapFixed32String32Count() {
      return internalGetFieldMapFixed32String32().size();
    }
    /**
     * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32String32(
        int key) {
      
      return internalGetFieldMapFixed32String32().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed32String32Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapFixed32String32() {
      return getFieldMapFixed32String32Map();
    }
    /**
     * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapFixed32String32Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed32String32());
    }
    /**
     * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapFixed32String32OrDefault(
        int key,
        java.lang.String defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.String> map =
          internalGetFieldMapFixed32String32();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapFixed32String32OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.String> map =
          internalGetFieldMapFixed32String32();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.String>
    getMutableFieldMapFixed32String32Map() {
      return internalGetMutableFieldMapFixed32String32();
    }

    public static final int FIELD_MAP_FIXED32_UINT32_33_FIELD_NUMBER = 33;
    private static final class FieldMapFixed32Uint3233DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapFixed32Uint3233_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapFixed32Uint3233() {
      return fieldMapFixed32Uint3233_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapFixed32Uint3233() {
      if (!fieldMapFixed32Uint3233_.isMutable()) {
        fieldMapFixed32Uint3233_ = fieldMapFixed32Uint3233_.mutableCopy();
      }
      return fieldMapFixed32Uint3233_;
    }
    @java.lang.Override

    public int getFieldMapFixed32Uint3233Count() {
      return internalGetFieldMapFixed32Uint3233().size();
    }
    /**
     * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32Uint3233(
        int key) {
      
      return internalGetFieldMapFixed32Uint3233().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed32Uint3233Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Uint3233() {
      return getFieldMapFixed32Uint3233Map();
    }
    /**
     * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Uint3233Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed32Uint3233());
    }
    /**
     * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed32Uint3233OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapFixed32Uint3233();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed32Uint3233OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapFixed32Uint3233();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapFixed32Uint3233Map() {
      return internalGetMutableFieldMapFixed32Uint3233();
    }

    public static final int FIELD_MAP_FIXED32_UINT64_34_FIELD_NUMBER = 34;
    private static final class FieldMapFixed32Uint6434DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapFixed32Uint6434_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapFixed32Uint6434() {
      return fieldMapFixed32Uint6434_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapFixed32Uint6434() {
      if (!fieldMapFixed32Uint6434_.isMutable()) {
        fieldMapFixed32Uint6434_ = fieldMapFixed32Uint6434_.mutableCopy();
      }
      return fieldMapFixed32Uint6434_;
    }
    @java.lang.Override

    public int getFieldMapFixed32Uint6434Count() {
      return internalGetFieldMapFixed32Uint6434().size();
    }
    /**
     * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed32Uint6434(
        int key) {
      
      return internalGetFieldMapFixed32Uint6434().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed32Uint6434Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Uint6434() {
      return getFieldMapFixed32Uint6434Map();
    }
    /**
     * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Uint6434Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed32Uint6434());
    }
    /**
     * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed32Uint6434OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapFixed32Uint6434();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed32Uint6434OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapFixed32Uint6434();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapFixed32Uint6434Map() {
      return internalGetMutableFieldMapFixed32Uint6434();
    }

    public static final int FIELD_MAP_FIXED64_BOOL_35_FIELD_NUMBER = 35;
    private static final class FieldMapFixed64Bool35DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Boolean> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Boolean>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Boolean> fieldMapFixed64Bool35_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Boolean>
    internalGetFieldMapFixed64Bool35() {
      return fieldMapFixed64Bool35_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Boolean>
    internalGetMutableFieldMapFixed64Bool35() {
      if (!fieldMapFixed64Bool35_.isMutable()) {
        fieldMapFixed64Bool35_ = fieldMapFixed64Bool35_.mutableCopy();
      }
      return fieldMapFixed64Bool35_;
    }
    @java.lang.Override

    public int getFieldMapFixed64Bool35Count() {
      return internalGetFieldMapFixed64Bool35().size();
    }
    /**
     * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64Bool35(
        long key) {
      
      return internalGetFieldMapFixed64Bool35().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed64Bool35Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapFixed64Bool35() {
      return getFieldMapFixed64Bool35Map();
    }
    /**
     * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapFixed64Bool35Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed64Bool35());
    }
    /**
     * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
     */
    @java.lang.Override

    public boolean getFieldMapFixed64Bool35OrDefault(
        long key,
        boolean defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Boolean> map =
          internalGetFieldMapFixed64Bool35();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
     */
    @java.lang.Override

    public boolean getFieldMapFixed64Bool35OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Boolean> map =
          internalGetFieldMapFixed64Bool35();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Boolean>
    getMutableFieldMapFixed64Bool35Map() {
      return internalGetMutableFieldMapFixed64Bool35();
    }

    public static final int FIELD_MAP_FIXED64_BYTES_36_FIELD_NUMBER = 36;
    private static final class FieldMapFixed64Bytes36DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, com.google.protobuf.ByteString> fieldMapFixed64Bytes36_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.ByteString>
    internalGetFieldMapFixed64Bytes36() {
      return fieldMapFixed64Bytes36_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.ByteString>
    internalGetMutableFieldMapFixed64Bytes36() {
      if (!fieldMapFixed64Bytes36_.isMutable()) {
        fieldMapFixed64Bytes36_ = fieldMapFixed64Bytes36_.mutableCopy();
      }
      return fieldMapFixed64Bytes36_;
    }
    @java.lang.Override

    public int getFieldMapFixed64Bytes36Count() {
      return internalGetFieldMapFixed64Bytes36().size();
    }
    /**
     * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64Bytes36(
        long key) {
      
      return internalGetFieldMapFixed64Bytes36().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed64Bytes36Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapFixed64Bytes36() {
      return getFieldMapFixed64Bytes36Map();
    }
    /**
     * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapFixed64Bytes36Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed64Bytes36());
    }
    /**
     * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapFixed64Bytes36OrDefault(
        long key,
        com.google.protobuf.ByteString defaultValue) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
          internalGetFieldMapFixed64Bytes36();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapFixed64Bytes36OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
          internalGetFieldMapFixed64Bytes36();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
     */
    private java.util.Map<java.lang.Long, com.google.protobuf.ByteString>
    getMutableFieldMapFixed64Bytes36Map() {
      return internalGetMutableFieldMapFixed64Bytes36();
    }

    public static final int FIELD_MAP_FIXED64_DOUBLE_37_FIELD_NUMBER = 37;
    private static final class FieldMapFixed64Double37DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Double>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Double> fieldMapFixed64Double37_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Double>
    internalGetFieldMapFixed64Double37() {
      return fieldMapFixed64Double37_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Double>
    internalGetMutableFieldMapFixed64Double37() {
      if (!fieldMapFixed64Double37_.isMutable()) {
        fieldMapFixed64Double37_ = fieldMapFixed64Double37_.mutableCopy();
      }
      return fieldMapFixed64Double37_;
    }
    @java.lang.Override

    public int getFieldMapFixed64Double37Count() {
      return internalGetFieldMapFixed64Double37().size();
    }
    /**
     * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64Double37(
        long key) {
      
      return internalGetFieldMapFixed64Double37().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed64Double37Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapFixed64Double37() {
      return getFieldMapFixed64Double37Map();
    }
    /**
     * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapFixed64Double37Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed64Double37());
    }
    /**
     * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
     */
    @java.lang.Override

    public double getFieldMapFixed64Double37OrDefault(
        long key,
        double defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Double> map =
          internalGetFieldMapFixed64Double37();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
     */
    @java.lang.Override

    public double getFieldMapFixed64Double37OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Double> map =
          internalGetFieldMapFixed64Double37();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Double>
    getMutableFieldMapFixed64Double37Map() {
      return internalGetMutableFieldMapFixed64Double37();
    }

    public static final int FIELD_MAP_FIXED64_ENUM_38_FIELD_NUMBER = 38;
    private static final class FieldMapFixed64Enum38DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapFixed64Enum38_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapFixed64Enum38() {
      return fieldMapFixed64Enum38_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapFixed64Enum38() {
      if (!fieldMapFixed64Enum38_.isMutable()) {
        fieldMapFixed64Enum38_ = fieldMapFixed64Enum38_.mutableCopy();
      }
      return fieldMapFixed64Enum38_;
    }
    @java.lang.Override

    public int getFieldMapFixed64Enum38Count() {
      return internalGetFieldMapFixed64Enum38().size();
    }
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64Enum38(
        long key) {
      
      return internalGetFieldMapFixed64Enum38().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> fieldMapFixed64Enum38ValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetValueMap(),
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO);
    /**
     * Use {@link #getFieldMapFixed64Enum38Map()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapFixed64Enum38() {
      return getFieldMapFixed64Enum38Map();
    }
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapFixed64Enum38Map() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
                internalGetFieldMapFixed64Enum38(),
                fieldMapFixed64Enum38ValueConverter));
    }
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapFixed64Enum38OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapFixed64Enum38();
      return map.containsKey(key)
             ? fieldMapFixed64Enum38ValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapFixed64Enum38OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapFixed64Enum38();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return fieldMapFixed64Enum38ValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
     */
    private java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getMutableFieldMapFixed64Enum38Map() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
              internalGetMutableFieldMapFixed64Enum38(),
              fieldMapFixed64Enum38ValueConverter);
    }

    public static final int FIELD_MAP_FIXED64_FIXED32_39_FIELD_NUMBER = 39;
    private static final class FieldMapFixed64Fixed3239DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapFixed64Fixed3239_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapFixed64Fixed3239() {
      return fieldMapFixed64Fixed3239_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapFixed64Fixed3239() {
      if (!fieldMapFixed64Fixed3239_.isMutable()) {
        fieldMapFixed64Fixed3239_ = fieldMapFixed64Fixed3239_.mutableCopy();
      }
      return fieldMapFixed64Fixed3239_;
    }
    @java.lang.Override

    public int getFieldMapFixed64Fixed3239Count() {
      return internalGetFieldMapFixed64Fixed3239().size();
    }
    /**
     * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64Fixed3239(
        long key) {
      
      return internalGetFieldMapFixed64Fixed3239().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed64Fixed3239Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Fixed3239() {
      return getFieldMapFixed64Fixed3239Map();
    }
    /**
     * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Fixed3239Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed64Fixed3239());
    }
    /**
     * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed64Fixed3239OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapFixed64Fixed3239();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed64Fixed3239OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapFixed64Fixed3239();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapFixed64Fixed3239Map() {
      return internalGetMutableFieldMapFixed64Fixed3239();
    }

    public static final int FIELD_MAP_FIXED64_FIXED64_40_FIELD_NUMBER = 40;
    private static final class FieldMapFixed64Fixed6440DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapFixed64Fixed6440_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapFixed64Fixed6440() {
      return fieldMapFixed64Fixed6440_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapFixed64Fixed6440() {
      if (!fieldMapFixed64Fixed6440_.isMutable()) {
        fieldMapFixed64Fixed6440_ = fieldMapFixed64Fixed6440_.mutableCopy();
      }
      return fieldMapFixed64Fixed6440_;
    }
    @java.lang.Override

    public int getFieldMapFixed64Fixed6440Count() {
      return internalGetFieldMapFixed64Fixed6440().size();
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64Fixed6440(
        long key) {
      
      return internalGetFieldMapFixed64Fixed6440().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed64Fixed6440Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Fixed6440() {
      return getFieldMapFixed64Fixed6440Map();
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Fixed6440Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed64Fixed6440());
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed64Fixed6440OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapFixed64Fixed6440();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed64Fixed6440OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapFixed64Fixed6440();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapFixed64Fixed6440Map() {
      return internalGetMutableFieldMapFixed64Fixed6440();
    }

    public static final int FIELD_MAP_FIXED64_FLOAT_41_FIELD_NUMBER = 41;
    private static final class FieldMapFixed64Float41DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Float> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Float>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FLOAT,
                  0F);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Float> fieldMapFixed64Float41_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Float>
    internalGetFieldMapFixed64Float41() {
      return fieldMapFixed64Float41_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Float>
    internalGetMutableFieldMapFixed64Float41() {
      if (!fieldMapFixed64Float41_.isMutable()) {
        fieldMapFixed64Float41_ = fieldMapFixed64Float41_.mutableCopy();
      }
      return fieldMapFixed64Float41_;
    }
    @java.lang.Override

    public int getFieldMapFixed64Float41Count() {
      return internalGetFieldMapFixed64Float41().size();
    }
    /**
     * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64Float41(
        long key) {
      
      return internalGetFieldMapFixed64Float41().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed64Float41Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapFixed64Float41() {
      return getFieldMapFixed64Float41Map();
    }
    /**
     * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapFixed64Float41Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed64Float41());
    }
    /**
     * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
     */
    @java.lang.Override

    public float getFieldMapFixed64Float41OrDefault(
        long key,
        float defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Float> map =
          internalGetFieldMapFixed64Float41();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
     */
    @java.lang.Override

    public float getFieldMapFixed64Float41OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Float> map =
          internalGetFieldMapFixed64Float41();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Float>
    getMutableFieldMapFixed64Float41Map() {
      return internalGetMutableFieldMapFixed64Float41();
    }

    public static final int FIELD_MAP_FIXED64_INT32_42_FIELD_NUMBER = 42;
    private static final class FieldMapFixed64Int3242DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapFixed64Int3242_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapFixed64Int3242() {
      return fieldMapFixed64Int3242_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapFixed64Int3242() {
      if (!fieldMapFixed64Int3242_.isMutable()) {
        fieldMapFixed64Int3242_ = fieldMapFixed64Int3242_.mutableCopy();
      }
      return fieldMapFixed64Int3242_;
    }
    @java.lang.Override

    public int getFieldMapFixed64Int3242Count() {
      return internalGetFieldMapFixed64Int3242().size();
    }
    /**
     * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64Int3242(
        long key) {
      
      return internalGetFieldMapFixed64Int3242().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed64Int3242Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Int3242() {
      return getFieldMapFixed64Int3242Map();
    }
    /**
     * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Int3242Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed64Int3242());
    }
    /**
     * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed64Int3242OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapFixed64Int3242();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed64Int3242OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapFixed64Int3242();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapFixed64Int3242Map() {
      return internalGetMutableFieldMapFixed64Int3242();
    }

    public static final int FIELD_MAP_FIXED64_INT64_43_FIELD_NUMBER = 43;
    private static final class FieldMapFixed64Int6443DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapFixed64Int6443_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapFixed64Int6443() {
      return fieldMapFixed64Int6443_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapFixed64Int6443() {
      if (!fieldMapFixed64Int6443_.isMutable()) {
        fieldMapFixed64Int6443_ = fieldMapFixed64Int6443_.mutableCopy();
      }
      return fieldMapFixed64Int6443_;
    }
    @java.lang.Override

    public int getFieldMapFixed64Int6443Count() {
      return internalGetFieldMapFixed64Int6443().size();
    }
    /**
     * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64Int6443(
        long key) {
      
      return internalGetFieldMapFixed64Int6443().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed64Int6443Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Int6443() {
      return getFieldMapFixed64Int6443Map();
    }
    /**
     * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Int6443Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed64Int6443());
    }
    /**
     * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed64Int6443OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapFixed64Int6443();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed64Int6443OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapFixed64Int6443();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapFixed64Int6443Map() {
      return internalGetMutableFieldMapFixed64Int6443();
    }

    public static final int FIELD_MAP_FIXED64_MESSAGE_44_FIELD_NUMBER = 44;
    private static final class FieldMapFixed64Message44DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> fieldMapFixed64Message44_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetFieldMapFixed64Message44() {
      return fieldMapFixed64Message44_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetMutableFieldMapFixed64Message44() {
      if (!fieldMapFixed64Message44_.isMutable()) {
        fieldMapFixed64Message44_ = fieldMapFixed64Message44_.mutableCopy();
      }
      return fieldMapFixed64Message44_;
    }
    @java.lang.Override

    public int getFieldMapFixed64Message44Count() {
      return internalGetFieldMapFixed64Message44().size();
    }
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64Message44(
        long key) {
      
      return internalGetFieldMapFixed64Message44().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed64Message44Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapFixed64Message44() {
      return getFieldMapFixed64Message44Map();
    }
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapFixed64Message44Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed64Message44());
    }
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapFixed64Message44OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapFixed64Message44();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapFixed64Message44OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapFixed64Message44();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
     */
    private java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getMutableFieldMapFixed64Message44Map() {
      return internalGetMutableFieldMapFixed64Message44();
    }

    public static final int FIELD_MAP_FIXED64_SFIXED32_45_FIELD_NUMBER = 45;
    private static final class FieldMapFixed64Sfixed3245DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapFixed64Sfixed3245_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapFixed64Sfixed3245() {
      return fieldMapFixed64Sfixed3245_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapFixed64Sfixed3245() {
      if (!fieldMapFixed64Sfixed3245_.isMutable()) {
        fieldMapFixed64Sfixed3245_ = fieldMapFixed64Sfixed3245_.mutableCopy();
      }
      return fieldMapFixed64Sfixed3245_;
    }
    @java.lang.Override

    public int getFieldMapFixed64Sfixed3245Count() {
      return internalGetFieldMapFixed64Sfixed3245().size();
    }
    /**
     * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64Sfixed3245(
        long key) {
      
      return internalGetFieldMapFixed64Sfixed3245().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed64Sfixed3245Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Sfixed3245() {
      return getFieldMapFixed64Sfixed3245Map();
    }
    /**
     * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Sfixed3245Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed64Sfixed3245());
    }
    /**
     * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed64Sfixed3245OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapFixed64Sfixed3245();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed64Sfixed3245OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapFixed64Sfixed3245();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapFixed64Sfixed3245Map() {
      return internalGetMutableFieldMapFixed64Sfixed3245();
    }

    public static final int FIELD_MAP_FIXED64_SFIXED64_46_FIELD_NUMBER = 46;
    private static final class FieldMapFixed64Sfixed6446DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapFixed64Sfixed6446_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapFixed64Sfixed6446() {
      return fieldMapFixed64Sfixed6446_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapFixed64Sfixed6446() {
      if (!fieldMapFixed64Sfixed6446_.isMutable()) {
        fieldMapFixed64Sfixed6446_ = fieldMapFixed64Sfixed6446_.mutableCopy();
      }
      return fieldMapFixed64Sfixed6446_;
    }
    @java.lang.Override

    public int getFieldMapFixed64Sfixed6446Count() {
      return internalGetFieldMapFixed64Sfixed6446().size();
    }
    /**
     * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64Sfixed6446(
        long key) {
      
      return internalGetFieldMapFixed64Sfixed6446().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed64Sfixed6446Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Sfixed6446() {
      return getFieldMapFixed64Sfixed6446Map();
    }
    /**
     * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Sfixed6446Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed64Sfixed6446());
    }
    /**
     * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed64Sfixed6446OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapFixed64Sfixed6446();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed64Sfixed6446OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapFixed64Sfixed6446();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapFixed64Sfixed6446Map() {
      return internalGetMutableFieldMapFixed64Sfixed6446();
    }

    public static final int FIELD_MAP_FIXED64_SINT32_47_FIELD_NUMBER = 47;
    private static final class FieldMapFixed64Sint3247DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapFixed64Sint3247_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapFixed64Sint3247() {
      return fieldMapFixed64Sint3247_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapFixed64Sint3247() {
      if (!fieldMapFixed64Sint3247_.isMutable()) {
        fieldMapFixed64Sint3247_ = fieldMapFixed64Sint3247_.mutableCopy();
      }
      return fieldMapFixed64Sint3247_;
    }
    @java.lang.Override

    public int getFieldMapFixed64Sint3247Count() {
      return internalGetFieldMapFixed64Sint3247().size();
    }
    /**
     * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64Sint3247(
        long key) {
      
      return internalGetFieldMapFixed64Sint3247().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed64Sint3247Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Sint3247() {
      return getFieldMapFixed64Sint3247Map();
    }
    /**
     * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Sint3247Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed64Sint3247());
    }
    /**
     * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed64Sint3247OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapFixed64Sint3247();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed64Sint3247OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapFixed64Sint3247();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapFixed64Sint3247Map() {
      return internalGetMutableFieldMapFixed64Sint3247();
    }

    public static final int FIELD_MAP_FIXED64_SINT64_48_FIELD_NUMBER = 48;
    private static final class FieldMapFixed64Sint6448DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapFixed64Sint6448_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapFixed64Sint6448() {
      return fieldMapFixed64Sint6448_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapFixed64Sint6448() {
      if (!fieldMapFixed64Sint6448_.isMutable()) {
        fieldMapFixed64Sint6448_ = fieldMapFixed64Sint6448_.mutableCopy();
      }
      return fieldMapFixed64Sint6448_;
    }
    @java.lang.Override

    public int getFieldMapFixed64Sint6448Count() {
      return internalGetFieldMapFixed64Sint6448().size();
    }
    /**
     * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64Sint6448(
        long key) {
      
      return internalGetFieldMapFixed64Sint6448().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed64Sint6448Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Sint6448() {
      return getFieldMapFixed64Sint6448Map();
    }
    /**
     * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Sint6448Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed64Sint6448());
    }
    /**
     * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed64Sint6448OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapFixed64Sint6448();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed64Sint6448OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapFixed64Sint6448();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapFixed64Sint6448Map() {
      return internalGetMutableFieldMapFixed64Sint6448();
    }

    public static final int FIELD_MAP_FIXED64_STRING_49_FIELD_NUMBER = 49;
    private static final class FieldMapFixed64String49DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.String> fieldMapFixed64String49_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.String>
    internalGetFieldMapFixed64String49() {
      return fieldMapFixed64String49_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.String>
    internalGetMutableFieldMapFixed64String49() {
      if (!fieldMapFixed64String49_.isMutable()) {
        fieldMapFixed64String49_ = fieldMapFixed64String49_.mutableCopy();
      }
      return fieldMapFixed64String49_;
    }
    @java.lang.Override

    public int getFieldMapFixed64String49Count() {
      return internalGetFieldMapFixed64String49().size();
    }
    /**
     * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64String49(
        long key) {
      
      return internalGetFieldMapFixed64String49().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed64String49Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.String> getFieldMapFixed64String49() {
      return getFieldMapFixed64String49Map();
    }
    /**
     * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.String> getFieldMapFixed64String49Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed64String49());
    }
    /**
     * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapFixed64String49OrDefault(
        long key,
        java.lang.String defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.String> map =
          internalGetFieldMapFixed64String49();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapFixed64String49OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.String> map =
          internalGetFieldMapFixed64String49();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.String>
    getMutableFieldMapFixed64String49Map() {
      return internalGetMutableFieldMapFixed64String49();
    }

    public static final int FIELD_MAP_FIXED64_UINT32_50_FIELD_NUMBER = 50;
    private static final class FieldMapFixed64Uint3250DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapFixed64Uint3250_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapFixed64Uint3250() {
      return fieldMapFixed64Uint3250_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapFixed64Uint3250() {
      if (!fieldMapFixed64Uint3250_.isMutable()) {
        fieldMapFixed64Uint3250_ = fieldMapFixed64Uint3250_.mutableCopy();
      }
      return fieldMapFixed64Uint3250_;
    }
    @java.lang.Override

    public int getFieldMapFixed64Uint3250Count() {
      return internalGetFieldMapFixed64Uint3250().size();
    }
    /**
     * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64Uint3250(
        long key) {
      
      return internalGetFieldMapFixed64Uint3250().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed64Uint3250Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Uint3250() {
      return getFieldMapFixed64Uint3250Map();
    }
    /**
     * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Uint3250Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed64Uint3250());
    }
    /**
     * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed64Uint3250OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapFixed64Uint3250();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
     */
    @java.lang.Override

    public int getFieldMapFixed64Uint3250OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapFixed64Uint3250();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapFixed64Uint3250Map() {
      return internalGetMutableFieldMapFixed64Uint3250();
    }

    public static final int FIELD_MAP_FIXED64_UINT64_51_FIELD_NUMBER = 51;
    private static final class FieldMapFixed64Uint6451DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapFixed64Uint6451_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapFixed64Uint6451() {
      return fieldMapFixed64Uint6451_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapFixed64Uint6451() {
      if (!fieldMapFixed64Uint6451_.isMutable()) {
        fieldMapFixed64Uint6451_ = fieldMapFixed64Uint6451_.mutableCopy();
      }
      return fieldMapFixed64Uint6451_;
    }
    @java.lang.Override

    public int getFieldMapFixed64Uint6451Count() {
      return internalGetFieldMapFixed64Uint6451().size();
    }
    /**
     * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapFixed64Uint6451(
        long key) {
      
      return internalGetFieldMapFixed64Uint6451().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapFixed64Uint6451Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Uint6451() {
      return getFieldMapFixed64Uint6451Map();
    }
    /**
     * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Uint6451Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapFixed64Uint6451());
    }
    /**
     * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed64Uint6451OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapFixed64Uint6451();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
     */
    @java.lang.Override

    public long getFieldMapFixed64Uint6451OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapFixed64Uint6451();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapFixed64Uint6451Map() {
      return internalGetMutableFieldMapFixed64Uint6451();
    }

    public static final int FIELD_MAP_INT32_BOOL_52_FIELD_NUMBER = 52;
    private static final class FieldMapInt32Bool52DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Boolean> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Boolean>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Boolean> fieldMapInt32Bool52_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Boolean>
    internalGetFieldMapInt32Bool52() {
      return fieldMapInt32Bool52_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Boolean>
    internalGetMutableFieldMapInt32Bool52() {
      if (!fieldMapInt32Bool52_.isMutable()) {
        fieldMapInt32Bool52_ = fieldMapInt32Bool52_.mutableCopy();
      }
      return fieldMapInt32Bool52_;
    }
    @java.lang.Override

    public int getFieldMapInt32Bool52Count() {
      return internalGetFieldMapInt32Bool52().size();
    }
    /**
     * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32Bool52(
        int key) {
      
      return internalGetFieldMapInt32Bool52().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt32Bool52Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapInt32Bool52() {
      return getFieldMapInt32Bool52Map();
    }
    /**
     * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapInt32Bool52Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt32Bool52());
    }
    /**
     * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
     */
    @java.lang.Override

    public boolean getFieldMapInt32Bool52OrDefault(
        int key,
        boolean defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Boolean> map =
          internalGetFieldMapInt32Bool52();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
     */
    @java.lang.Override

    public boolean getFieldMapInt32Bool52OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Boolean> map =
          internalGetFieldMapInt32Bool52();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Boolean>
    getMutableFieldMapInt32Bool52Map() {
      return internalGetMutableFieldMapInt32Bool52();
    }

    public static final int FIELD_MAP_INT32_BYTES_53_FIELD_NUMBER = 53;
    private static final class FieldMapInt32Bytes53DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, com.google.protobuf.ByteString> fieldMapInt32Bytes53_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.ByteString>
    internalGetFieldMapInt32Bytes53() {
      return fieldMapInt32Bytes53_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.ByteString>
    internalGetMutableFieldMapInt32Bytes53() {
      if (!fieldMapInt32Bytes53_.isMutable()) {
        fieldMapInt32Bytes53_ = fieldMapInt32Bytes53_.mutableCopy();
      }
      return fieldMapInt32Bytes53_;
    }
    @java.lang.Override

    public int getFieldMapInt32Bytes53Count() {
      return internalGetFieldMapInt32Bytes53().size();
    }
    /**
     * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32Bytes53(
        int key) {
      
      return internalGetFieldMapInt32Bytes53().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt32Bytes53Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapInt32Bytes53() {
      return getFieldMapInt32Bytes53Map();
    }
    /**
     * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapInt32Bytes53Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt32Bytes53());
    }
    /**
     * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapInt32Bytes53OrDefault(
        int key,
        com.google.protobuf.ByteString defaultValue) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
          internalGetFieldMapInt32Bytes53();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapInt32Bytes53OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
          internalGetFieldMapInt32Bytes53();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getMutableFieldMapInt32Bytes53Map() {
      return internalGetMutableFieldMapInt32Bytes53();
    }

    public static final int FIELD_MAP_INT32_DOUBLE_54_FIELD_NUMBER = 54;
    private static final class FieldMapInt32Double54DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Double>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Double> fieldMapInt32Double54_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Double>
    internalGetFieldMapInt32Double54() {
      return fieldMapInt32Double54_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Double>
    internalGetMutableFieldMapInt32Double54() {
      if (!fieldMapInt32Double54_.isMutable()) {
        fieldMapInt32Double54_ = fieldMapInt32Double54_.mutableCopy();
      }
      return fieldMapInt32Double54_;
    }
    @java.lang.Override

    public int getFieldMapInt32Double54Count() {
      return internalGetFieldMapInt32Double54().size();
    }
    /**
     * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32Double54(
        int key) {
      
      return internalGetFieldMapInt32Double54().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt32Double54Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapInt32Double54() {
      return getFieldMapInt32Double54Map();
    }
    /**
     * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapInt32Double54Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt32Double54());
    }
    /**
     * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
     */
    @java.lang.Override

    public double getFieldMapInt32Double54OrDefault(
        int key,
        double defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Double> map =
          internalGetFieldMapInt32Double54();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
     */
    @java.lang.Override

    public double getFieldMapInt32Double54OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Double> map =
          internalGetFieldMapInt32Double54();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Double>
    getMutableFieldMapInt32Double54Map() {
      return internalGetMutableFieldMapInt32Double54();
    }

    public static final int FIELD_MAP_INT32_ENUM_55_FIELD_NUMBER = 55;
    private static final class FieldMapInt32Enum55DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapInt32Enum55_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapInt32Enum55() {
      return fieldMapInt32Enum55_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapInt32Enum55() {
      if (!fieldMapInt32Enum55_.isMutable()) {
        fieldMapInt32Enum55_ = fieldMapInt32Enum55_.mutableCopy();
      }
      return fieldMapInt32Enum55_;
    }
    @java.lang.Override

    public int getFieldMapInt32Enum55Count() {
      return internalGetFieldMapInt32Enum55().size();
    }
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32Enum55(
        int key) {
      
      return internalGetFieldMapInt32Enum55().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> fieldMapInt32Enum55ValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetValueMap(),
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO);
    /**
     * Use {@link #getFieldMapInt32Enum55Map()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapInt32Enum55() {
      return getFieldMapInt32Enum55Map();
    }
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapInt32Enum55Map() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
                internalGetFieldMapInt32Enum55(),
                fieldMapInt32Enum55ValueConverter));
    }
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapInt32Enum55OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapInt32Enum55();
      return map.containsKey(key)
             ? fieldMapInt32Enum55ValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapInt32Enum55OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapInt32Enum55();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return fieldMapInt32Enum55ValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getMutableFieldMapInt32Enum55Map() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
              internalGetMutableFieldMapInt32Enum55(),
              fieldMapInt32Enum55ValueConverter);
    }

    public static final int FIELD_MAP_INT32_FIXED32_56_FIELD_NUMBER = 56;
    private static final class FieldMapInt32Fixed3256DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapInt32Fixed3256_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapInt32Fixed3256() {
      return fieldMapInt32Fixed3256_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapInt32Fixed3256() {
      if (!fieldMapInt32Fixed3256_.isMutable()) {
        fieldMapInt32Fixed3256_ = fieldMapInt32Fixed3256_.mutableCopy();
      }
      return fieldMapInt32Fixed3256_;
    }
    @java.lang.Override

    public int getFieldMapInt32Fixed3256Count() {
      return internalGetFieldMapInt32Fixed3256().size();
    }
    /**
     * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32Fixed3256(
        int key) {
      
      return internalGetFieldMapInt32Fixed3256().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt32Fixed3256Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Fixed3256() {
      return getFieldMapInt32Fixed3256Map();
    }
    /**
     * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Fixed3256Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt32Fixed3256());
    }
    /**
     * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
     */
    @java.lang.Override

    public int getFieldMapInt32Fixed3256OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapInt32Fixed3256();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
     */
    @java.lang.Override

    public int getFieldMapInt32Fixed3256OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapInt32Fixed3256();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapInt32Fixed3256Map() {
      return internalGetMutableFieldMapInt32Fixed3256();
    }

    public static final int FIELD_MAP_INT32_FIXED64_57_FIELD_NUMBER = 57;
    private static final class FieldMapInt32Fixed6457DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapInt32Fixed6457_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapInt32Fixed6457() {
      return fieldMapInt32Fixed6457_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapInt32Fixed6457() {
      if (!fieldMapInt32Fixed6457_.isMutable()) {
        fieldMapInt32Fixed6457_ = fieldMapInt32Fixed6457_.mutableCopy();
      }
      return fieldMapInt32Fixed6457_;
    }
    @java.lang.Override

    public int getFieldMapInt32Fixed6457Count() {
      return internalGetFieldMapInt32Fixed6457().size();
    }
    /**
     * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32Fixed6457(
        int key) {
      
      return internalGetFieldMapInt32Fixed6457().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt32Fixed6457Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Fixed6457() {
      return getFieldMapInt32Fixed6457Map();
    }
    /**
     * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Fixed6457Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt32Fixed6457());
    }
    /**
     * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
     */
    @java.lang.Override

    public long getFieldMapInt32Fixed6457OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapInt32Fixed6457();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
     */
    @java.lang.Override

    public long getFieldMapInt32Fixed6457OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapInt32Fixed6457();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapInt32Fixed6457Map() {
      return internalGetMutableFieldMapInt32Fixed6457();
    }

    public static final int FIELD_MAP_INT32_FLOAT_58_FIELD_NUMBER = 58;
    private static final class FieldMapInt32Float58DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Float> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Float>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FLOAT,
                  0F);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Float> fieldMapInt32Float58_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Float>
    internalGetFieldMapInt32Float58() {
      return fieldMapInt32Float58_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Float>
    internalGetMutableFieldMapInt32Float58() {
      if (!fieldMapInt32Float58_.isMutable()) {
        fieldMapInt32Float58_ = fieldMapInt32Float58_.mutableCopy();
      }
      return fieldMapInt32Float58_;
    }
    @java.lang.Override

    public int getFieldMapInt32Float58Count() {
      return internalGetFieldMapInt32Float58().size();
    }
    /**
     * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32Float58(
        int key) {
      
      return internalGetFieldMapInt32Float58().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt32Float58Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapInt32Float58() {
      return getFieldMapInt32Float58Map();
    }
    /**
     * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapInt32Float58Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt32Float58());
    }
    /**
     * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
     */
    @java.lang.Override

    public float getFieldMapInt32Float58OrDefault(
        int key,
        float defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Float> map =
          internalGetFieldMapInt32Float58();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
     */
    @java.lang.Override

    public float getFieldMapInt32Float58OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Float> map =
          internalGetFieldMapInt32Float58();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Float>
    getMutableFieldMapInt32Float58Map() {
      return internalGetMutableFieldMapInt32Float58();
    }

    public static final int FIELD_MAP_INT32_INT32_59_FIELD_NUMBER = 59;
    private static final class FieldMapInt32Int3259DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapInt32Int3259_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapInt32Int3259() {
      return fieldMapInt32Int3259_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapInt32Int3259() {
      if (!fieldMapInt32Int3259_.isMutable()) {
        fieldMapInt32Int3259_ = fieldMapInt32Int3259_.mutableCopy();
      }
      return fieldMapInt32Int3259_;
    }
    @java.lang.Override

    public int getFieldMapInt32Int3259Count() {
      return internalGetFieldMapInt32Int3259().size();
    }
    /**
     * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32Int3259(
        int key) {
      
      return internalGetFieldMapInt32Int3259().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt32Int3259Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Int3259() {
      return getFieldMapInt32Int3259Map();
    }
    /**
     * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Int3259Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt32Int3259());
    }
    /**
     * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
     */
    @java.lang.Override

    public int getFieldMapInt32Int3259OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapInt32Int3259();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
     */
    @java.lang.Override

    public int getFieldMapInt32Int3259OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapInt32Int3259();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapInt32Int3259Map() {
      return internalGetMutableFieldMapInt32Int3259();
    }

    public static final int FIELD_MAP_INT32_INT64_60_FIELD_NUMBER = 60;
    private static final class FieldMapInt32Int6460DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapInt32Int6460_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapInt32Int6460() {
      return fieldMapInt32Int6460_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapInt32Int6460() {
      if (!fieldMapInt32Int6460_.isMutable()) {
        fieldMapInt32Int6460_ = fieldMapInt32Int6460_.mutableCopy();
      }
      return fieldMapInt32Int6460_;
    }
    @java.lang.Override

    public int getFieldMapInt32Int6460Count() {
      return internalGetFieldMapInt32Int6460().size();
    }
    /**
     * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32Int6460(
        int key) {
      
      return internalGetFieldMapInt32Int6460().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt32Int6460Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Int6460() {
      return getFieldMapInt32Int6460Map();
    }
    /**
     * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Int6460Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt32Int6460());
    }
    /**
     * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
     */
    @java.lang.Override

    public long getFieldMapInt32Int6460OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapInt32Int6460();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
     */
    @java.lang.Override

    public long getFieldMapInt32Int6460OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapInt32Int6460();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapInt32Int6460Map() {
      return internalGetMutableFieldMapInt32Int6460();
    }

    public static final int FIELD_MAP_INT32_MESSAGE_61_FIELD_NUMBER = 61;
    private static final class FieldMapInt32Message61DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> fieldMapInt32Message61_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetFieldMapInt32Message61() {
      return fieldMapInt32Message61_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetMutableFieldMapInt32Message61() {
      if (!fieldMapInt32Message61_.isMutable()) {
        fieldMapInt32Message61_ = fieldMapInt32Message61_.mutableCopy();
      }
      return fieldMapInt32Message61_;
    }
    @java.lang.Override

    public int getFieldMapInt32Message61Count() {
      return internalGetFieldMapInt32Message61().size();
    }
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32Message61(
        int key) {
      
      return internalGetFieldMapInt32Message61().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt32Message61Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapInt32Message61() {
      return getFieldMapInt32Message61Map();
    }
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapInt32Message61Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt32Message61());
    }
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapInt32Message61OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapInt32Message61();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapInt32Message61OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapInt32Message61();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getMutableFieldMapInt32Message61Map() {
      return internalGetMutableFieldMapInt32Message61();
    }

    public static final int FIELD_MAP_INT32_SFIXED32_62_FIELD_NUMBER = 62;
    private static final class FieldMapInt32Sfixed3262DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapInt32Sfixed3262_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapInt32Sfixed3262() {
      return fieldMapInt32Sfixed3262_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapInt32Sfixed3262() {
      if (!fieldMapInt32Sfixed3262_.isMutable()) {
        fieldMapInt32Sfixed3262_ = fieldMapInt32Sfixed3262_.mutableCopy();
      }
      return fieldMapInt32Sfixed3262_;
    }
    @java.lang.Override

    public int getFieldMapInt32Sfixed3262Count() {
      return internalGetFieldMapInt32Sfixed3262().size();
    }
    /**
     * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32Sfixed3262(
        int key) {
      
      return internalGetFieldMapInt32Sfixed3262().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt32Sfixed3262Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Sfixed3262() {
      return getFieldMapInt32Sfixed3262Map();
    }
    /**
     * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Sfixed3262Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt32Sfixed3262());
    }
    /**
     * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
     */
    @java.lang.Override

    public int getFieldMapInt32Sfixed3262OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapInt32Sfixed3262();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
     */
    @java.lang.Override

    public int getFieldMapInt32Sfixed3262OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapInt32Sfixed3262();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapInt32Sfixed3262Map() {
      return internalGetMutableFieldMapInt32Sfixed3262();
    }

    public static final int FIELD_MAP_INT32_SFIXED64_63_FIELD_NUMBER = 63;
    private static final class FieldMapInt32Sfixed6463DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapInt32Sfixed6463_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapInt32Sfixed6463() {
      return fieldMapInt32Sfixed6463_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapInt32Sfixed6463() {
      if (!fieldMapInt32Sfixed6463_.isMutable()) {
        fieldMapInt32Sfixed6463_ = fieldMapInt32Sfixed6463_.mutableCopy();
      }
      return fieldMapInt32Sfixed6463_;
    }
    @java.lang.Override

    public int getFieldMapInt32Sfixed6463Count() {
      return internalGetFieldMapInt32Sfixed6463().size();
    }
    /**
     * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32Sfixed6463(
        int key) {
      
      return internalGetFieldMapInt32Sfixed6463().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt32Sfixed6463Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Sfixed6463() {
      return getFieldMapInt32Sfixed6463Map();
    }
    /**
     * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Sfixed6463Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt32Sfixed6463());
    }
    /**
     * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
     */
    @java.lang.Override

    public long getFieldMapInt32Sfixed6463OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapInt32Sfixed6463();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
     */
    @java.lang.Override

    public long getFieldMapInt32Sfixed6463OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapInt32Sfixed6463();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapInt32Sfixed6463Map() {
      return internalGetMutableFieldMapInt32Sfixed6463();
    }

    public static final int FIELD_MAP_INT32_SINT32_64_FIELD_NUMBER = 64;
    private static final class FieldMapInt32Sint3264DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapInt32Sint3264_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapInt32Sint3264() {
      return fieldMapInt32Sint3264_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapInt32Sint3264() {
      if (!fieldMapInt32Sint3264_.isMutable()) {
        fieldMapInt32Sint3264_ = fieldMapInt32Sint3264_.mutableCopy();
      }
      return fieldMapInt32Sint3264_;
    }
    @java.lang.Override

    public int getFieldMapInt32Sint3264Count() {
      return internalGetFieldMapInt32Sint3264().size();
    }
    /**
     * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32Sint3264(
        int key) {
      
      return internalGetFieldMapInt32Sint3264().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt32Sint3264Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Sint3264() {
      return getFieldMapInt32Sint3264Map();
    }
    /**
     * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Sint3264Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt32Sint3264());
    }
    /**
     * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
     */
    @java.lang.Override

    public int getFieldMapInt32Sint3264OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapInt32Sint3264();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
     */
    @java.lang.Override

    public int getFieldMapInt32Sint3264OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapInt32Sint3264();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapInt32Sint3264Map() {
      return internalGetMutableFieldMapInt32Sint3264();
    }

    public static final int FIELD_MAP_INT32_SINT64_65_FIELD_NUMBER = 65;
    private static final class FieldMapInt32Sint6465DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapInt32Sint6465_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapInt32Sint6465() {
      return fieldMapInt32Sint6465_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapInt32Sint6465() {
      if (!fieldMapInt32Sint6465_.isMutable()) {
        fieldMapInt32Sint6465_ = fieldMapInt32Sint6465_.mutableCopy();
      }
      return fieldMapInt32Sint6465_;
    }
    @java.lang.Override

    public int getFieldMapInt32Sint6465Count() {
      return internalGetFieldMapInt32Sint6465().size();
    }
    /**
     * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32Sint6465(
        int key) {
      
      return internalGetFieldMapInt32Sint6465().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt32Sint6465Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Sint6465() {
      return getFieldMapInt32Sint6465Map();
    }
    /**
     * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Sint6465Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt32Sint6465());
    }
    /**
     * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
     */
    @java.lang.Override

    public long getFieldMapInt32Sint6465OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapInt32Sint6465();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
     */
    @java.lang.Override

    public long getFieldMapInt32Sint6465OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapInt32Sint6465();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapInt32Sint6465Map() {
      return internalGetMutableFieldMapInt32Sint6465();
    }

    public static final int FIELD_MAP_INT32_STRING_66_FIELD_NUMBER = 66;
    private static final class FieldMapInt32String66DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.String> fieldMapInt32String66_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.String>
    internalGetFieldMapInt32String66() {
      return fieldMapInt32String66_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.String>
    internalGetMutableFieldMapInt32String66() {
      if (!fieldMapInt32String66_.isMutable()) {
        fieldMapInt32String66_ = fieldMapInt32String66_.mutableCopy();
      }
      return fieldMapInt32String66_;
    }
    @java.lang.Override

    public int getFieldMapInt32String66Count() {
      return internalGetFieldMapInt32String66().size();
    }
    /**
     * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32String66(
        int key) {
      
      return internalGetFieldMapInt32String66().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt32String66Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapInt32String66() {
      return getFieldMapInt32String66Map();
    }
    /**
     * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapInt32String66Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt32String66());
    }
    /**
     * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapInt32String66OrDefault(
        int key,
        java.lang.String defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.String> map =
          internalGetFieldMapInt32String66();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapInt32String66OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.String> map =
          internalGetFieldMapInt32String66();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.String>
    getMutableFieldMapInt32String66Map() {
      return internalGetMutableFieldMapInt32String66();
    }

    public static final int FIELD_MAP_INT32_UINT32_67_FIELD_NUMBER = 67;
    private static final class FieldMapInt32Uint3267DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapInt32Uint3267_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapInt32Uint3267() {
      return fieldMapInt32Uint3267_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapInt32Uint3267() {
      if (!fieldMapInt32Uint3267_.isMutable()) {
        fieldMapInt32Uint3267_ = fieldMapInt32Uint3267_.mutableCopy();
      }
      return fieldMapInt32Uint3267_;
    }
    @java.lang.Override

    public int getFieldMapInt32Uint3267Count() {
      return internalGetFieldMapInt32Uint3267().size();
    }
    /**
     * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32Uint3267(
        int key) {
      
      return internalGetFieldMapInt32Uint3267().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt32Uint3267Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Uint3267() {
      return getFieldMapInt32Uint3267Map();
    }
    /**
     * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Uint3267Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt32Uint3267());
    }
    /**
     * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
     */
    @java.lang.Override

    public int getFieldMapInt32Uint3267OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapInt32Uint3267();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
     */
    @java.lang.Override

    public int getFieldMapInt32Uint3267OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapInt32Uint3267();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapInt32Uint3267Map() {
      return internalGetMutableFieldMapInt32Uint3267();
    }

    public static final int FIELD_MAP_INT32_UINT64_68_FIELD_NUMBER = 68;
    private static final class FieldMapInt32Uint6468DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapInt32Uint6468_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapInt32Uint6468() {
      return fieldMapInt32Uint6468_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapInt32Uint6468() {
      if (!fieldMapInt32Uint6468_.isMutable()) {
        fieldMapInt32Uint6468_ = fieldMapInt32Uint6468_.mutableCopy();
      }
      return fieldMapInt32Uint6468_;
    }
    @java.lang.Override

    public int getFieldMapInt32Uint6468Count() {
      return internalGetFieldMapInt32Uint6468().size();
    }
    /**
     * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt32Uint6468(
        int key) {
      
      return internalGetFieldMapInt32Uint6468().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt32Uint6468Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Uint6468() {
      return getFieldMapInt32Uint6468Map();
    }
    /**
     * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Uint6468Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt32Uint6468());
    }
    /**
     * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
     */
    @java.lang.Override

    public long getFieldMapInt32Uint6468OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapInt32Uint6468();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
     */
    @java.lang.Override

    public long getFieldMapInt32Uint6468OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapInt32Uint6468();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapInt32Uint6468Map() {
      return internalGetMutableFieldMapInt32Uint6468();
    }

    public static final int FIELD_MAP_INT64_BOOL_69_FIELD_NUMBER = 69;
    private static final class FieldMapInt64Bool69DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Boolean> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Boolean>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Boolean> fieldMapInt64Bool69_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Boolean>
    internalGetFieldMapInt64Bool69() {
      return fieldMapInt64Bool69_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Boolean>
    internalGetMutableFieldMapInt64Bool69() {
      if (!fieldMapInt64Bool69_.isMutable()) {
        fieldMapInt64Bool69_ = fieldMapInt64Bool69_.mutableCopy();
      }
      return fieldMapInt64Bool69_;
    }
    @java.lang.Override

    public int getFieldMapInt64Bool69Count() {
      return internalGetFieldMapInt64Bool69().size();
    }
    /**
     * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64Bool69(
        long key) {
      
      return internalGetFieldMapInt64Bool69().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt64Bool69Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapInt64Bool69() {
      return getFieldMapInt64Bool69Map();
    }
    /**
     * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapInt64Bool69Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt64Bool69());
    }
    /**
     * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
     */
    @java.lang.Override

    public boolean getFieldMapInt64Bool69OrDefault(
        long key,
        boolean defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Boolean> map =
          internalGetFieldMapInt64Bool69();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
     */
    @java.lang.Override

    public boolean getFieldMapInt64Bool69OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Boolean> map =
          internalGetFieldMapInt64Bool69();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Boolean>
    getMutableFieldMapInt64Bool69Map() {
      return internalGetMutableFieldMapInt64Bool69();
    }

    public static final int FIELD_MAP_INT64_BYTES_70_FIELD_NUMBER = 70;
    private static final class FieldMapInt64Bytes70DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, com.google.protobuf.ByteString> fieldMapInt64Bytes70_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.ByteString>
    internalGetFieldMapInt64Bytes70() {
      return fieldMapInt64Bytes70_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.ByteString>
    internalGetMutableFieldMapInt64Bytes70() {
      if (!fieldMapInt64Bytes70_.isMutable()) {
        fieldMapInt64Bytes70_ = fieldMapInt64Bytes70_.mutableCopy();
      }
      return fieldMapInt64Bytes70_;
    }
    @java.lang.Override

    public int getFieldMapInt64Bytes70Count() {
      return internalGetFieldMapInt64Bytes70().size();
    }
    /**
     * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64Bytes70(
        long key) {
      
      return internalGetFieldMapInt64Bytes70().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt64Bytes70Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapInt64Bytes70() {
      return getFieldMapInt64Bytes70Map();
    }
    /**
     * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapInt64Bytes70Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt64Bytes70());
    }
    /**
     * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapInt64Bytes70OrDefault(
        long key,
        com.google.protobuf.ByteString defaultValue) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
          internalGetFieldMapInt64Bytes70();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapInt64Bytes70OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
          internalGetFieldMapInt64Bytes70();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
     */
    private java.util.Map<java.lang.Long, com.google.protobuf.ByteString>
    getMutableFieldMapInt64Bytes70Map() {
      return internalGetMutableFieldMapInt64Bytes70();
    }

    public static final int FIELD_MAP_INT64_DOUBLE_71_FIELD_NUMBER = 71;
    private static final class FieldMapInt64Double71DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Double>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Double> fieldMapInt64Double71_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Double>
    internalGetFieldMapInt64Double71() {
      return fieldMapInt64Double71_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Double>
    internalGetMutableFieldMapInt64Double71() {
      if (!fieldMapInt64Double71_.isMutable()) {
        fieldMapInt64Double71_ = fieldMapInt64Double71_.mutableCopy();
      }
      return fieldMapInt64Double71_;
    }
    @java.lang.Override

    public int getFieldMapInt64Double71Count() {
      return internalGetFieldMapInt64Double71().size();
    }
    /**
     * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64Double71(
        long key) {
      
      return internalGetFieldMapInt64Double71().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt64Double71Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapInt64Double71() {
      return getFieldMapInt64Double71Map();
    }
    /**
     * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapInt64Double71Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt64Double71());
    }
    /**
     * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
     */
    @java.lang.Override

    public double getFieldMapInt64Double71OrDefault(
        long key,
        double defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Double> map =
          internalGetFieldMapInt64Double71();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
     */
    @java.lang.Override

    public double getFieldMapInt64Double71OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Double> map =
          internalGetFieldMapInt64Double71();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Double>
    getMutableFieldMapInt64Double71Map() {
      return internalGetMutableFieldMapInt64Double71();
    }

    public static final int FIELD_MAP_INT64_ENUM_72_FIELD_NUMBER = 72;
    private static final class FieldMapInt64Enum72DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapInt64Enum72_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapInt64Enum72() {
      return fieldMapInt64Enum72_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapInt64Enum72() {
      if (!fieldMapInt64Enum72_.isMutable()) {
        fieldMapInt64Enum72_ = fieldMapInt64Enum72_.mutableCopy();
      }
      return fieldMapInt64Enum72_;
    }
    @java.lang.Override

    public int getFieldMapInt64Enum72Count() {
      return internalGetFieldMapInt64Enum72().size();
    }
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64Enum72(
        long key) {
      
      return internalGetFieldMapInt64Enum72().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> fieldMapInt64Enum72ValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetValueMap(),
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO);
    /**
     * Use {@link #getFieldMapInt64Enum72Map()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapInt64Enum72() {
      return getFieldMapInt64Enum72Map();
    }
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapInt64Enum72Map() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
                internalGetFieldMapInt64Enum72(),
                fieldMapInt64Enum72ValueConverter));
    }
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapInt64Enum72OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapInt64Enum72();
      return map.containsKey(key)
             ? fieldMapInt64Enum72ValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapInt64Enum72OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapInt64Enum72();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return fieldMapInt64Enum72ValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
     */
    private java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getMutableFieldMapInt64Enum72Map() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
              internalGetMutableFieldMapInt64Enum72(),
              fieldMapInt64Enum72ValueConverter);
    }

    public static final int FIELD_MAP_INT64_FIXED32_73_FIELD_NUMBER = 73;
    private static final class FieldMapInt64Fixed3273DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapInt64Fixed3273_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapInt64Fixed3273() {
      return fieldMapInt64Fixed3273_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapInt64Fixed3273() {
      if (!fieldMapInt64Fixed3273_.isMutable()) {
        fieldMapInt64Fixed3273_ = fieldMapInt64Fixed3273_.mutableCopy();
      }
      return fieldMapInt64Fixed3273_;
    }
    @java.lang.Override

    public int getFieldMapInt64Fixed3273Count() {
      return internalGetFieldMapInt64Fixed3273().size();
    }
    /**
     * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64Fixed3273(
        long key) {
      
      return internalGetFieldMapInt64Fixed3273().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt64Fixed3273Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Fixed3273() {
      return getFieldMapInt64Fixed3273Map();
    }
    /**
     * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Fixed3273Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt64Fixed3273());
    }
    /**
     * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
     */
    @java.lang.Override

    public int getFieldMapInt64Fixed3273OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapInt64Fixed3273();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
     */
    @java.lang.Override

    public int getFieldMapInt64Fixed3273OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapInt64Fixed3273();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapInt64Fixed3273Map() {
      return internalGetMutableFieldMapInt64Fixed3273();
    }

    public static final int FIELD_MAP_INT64_FIXED64_74_FIELD_NUMBER = 74;
    private static final class FieldMapInt64Fixed6474DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapInt64Fixed6474_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapInt64Fixed6474() {
      return fieldMapInt64Fixed6474_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapInt64Fixed6474() {
      if (!fieldMapInt64Fixed6474_.isMutable()) {
        fieldMapInt64Fixed6474_ = fieldMapInt64Fixed6474_.mutableCopy();
      }
      return fieldMapInt64Fixed6474_;
    }
    @java.lang.Override

    public int getFieldMapInt64Fixed6474Count() {
      return internalGetFieldMapInt64Fixed6474().size();
    }
    /**
     * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64Fixed6474(
        long key) {
      
      return internalGetFieldMapInt64Fixed6474().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt64Fixed6474Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Fixed6474() {
      return getFieldMapInt64Fixed6474Map();
    }
    /**
     * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Fixed6474Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt64Fixed6474());
    }
    /**
     * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
     */
    @java.lang.Override

    public long getFieldMapInt64Fixed6474OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapInt64Fixed6474();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
     */
    @java.lang.Override

    public long getFieldMapInt64Fixed6474OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapInt64Fixed6474();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapInt64Fixed6474Map() {
      return internalGetMutableFieldMapInt64Fixed6474();
    }

    public static final int FIELD_MAP_INT64_FLOAT_75_FIELD_NUMBER = 75;
    private static final class FieldMapInt64Float75DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Float> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Float>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FLOAT,
                  0F);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Float> fieldMapInt64Float75_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Float>
    internalGetFieldMapInt64Float75() {
      return fieldMapInt64Float75_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Float>
    internalGetMutableFieldMapInt64Float75() {
      if (!fieldMapInt64Float75_.isMutable()) {
        fieldMapInt64Float75_ = fieldMapInt64Float75_.mutableCopy();
      }
      return fieldMapInt64Float75_;
    }
    @java.lang.Override

    public int getFieldMapInt64Float75Count() {
      return internalGetFieldMapInt64Float75().size();
    }
    /**
     * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64Float75(
        long key) {
      
      return internalGetFieldMapInt64Float75().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt64Float75Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapInt64Float75() {
      return getFieldMapInt64Float75Map();
    }
    /**
     * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapInt64Float75Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt64Float75());
    }
    /**
     * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
     */
    @java.lang.Override

    public float getFieldMapInt64Float75OrDefault(
        long key,
        float defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Float> map =
          internalGetFieldMapInt64Float75();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
     */
    @java.lang.Override

    public float getFieldMapInt64Float75OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Float> map =
          internalGetFieldMapInt64Float75();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Float>
    getMutableFieldMapInt64Float75Map() {
      return internalGetMutableFieldMapInt64Float75();
    }

    public static final int FIELD_MAP_INT64_INT32_76_FIELD_NUMBER = 76;
    private static final class FieldMapInt64Int3276DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapInt64Int3276_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapInt64Int3276() {
      return fieldMapInt64Int3276_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapInt64Int3276() {
      if (!fieldMapInt64Int3276_.isMutable()) {
        fieldMapInt64Int3276_ = fieldMapInt64Int3276_.mutableCopy();
      }
      return fieldMapInt64Int3276_;
    }
    @java.lang.Override

    public int getFieldMapInt64Int3276Count() {
      return internalGetFieldMapInt64Int3276().size();
    }
    /**
     * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64Int3276(
        long key) {
      
      return internalGetFieldMapInt64Int3276().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt64Int3276Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Int3276() {
      return getFieldMapInt64Int3276Map();
    }
    /**
     * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Int3276Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt64Int3276());
    }
    /**
     * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
     */
    @java.lang.Override

    public int getFieldMapInt64Int3276OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapInt64Int3276();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
     */
    @java.lang.Override

    public int getFieldMapInt64Int3276OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapInt64Int3276();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapInt64Int3276Map() {
      return internalGetMutableFieldMapInt64Int3276();
    }

    public static final int FIELD_MAP_INT64_INT64_77_FIELD_NUMBER = 77;
    private static final class FieldMapInt64Int6477DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapInt64Int6477_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapInt64Int6477() {
      return fieldMapInt64Int6477_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapInt64Int6477() {
      if (!fieldMapInt64Int6477_.isMutable()) {
        fieldMapInt64Int6477_ = fieldMapInt64Int6477_.mutableCopy();
      }
      return fieldMapInt64Int6477_;
    }
    @java.lang.Override

    public int getFieldMapInt64Int6477Count() {
      return internalGetFieldMapInt64Int6477().size();
    }
    /**
     * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64Int6477(
        long key) {
      
      return internalGetFieldMapInt64Int6477().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt64Int6477Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Int6477() {
      return getFieldMapInt64Int6477Map();
    }
    /**
     * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Int6477Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt64Int6477());
    }
    /**
     * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
     */
    @java.lang.Override

    public long getFieldMapInt64Int6477OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapInt64Int6477();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
     */
    @java.lang.Override

    public long getFieldMapInt64Int6477OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapInt64Int6477();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapInt64Int6477Map() {
      return internalGetMutableFieldMapInt64Int6477();
    }

    public static final int FIELD_MAP_INT64_MESSAGE_78_FIELD_NUMBER = 78;
    private static final class FieldMapInt64Message78DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> fieldMapInt64Message78_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetFieldMapInt64Message78() {
      return fieldMapInt64Message78_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetMutableFieldMapInt64Message78() {
      if (!fieldMapInt64Message78_.isMutable()) {
        fieldMapInt64Message78_ = fieldMapInt64Message78_.mutableCopy();
      }
      return fieldMapInt64Message78_;
    }
    @java.lang.Override

    public int getFieldMapInt64Message78Count() {
      return internalGetFieldMapInt64Message78().size();
    }
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64Message78(
        long key) {
      
      return internalGetFieldMapInt64Message78().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt64Message78Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapInt64Message78() {
      return getFieldMapInt64Message78Map();
    }
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapInt64Message78Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt64Message78());
    }
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapInt64Message78OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapInt64Message78();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapInt64Message78OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapInt64Message78();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
     */
    private java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getMutableFieldMapInt64Message78Map() {
      return internalGetMutableFieldMapInt64Message78();
    }

    public static final int FIELD_MAP_INT64_SFIXED32_79_FIELD_NUMBER = 79;
    private static final class FieldMapInt64Sfixed3279DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapInt64Sfixed3279_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapInt64Sfixed3279() {
      return fieldMapInt64Sfixed3279_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapInt64Sfixed3279() {
      if (!fieldMapInt64Sfixed3279_.isMutable()) {
        fieldMapInt64Sfixed3279_ = fieldMapInt64Sfixed3279_.mutableCopy();
      }
      return fieldMapInt64Sfixed3279_;
    }
    @java.lang.Override

    public int getFieldMapInt64Sfixed3279Count() {
      return internalGetFieldMapInt64Sfixed3279().size();
    }
    /**
     * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64Sfixed3279(
        long key) {
      
      return internalGetFieldMapInt64Sfixed3279().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt64Sfixed3279Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Sfixed3279() {
      return getFieldMapInt64Sfixed3279Map();
    }
    /**
     * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Sfixed3279Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt64Sfixed3279());
    }
    /**
     * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
     */
    @java.lang.Override

    public int getFieldMapInt64Sfixed3279OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapInt64Sfixed3279();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
     */
    @java.lang.Override

    public int getFieldMapInt64Sfixed3279OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapInt64Sfixed3279();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapInt64Sfixed3279Map() {
      return internalGetMutableFieldMapInt64Sfixed3279();
    }

    public static final int FIELD_MAP_INT64_SFIXED64_80_FIELD_NUMBER = 80;
    private static final class FieldMapInt64Sfixed6480DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapInt64Sfixed6480_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapInt64Sfixed6480() {
      return fieldMapInt64Sfixed6480_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapInt64Sfixed6480() {
      if (!fieldMapInt64Sfixed6480_.isMutable()) {
        fieldMapInt64Sfixed6480_ = fieldMapInt64Sfixed6480_.mutableCopy();
      }
      return fieldMapInt64Sfixed6480_;
    }
    @java.lang.Override

    public int getFieldMapInt64Sfixed6480Count() {
      return internalGetFieldMapInt64Sfixed6480().size();
    }
    /**
     * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64Sfixed6480(
        long key) {
      
      return internalGetFieldMapInt64Sfixed6480().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt64Sfixed6480Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Sfixed6480() {
      return getFieldMapInt64Sfixed6480Map();
    }
    /**
     * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Sfixed6480Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt64Sfixed6480());
    }
    /**
     * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
     */
    @java.lang.Override

    public long getFieldMapInt64Sfixed6480OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapInt64Sfixed6480();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
     */
    @java.lang.Override

    public long getFieldMapInt64Sfixed6480OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapInt64Sfixed6480();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapInt64Sfixed6480Map() {
      return internalGetMutableFieldMapInt64Sfixed6480();
    }

    public static final int FIELD_MAP_INT64_SINT32_81_FIELD_NUMBER = 81;
    private static final class FieldMapInt64Sint3281DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapInt64Sint3281_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapInt64Sint3281() {
      return fieldMapInt64Sint3281_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapInt64Sint3281() {
      if (!fieldMapInt64Sint3281_.isMutable()) {
        fieldMapInt64Sint3281_ = fieldMapInt64Sint3281_.mutableCopy();
      }
      return fieldMapInt64Sint3281_;
    }
    @java.lang.Override

    public int getFieldMapInt64Sint3281Count() {
      return internalGetFieldMapInt64Sint3281().size();
    }
    /**
     * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64Sint3281(
        long key) {
      
      return internalGetFieldMapInt64Sint3281().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt64Sint3281Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Sint3281() {
      return getFieldMapInt64Sint3281Map();
    }
    /**
     * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Sint3281Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt64Sint3281());
    }
    /**
     * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
     */
    @java.lang.Override

    public int getFieldMapInt64Sint3281OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapInt64Sint3281();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
     */
    @java.lang.Override

    public int getFieldMapInt64Sint3281OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapInt64Sint3281();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapInt64Sint3281Map() {
      return internalGetMutableFieldMapInt64Sint3281();
    }

    public static final int FIELD_MAP_INT64_SINT64_82_FIELD_NUMBER = 82;
    private static final class FieldMapInt64Sint6482DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapInt64Sint6482_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapInt64Sint6482() {
      return fieldMapInt64Sint6482_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapInt64Sint6482() {
      if (!fieldMapInt64Sint6482_.isMutable()) {
        fieldMapInt64Sint6482_ = fieldMapInt64Sint6482_.mutableCopy();
      }
      return fieldMapInt64Sint6482_;
    }
    @java.lang.Override

    public int getFieldMapInt64Sint6482Count() {
      return internalGetFieldMapInt64Sint6482().size();
    }
    /**
     * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64Sint6482(
        long key) {
      
      return internalGetFieldMapInt64Sint6482().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt64Sint6482Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Sint6482() {
      return getFieldMapInt64Sint6482Map();
    }
    /**
     * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Sint6482Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt64Sint6482());
    }
    /**
     * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
     */
    @java.lang.Override

    public long getFieldMapInt64Sint6482OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapInt64Sint6482();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
     */
    @java.lang.Override

    public long getFieldMapInt64Sint6482OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapInt64Sint6482();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapInt64Sint6482Map() {
      return internalGetMutableFieldMapInt64Sint6482();
    }

    public static final int FIELD_MAP_INT64_STRING_83_FIELD_NUMBER = 83;
    private static final class FieldMapInt64String83DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.String> fieldMapInt64String83_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.String>
    internalGetFieldMapInt64String83() {
      return fieldMapInt64String83_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.String>
    internalGetMutableFieldMapInt64String83() {
      if (!fieldMapInt64String83_.isMutable()) {
        fieldMapInt64String83_ = fieldMapInt64String83_.mutableCopy();
      }
      return fieldMapInt64String83_;
    }
    @java.lang.Override

    public int getFieldMapInt64String83Count() {
      return internalGetFieldMapInt64String83().size();
    }
    /**
     * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64String83(
        long key) {
      
      return internalGetFieldMapInt64String83().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt64String83Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.String> getFieldMapInt64String83() {
      return getFieldMapInt64String83Map();
    }
    /**
     * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.String> getFieldMapInt64String83Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt64String83());
    }
    /**
     * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapInt64String83OrDefault(
        long key,
        java.lang.String defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.String> map =
          internalGetFieldMapInt64String83();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapInt64String83OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.String> map =
          internalGetFieldMapInt64String83();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.String>
    getMutableFieldMapInt64String83Map() {
      return internalGetMutableFieldMapInt64String83();
    }

    public static final int FIELD_MAP_INT64_UINT32_84_FIELD_NUMBER = 84;
    private static final class FieldMapInt64Uint3284DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapInt64Uint3284_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapInt64Uint3284() {
      return fieldMapInt64Uint3284_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapInt64Uint3284() {
      if (!fieldMapInt64Uint3284_.isMutable()) {
        fieldMapInt64Uint3284_ = fieldMapInt64Uint3284_.mutableCopy();
      }
      return fieldMapInt64Uint3284_;
    }
    @java.lang.Override

    public int getFieldMapInt64Uint3284Count() {
      return internalGetFieldMapInt64Uint3284().size();
    }
    /**
     * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64Uint3284(
        long key) {
      
      return internalGetFieldMapInt64Uint3284().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt64Uint3284Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Uint3284() {
      return getFieldMapInt64Uint3284Map();
    }
    /**
     * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Uint3284Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt64Uint3284());
    }
    /**
     * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
     */
    @java.lang.Override

    public int getFieldMapInt64Uint3284OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapInt64Uint3284();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
     */
    @java.lang.Override

    public int getFieldMapInt64Uint3284OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapInt64Uint3284();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapInt64Uint3284Map() {
      return internalGetMutableFieldMapInt64Uint3284();
    }

    public static final int FIELD_MAP_INT64_UINT64_85_FIELD_NUMBER = 85;
    private static final class FieldMapInt64Uint6485DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapInt64Uint6485_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapInt64Uint6485() {
      return fieldMapInt64Uint6485_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapInt64Uint6485() {
      if (!fieldMapInt64Uint6485_.isMutable()) {
        fieldMapInt64Uint6485_ = fieldMapInt64Uint6485_.mutableCopy();
      }
      return fieldMapInt64Uint6485_;
    }
    @java.lang.Override

    public int getFieldMapInt64Uint6485Count() {
      return internalGetFieldMapInt64Uint6485().size();
    }
    /**
     * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapInt64Uint6485(
        long key) {
      
      return internalGetFieldMapInt64Uint6485().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapInt64Uint6485Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Uint6485() {
      return getFieldMapInt64Uint6485Map();
    }
    /**
     * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Uint6485Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapInt64Uint6485());
    }
    /**
     * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
     */
    @java.lang.Override

    public long getFieldMapInt64Uint6485OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapInt64Uint6485();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
     */
    @java.lang.Override

    public long getFieldMapInt64Uint6485OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapInt64Uint6485();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapInt64Uint6485Map() {
      return internalGetMutableFieldMapInt64Uint6485();
    }

    public static final int FIELD_MAP_SFIXED32_BOOL_86_FIELD_NUMBER = 86;
    private static final class FieldMapSfixed32Bool86DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Boolean> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Boolean>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Boolean> fieldMapSfixed32Bool86_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Boolean>
    internalGetFieldMapSfixed32Bool86() {
      return fieldMapSfixed32Bool86_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Boolean>
    internalGetMutableFieldMapSfixed32Bool86() {
      if (!fieldMapSfixed32Bool86_.isMutable()) {
        fieldMapSfixed32Bool86_ = fieldMapSfixed32Bool86_.mutableCopy();
      }
      return fieldMapSfixed32Bool86_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32Bool86Count() {
      return internalGetFieldMapSfixed32Bool86().size();
    }
    /**
     * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32Bool86(
        int key) {
      
      return internalGetFieldMapSfixed32Bool86().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed32Bool86Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapSfixed32Bool86() {
      return getFieldMapSfixed32Bool86Map();
    }
    /**
     * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapSfixed32Bool86Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed32Bool86());
    }
    /**
     * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
     */
    @java.lang.Override

    public boolean getFieldMapSfixed32Bool86OrDefault(
        int key,
        boolean defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Boolean> map =
          internalGetFieldMapSfixed32Bool86();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
     */
    @java.lang.Override

    public boolean getFieldMapSfixed32Bool86OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Boolean> map =
          internalGetFieldMapSfixed32Bool86();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Boolean>
    getMutableFieldMapSfixed32Bool86Map() {
      return internalGetMutableFieldMapSfixed32Bool86();
    }

    public static final int FIELD_MAP_SFIXED32_BYTES_87_FIELD_NUMBER = 87;
    private static final class FieldMapSfixed32Bytes87DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, com.google.protobuf.ByteString> fieldMapSfixed32Bytes87_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.ByteString>
    internalGetFieldMapSfixed32Bytes87() {
      return fieldMapSfixed32Bytes87_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.ByteString>
    internalGetMutableFieldMapSfixed32Bytes87() {
      if (!fieldMapSfixed32Bytes87_.isMutable()) {
        fieldMapSfixed32Bytes87_ = fieldMapSfixed32Bytes87_.mutableCopy();
      }
      return fieldMapSfixed32Bytes87_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32Bytes87Count() {
      return internalGetFieldMapSfixed32Bytes87().size();
    }
    /**
     * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32Bytes87(
        int key) {
      
      return internalGetFieldMapSfixed32Bytes87().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed32Bytes87Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapSfixed32Bytes87() {
      return getFieldMapSfixed32Bytes87Map();
    }
    /**
     * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapSfixed32Bytes87Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed32Bytes87());
    }
    /**
     * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapSfixed32Bytes87OrDefault(
        int key,
        com.google.protobuf.ByteString defaultValue) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
          internalGetFieldMapSfixed32Bytes87();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapSfixed32Bytes87OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
          internalGetFieldMapSfixed32Bytes87();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getMutableFieldMapSfixed32Bytes87Map() {
      return internalGetMutableFieldMapSfixed32Bytes87();
    }

    public static final int FIELD_MAP_SFIXED32_DOUBLE_88_FIELD_NUMBER = 88;
    private static final class FieldMapSfixed32Double88DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Double>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Double> fieldMapSfixed32Double88_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Double>
    internalGetFieldMapSfixed32Double88() {
      return fieldMapSfixed32Double88_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Double>
    internalGetMutableFieldMapSfixed32Double88() {
      if (!fieldMapSfixed32Double88_.isMutable()) {
        fieldMapSfixed32Double88_ = fieldMapSfixed32Double88_.mutableCopy();
      }
      return fieldMapSfixed32Double88_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32Double88Count() {
      return internalGetFieldMapSfixed32Double88().size();
    }
    /**
     * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32Double88(
        int key) {
      
      return internalGetFieldMapSfixed32Double88().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed32Double88Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapSfixed32Double88() {
      return getFieldMapSfixed32Double88Map();
    }
    /**
     * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapSfixed32Double88Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed32Double88());
    }
    /**
     * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
     */
    @java.lang.Override

    public double getFieldMapSfixed32Double88OrDefault(
        int key,
        double defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Double> map =
          internalGetFieldMapSfixed32Double88();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
     */
    @java.lang.Override

    public double getFieldMapSfixed32Double88OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Double> map =
          internalGetFieldMapSfixed32Double88();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Double>
    getMutableFieldMapSfixed32Double88Map() {
      return internalGetMutableFieldMapSfixed32Double88();
    }

    public static final int FIELD_MAP_SFIXED32_ENUM_89_FIELD_NUMBER = 89;
    private static final class FieldMapSfixed32Enum89DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapSfixed32Enum89_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapSfixed32Enum89() {
      return fieldMapSfixed32Enum89_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapSfixed32Enum89() {
      if (!fieldMapSfixed32Enum89_.isMutable()) {
        fieldMapSfixed32Enum89_ = fieldMapSfixed32Enum89_.mutableCopy();
      }
      return fieldMapSfixed32Enum89_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32Enum89Count() {
      return internalGetFieldMapSfixed32Enum89().size();
    }
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32Enum89(
        int key) {
      
      return internalGetFieldMapSfixed32Enum89().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> fieldMapSfixed32Enum89ValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetValueMap(),
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO);
    /**
     * Use {@link #getFieldMapSfixed32Enum89Map()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapSfixed32Enum89() {
      return getFieldMapSfixed32Enum89Map();
    }
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapSfixed32Enum89Map() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
                internalGetFieldMapSfixed32Enum89(),
                fieldMapSfixed32Enum89ValueConverter));
    }
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSfixed32Enum89OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSfixed32Enum89();
      return map.containsKey(key)
             ? fieldMapSfixed32Enum89ValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSfixed32Enum89OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSfixed32Enum89();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return fieldMapSfixed32Enum89ValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getMutableFieldMapSfixed32Enum89Map() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
              internalGetMutableFieldMapSfixed32Enum89(),
              fieldMapSfixed32Enum89ValueConverter);
    }

    public static final int FIELD_MAP_SFIXED32_FIXED32_90_FIELD_NUMBER = 90;
    private static final class FieldMapSfixed32Fixed3290DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapSfixed32Fixed3290_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapSfixed32Fixed3290() {
      return fieldMapSfixed32Fixed3290_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapSfixed32Fixed3290() {
      if (!fieldMapSfixed32Fixed3290_.isMutable()) {
        fieldMapSfixed32Fixed3290_ = fieldMapSfixed32Fixed3290_.mutableCopy();
      }
      return fieldMapSfixed32Fixed3290_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32Fixed3290Count() {
      return internalGetFieldMapSfixed32Fixed3290().size();
    }
    /**
     * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32Fixed3290(
        int key) {
      
      return internalGetFieldMapSfixed32Fixed3290().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed32Fixed3290Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Fixed3290() {
      return getFieldMapSfixed32Fixed3290Map();
    }
    /**
     * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Fixed3290Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed32Fixed3290());
    }
    /**
     * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed32Fixed3290OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSfixed32Fixed3290();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed32Fixed3290OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSfixed32Fixed3290();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapSfixed32Fixed3290Map() {
      return internalGetMutableFieldMapSfixed32Fixed3290();
    }

    public static final int FIELD_MAP_SFIXED32_FIXED64_91_FIELD_NUMBER = 91;
    private static final class FieldMapSfixed32Fixed6491DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapSfixed32Fixed6491_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapSfixed32Fixed6491() {
      return fieldMapSfixed32Fixed6491_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapSfixed32Fixed6491() {
      if (!fieldMapSfixed32Fixed6491_.isMutable()) {
        fieldMapSfixed32Fixed6491_ = fieldMapSfixed32Fixed6491_.mutableCopy();
      }
      return fieldMapSfixed32Fixed6491_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32Fixed6491Count() {
      return internalGetFieldMapSfixed32Fixed6491().size();
    }
    /**
     * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32Fixed6491(
        int key) {
      
      return internalGetFieldMapSfixed32Fixed6491().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed32Fixed6491Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Fixed6491() {
      return getFieldMapSfixed32Fixed6491Map();
    }
    /**
     * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Fixed6491Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed32Fixed6491());
    }
    /**
     * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed32Fixed6491OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSfixed32Fixed6491();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed32Fixed6491OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSfixed32Fixed6491();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapSfixed32Fixed6491Map() {
      return internalGetMutableFieldMapSfixed32Fixed6491();
    }

    public static final int FIELD_MAP_SFIXED32_FLOAT_92_FIELD_NUMBER = 92;
    private static final class FieldMapSfixed32Float92DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Float> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Float>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FLOAT,
                  0F);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Float> fieldMapSfixed32Float92_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Float>
    internalGetFieldMapSfixed32Float92() {
      return fieldMapSfixed32Float92_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Float>
    internalGetMutableFieldMapSfixed32Float92() {
      if (!fieldMapSfixed32Float92_.isMutable()) {
        fieldMapSfixed32Float92_ = fieldMapSfixed32Float92_.mutableCopy();
      }
      return fieldMapSfixed32Float92_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32Float92Count() {
      return internalGetFieldMapSfixed32Float92().size();
    }
    /**
     * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32Float92(
        int key) {
      
      return internalGetFieldMapSfixed32Float92().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed32Float92Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapSfixed32Float92() {
      return getFieldMapSfixed32Float92Map();
    }
    /**
     * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapSfixed32Float92Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed32Float92());
    }
    /**
     * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
     */
    @java.lang.Override

    public float getFieldMapSfixed32Float92OrDefault(
        int key,
        float defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Float> map =
          internalGetFieldMapSfixed32Float92();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
     */
    @java.lang.Override

    public float getFieldMapSfixed32Float92OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Float> map =
          internalGetFieldMapSfixed32Float92();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Float>
    getMutableFieldMapSfixed32Float92Map() {
      return internalGetMutableFieldMapSfixed32Float92();
    }

    public static final int FIELD_MAP_SFIXED32_INT32_93_FIELD_NUMBER = 93;
    private static final class FieldMapSfixed32Int3293DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapSfixed32Int3293_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapSfixed32Int3293() {
      return fieldMapSfixed32Int3293_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapSfixed32Int3293() {
      if (!fieldMapSfixed32Int3293_.isMutable()) {
        fieldMapSfixed32Int3293_ = fieldMapSfixed32Int3293_.mutableCopy();
      }
      return fieldMapSfixed32Int3293_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32Int3293Count() {
      return internalGetFieldMapSfixed32Int3293().size();
    }
    /**
     * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32Int3293(
        int key) {
      
      return internalGetFieldMapSfixed32Int3293().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed32Int3293Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Int3293() {
      return getFieldMapSfixed32Int3293Map();
    }
    /**
     * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Int3293Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed32Int3293());
    }
    /**
     * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed32Int3293OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSfixed32Int3293();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed32Int3293OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSfixed32Int3293();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapSfixed32Int3293Map() {
      return internalGetMutableFieldMapSfixed32Int3293();
    }

    public static final int FIELD_MAP_SFIXED32_INT64_94_FIELD_NUMBER = 94;
    private static final class FieldMapSfixed32Int6494DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapSfixed32Int6494_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapSfixed32Int6494() {
      return fieldMapSfixed32Int6494_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapSfixed32Int6494() {
      if (!fieldMapSfixed32Int6494_.isMutable()) {
        fieldMapSfixed32Int6494_ = fieldMapSfixed32Int6494_.mutableCopy();
      }
      return fieldMapSfixed32Int6494_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32Int6494Count() {
      return internalGetFieldMapSfixed32Int6494().size();
    }
    /**
     * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32Int6494(
        int key) {
      
      return internalGetFieldMapSfixed32Int6494().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed32Int6494Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Int6494() {
      return getFieldMapSfixed32Int6494Map();
    }
    /**
     * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Int6494Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed32Int6494());
    }
    /**
     * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed32Int6494OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSfixed32Int6494();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed32Int6494OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSfixed32Int6494();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapSfixed32Int6494Map() {
      return internalGetMutableFieldMapSfixed32Int6494();
    }

    public static final int FIELD_MAP_SFIXED32_MESSAGE_95_FIELD_NUMBER = 95;
    private static final class FieldMapSfixed32Message95DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> fieldMapSfixed32Message95_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetFieldMapSfixed32Message95() {
      return fieldMapSfixed32Message95_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetMutableFieldMapSfixed32Message95() {
      if (!fieldMapSfixed32Message95_.isMutable()) {
        fieldMapSfixed32Message95_ = fieldMapSfixed32Message95_.mutableCopy();
      }
      return fieldMapSfixed32Message95_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32Message95Count() {
      return internalGetFieldMapSfixed32Message95().size();
    }
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32Message95(
        int key) {
      
      return internalGetFieldMapSfixed32Message95().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed32Message95Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapSfixed32Message95() {
      return getFieldMapSfixed32Message95Map();
    }
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapSfixed32Message95Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed32Message95());
    }
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSfixed32Message95OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapSfixed32Message95();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSfixed32Message95OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapSfixed32Message95();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getMutableFieldMapSfixed32Message95Map() {
      return internalGetMutableFieldMapSfixed32Message95();
    }

    public static final int FIELD_MAP_SFIXED32_SFIXED32_96_FIELD_NUMBER = 96;
    private static final class FieldMapSfixed32Sfixed3296DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapSfixed32Sfixed3296_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapSfixed32Sfixed3296() {
      return fieldMapSfixed32Sfixed3296_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapSfixed32Sfixed3296() {
      if (!fieldMapSfixed32Sfixed3296_.isMutable()) {
        fieldMapSfixed32Sfixed3296_ = fieldMapSfixed32Sfixed3296_.mutableCopy();
      }
      return fieldMapSfixed32Sfixed3296_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32Sfixed3296Count() {
      return internalGetFieldMapSfixed32Sfixed3296().size();
    }
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32Sfixed3296(
        int key) {
      
      return internalGetFieldMapSfixed32Sfixed3296().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed32Sfixed3296Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Sfixed3296() {
      return getFieldMapSfixed32Sfixed3296Map();
    }
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Sfixed3296Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed32Sfixed3296());
    }
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed32Sfixed3296OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSfixed32Sfixed3296();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed32Sfixed3296OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSfixed32Sfixed3296();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapSfixed32Sfixed3296Map() {
      return internalGetMutableFieldMapSfixed32Sfixed3296();
    }

    public static final int FIELD_MAP_SFIXED32_SFIXED64_97_FIELD_NUMBER = 97;
    private static final class FieldMapSfixed32Sfixed6497DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapSfixed32Sfixed6497_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapSfixed32Sfixed6497() {
      return fieldMapSfixed32Sfixed6497_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapSfixed32Sfixed6497() {
      if (!fieldMapSfixed32Sfixed6497_.isMutable()) {
        fieldMapSfixed32Sfixed6497_ = fieldMapSfixed32Sfixed6497_.mutableCopy();
      }
      return fieldMapSfixed32Sfixed6497_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32Sfixed6497Count() {
      return internalGetFieldMapSfixed32Sfixed6497().size();
    }
    /**
     * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32Sfixed6497(
        int key) {
      
      return internalGetFieldMapSfixed32Sfixed6497().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed32Sfixed6497Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Sfixed6497() {
      return getFieldMapSfixed32Sfixed6497Map();
    }
    /**
     * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Sfixed6497Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed32Sfixed6497());
    }
    /**
     * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed32Sfixed6497OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSfixed32Sfixed6497();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed32Sfixed6497OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSfixed32Sfixed6497();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapSfixed32Sfixed6497Map() {
      return internalGetMutableFieldMapSfixed32Sfixed6497();
    }

    public static final int FIELD_MAP_SFIXED32_SINT32_98_FIELD_NUMBER = 98;
    private static final class FieldMapSfixed32Sint3298DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapSfixed32Sint3298_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapSfixed32Sint3298() {
      return fieldMapSfixed32Sint3298_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapSfixed32Sint3298() {
      if (!fieldMapSfixed32Sint3298_.isMutable()) {
        fieldMapSfixed32Sint3298_ = fieldMapSfixed32Sint3298_.mutableCopy();
      }
      return fieldMapSfixed32Sint3298_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32Sint3298Count() {
      return internalGetFieldMapSfixed32Sint3298().size();
    }
    /**
     * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32Sint3298(
        int key) {
      
      return internalGetFieldMapSfixed32Sint3298().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed32Sint3298Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Sint3298() {
      return getFieldMapSfixed32Sint3298Map();
    }
    /**
     * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Sint3298Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed32Sint3298());
    }
    /**
     * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed32Sint3298OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSfixed32Sint3298();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed32Sint3298OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSfixed32Sint3298();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapSfixed32Sint3298Map() {
      return internalGetMutableFieldMapSfixed32Sint3298();
    }

    public static final int FIELD_MAP_SFIXED32_SINT64_99_FIELD_NUMBER = 99;
    private static final class FieldMapSfixed32Sint6499DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapSfixed32Sint6499_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapSfixed32Sint6499() {
      return fieldMapSfixed32Sint6499_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapSfixed32Sint6499() {
      if (!fieldMapSfixed32Sint6499_.isMutable()) {
        fieldMapSfixed32Sint6499_ = fieldMapSfixed32Sint6499_.mutableCopy();
      }
      return fieldMapSfixed32Sint6499_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32Sint6499Count() {
      return internalGetFieldMapSfixed32Sint6499().size();
    }
    /**
     * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32Sint6499(
        int key) {
      
      return internalGetFieldMapSfixed32Sint6499().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed32Sint6499Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Sint6499() {
      return getFieldMapSfixed32Sint6499Map();
    }
    /**
     * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Sint6499Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed32Sint6499());
    }
    /**
     * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed32Sint6499OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSfixed32Sint6499();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed32Sint6499OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSfixed32Sint6499();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapSfixed32Sint6499Map() {
      return internalGetMutableFieldMapSfixed32Sint6499();
    }

    public static final int FIELD_MAP_SFIXED32_STRING_100_FIELD_NUMBER = 100;
    private static final class FieldMapSfixed32String100DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.String> fieldMapSfixed32String100_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.String>
    internalGetFieldMapSfixed32String100() {
      return fieldMapSfixed32String100_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.String>
    internalGetMutableFieldMapSfixed32String100() {
      if (!fieldMapSfixed32String100_.isMutable()) {
        fieldMapSfixed32String100_ = fieldMapSfixed32String100_.mutableCopy();
      }
      return fieldMapSfixed32String100_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32String100Count() {
      return internalGetFieldMapSfixed32String100().size();
    }
    /**
     * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32String100(
        int key) {
      
      return internalGetFieldMapSfixed32String100().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed32String100Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapSfixed32String100() {
      return getFieldMapSfixed32String100Map();
    }
    /**
     * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapSfixed32String100Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed32String100());
    }
    /**
     * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapSfixed32String100OrDefault(
        int key,
        java.lang.String defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.String> map =
          internalGetFieldMapSfixed32String100();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapSfixed32String100OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.String> map =
          internalGetFieldMapSfixed32String100();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.String>
    getMutableFieldMapSfixed32String100Map() {
      return internalGetMutableFieldMapSfixed32String100();
    }

    public static final int FIELD_MAP_SFIXED32_UINT32_101_FIELD_NUMBER = 101;
    private static final class FieldMapSfixed32Uint32101DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapSfixed32Uint32101_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapSfixed32Uint32101() {
      return fieldMapSfixed32Uint32101_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapSfixed32Uint32101() {
      if (!fieldMapSfixed32Uint32101_.isMutable()) {
        fieldMapSfixed32Uint32101_ = fieldMapSfixed32Uint32101_.mutableCopy();
      }
      return fieldMapSfixed32Uint32101_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32Uint32101Count() {
      return internalGetFieldMapSfixed32Uint32101().size();
    }
    /**
     * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32Uint32101(
        int key) {
      
      return internalGetFieldMapSfixed32Uint32101().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed32Uint32101Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Uint32101() {
      return getFieldMapSfixed32Uint32101Map();
    }
    /**
     * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Uint32101Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed32Uint32101());
    }
    /**
     * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed32Uint32101OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSfixed32Uint32101();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed32Uint32101OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSfixed32Uint32101();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapSfixed32Uint32101Map() {
      return internalGetMutableFieldMapSfixed32Uint32101();
    }

    public static final int FIELD_MAP_SFIXED32_UINT64_102_FIELD_NUMBER = 102;
    private static final class FieldMapSfixed32Uint64102DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapSfixed32Uint64102_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapSfixed32Uint64102() {
      return fieldMapSfixed32Uint64102_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapSfixed32Uint64102() {
      if (!fieldMapSfixed32Uint64102_.isMutable()) {
        fieldMapSfixed32Uint64102_ = fieldMapSfixed32Uint64102_.mutableCopy();
      }
      return fieldMapSfixed32Uint64102_;
    }
    @java.lang.Override

    public int getFieldMapSfixed32Uint64102Count() {
      return internalGetFieldMapSfixed32Uint64102().size();
    }
    /**
     * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed32Uint64102(
        int key) {
      
      return internalGetFieldMapSfixed32Uint64102().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed32Uint64102Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Uint64102() {
      return getFieldMapSfixed32Uint64102Map();
    }
    /**
     * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Uint64102Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed32Uint64102());
    }
    /**
     * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed32Uint64102OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSfixed32Uint64102();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed32Uint64102OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSfixed32Uint64102();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapSfixed32Uint64102Map() {
      return internalGetMutableFieldMapSfixed32Uint64102();
    }

    public static final int FIELD_MAP_SFIXED64_BOOL_103_FIELD_NUMBER = 103;
    private static final class FieldMapSfixed64Bool103DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Boolean> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Boolean>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Boolean> fieldMapSfixed64Bool103_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Boolean>
    internalGetFieldMapSfixed64Bool103() {
      return fieldMapSfixed64Bool103_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Boolean>
    internalGetMutableFieldMapSfixed64Bool103() {
      if (!fieldMapSfixed64Bool103_.isMutable()) {
        fieldMapSfixed64Bool103_ = fieldMapSfixed64Bool103_.mutableCopy();
      }
      return fieldMapSfixed64Bool103_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64Bool103Count() {
      return internalGetFieldMapSfixed64Bool103().size();
    }
    /**
     * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64Bool103(
        long key) {
      
      return internalGetFieldMapSfixed64Bool103().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed64Bool103Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapSfixed64Bool103() {
      return getFieldMapSfixed64Bool103Map();
    }
    /**
     * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapSfixed64Bool103Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed64Bool103());
    }
    /**
     * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
     */
    @java.lang.Override

    public boolean getFieldMapSfixed64Bool103OrDefault(
        long key,
        boolean defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Boolean> map =
          internalGetFieldMapSfixed64Bool103();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
     */
    @java.lang.Override

    public boolean getFieldMapSfixed64Bool103OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Boolean> map =
          internalGetFieldMapSfixed64Bool103();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Boolean>
    getMutableFieldMapSfixed64Bool103Map() {
      return internalGetMutableFieldMapSfixed64Bool103();
    }

    public static final int FIELD_MAP_SFIXED64_BYTES_104_FIELD_NUMBER = 104;
    private static final class FieldMapSfixed64Bytes104DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, com.google.protobuf.ByteString> fieldMapSfixed64Bytes104_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.ByteString>
    internalGetFieldMapSfixed64Bytes104() {
      return fieldMapSfixed64Bytes104_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.ByteString>
    internalGetMutableFieldMapSfixed64Bytes104() {
      if (!fieldMapSfixed64Bytes104_.isMutable()) {
        fieldMapSfixed64Bytes104_ = fieldMapSfixed64Bytes104_.mutableCopy();
      }
      return fieldMapSfixed64Bytes104_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64Bytes104Count() {
      return internalGetFieldMapSfixed64Bytes104().size();
    }
    /**
     * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64Bytes104(
        long key) {
      
      return internalGetFieldMapSfixed64Bytes104().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed64Bytes104Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapSfixed64Bytes104() {
      return getFieldMapSfixed64Bytes104Map();
    }
    /**
     * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapSfixed64Bytes104Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed64Bytes104());
    }
    /**
     * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapSfixed64Bytes104OrDefault(
        long key,
        com.google.protobuf.ByteString defaultValue) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
          internalGetFieldMapSfixed64Bytes104();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapSfixed64Bytes104OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
          internalGetFieldMapSfixed64Bytes104();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
     */
    private java.util.Map<java.lang.Long, com.google.protobuf.ByteString>
    getMutableFieldMapSfixed64Bytes104Map() {
      return internalGetMutableFieldMapSfixed64Bytes104();
    }

    public static final int FIELD_MAP_SFIXED64_DOUBLE_105_FIELD_NUMBER = 105;
    private static final class FieldMapSfixed64Double105DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Double>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Double> fieldMapSfixed64Double105_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Double>
    internalGetFieldMapSfixed64Double105() {
      return fieldMapSfixed64Double105_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Double>
    internalGetMutableFieldMapSfixed64Double105() {
      if (!fieldMapSfixed64Double105_.isMutable()) {
        fieldMapSfixed64Double105_ = fieldMapSfixed64Double105_.mutableCopy();
      }
      return fieldMapSfixed64Double105_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64Double105Count() {
      return internalGetFieldMapSfixed64Double105().size();
    }
    /**
     * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64Double105(
        long key) {
      
      return internalGetFieldMapSfixed64Double105().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed64Double105Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapSfixed64Double105() {
      return getFieldMapSfixed64Double105Map();
    }
    /**
     * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapSfixed64Double105Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed64Double105());
    }
    /**
     * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
     */
    @java.lang.Override

    public double getFieldMapSfixed64Double105OrDefault(
        long key,
        double defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Double> map =
          internalGetFieldMapSfixed64Double105();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
     */
    @java.lang.Override

    public double getFieldMapSfixed64Double105OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Double> map =
          internalGetFieldMapSfixed64Double105();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Double>
    getMutableFieldMapSfixed64Double105Map() {
      return internalGetMutableFieldMapSfixed64Double105();
    }

    public static final int FIELD_MAP_SFIXED64_ENUM_106_FIELD_NUMBER = 106;
    private static final class FieldMapSfixed64Enum106DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapSfixed64Enum106_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapSfixed64Enum106() {
      return fieldMapSfixed64Enum106_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapSfixed64Enum106() {
      if (!fieldMapSfixed64Enum106_.isMutable()) {
        fieldMapSfixed64Enum106_ = fieldMapSfixed64Enum106_.mutableCopy();
      }
      return fieldMapSfixed64Enum106_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64Enum106Count() {
      return internalGetFieldMapSfixed64Enum106().size();
    }
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64Enum106(
        long key) {
      
      return internalGetFieldMapSfixed64Enum106().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> fieldMapSfixed64Enum106ValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetValueMap(),
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO);
    /**
     * Use {@link #getFieldMapSfixed64Enum106Map()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapSfixed64Enum106() {
      return getFieldMapSfixed64Enum106Map();
    }
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapSfixed64Enum106Map() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
                internalGetFieldMapSfixed64Enum106(),
                fieldMapSfixed64Enum106ValueConverter));
    }
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSfixed64Enum106OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSfixed64Enum106();
      return map.containsKey(key)
             ? fieldMapSfixed64Enum106ValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSfixed64Enum106OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSfixed64Enum106();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return fieldMapSfixed64Enum106ValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
     */
    private java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getMutableFieldMapSfixed64Enum106Map() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
              internalGetMutableFieldMapSfixed64Enum106(),
              fieldMapSfixed64Enum106ValueConverter);
    }

    public static final int FIELD_MAP_SFIXED64_FIXED32_107_FIELD_NUMBER = 107;
    private static final class FieldMapSfixed64Fixed32107DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapSfixed64Fixed32107_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapSfixed64Fixed32107() {
      return fieldMapSfixed64Fixed32107_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapSfixed64Fixed32107() {
      if (!fieldMapSfixed64Fixed32107_.isMutable()) {
        fieldMapSfixed64Fixed32107_ = fieldMapSfixed64Fixed32107_.mutableCopy();
      }
      return fieldMapSfixed64Fixed32107_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64Fixed32107Count() {
      return internalGetFieldMapSfixed64Fixed32107().size();
    }
    /**
     * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64Fixed32107(
        long key) {
      
      return internalGetFieldMapSfixed64Fixed32107().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed64Fixed32107Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Fixed32107() {
      return getFieldMapSfixed64Fixed32107Map();
    }
    /**
     * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Fixed32107Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed64Fixed32107());
    }
    /**
     * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed64Fixed32107OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSfixed64Fixed32107();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed64Fixed32107OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSfixed64Fixed32107();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapSfixed64Fixed32107Map() {
      return internalGetMutableFieldMapSfixed64Fixed32107();
    }

    public static final int FIELD_MAP_SFIXED64_FIXED64_108_FIELD_NUMBER = 108;
    private static final class FieldMapSfixed64Fixed64108DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapSfixed64Fixed64108_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapSfixed64Fixed64108() {
      return fieldMapSfixed64Fixed64108_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapSfixed64Fixed64108() {
      if (!fieldMapSfixed64Fixed64108_.isMutable()) {
        fieldMapSfixed64Fixed64108_ = fieldMapSfixed64Fixed64108_.mutableCopy();
      }
      return fieldMapSfixed64Fixed64108_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64Fixed64108Count() {
      return internalGetFieldMapSfixed64Fixed64108().size();
    }
    /**
     * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64Fixed64108(
        long key) {
      
      return internalGetFieldMapSfixed64Fixed64108().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed64Fixed64108Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Fixed64108() {
      return getFieldMapSfixed64Fixed64108Map();
    }
    /**
     * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Fixed64108Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed64Fixed64108());
    }
    /**
     * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed64Fixed64108OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSfixed64Fixed64108();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed64Fixed64108OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSfixed64Fixed64108();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapSfixed64Fixed64108Map() {
      return internalGetMutableFieldMapSfixed64Fixed64108();
    }

    public static final int FIELD_MAP_SFIXED64_FLOAT_109_FIELD_NUMBER = 109;
    private static final class FieldMapSfixed64Float109DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Float> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Float>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FLOAT,
                  0F);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Float> fieldMapSfixed64Float109_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Float>
    internalGetFieldMapSfixed64Float109() {
      return fieldMapSfixed64Float109_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Float>
    internalGetMutableFieldMapSfixed64Float109() {
      if (!fieldMapSfixed64Float109_.isMutable()) {
        fieldMapSfixed64Float109_ = fieldMapSfixed64Float109_.mutableCopy();
      }
      return fieldMapSfixed64Float109_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64Float109Count() {
      return internalGetFieldMapSfixed64Float109().size();
    }
    /**
     * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64Float109(
        long key) {
      
      return internalGetFieldMapSfixed64Float109().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed64Float109Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapSfixed64Float109() {
      return getFieldMapSfixed64Float109Map();
    }
    /**
     * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapSfixed64Float109Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed64Float109());
    }
    /**
     * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
     */
    @java.lang.Override

    public float getFieldMapSfixed64Float109OrDefault(
        long key,
        float defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Float> map =
          internalGetFieldMapSfixed64Float109();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
     */
    @java.lang.Override

    public float getFieldMapSfixed64Float109OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Float> map =
          internalGetFieldMapSfixed64Float109();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Float>
    getMutableFieldMapSfixed64Float109Map() {
      return internalGetMutableFieldMapSfixed64Float109();
    }

    public static final int FIELD_MAP_SFIXED64_INT32_110_FIELD_NUMBER = 110;
    private static final class FieldMapSfixed64Int32110DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapSfixed64Int32110_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapSfixed64Int32110() {
      return fieldMapSfixed64Int32110_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapSfixed64Int32110() {
      if (!fieldMapSfixed64Int32110_.isMutable()) {
        fieldMapSfixed64Int32110_ = fieldMapSfixed64Int32110_.mutableCopy();
      }
      return fieldMapSfixed64Int32110_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64Int32110Count() {
      return internalGetFieldMapSfixed64Int32110().size();
    }
    /**
     * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64Int32110(
        long key) {
      
      return internalGetFieldMapSfixed64Int32110().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed64Int32110Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Int32110() {
      return getFieldMapSfixed64Int32110Map();
    }
    /**
     * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Int32110Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed64Int32110());
    }
    /**
     * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed64Int32110OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSfixed64Int32110();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed64Int32110OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSfixed64Int32110();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapSfixed64Int32110Map() {
      return internalGetMutableFieldMapSfixed64Int32110();
    }

    public static final int FIELD_MAP_SFIXED64_INT64_111_FIELD_NUMBER = 111;
    private static final class FieldMapSfixed64Int64111DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapSfixed64Int64111_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapSfixed64Int64111() {
      return fieldMapSfixed64Int64111_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapSfixed64Int64111() {
      if (!fieldMapSfixed64Int64111_.isMutable()) {
        fieldMapSfixed64Int64111_ = fieldMapSfixed64Int64111_.mutableCopy();
      }
      return fieldMapSfixed64Int64111_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64Int64111Count() {
      return internalGetFieldMapSfixed64Int64111().size();
    }
    /**
     * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64Int64111(
        long key) {
      
      return internalGetFieldMapSfixed64Int64111().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed64Int64111Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Int64111() {
      return getFieldMapSfixed64Int64111Map();
    }
    /**
     * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Int64111Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed64Int64111());
    }
    /**
     * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed64Int64111OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSfixed64Int64111();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed64Int64111OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSfixed64Int64111();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapSfixed64Int64111Map() {
      return internalGetMutableFieldMapSfixed64Int64111();
    }

    public static final int FIELD_MAP_SFIXED64_MESSAGE_112_FIELD_NUMBER = 112;
    private static final class FieldMapSfixed64Message112DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> fieldMapSfixed64Message112_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetFieldMapSfixed64Message112() {
      return fieldMapSfixed64Message112_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetMutableFieldMapSfixed64Message112() {
      if (!fieldMapSfixed64Message112_.isMutable()) {
        fieldMapSfixed64Message112_ = fieldMapSfixed64Message112_.mutableCopy();
      }
      return fieldMapSfixed64Message112_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64Message112Count() {
      return internalGetFieldMapSfixed64Message112().size();
    }
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64Message112(
        long key) {
      
      return internalGetFieldMapSfixed64Message112().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed64Message112Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapSfixed64Message112() {
      return getFieldMapSfixed64Message112Map();
    }
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapSfixed64Message112Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed64Message112());
    }
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSfixed64Message112OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapSfixed64Message112();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSfixed64Message112OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapSfixed64Message112();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
     */
    private java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getMutableFieldMapSfixed64Message112Map() {
      return internalGetMutableFieldMapSfixed64Message112();
    }

    public static final int FIELD_MAP_SFIXED64_SFIXED32_113_FIELD_NUMBER = 113;
    private static final class FieldMapSfixed64Sfixed32113DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapSfixed64Sfixed32113_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapSfixed64Sfixed32113() {
      return fieldMapSfixed64Sfixed32113_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapSfixed64Sfixed32113() {
      if (!fieldMapSfixed64Sfixed32113_.isMutable()) {
        fieldMapSfixed64Sfixed32113_ = fieldMapSfixed64Sfixed32113_.mutableCopy();
      }
      return fieldMapSfixed64Sfixed32113_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64Sfixed32113Count() {
      return internalGetFieldMapSfixed64Sfixed32113().size();
    }
    /**
     * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64Sfixed32113(
        long key) {
      
      return internalGetFieldMapSfixed64Sfixed32113().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed64Sfixed32113Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Sfixed32113() {
      return getFieldMapSfixed64Sfixed32113Map();
    }
    /**
     * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Sfixed32113Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed64Sfixed32113());
    }
    /**
     * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed64Sfixed32113OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSfixed64Sfixed32113();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed64Sfixed32113OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSfixed64Sfixed32113();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapSfixed64Sfixed32113Map() {
      return internalGetMutableFieldMapSfixed64Sfixed32113();
    }

    public static final int FIELD_MAP_SFIXED64_SFIXED64_114_FIELD_NUMBER = 114;
    private static final class FieldMapSfixed64Sfixed64114DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapSfixed64Sfixed64114_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapSfixed64Sfixed64114() {
      return fieldMapSfixed64Sfixed64114_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapSfixed64Sfixed64114() {
      if (!fieldMapSfixed64Sfixed64114_.isMutable()) {
        fieldMapSfixed64Sfixed64114_ = fieldMapSfixed64Sfixed64114_.mutableCopy();
      }
      return fieldMapSfixed64Sfixed64114_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64Sfixed64114Count() {
      return internalGetFieldMapSfixed64Sfixed64114().size();
    }
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64Sfixed64114(
        long key) {
      
      return internalGetFieldMapSfixed64Sfixed64114().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed64Sfixed64114Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Sfixed64114() {
      return getFieldMapSfixed64Sfixed64114Map();
    }
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Sfixed64114Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed64Sfixed64114());
    }
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed64Sfixed64114OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSfixed64Sfixed64114();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed64Sfixed64114OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSfixed64Sfixed64114();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapSfixed64Sfixed64114Map() {
      return internalGetMutableFieldMapSfixed64Sfixed64114();
    }

    public static final int FIELD_MAP_SFIXED64_SINT32_115_FIELD_NUMBER = 115;
    private static final class FieldMapSfixed64Sint32115DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapSfixed64Sint32115_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapSfixed64Sint32115() {
      return fieldMapSfixed64Sint32115_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapSfixed64Sint32115() {
      if (!fieldMapSfixed64Sint32115_.isMutable()) {
        fieldMapSfixed64Sint32115_ = fieldMapSfixed64Sint32115_.mutableCopy();
      }
      return fieldMapSfixed64Sint32115_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64Sint32115Count() {
      return internalGetFieldMapSfixed64Sint32115().size();
    }
    /**
     * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64Sint32115(
        long key) {
      
      return internalGetFieldMapSfixed64Sint32115().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed64Sint32115Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Sint32115() {
      return getFieldMapSfixed64Sint32115Map();
    }
    /**
     * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Sint32115Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed64Sint32115());
    }
    /**
     * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed64Sint32115OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSfixed64Sint32115();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed64Sint32115OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSfixed64Sint32115();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapSfixed64Sint32115Map() {
      return internalGetMutableFieldMapSfixed64Sint32115();
    }

    public static final int FIELD_MAP_SFIXED64_SINT64_116_FIELD_NUMBER = 116;
    private static final class FieldMapSfixed64Sint64116DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapSfixed64Sint64116_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapSfixed64Sint64116() {
      return fieldMapSfixed64Sint64116_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapSfixed64Sint64116() {
      if (!fieldMapSfixed64Sint64116_.isMutable()) {
        fieldMapSfixed64Sint64116_ = fieldMapSfixed64Sint64116_.mutableCopy();
      }
      return fieldMapSfixed64Sint64116_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64Sint64116Count() {
      return internalGetFieldMapSfixed64Sint64116().size();
    }
    /**
     * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64Sint64116(
        long key) {
      
      return internalGetFieldMapSfixed64Sint64116().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed64Sint64116Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Sint64116() {
      return getFieldMapSfixed64Sint64116Map();
    }
    /**
     * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Sint64116Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed64Sint64116());
    }
    /**
     * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed64Sint64116OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSfixed64Sint64116();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed64Sint64116OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSfixed64Sint64116();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapSfixed64Sint64116Map() {
      return internalGetMutableFieldMapSfixed64Sint64116();
    }

    public static final int FIELD_MAP_SFIXED64_STRING_117_FIELD_NUMBER = 117;
    private static final class FieldMapSfixed64String117DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.String> fieldMapSfixed64String117_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.String>
    internalGetFieldMapSfixed64String117() {
      return fieldMapSfixed64String117_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.String>
    internalGetMutableFieldMapSfixed64String117() {
      if (!fieldMapSfixed64String117_.isMutable()) {
        fieldMapSfixed64String117_ = fieldMapSfixed64String117_.mutableCopy();
      }
      return fieldMapSfixed64String117_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64String117Count() {
      return internalGetFieldMapSfixed64String117().size();
    }
    /**
     * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64String117(
        long key) {
      
      return internalGetFieldMapSfixed64String117().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed64String117Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.String> getFieldMapSfixed64String117() {
      return getFieldMapSfixed64String117Map();
    }
    /**
     * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.String> getFieldMapSfixed64String117Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed64String117());
    }
    /**
     * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapSfixed64String117OrDefault(
        long key,
        java.lang.String defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.String> map =
          internalGetFieldMapSfixed64String117();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapSfixed64String117OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.String> map =
          internalGetFieldMapSfixed64String117();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.String>
    getMutableFieldMapSfixed64String117Map() {
      return internalGetMutableFieldMapSfixed64String117();
    }

    public static final int FIELD_MAP_SFIXED64_UINT32_118_FIELD_NUMBER = 118;
    private static final class FieldMapSfixed64Uint32118DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapSfixed64Uint32118_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapSfixed64Uint32118() {
      return fieldMapSfixed64Uint32118_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapSfixed64Uint32118() {
      if (!fieldMapSfixed64Uint32118_.isMutable()) {
        fieldMapSfixed64Uint32118_ = fieldMapSfixed64Uint32118_.mutableCopy();
      }
      return fieldMapSfixed64Uint32118_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64Uint32118Count() {
      return internalGetFieldMapSfixed64Uint32118().size();
    }
    /**
     * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64Uint32118(
        long key) {
      
      return internalGetFieldMapSfixed64Uint32118().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed64Uint32118Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Uint32118() {
      return getFieldMapSfixed64Uint32118Map();
    }
    /**
     * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Uint32118Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed64Uint32118());
    }
    /**
     * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed64Uint32118OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSfixed64Uint32118();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
     */
    @java.lang.Override

    public int getFieldMapSfixed64Uint32118OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSfixed64Uint32118();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapSfixed64Uint32118Map() {
      return internalGetMutableFieldMapSfixed64Uint32118();
    }

    public static final int FIELD_MAP_SFIXED64_UINT64_119_FIELD_NUMBER = 119;
    private static final class FieldMapSfixed64Uint64119DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapSfixed64Uint64119_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapSfixed64Uint64119() {
      return fieldMapSfixed64Uint64119_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapSfixed64Uint64119() {
      if (!fieldMapSfixed64Uint64119_.isMutable()) {
        fieldMapSfixed64Uint64119_ = fieldMapSfixed64Uint64119_.mutableCopy();
      }
      return fieldMapSfixed64Uint64119_;
    }
    @java.lang.Override

    public int getFieldMapSfixed64Uint64119Count() {
      return internalGetFieldMapSfixed64Uint64119().size();
    }
    /**
     * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSfixed64Uint64119(
        long key) {
      
      return internalGetFieldMapSfixed64Uint64119().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSfixed64Uint64119Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Uint64119() {
      return getFieldMapSfixed64Uint64119Map();
    }
    /**
     * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Uint64119Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSfixed64Uint64119());
    }
    /**
     * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed64Uint64119OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSfixed64Uint64119();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
     */
    @java.lang.Override

    public long getFieldMapSfixed64Uint64119OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSfixed64Uint64119();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapSfixed64Uint64119Map() {
      return internalGetMutableFieldMapSfixed64Uint64119();
    }

    public static final int FIELD_MAP_SINT32_BOOL_120_FIELD_NUMBER = 120;
    private static final class FieldMapSint32Bool120DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Boolean> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Boolean>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Boolean> fieldMapSint32Bool120_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Boolean>
    internalGetFieldMapSint32Bool120() {
      return fieldMapSint32Bool120_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Boolean>
    internalGetMutableFieldMapSint32Bool120() {
      if (!fieldMapSint32Bool120_.isMutable()) {
        fieldMapSint32Bool120_ = fieldMapSint32Bool120_.mutableCopy();
      }
      return fieldMapSint32Bool120_;
    }
    @java.lang.Override

    public int getFieldMapSint32Bool120Count() {
      return internalGetFieldMapSint32Bool120().size();
    }
    /**
     * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32Bool120(
        int key) {
      
      return internalGetFieldMapSint32Bool120().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint32Bool120Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapSint32Bool120() {
      return getFieldMapSint32Bool120Map();
    }
    /**
     * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapSint32Bool120Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint32Bool120());
    }
    /**
     * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
     */
    @java.lang.Override

    public boolean getFieldMapSint32Bool120OrDefault(
        int key,
        boolean defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Boolean> map =
          internalGetFieldMapSint32Bool120();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
     */
    @java.lang.Override

    public boolean getFieldMapSint32Bool120OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Boolean> map =
          internalGetFieldMapSint32Bool120();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Boolean>
    getMutableFieldMapSint32Bool120Map() {
      return internalGetMutableFieldMapSint32Bool120();
    }

    public static final int FIELD_MAP_SINT32_BYTES_121_FIELD_NUMBER = 121;
    private static final class FieldMapSint32Bytes121DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, com.google.protobuf.ByteString> fieldMapSint32Bytes121_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.ByteString>
    internalGetFieldMapSint32Bytes121() {
      return fieldMapSint32Bytes121_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.ByteString>
    internalGetMutableFieldMapSint32Bytes121() {
      if (!fieldMapSint32Bytes121_.isMutable()) {
        fieldMapSint32Bytes121_ = fieldMapSint32Bytes121_.mutableCopy();
      }
      return fieldMapSint32Bytes121_;
    }
    @java.lang.Override

    public int getFieldMapSint32Bytes121Count() {
      return internalGetFieldMapSint32Bytes121().size();
    }
    /**
     * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32Bytes121(
        int key) {
      
      return internalGetFieldMapSint32Bytes121().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint32Bytes121Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapSint32Bytes121() {
      return getFieldMapSint32Bytes121Map();
    }
    /**
     * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapSint32Bytes121Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint32Bytes121());
    }
    /**
     * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapSint32Bytes121OrDefault(
        int key,
        com.google.protobuf.ByteString defaultValue) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
          internalGetFieldMapSint32Bytes121();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapSint32Bytes121OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
          internalGetFieldMapSint32Bytes121();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getMutableFieldMapSint32Bytes121Map() {
      return internalGetMutableFieldMapSint32Bytes121();
    }

    public static final int FIELD_MAP_SINT32_DOUBLE_122_FIELD_NUMBER = 122;
    private static final class FieldMapSint32Double122DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Double>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Double> fieldMapSint32Double122_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Double>
    internalGetFieldMapSint32Double122() {
      return fieldMapSint32Double122_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Double>
    internalGetMutableFieldMapSint32Double122() {
      if (!fieldMapSint32Double122_.isMutable()) {
        fieldMapSint32Double122_ = fieldMapSint32Double122_.mutableCopy();
      }
      return fieldMapSint32Double122_;
    }
    @java.lang.Override

    public int getFieldMapSint32Double122Count() {
      return internalGetFieldMapSint32Double122().size();
    }
    /**
     * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32Double122(
        int key) {
      
      return internalGetFieldMapSint32Double122().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint32Double122Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapSint32Double122() {
      return getFieldMapSint32Double122Map();
    }
    /**
     * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapSint32Double122Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint32Double122());
    }
    /**
     * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
     */
    @java.lang.Override

    public double getFieldMapSint32Double122OrDefault(
        int key,
        double defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Double> map =
          internalGetFieldMapSint32Double122();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
     */
    @java.lang.Override

    public double getFieldMapSint32Double122OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Double> map =
          internalGetFieldMapSint32Double122();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Double>
    getMutableFieldMapSint32Double122Map() {
      return internalGetMutableFieldMapSint32Double122();
    }

    public static final int FIELD_MAP_SINT32_ENUM_123_FIELD_NUMBER = 123;
    private static final class FieldMapSint32Enum123DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapSint32Enum123_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapSint32Enum123() {
      return fieldMapSint32Enum123_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapSint32Enum123() {
      if (!fieldMapSint32Enum123_.isMutable()) {
        fieldMapSint32Enum123_ = fieldMapSint32Enum123_.mutableCopy();
      }
      return fieldMapSint32Enum123_;
    }
    @java.lang.Override

    public int getFieldMapSint32Enum123Count() {
      return internalGetFieldMapSint32Enum123().size();
    }
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32Enum123(
        int key) {
      
      return internalGetFieldMapSint32Enum123().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> fieldMapSint32Enum123ValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetValueMap(),
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO);
    /**
     * Use {@link #getFieldMapSint32Enum123Map()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapSint32Enum123() {
      return getFieldMapSint32Enum123Map();
    }
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapSint32Enum123Map() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
                internalGetFieldMapSint32Enum123(),
                fieldMapSint32Enum123ValueConverter));
    }
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSint32Enum123OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSint32Enum123();
      return map.containsKey(key)
             ? fieldMapSint32Enum123ValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSint32Enum123OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSint32Enum123();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return fieldMapSint32Enum123ValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getMutableFieldMapSint32Enum123Map() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
              internalGetMutableFieldMapSint32Enum123(),
              fieldMapSint32Enum123ValueConverter);
    }

    public static final int FIELD_MAP_SINT32_FIXED32_124_FIELD_NUMBER = 124;
    private static final class FieldMapSint32Fixed32124DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapSint32Fixed32124_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapSint32Fixed32124() {
      return fieldMapSint32Fixed32124_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapSint32Fixed32124() {
      if (!fieldMapSint32Fixed32124_.isMutable()) {
        fieldMapSint32Fixed32124_ = fieldMapSint32Fixed32124_.mutableCopy();
      }
      return fieldMapSint32Fixed32124_;
    }
    @java.lang.Override

    public int getFieldMapSint32Fixed32124Count() {
      return internalGetFieldMapSint32Fixed32124().size();
    }
    /**
     * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32Fixed32124(
        int key) {
      
      return internalGetFieldMapSint32Fixed32124().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint32Fixed32124Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Fixed32124() {
      return getFieldMapSint32Fixed32124Map();
    }
    /**
     * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Fixed32124Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint32Fixed32124());
    }
    /**
     * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
     */
    @java.lang.Override

    public int getFieldMapSint32Fixed32124OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSint32Fixed32124();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
     */
    @java.lang.Override

    public int getFieldMapSint32Fixed32124OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSint32Fixed32124();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapSint32Fixed32124Map() {
      return internalGetMutableFieldMapSint32Fixed32124();
    }

    public static final int FIELD_MAP_SINT32_FIXED64_125_FIELD_NUMBER = 125;
    private static final class FieldMapSint32Fixed64125DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapSint32Fixed64125_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapSint32Fixed64125() {
      return fieldMapSint32Fixed64125_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapSint32Fixed64125() {
      if (!fieldMapSint32Fixed64125_.isMutable()) {
        fieldMapSint32Fixed64125_ = fieldMapSint32Fixed64125_.mutableCopy();
      }
      return fieldMapSint32Fixed64125_;
    }
    @java.lang.Override

    public int getFieldMapSint32Fixed64125Count() {
      return internalGetFieldMapSint32Fixed64125().size();
    }
    /**
     * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32Fixed64125(
        int key) {
      
      return internalGetFieldMapSint32Fixed64125().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint32Fixed64125Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Fixed64125() {
      return getFieldMapSint32Fixed64125Map();
    }
    /**
     * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Fixed64125Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint32Fixed64125());
    }
    /**
     * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
     */
    @java.lang.Override

    public long getFieldMapSint32Fixed64125OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSint32Fixed64125();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
     */
    @java.lang.Override

    public long getFieldMapSint32Fixed64125OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSint32Fixed64125();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapSint32Fixed64125Map() {
      return internalGetMutableFieldMapSint32Fixed64125();
    }

    public static final int FIELD_MAP_SINT32_FLOAT_126_FIELD_NUMBER = 126;
    private static final class FieldMapSint32Float126DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Float> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Float>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FLOAT,
                  0F);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Float> fieldMapSint32Float126_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Float>
    internalGetFieldMapSint32Float126() {
      return fieldMapSint32Float126_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Float>
    internalGetMutableFieldMapSint32Float126() {
      if (!fieldMapSint32Float126_.isMutable()) {
        fieldMapSint32Float126_ = fieldMapSint32Float126_.mutableCopy();
      }
      return fieldMapSint32Float126_;
    }
    @java.lang.Override

    public int getFieldMapSint32Float126Count() {
      return internalGetFieldMapSint32Float126().size();
    }
    /**
     * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32Float126(
        int key) {
      
      return internalGetFieldMapSint32Float126().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint32Float126Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapSint32Float126() {
      return getFieldMapSint32Float126Map();
    }
    /**
     * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapSint32Float126Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint32Float126());
    }
    /**
     * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
     */
    @java.lang.Override

    public float getFieldMapSint32Float126OrDefault(
        int key,
        float defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Float> map =
          internalGetFieldMapSint32Float126();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
     */
    @java.lang.Override

    public float getFieldMapSint32Float126OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Float> map =
          internalGetFieldMapSint32Float126();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Float>
    getMutableFieldMapSint32Float126Map() {
      return internalGetMutableFieldMapSint32Float126();
    }

    public static final int FIELD_MAP_SINT32_INT32_127_FIELD_NUMBER = 127;
    private static final class FieldMapSint32Int32127DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapSint32Int32127_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapSint32Int32127() {
      return fieldMapSint32Int32127_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapSint32Int32127() {
      if (!fieldMapSint32Int32127_.isMutable()) {
        fieldMapSint32Int32127_ = fieldMapSint32Int32127_.mutableCopy();
      }
      return fieldMapSint32Int32127_;
    }
    @java.lang.Override

    public int getFieldMapSint32Int32127Count() {
      return internalGetFieldMapSint32Int32127().size();
    }
    /**
     * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32Int32127(
        int key) {
      
      return internalGetFieldMapSint32Int32127().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint32Int32127Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Int32127() {
      return getFieldMapSint32Int32127Map();
    }
    /**
     * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Int32127Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint32Int32127());
    }
    /**
     * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
     */
    @java.lang.Override

    public int getFieldMapSint32Int32127OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSint32Int32127();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
     */
    @java.lang.Override

    public int getFieldMapSint32Int32127OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSint32Int32127();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapSint32Int32127Map() {
      return internalGetMutableFieldMapSint32Int32127();
    }

    public static final int FIELD_MAP_SINT32_INT64_128_FIELD_NUMBER = 128;
    private static final class FieldMapSint32Int64128DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapSint32Int64128_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapSint32Int64128() {
      return fieldMapSint32Int64128_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapSint32Int64128() {
      if (!fieldMapSint32Int64128_.isMutable()) {
        fieldMapSint32Int64128_ = fieldMapSint32Int64128_.mutableCopy();
      }
      return fieldMapSint32Int64128_;
    }
    @java.lang.Override

    public int getFieldMapSint32Int64128Count() {
      return internalGetFieldMapSint32Int64128().size();
    }
    /**
     * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32Int64128(
        int key) {
      
      return internalGetFieldMapSint32Int64128().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint32Int64128Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Int64128() {
      return getFieldMapSint32Int64128Map();
    }
    /**
     * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Int64128Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint32Int64128());
    }
    /**
     * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
     */
    @java.lang.Override

    public long getFieldMapSint32Int64128OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSint32Int64128();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
     */
    @java.lang.Override

    public long getFieldMapSint32Int64128OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSint32Int64128();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapSint32Int64128Map() {
      return internalGetMutableFieldMapSint32Int64128();
    }

    public static final int FIELD_MAP_SINT32_MESSAGE_129_FIELD_NUMBER = 129;
    private static final class FieldMapSint32Message129DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> fieldMapSint32Message129_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetFieldMapSint32Message129() {
      return fieldMapSint32Message129_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetMutableFieldMapSint32Message129() {
      if (!fieldMapSint32Message129_.isMutable()) {
        fieldMapSint32Message129_ = fieldMapSint32Message129_.mutableCopy();
      }
      return fieldMapSint32Message129_;
    }
    @java.lang.Override

    public int getFieldMapSint32Message129Count() {
      return internalGetFieldMapSint32Message129().size();
    }
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32Message129(
        int key) {
      
      return internalGetFieldMapSint32Message129().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint32Message129Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapSint32Message129() {
      return getFieldMapSint32Message129Map();
    }
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapSint32Message129Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint32Message129());
    }
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSint32Message129OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapSint32Message129();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSint32Message129OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapSint32Message129();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getMutableFieldMapSint32Message129Map() {
      return internalGetMutableFieldMapSint32Message129();
    }

    public static final int FIELD_MAP_SINT32_SFIXED32_130_FIELD_NUMBER = 130;
    private static final class FieldMapSint32Sfixed32130DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapSint32Sfixed32130_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapSint32Sfixed32130() {
      return fieldMapSint32Sfixed32130_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapSint32Sfixed32130() {
      if (!fieldMapSint32Sfixed32130_.isMutable()) {
        fieldMapSint32Sfixed32130_ = fieldMapSint32Sfixed32130_.mutableCopy();
      }
      return fieldMapSint32Sfixed32130_;
    }
    @java.lang.Override

    public int getFieldMapSint32Sfixed32130Count() {
      return internalGetFieldMapSint32Sfixed32130().size();
    }
    /**
     * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32Sfixed32130(
        int key) {
      
      return internalGetFieldMapSint32Sfixed32130().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint32Sfixed32130Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Sfixed32130() {
      return getFieldMapSint32Sfixed32130Map();
    }
    /**
     * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Sfixed32130Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint32Sfixed32130());
    }
    /**
     * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
     */
    @java.lang.Override

    public int getFieldMapSint32Sfixed32130OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSint32Sfixed32130();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
     */
    @java.lang.Override

    public int getFieldMapSint32Sfixed32130OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSint32Sfixed32130();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapSint32Sfixed32130Map() {
      return internalGetMutableFieldMapSint32Sfixed32130();
    }

    public static final int FIELD_MAP_SINT32_SFIXED64_131_FIELD_NUMBER = 131;
    private static final class FieldMapSint32Sfixed64131DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapSint32Sfixed64131_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapSint32Sfixed64131() {
      return fieldMapSint32Sfixed64131_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapSint32Sfixed64131() {
      if (!fieldMapSint32Sfixed64131_.isMutable()) {
        fieldMapSint32Sfixed64131_ = fieldMapSint32Sfixed64131_.mutableCopy();
      }
      return fieldMapSint32Sfixed64131_;
    }
    @java.lang.Override

    public int getFieldMapSint32Sfixed64131Count() {
      return internalGetFieldMapSint32Sfixed64131().size();
    }
    /**
     * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32Sfixed64131(
        int key) {
      
      return internalGetFieldMapSint32Sfixed64131().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint32Sfixed64131Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Sfixed64131() {
      return getFieldMapSint32Sfixed64131Map();
    }
    /**
     * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Sfixed64131Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint32Sfixed64131());
    }
    /**
     * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
     */
    @java.lang.Override

    public long getFieldMapSint32Sfixed64131OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSint32Sfixed64131();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
     */
    @java.lang.Override

    public long getFieldMapSint32Sfixed64131OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSint32Sfixed64131();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapSint32Sfixed64131Map() {
      return internalGetMutableFieldMapSint32Sfixed64131();
    }

    public static final int FIELD_MAP_SINT32_SINT32_132_FIELD_NUMBER = 132;
    private static final class FieldMapSint32Sint32132DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapSint32Sint32132_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapSint32Sint32132() {
      return fieldMapSint32Sint32132_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapSint32Sint32132() {
      if (!fieldMapSint32Sint32132_.isMutable()) {
        fieldMapSint32Sint32132_ = fieldMapSint32Sint32132_.mutableCopy();
      }
      return fieldMapSint32Sint32132_;
    }
    @java.lang.Override

    public int getFieldMapSint32Sint32132Count() {
      return internalGetFieldMapSint32Sint32132().size();
    }
    /**
     * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32Sint32132(
        int key) {
      
      return internalGetFieldMapSint32Sint32132().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint32Sint32132Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Sint32132() {
      return getFieldMapSint32Sint32132Map();
    }
    /**
     * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Sint32132Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint32Sint32132());
    }
    /**
     * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
     */
    @java.lang.Override

    public int getFieldMapSint32Sint32132OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSint32Sint32132();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
     */
    @java.lang.Override

    public int getFieldMapSint32Sint32132OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSint32Sint32132();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapSint32Sint32132Map() {
      return internalGetMutableFieldMapSint32Sint32132();
    }

    public static final int FIELD_MAP_SINT32_SINT64_133_FIELD_NUMBER = 133;
    private static final class FieldMapSint32Sint64133DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapSint32Sint64133_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapSint32Sint64133() {
      return fieldMapSint32Sint64133_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapSint32Sint64133() {
      if (!fieldMapSint32Sint64133_.isMutable()) {
        fieldMapSint32Sint64133_ = fieldMapSint32Sint64133_.mutableCopy();
      }
      return fieldMapSint32Sint64133_;
    }
    @java.lang.Override

    public int getFieldMapSint32Sint64133Count() {
      return internalGetFieldMapSint32Sint64133().size();
    }
    /**
     * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32Sint64133(
        int key) {
      
      return internalGetFieldMapSint32Sint64133().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint32Sint64133Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Sint64133() {
      return getFieldMapSint32Sint64133Map();
    }
    /**
     * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Sint64133Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint32Sint64133());
    }
    /**
     * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
     */
    @java.lang.Override

    public long getFieldMapSint32Sint64133OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSint32Sint64133();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
     */
    @java.lang.Override

    public long getFieldMapSint32Sint64133OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSint32Sint64133();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapSint32Sint64133Map() {
      return internalGetMutableFieldMapSint32Sint64133();
    }

    public static final int FIELD_MAP_SINT32_STRING_134_FIELD_NUMBER = 134;
    private static final class FieldMapSint32String134DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.String> fieldMapSint32String134_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.String>
    internalGetFieldMapSint32String134() {
      return fieldMapSint32String134_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.String>
    internalGetMutableFieldMapSint32String134() {
      if (!fieldMapSint32String134_.isMutable()) {
        fieldMapSint32String134_ = fieldMapSint32String134_.mutableCopy();
      }
      return fieldMapSint32String134_;
    }
    @java.lang.Override

    public int getFieldMapSint32String134Count() {
      return internalGetFieldMapSint32String134().size();
    }
    /**
     * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32String134(
        int key) {
      
      return internalGetFieldMapSint32String134().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint32String134Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapSint32String134() {
      return getFieldMapSint32String134Map();
    }
    /**
     * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapSint32String134Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint32String134());
    }
    /**
     * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapSint32String134OrDefault(
        int key,
        java.lang.String defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.String> map =
          internalGetFieldMapSint32String134();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapSint32String134OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.String> map =
          internalGetFieldMapSint32String134();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.String>
    getMutableFieldMapSint32String134Map() {
      return internalGetMutableFieldMapSint32String134();
    }

    public static final int FIELD_MAP_SINT32_UINT32_135_FIELD_NUMBER = 135;
    private static final class FieldMapSint32Uint32135DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapSint32Uint32135_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapSint32Uint32135() {
      return fieldMapSint32Uint32135_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapSint32Uint32135() {
      if (!fieldMapSint32Uint32135_.isMutable()) {
        fieldMapSint32Uint32135_ = fieldMapSint32Uint32135_.mutableCopy();
      }
      return fieldMapSint32Uint32135_;
    }
    @java.lang.Override

    public int getFieldMapSint32Uint32135Count() {
      return internalGetFieldMapSint32Uint32135().size();
    }
    /**
     * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32Uint32135(
        int key) {
      
      return internalGetFieldMapSint32Uint32135().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint32Uint32135Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Uint32135() {
      return getFieldMapSint32Uint32135Map();
    }
    /**
     * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Uint32135Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint32Uint32135());
    }
    /**
     * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
     */
    @java.lang.Override

    public int getFieldMapSint32Uint32135OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSint32Uint32135();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
     */
    @java.lang.Override

    public int getFieldMapSint32Uint32135OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapSint32Uint32135();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapSint32Uint32135Map() {
      return internalGetMutableFieldMapSint32Uint32135();
    }

    public static final int FIELD_MAP_SINT32_UINT64_136_FIELD_NUMBER = 136;
    private static final class FieldMapSint32Uint64136DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapSint32Uint64136_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapSint32Uint64136() {
      return fieldMapSint32Uint64136_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapSint32Uint64136() {
      if (!fieldMapSint32Uint64136_.isMutable()) {
        fieldMapSint32Uint64136_ = fieldMapSint32Uint64136_.mutableCopy();
      }
      return fieldMapSint32Uint64136_;
    }
    @java.lang.Override

    public int getFieldMapSint32Uint64136Count() {
      return internalGetFieldMapSint32Uint64136().size();
    }
    /**
     * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint32Uint64136(
        int key) {
      
      return internalGetFieldMapSint32Uint64136().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint32Uint64136Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Uint64136() {
      return getFieldMapSint32Uint64136Map();
    }
    /**
     * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Uint64136Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint32Uint64136());
    }
    /**
     * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
     */
    @java.lang.Override

    public long getFieldMapSint32Uint64136OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSint32Uint64136();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
     */
    @java.lang.Override

    public long getFieldMapSint32Uint64136OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapSint32Uint64136();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapSint32Uint64136Map() {
      return internalGetMutableFieldMapSint32Uint64136();
    }

    public static final int FIELD_MAP_SINT64_BOOL_137_FIELD_NUMBER = 137;
    private static final class FieldMapSint64Bool137DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Boolean> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Boolean>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Boolean> fieldMapSint64Bool137_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Boolean>
    internalGetFieldMapSint64Bool137() {
      return fieldMapSint64Bool137_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Boolean>
    internalGetMutableFieldMapSint64Bool137() {
      if (!fieldMapSint64Bool137_.isMutable()) {
        fieldMapSint64Bool137_ = fieldMapSint64Bool137_.mutableCopy();
      }
      return fieldMapSint64Bool137_;
    }
    @java.lang.Override

    public int getFieldMapSint64Bool137Count() {
      return internalGetFieldMapSint64Bool137().size();
    }
    /**
     * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64Bool137(
        long key) {
      
      return internalGetFieldMapSint64Bool137().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint64Bool137Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapSint64Bool137() {
      return getFieldMapSint64Bool137Map();
    }
    /**
     * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapSint64Bool137Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint64Bool137());
    }
    /**
     * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
     */
    @java.lang.Override

    public boolean getFieldMapSint64Bool137OrDefault(
        long key,
        boolean defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Boolean> map =
          internalGetFieldMapSint64Bool137();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
     */
    @java.lang.Override

    public boolean getFieldMapSint64Bool137OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Boolean> map =
          internalGetFieldMapSint64Bool137();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Boolean>
    getMutableFieldMapSint64Bool137Map() {
      return internalGetMutableFieldMapSint64Bool137();
    }

    public static final int FIELD_MAP_SINT64_BYTES_138_FIELD_NUMBER = 138;
    private static final class FieldMapSint64Bytes138DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, com.google.protobuf.ByteString> fieldMapSint64Bytes138_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.ByteString>
    internalGetFieldMapSint64Bytes138() {
      return fieldMapSint64Bytes138_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.ByteString>
    internalGetMutableFieldMapSint64Bytes138() {
      if (!fieldMapSint64Bytes138_.isMutable()) {
        fieldMapSint64Bytes138_ = fieldMapSint64Bytes138_.mutableCopy();
      }
      return fieldMapSint64Bytes138_;
    }
    @java.lang.Override

    public int getFieldMapSint64Bytes138Count() {
      return internalGetFieldMapSint64Bytes138().size();
    }
    /**
     * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64Bytes138(
        long key) {
      
      return internalGetFieldMapSint64Bytes138().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint64Bytes138Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapSint64Bytes138() {
      return getFieldMapSint64Bytes138Map();
    }
    /**
     * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapSint64Bytes138Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint64Bytes138());
    }
    /**
     * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapSint64Bytes138OrDefault(
        long key,
        com.google.protobuf.ByteString defaultValue) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
          internalGetFieldMapSint64Bytes138();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapSint64Bytes138OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
          internalGetFieldMapSint64Bytes138();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
     */
    private java.util.Map<java.lang.Long, com.google.protobuf.ByteString>
    getMutableFieldMapSint64Bytes138Map() {
      return internalGetMutableFieldMapSint64Bytes138();
    }

    public static final int FIELD_MAP_SINT64_DOUBLE_139_FIELD_NUMBER = 139;
    private static final class FieldMapSint64Double139DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Double>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Double> fieldMapSint64Double139_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Double>
    internalGetFieldMapSint64Double139() {
      return fieldMapSint64Double139_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Double>
    internalGetMutableFieldMapSint64Double139() {
      if (!fieldMapSint64Double139_.isMutable()) {
        fieldMapSint64Double139_ = fieldMapSint64Double139_.mutableCopy();
      }
      return fieldMapSint64Double139_;
    }
    @java.lang.Override

    public int getFieldMapSint64Double139Count() {
      return internalGetFieldMapSint64Double139().size();
    }
    /**
     * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64Double139(
        long key) {
      
      return internalGetFieldMapSint64Double139().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint64Double139Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapSint64Double139() {
      return getFieldMapSint64Double139Map();
    }
    /**
     * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapSint64Double139Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint64Double139());
    }
    /**
     * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
     */
    @java.lang.Override

    public double getFieldMapSint64Double139OrDefault(
        long key,
        double defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Double> map =
          internalGetFieldMapSint64Double139();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
     */
    @java.lang.Override

    public double getFieldMapSint64Double139OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Double> map =
          internalGetFieldMapSint64Double139();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Double>
    getMutableFieldMapSint64Double139Map() {
      return internalGetMutableFieldMapSint64Double139();
    }

    public static final int FIELD_MAP_SINT64_ENUM_140_FIELD_NUMBER = 140;
    private static final class FieldMapSint64Enum140DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapSint64Enum140_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapSint64Enum140() {
      return fieldMapSint64Enum140_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapSint64Enum140() {
      if (!fieldMapSint64Enum140_.isMutable()) {
        fieldMapSint64Enum140_ = fieldMapSint64Enum140_.mutableCopy();
      }
      return fieldMapSint64Enum140_;
    }
    @java.lang.Override

    public int getFieldMapSint64Enum140Count() {
      return internalGetFieldMapSint64Enum140().size();
    }
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64Enum140(
        long key) {
      
      return internalGetFieldMapSint64Enum140().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> fieldMapSint64Enum140ValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetValueMap(),
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO);
    /**
     * Use {@link #getFieldMapSint64Enum140Map()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapSint64Enum140() {
      return getFieldMapSint64Enum140Map();
    }
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapSint64Enum140Map() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
                internalGetFieldMapSint64Enum140(),
                fieldMapSint64Enum140ValueConverter));
    }
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSint64Enum140OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSint64Enum140();
      return map.containsKey(key)
             ? fieldMapSint64Enum140ValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSint64Enum140OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSint64Enum140();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return fieldMapSint64Enum140ValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
     */
    private java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getMutableFieldMapSint64Enum140Map() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
              internalGetMutableFieldMapSint64Enum140(),
              fieldMapSint64Enum140ValueConverter);
    }

    public static final int FIELD_MAP_SINT64_FIXED32_141_FIELD_NUMBER = 141;
    private static final class FieldMapSint64Fixed32141DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapSint64Fixed32141_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapSint64Fixed32141() {
      return fieldMapSint64Fixed32141_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapSint64Fixed32141() {
      if (!fieldMapSint64Fixed32141_.isMutable()) {
        fieldMapSint64Fixed32141_ = fieldMapSint64Fixed32141_.mutableCopy();
      }
      return fieldMapSint64Fixed32141_;
    }
    @java.lang.Override

    public int getFieldMapSint64Fixed32141Count() {
      return internalGetFieldMapSint64Fixed32141().size();
    }
    /**
     * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64Fixed32141(
        long key) {
      
      return internalGetFieldMapSint64Fixed32141().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint64Fixed32141Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Fixed32141() {
      return getFieldMapSint64Fixed32141Map();
    }
    /**
     * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Fixed32141Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint64Fixed32141());
    }
    /**
     * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
     */
    @java.lang.Override

    public int getFieldMapSint64Fixed32141OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSint64Fixed32141();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
     */
    @java.lang.Override

    public int getFieldMapSint64Fixed32141OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSint64Fixed32141();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapSint64Fixed32141Map() {
      return internalGetMutableFieldMapSint64Fixed32141();
    }

    public static final int FIELD_MAP_SINT64_FIXED64_142_FIELD_NUMBER = 142;
    private static final class FieldMapSint64Fixed64142DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapSint64Fixed64142_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapSint64Fixed64142() {
      return fieldMapSint64Fixed64142_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapSint64Fixed64142() {
      if (!fieldMapSint64Fixed64142_.isMutable()) {
        fieldMapSint64Fixed64142_ = fieldMapSint64Fixed64142_.mutableCopy();
      }
      return fieldMapSint64Fixed64142_;
    }
    @java.lang.Override

    public int getFieldMapSint64Fixed64142Count() {
      return internalGetFieldMapSint64Fixed64142().size();
    }
    /**
     * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64Fixed64142(
        long key) {
      
      return internalGetFieldMapSint64Fixed64142().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint64Fixed64142Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Fixed64142() {
      return getFieldMapSint64Fixed64142Map();
    }
    /**
     * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Fixed64142Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint64Fixed64142());
    }
    /**
     * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
     */
    @java.lang.Override

    public long getFieldMapSint64Fixed64142OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSint64Fixed64142();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
     */
    @java.lang.Override

    public long getFieldMapSint64Fixed64142OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSint64Fixed64142();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapSint64Fixed64142Map() {
      return internalGetMutableFieldMapSint64Fixed64142();
    }

    public static final int FIELD_MAP_SINT64_FLOAT_143_FIELD_NUMBER = 143;
    private static final class FieldMapSint64Float143DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Float> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Float>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FLOAT,
                  0F);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Float> fieldMapSint64Float143_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Float>
    internalGetFieldMapSint64Float143() {
      return fieldMapSint64Float143_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Float>
    internalGetMutableFieldMapSint64Float143() {
      if (!fieldMapSint64Float143_.isMutable()) {
        fieldMapSint64Float143_ = fieldMapSint64Float143_.mutableCopy();
      }
      return fieldMapSint64Float143_;
    }
    @java.lang.Override

    public int getFieldMapSint64Float143Count() {
      return internalGetFieldMapSint64Float143().size();
    }
    /**
     * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64Float143(
        long key) {
      
      return internalGetFieldMapSint64Float143().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint64Float143Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapSint64Float143() {
      return getFieldMapSint64Float143Map();
    }
    /**
     * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapSint64Float143Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint64Float143());
    }
    /**
     * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
     */
    @java.lang.Override

    public float getFieldMapSint64Float143OrDefault(
        long key,
        float defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Float> map =
          internalGetFieldMapSint64Float143();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
     */
    @java.lang.Override

    public float getFieldMapSint64Float143OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Float> map =
          internalGetFieldMapSint64Float143();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Float>
    getMutableFieldMapSint64Float143Map() {
      return internalGetMutableFieldMapSint64Float143();
    }

    public static final int FIELD_MAP_SINT64_INT32_144_FIELD_NUMBER = 144;
    private static final class FieldMapSint64Int32144DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapSint64Int32144_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapSint64Int32144() {
      return fieldMapSint64Int32144_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapSint64Int32144() {
      if (!fieldMapSint64Int32144_.isMutable()) {
        fieldMapSint64Int32144_ = fieldMapSint64Int32144_.mutableCopy();
      }
      return fieldMapSint64Int32144_;
    }
    @java.lang.Override

    public int getFieldMapSint64Int32144Count() {
      return internalGetFieldMapSint64Int32144().size();
    }
    /**
     * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64Int32144(
        long key) {
      
      return internalGetFieldMapSint64Int32144().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint64Int32144Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Int32144() {
      return getFieldMapSint64Int32144Map();
    }
    /**
     * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Int32144Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint64Int32144());
    }
    /**
     * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
     */
    @java.lang.Override

    public int getFieldMapSint64Int32144OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSint64Int32144();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
     */
    @java.lang.Override

    public int getFieldMapSint64Int32144OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSint64Int32144();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapSint64Int32144Map() {
      return internalGetMutableFieldMapSint64Int32144();
    }

    public static final int FIELD_MAP_SINT64_INT64_145_FIELD_NUMBER = 145;
    private static final class FieldMapSint64Int64145DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapSint64Int64145_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapSint64Int64145() {
      return fieldMapSint64Int64145_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapSint64Int64145() {
      if (!fieldMapSint64Int64145_.isMutable()) {
        fieldMapSint64Int64145_ = fieldMapSint64Int64145_.mutableCopy();
      }
      return fieldMapSint64Int64145_;
    }
    @java.lang.Override

    public int getFieldMapSint64Int64145Count() {
      return internalGetFieldMapSint64Int64145().size();
    }
    /**
     * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64Int64145(
        long key) {
      
      return internalGetFieldMapSint64Int64145().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint64Int64145Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Int64145() {
      return getFieldMapSint64Int64145Map();
    }
    /**
     * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Int64145Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint64Int64145());
    }
    /**
     * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
     */
    @java.lang.Override

    public long getFieldMapSint64Int64145OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSint64Int64145();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
     */
    @java.lang.Override

    public long getFieldMapSint64Int64145OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSint64Int64145();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapSint64Int64145Map() {
      return internalGetMutableFieldMapSint64Int64145();
    }

    public static final int FIELD_MAP_SINT64_MESSAGE_146_FIELD_NUMBER = 146;
    private static final class FieldMapSint64Message146DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> fieldMapSint64Message146_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetFieldMapSint64Message146() {
      return fieldMapSint64Message146_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetMutableFieldMapSint64Message146() {
      if (!fieldMapSint64Message146_.isMutable()) {
        fieldMapSint64Message146_ = fieldMapSint64Message146_.mutableCopy();
      }
      return fieldMapSint64Message146_;
    }
    @java.lang.Override

    public int getFieldMapSint64Message146Count() {
      return internalGetFieldMapSint64Message146().size();
    }
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64Message146(
        long key) {
      
      return internalGetFieldMapSint64Message146().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint64Message146Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapSint64Message146() {
      return getFieldMapSint64Message146Map();
    }
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapSint64Message146Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint64Message146());
    }
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSint64Message146OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapSint64Message146();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSint64Message146OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapSint64Message146();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
     */
    private java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getMutableFieldMapSint64Message146Map() {
      return internalGetMutableFieldMapSint64Message146();
    }

    public static final int FIELD_MAP_SINT64_SFIXED32_147_FIELD_NUMBER = 147;
    private static final class FieldMapSint64Sfixed32147DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapSint64Sfixed32147_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapSint64Sfixed32147() {
      return fieldMapSint64Sfixed32147_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapSint64Sfixed32147() {
      if (!fieldMapSint64Sfixed32147_.isMutable()) {
        fieldMapSint64Sfixed32147_ = fieldMapSint64Sfixed32147_.mutableCopy();
      }
      return fieldMapSint64Sfixed32147_;
    }
    @java.lang.Override

    public int getFieldMapSint64Sfixed32147Count() {
      return internalGetFieldMapSint64Sfixed32147().size();
    }
    /**
     * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64Sfixed32147(
        long key) {
      
      return internalGetFieldMapSint64Sfixed32147().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint64Sfixed32147Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Sfixed32147() {
      return getFieldMapSint64Sfixed32147Map();
    }
    /**
     * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Sfixed32147Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint64Sfixed32147());
    }
    /**
     * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
     */
    @java.lang.Override

    public int getFieldMapSint64Sfixed32147OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSint64Sfixed32147();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
     */
    @java.lang.Override

    public int getFieldMapSint64Sfixed32147OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSint64Sfixed32147();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapSint64Sfixed32147Map() {
      return internalGetMutableFieldMapSint64Sfixed32147();
    }

    public static final int FIELD_MAP_SINT64_SFIXED64_148_FIELD_NUMBER = 148;
    private static final class FieldMapSint64Sfixed64148DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapSint64Sfixed64148_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapSint64Sfixed64148() {
      return fieldMapSint64Sfixed64148_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapSint64Sfixed64148() {
      if (!fieldMapSint64Sfixed64148_.isMutable()) {
        fieldMapSint64Sfixed64148_ = fieldMapSint64Sfixed64148_.mutableCopy();
      }
      return fieldMapSint64Sfixed64148_;
    }
    @java.lang.Override

    public int getFieldMapSint64Sfixed64148Count() {
      return internalGetFieldMapSint64Sfixed64148().size();
    }
    /**
     * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64Sfixed64148(
        long key) {
      
      return internalGetFieldMapSint64Sfixed64148().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint64Sfixed64148Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Sfixed64148() {
      return getFieldMapSint64Sfixed64148Map();
    }
    /**
     * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Sfixed64148Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint64Sfixed64148());
    }
    /**
     * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
     */
    @java.lang.Override

    public long getFieldMapSint64Sfixed64148OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSint64Sfixed64148();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
     */
    @java.lang.Override

    public long getFieldMapSint64Sfixed64148OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSint64Sfixed64148();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapSint64Sfixed64148Map() {
      return internalGetMutableFieldMapSint64Sfixed64148();
    }

    public static final int FIELD_MAP_SINT64_SINT32_149_FIELD_NUMBER = 149;
    private static final class FieldMapSint64Sint32149DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapSint64Sint32149_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapSint64Sint32149() {
      return fieldMapSint64Sint32149_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapSint64Sint32149() {
      if (!fieldMapSint64Sint32149_.isMutable()) {
        fieldMapSint64Sint32149_ = fieldMapSint64Sint32149_.mutableCopy();
      }
      return fieldMapSint64Sint32149_;
    }
    @java.lang.Override

    public int getFieldMapSint64Sint32149Count() {
      return internalGetFieldMapSint64Sint32149().size();
    }
    /**
     * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64Sint32149(
        long key) {
      
      return internalGetFieldMapSint64Sint32149().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint64Sint32149Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Sint32149() {
      return getFieldMapSint64Sint32149Map();
    }
    /**
     * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Sint32149Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint64Sint32149());
    }
    /**
     * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
     */
    @java.lang.Override

    public int getFieldMapSint64Sint32149OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSint64Sint32149();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
     */
    @java.lang.Override

    public int getFieldMapSint64Sint32149OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSint64Sint32149();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapSint64Sint32149Map() {
      return internalGetMutableFieldMapSint64Sint32149();
    }

    public static final int FIELD_MAP_SINT64_SINT64_150_FIELD_NUMBER = 150;
    private static final class FieldMapSint64Sint64150DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapSint64Sint64150_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapSint64Sint64150() {
      return fieldMapSint64Sint64150_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapSint64Sint64150() {
      if (!fieldMapSint64Sint64150_.isMutable()) {
        fieldMapSint64Sint64150_ = fieldMapSint64Sint64150_.mutableCopy();
      }
      return fieldMapSint64Sint64150_;
    }
    @java.lang.Override

    public int getFieldMapSint64Sint64150Count() {
      return internalGetFieldMapSint64Sint64150().size();
    }
    /**
     * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64Sint64150(
        long key) {
      
      return internalGetFieldMapSint64Sint64150().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint64Sint64150Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Sint64150() {
      return getFieldMapSint64Sint64150Map();
    }
    /**
     * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Sint64150Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint64Sint64150());
    }
    /**
     * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
     */
    @java.lang.Override

    public long getFieldMapSint64Sint64150OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSint64Sint64150();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
     */
    @java.lang.Override

    public long getFieldMapSint64Sint64150OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSint64Sint64150();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapSint64Sint64150Map() {
      return internalGetMutableFieldMapSint64Sint64150();
    }

    public static final int FIELD_MAP_SINT64_STRING_151_FIELD_NUMBER = 151;
    private static final class FieldMapSint64String151DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.String> fieldMapSint64String151_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.String>
    internalGetFieldMapSint64String151() {
      return fieldMapSint64String151_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.String>
    internalGetMutableFieldMapSint64String151() {
      if (!fieldMapSint64String151_.isMutable()) {
        fieldMapSint64String151_ = fieldMapSint64String151_.mutableCopy();
      }
      return fieldMapSint64String151_;
    }
    @java.lang.Override

    public int getFieldMapSint64String151Count() {
      return internalGetFieldMapSint64String151().size();
    }
    /**
     * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64String151(
        long key) {
      
      return internalGetFieldMapSint64String151().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint64String151Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.String> getFieldMapSint64String151() {
      return getFieldMapSint64String151Map();
    }
    /**
     * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.String> getFieldMapSint64String151Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint64String151());
    }
    /**
     * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapSint64String151OrDefault(
        long key,
        java.lang.String defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.String> map =
          internalGetFieldMapSint64String151();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapSint64String151OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.String> map =
          internalGetFieldMapSint64String151();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.String>
    getMutableFieldMapSint64String151Map() {
      return internalGetMutableFieldMapSint64String151();
    }

    public static final int FIELD_MAP_SINT64_UINT32_152_FIELD_NUMBER = 152;
    private static final class FieldMapSint64Uint32152DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapSint64Uint32152_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapSint64Uint32152() {
      return fieldMapSint64Uint32152_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapSint64Uint32152() {
      if (!fieldMapSint64Uint32152_.isMutable()) {
        fieldMapSint64Uint32152_ = fieldMapSint64Uint32152_.mutableCopy();
      }
      return fieldMapSint64Uint32152_;
    }
    @java.lang.Override

    public int getFieldMapSint64Uint32152Count() {
      return internalGetFieldMapSint64Uint32152().size();
    }
    /**
     * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64Uint32152(
        long key) {
      
      return internalGetFieldMapSint64Uint32152().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint64Uint32152Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Uint32152() {
      return getFieldMapSint64Uint32152Map();
    }
    /**
     * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Uint32152Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint64Uint32152());
    }
    /**
     * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
     */
    @java.lang.Override

    public int getFieldMapSint64Uint32152OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSint64Uint32152();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
     */
    @java.lang.Override

    public int getFieldMapSint64Uint32152OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapSint64Uint32152();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapSint64Uint32152Map() {
      return internalGetMutableFieldMapSint64Uint32152();
    }

    public static final int FIELD_MAP_SINT64_UINT64_153_FIELD_NUMBER = 153;
    private static final class FieldMapSint64Uint64153DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapSint64Uint64153_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapSint64Uint64153() {
      return fieldMapSint64Uint64153_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapSint64Uint64153() {
      if (!fieldMapSint64Uint64153_.isMutable()) {
        fieldMapSint64Uint64153_ = fieldMapSint64Uint64153_.mutableCopy();
      }
      return fieldMapSint64Uint64153_;
    }
    @java.lang.Override

    public int getFieldMapSint64Uint64153Count() {
      return internalGetFieldMapSint64Uint64153().size();
    }
    /**
     * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapSint64Uint64153(
        long key) {
      
      return internalGetFieldMapSint64Uint64153().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapSint64Uint64153Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Uint64153() {
      return getFieldMapSint64Uint64153Map();
    }
    /**
     * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Uint64153Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapSint64Uint64153());
    }
    /**
     * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
     */
    @java.lang.Override

    public long getFieldMapSint64Uint64153OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSint64Uint64153();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
     */
    @java.lang.Override

    public long getFieldMapSint64Uint64153OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapSint64Uint64153();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapSint64Uint64153Map() {
      return internalGetMutableFieldMapSint64Uint64153();
    }

    public static final int FIELD_MAP_STRING_BOOL_154_FIELD_NUMBER = 154;
    private static final class FieldMapStringBool154DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Boolean> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Boolean>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Boolean> fieldMapStringBool154_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Boolean>
    internalGetFieldMapStringBool154() {
      return fieldMapStringBool154_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Boolean>
    internalGetMutableFieldMapStringBool154() {
      if (!fieldMapStringBool154_.isMutable()) {
        fieldMapStringBool154_ = fieldMapStringBool154_.mutableCopy();
      }
      return fieldMapStringBool154_;
    }
    @java.lang.Override

    public int getFieldMapStringBool154Count() {
      return internalGetFieldMapStringBool154().size();
    }
    /**
     * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringBool154(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringBool154().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapStringBool154Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Boolean> getFieldMapStringBool154() {
      return getFieldMapStringBool154Map();
    }
    /**
     * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Boolean> getFieldMapStringBool154Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapStringBool154());
    }
    /**
     * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
     */
    @java.lang.Override

    public boolean getFieldMapStringBool154OrDefault(
        java.lang.String key,
        boolean defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Boolean> map =
          internalGetFieldMapStringBool154();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
     */
    @java.lang.Override

    public boolean getFieldMapStringBool154OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Boolean> map =
          internalGetFieldMapStringBool154();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
     */
    private java.util.Map<java.lang.String, java.lang.Boolean>
    getMutableFieldMapStringBool154Map() {
      return internalGetMutableFieldMapStringBool154();
    }

    public static final int FIELD_MAP_STRING_BYTES_155_FIELD_NUMBER = 155;
    private static final class FieldMapStringBytes155DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, com.google.protobuf.ByteString> fieldMapStringBytes155_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.protobuf.ByteString>
    internalGetFieldMapStringBytes155() {
      return fieldMapStringBytes155_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.protobuf.ByteString>
    internalGetMutableFieldMapStringBytes155() {
      if (!fieldMapStringBytes155_.isMutable()) {
        fieldMapStringBytes155_ = fieldMapStringBytes155_.mutableCopy();
      }
      return fieldMapStringBytes155_;
    }
    @java.lang.Override

    public int getFieldMapStringBytes155Count() {
      return internalGetFieldMapStringBytes155().size();
    }
    /**
     * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringBytes155(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringBytes155().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapStringBytes155Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getFieldMapStringBytes155() {
      return getFieldMapStringBytes155Map();
    }
    /**
     * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getFieldMapStringBytes155Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapStringBytes155());
    }
    /**
     * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapStringBytes155OrDefault(
        java.lang.String key,
        com.google.protobuf.ByteString defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetFieldMapStringBytes155();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapStringBytes155OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetFieldMapStringBytes155();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
     */
    private java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getMutableFieldMapStringBytes155Map() {
      return internalGetMutableFieldMapStringBytes155();
    }

    public static final int FIELD_MAP_STRING_DOUBLE_156_FIELD_NUMBER = 156;
    private static final class FieldMapStringDouble156DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Double>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Double> fieldMapStringDouble156_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Double>
    internalGetFieldMapStringDouble156() {
      return fieldMapStringDouble156_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Double>
    internalGetMutableFieldMapStringDouble156() {
      if (!fieldMapStringDouble156_.isMutable()) {
        fieldMapStringDouble156_ = fieldMapStringDouble156_.mutableCopy();
      }
      return fieldMapStringDouble156_;
    }
    @java.lang.Override

    public int getFieldMapStringDouble156Count() {
      return internalGetFieldMapStringDouble156().size();
    }
    /**
     * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringDouble156(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringDouble156().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapStringDouble156Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Double> getFieldMapStringDouble156() {
      return getFieldMapStringDouble156Map();
    }
    /**
     * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Double> getFieldMapStringDouble156Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapStringDouble156());
    }
    /**
     * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
     */
    @java.lang.Override

    public double getFieldMapStringDouble156OrDefault(
        java.lang.String key,
        double defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Double> map =
          internalGetFieldMapStringDouble156();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
     */
    @java.lang.Override

    public double getFieldMapStringDouble156OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Double> map =
          internalGetFieldMapStringDouble156();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
     */
    private java.util.Map<java.lang.String, java.lang.Double>
    getMutableFieldMapStringDouble156Map() {
      return internalGetMutableFieldMapStringDouble156();
    }

    public static final int FIELD_MAP_STRING_ENUM_157_FIELD_NUMBER = 157;
    private static final class FieldMapStringEnum157DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Integer> fieldMapStringEnum157_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Integer>
    internalGetFieldMapStringEnum157() {
      return fieldMapStringEnum157_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Integer>
    internalGetMutableFieldMapStringEnum157() {
      if (!fieldMapStringEnum157_.isMutable()) {
        fieldMapStringEnum157_ = fieldMapStringEnum157_.mutableCopy();
      }
      return fieldMapStringEnum157_;
    }
    @java.lang.Override

    public int getFieldMapStringEnum157Count() {
      return internalGetFieldMapStringEnum157().size();
    }
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringEnum157(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringEnum157().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> fieldMapStringEnum157ValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetValueMap(),
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO);
    /**
     * Use {@link #getFieldMapStringEnum157Map()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapStringEnum157() {
      return getFieldMapStringEnum157Map();
    }
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapStringEnum157Map() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
                internalGetFieldMapStringEnum157(),
                fieldMapStringEnum157ValueConverter));
    }
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapStringEnum157OrDefault(
        java.lang.String key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetFieldMapStringEnum157();
      return map.containsKey(key)
             ? fieldMapStringEnum157ValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapStringEnum157OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetFieldMapStringEnum157();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return fieldMapStringEnum157ValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
     */
    private java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getMutableFieldMapStringEnum157Map() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
              internalGetMutableFieldMapStringEnum157(),
              fieldMapStringEnum157ValueConverter);
    }

    public static final int FIELD_MAP_STRING_FIXED32_158_FIELD_NUMBER = 158;
    private static final class FieldMapStringFixed32158DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Integer> fieldMapStringFixed32158_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Integer>
    internalGetFieldMapStringFixed32158() {
      return fieldMapStringFixed32158_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Integer>
    internalGetMutableFieldMapStringFixed32158() {
      if (!fieldMapStringFixed32158_.isMutable()) {
        fieldMapStringFixed32158_ = fieldMapStringFixed32158_.mutableCopy();
      }
      return fieldMapStringFixed32158_;
    }
    @java.lang.Override

    public int getFieldMapStringFixed32158Count() {
      return internalGetFieldMapStringFixed32158().size();
    }
    /**
     * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringFixed32158(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringFixed32158().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapStringFixed32158Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringFixed32158() {
      return getFieldMapStringFixed32158Map();
    }
    /**
     * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringFixed32158Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapStringFixed32158());
    }
    /**
     * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
     */
    @java.lang.Override

    public int getFieldMapStringFixed32158OrDefault(
        java.lang.String key,
        int defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetFieldMapStringFixed32158();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
     */
    @java.lang.Override

    public int getFieldMapStringFixed32158OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetFieldMapStringFixed32158();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
     */
    private java.util.Map<java.lang.String, java.lang.Integer>
    getMutableFieldMapStringFixed32158Map() {
      return internalGetMutableFieldMapStringFixed32158();
    }

    public static final int FIELD_MAP_STRING_FIXED64_159_FIELD_NUMBER = 159;
    private static final class FieldMapStringFixed64159DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Long> fieldMapStringFixed64159_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Long>
    internalGetFieldMapStringFixed64159() {
      return fieldMapStringFixed64159_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Long>
    internalGetMutableFieldMapStringFixed64159() {
      if (!fieldMapStringFixed64159_.isMutable()) {
        fieldMapStringFixed64159_ = fieldMapStringFixed64159_.mutableCopy();
      }
      return fieldMapStringFixed64159_;
    }
    @java.lang.Override

    public int getFieldMapStringFixed64159Count() {
      return internalGetFieldMapStringFixed64159().size();
    }
    /**
     * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringFixed64159(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringFixed64159().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapStringFixed64159Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringFixed64159() {
      return getFieldMapStringFixed64159Map();
    }
    /**
     * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringFixed64159Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapStringFixed64159());
    }
    /**
     * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
     */
    @java.lang.Override

    public long getFieldMapStringFixed64159OrDefault(
        java.lang.String key,
        long defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetFieldMapStringFixed64159();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
     */
    @java.lang.Override

    public long getFieldMapStringFixed64159OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetFieldMapStringFixed64159();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
     */
    private java.util.Map<java.lang.String, java.lang.Long>
    getMutableFieldMapStringFixed64159Map() {
      return internalGetMutableFieldMapStringFixed64159();
    }

    public static final int FIELD_MAP_STRING_FLOAT_160_FIELD_NUMBER = 160;
    private static final class FieldMapStringFloat160DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Float> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Float>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.FLOAT,
                  0F);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Float> fieldMapStringFloat160_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Float>
    internalGetFieldMapStringFloat160() {
      return fieldMapStringFloat160_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Float>
    internalGetMutableFieldMapStringFloat160() {
      if (!fieldMapStringFloat160_.isMutable()) {
        fieldMapStringFloat160_ = fieldMapStringFloat160_.mutableCopy();
      }
      return fieldMapStringFloat160_;
    }
    @java.lang.Override

    public int getFieldMapStringFloat160Count() {
      return internalGetFieldMapStringFloat160().size();
    }
    /**
     * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringFloat160(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringFloat160().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapStringFloat160Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Float> getFieldMapStringFloat160() {
      return getFieldMapStringFloat160Map();
    }
    /**
     * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Float> getFieldMapStringFloat160Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapStringFloat160());
    }
    /**
     * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
     */
    @java.lang.Override

    public float getFieldMapStringFloat160OrDefault(
        java.lang.String key,
        float defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Float> map =
          internalGetFieldMapStringFloat160();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
     */
    @java.lang.Override

    public float getFieldMapStringFloat160OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Float> map =
          internalGetFieldMapStringFloat160();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
     */
    private java.util.Map<java.lang.String, java.lang.Float>
    getMutableFieldMapStringFloat160Map() {
      return internalGetMutableFieldMapStringFloat160();
    }

    public static final int FIELD_MAP_STRING_INT32_161_FIELD_NUMBER = 161;
    private static final class FieldMapStringInt32161DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Integer> fieldMapStringInt32161_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Integer>
    internalGetFieldMapStringInt32161() {
      return fieldMapStringInt32161_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Integer>
    internalGetMutableFieldMapStringInt32161() {
      if (!fieldMapStringInt32161_.isMutable()) {
        fieldMapStringInt32161_ = fieldMapStringInt32161_.mutableCopy();
      }
      return fieldMapStringInt32161_;
    }
    @java.lang.Override

    public int getFieldMapStringInt32161Count() {
      return internalGetFieldMapStringInt32161().size();
    }
    /**
     * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringInt32161(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringInt32161().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapStringInt32161Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringInt32161() {
      return getFieldMapStringInt32161Map();
    }
    /**
     * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringInt32161Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapStringInt32161());
    }
    /**
     * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
     */
    @java.lang.Override

    public int getFieldMapStringInt32161OrDefault(
        java.lang.String key,
        int defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetFieldMapStringInt32161();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
     */
    @java.lang.Override

    public int getFieldMapStringInt32161OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetFieldMapStringInt32161();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
     */
    private java.util.Map<java.lang.String, java.lang.Integer>
    getMutableFieldMapStringInt32161Map() {
      return internalGetMutableFieldMapStringInt32161();
    }

    public static final int FIELD_MAP_STRING_INT64_162_FIELD_NUMBER = 162;
    private static final class FieldMapStringInt64162DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Long> fieldMapStringInt64162_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Long>
    internalGetFieldMapStringInt64162() {
      return fieldMapStringInt64162_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Long>
    internalGetMutableFieldMapStringInt64162() {
      if (!fieldMapStringInt64162_.isMutable()) {
        fieldMapStringInt64162_ = fieldMapStringInt64162_.mutableCopy();
      }
      return fieldMapStringInt64162_;
    }
    @java.lang.Override

    public int getFieldMapStringInt64162Count() {
      return internalGetFieldMapStringInt64162().size();
    }
    /**
     * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringInt64162(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringInt64162().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapStringInt64162Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringInt64162() {
      return getFieldMapStringInt64162Map();
    }
    /**
     * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringInt64162Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapStringInt64162());
    }
    /**
     * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
     */
    @java.lang.Override

    public long getFieldMapStringInt64162OrDefault(
        java.lang.String key,
        long defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetFieldMapStringInt64162();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
     */
    @java.lang.Override

    public long getFieldMapStringInt64162OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetFieldMapStringInt64162();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
     */
    private java.util.Map<java.lang.String, java.lang.Long>
    getMutableFieldMapStringInt64162Map() {
      return internalGetMutableFieldMapStringInt64162();
    }

    public static final int FIELD_MAP_STRING_MESSAGE_163_FIELD_NUMBER = 163;
    private static final class FieldMapStringMessage163DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message> fieldMapStringMessage163_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetFieldMapStringMessage163() {
      return fieldMapStringMessage163_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetMutableFieldMapStringMessage163() {
      if (!fieldMapStringMessage163_.isMutable()) {
        fieldMapStringMessage163_ = fieldMapStringMessage163_.mutableCopy();
      }
      return fieldMapStringMessage163_;
    }
    @java.lang.Override

    public int getFieldMapStringMessage163Count() {
      return internalGetFieldMapStringMessage163().size();
    }
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringMessage163(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringMessage163().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapStringMessage163Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapStringMessage163() {
      return getFieldMapStringMessage163Map();
    }
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapStringMessage163Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapStringMessage163());
    }
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapStringMessage163OrDefault(
        java.lang.String key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapStringMessage163();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapStringMessage163OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapStringMessage163();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
     */
    private java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getMutableFieldMapStringMessage163Map() {
      return internalGetMutableFieldMapStringMessage163();
    }

    public static final int FIELD_MAP_STRING_SFIXED32_164_FIELD_NUMBER = 164;
    private static final class FieldMapStringSfixed32164DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Integer> fieldMapStringSfixed32164_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Integer>
    internalGetFieldMapStringSfixed32164() {
      return fieldMapStringSfixed32164_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Integer>
    internalGetMutableFieldMapStringSfixed32164() {
      if (!fieldMapStringSfixed32164_.isMutable()) {
        fieldMapStringSfixed32164_ = fieldMapStringSfixed32164_.mutableCopy();
      }
      return fieldMapStringSfixed32164_;
    }
    @java.lang.Override

    public int getFieldMapStringSfixed32164Count() {
      return internalGetFieldMapStringSfixed32164().size();
    }
    /**
     * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringSfixed32164(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringSfixed32164().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapStringSfixed32164Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringSfixed32164() {
      return getFieldMapStringSfixed32164Map();
    }
    /**
     * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringSfixed32164Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapStringSfixed32164());
    }
    /**
     * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
     */
    @java.lang.Override

    public int getFieldMapStringSfixed32164OrDefault(
        java.lang.String key,
        int defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetFieldMapStringSfixed32164();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
     */
    @java.lang.Override

    public int getFieldMapStringSfixed32164OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetFieldMapStringSfixed32164();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
     */
    private java.util.Map<java.lang.String, java.lang.Integer>
    getMutableFieldMapStringSfixed32164Map() {
      return internalGetMutableFieldMapStringSfixed32164();
    }

    public static final int FIELD_MAP_STRING_SFIXED64_165_FIELD_NUMBER = 165;
    private static final class FieldMapStringSfixed64165DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Long> fieldMapStringSfixed64165_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Long>
    internalGetFieldMapStringSfixed64165() {
      return fieldMapStringSfixed64165_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Long>
    internalGetMutableFieldMapStringSfixed64165() {
      if (!fieldMapStringSfixed64165_.isMutable()) {
        fieldMapStringSfixed64165_ = fieldMapStringSfixed64165_.mutableCopy();
      }
      return fieldMapStringSfixed64165_;
    }
    @java.lang.Override

    public int getFieldMapStringSfixed64165Count() {
      return internalGetFieldMapStringSfixed64165().size();
    }
    /**
     * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringSfixed64165(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringSfixed64165().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapStringSfixed64165Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringSfixed64165() {
      return getFieldMapStringSfixed64165Map();
    }
    /**
     * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringSfixed64165Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapStringSfixed64165());
    }
    /**
     * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
     */
    @java.lang.Override

    public long getFieldMapStringSfixed64165OrDefault(
        java.lang.String key,
        long defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetFieldMapStringSfixed64165();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
     */
    @java.lang.Override

    public long getFieldMapStringSfixed64165OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetFieldMapStringSfixed64165();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
     */
    private java.util.Map<java.lang.String, java.lang.Long>
    getMutableFieldMapStringSfixed64165Map() {
      return internalGetMutableFieldMapStringSfixed64165();
    }

    public static final int FIELD_MAP_STRING_SINT32_166_FIELD_NUMBER = 166;
    private static final class FieldMapStringSint32166DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Integer> fieldMapStringSint32166_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Integer>
    internalGetFieldMapStringSint32166() {
      return fieldMapStringSint32166_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Integer>
    internalGetMutableFieldMapStringSint32166() {
      if (!fieldMapStringSint32166_.isMutable()) {
        fieldMapStringSint32166_ = fieldMapStringSint32166_.mutableCopy();
      }
      return fieldMapStringSint32166_;
    }
    @java.lang.Override

    public int getFieldMapStringSint32166Count() {
      return internalGetFieldMapStringSint32166().size();
    }
    /**
     * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringSint32166(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringSint32166().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapStringSint32166Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringSint32166() {
      return getFieldMapStringSint32166Map();
    }
    /**
     * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringSint32166Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapStringSint32166());
    }
    /**
     * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
     */
    @java.lang.Override

    public int getFieldMapStringSint32166OrDefault(
        java.lang.String key,
        int defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetFieldMapStringSint32166();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
     */
    @java.lang.Override

    public int getFieldMapStringSint32166OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetFieldMapStringSint32166();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
     */
    private java.util.Map<java.lang.String, java.lang.Integer>
    getMutableFieldMapStringSint32166Map() {
      return internalGetMutableFieldMapStringSint32166();
    }

    public static final int FIELD_MAP_STRING_SINT64_167_FIELD_NUMBER = 167;
    private static final class FieldMapStringSint64167DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Long> fieldMapStringSint64167_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Long>
    internalGetFieldMapStringSint64167() {
      return fieldMapStringSint64167_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Long>
    internalGetMutableFieldMapStringSint64167() {
      if (!fieldMapStringSint64167_.isMutable()) {
        fieldMapStringSint64167_ = fieldMapStringSint64167_.mutableCopy();
      }
      return fieldMapStringSint64167_;
    }
    @java.lang.Override

    public int getFieldMapStringSint64167Count() {
      return internalGetFieldMapStringSint64167().size();
    }
    /**
     * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringSint64167(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringSint64167().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapStringSint64167Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringSint64167() {
      return getFieldMapStringSint64167Map();
    }
    /**
     * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringSint64167Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapStringSint64167());
    }
    /**
     * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
     */
    @java.lang.Override

    public long getFieldMapStringSint64167OrDefault(
        java.lang.String key,
        long defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetFieldMapStringSint64167();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
     */
    @java.lang.Override

    public long getFieldMapStringSint64167OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetFieldMapStringSint64167();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
     */
    private java.util.Map<java.lang.String, java.lang.Long>
    getMutableFieldMapStringSint64167Map() {
      return internalGetMutableFieldMapStringSint64167();
    }

    public static final int FIELD_MAP_STRING_STRING_168_FIELD_NUMBER = 168;
    private static final class FieldMapStringString168DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.String> fieldMapStringString168_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
    internalGetFieldMapStringString168() {
      return fieldMapStringString168_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
    internalGetMutableFieldMapStringString168() {
      if (!fieldMapStringString168_.isMutable()) {
        fieldMapStringString168_ = fieldMapStringString168_.mutableCopy();
      }
      return fieldMapStringString168_;
    }
    @java.lang.Override

    public int getFieldMapStringString168Count() {
      return internalGetFieldMapStringString168().size();
    }
    /**
     * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringString168(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringString168().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapStringString168Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getFieldMapStringString168() {
      return getFieldMapStringString168Map();
    }
    /**
     * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getFieldMapStringString168Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapStringString168());
    }
    /**
     * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapStringString168OrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetFieldMapStringString168();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapStringString168OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetFieldMapStringString168();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
     */
    private java.util.Map<java.lang.String, java.lang.String>
    getMutableFieldMapStringString168Map() {
      return internalGetMutableFieldMapStringString168();
    }

    public static final int FIELD_MAP_STRING_UINT32_169_FIELD_NUMBER = 169;
    private static final class FieldMapStringUint32169DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Integer> fieldMapStringUint32169_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Integer>
    internalGetFieldMapStringUint32169() {
      return fieldMapStringUint32169_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Integer>
    internalGetMutableFieldMapStringUint32169() {
      if (!fieldMapStringUint32169_.isMutable()) {
        fieldMapStringUint32169_ = fieldMapStringUint32169_.mutableCopy();
      }
      return fieldMapStringUint32169_;
    }
    @java.lang.Override

    public int getFieldMapStringUint32169Count() {
      return internalGetFieldMapStringUint32169().size();
    }
    /**
     * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringUint32169(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringUint32169().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapStringUint32169Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringUint32169() {
      return getFieldMapStringUint32169Map();
    }
    /**
     * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringUint32169Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapStringUint32169());
    }
    /**
     * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
     */
    @java.lang.Override

    public int getFieldMapStringUint32169OrDefault(
        java.lang.String key,
        int defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetFieldMapStringUint32169();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
     */
    @java.lang.Override

    public int getFieldMapStringUint32169OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetFieldMapStringUint32169();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
     */
    private java.util.Map<java.lang.String, java.lang.Integer>
    getMutableFieldMapStringUint32169Map() {
      return internalGetMutableFieldMapStringUint32169();
    }

    public static final int FIELD_MAP_STRING_UINT64_170_FIELD_NUMBER = 170;
    private static final class FieldMapStringUint64170DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Long> fieldMapStringUint64170_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Long>
    internalGetFieldMapStringUint64170() {
      return fieldMapStringUint64170_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Long>
    internalGetMutableFieldMapStringUint64170() {
      if (!fieldMapStringUint64170_.isMutable()) {
        fieldMapStringUint64170_ = fieldMapStringUint64170_.mutableCopy();
      }
      return fieldMapStringUint64170_;
    }
    @java.lang.Override

    public int getFieldMapStringUint64170Count() {
      return internalGetFieldMapStringUint64170().size();
    }
    /**
     * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapStringUint64170(
        java.lang.String key) {
      key.getClass();
      return internalGetFieldMapStringUint64170().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapStringUint64170Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringUint64170() {
      return getFieldMapStringUint64170Map();
    }
    /**
     * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringUint64170Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapStringUint64170());
    }
    /**
     * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
     */
    @java.lang.Override

    public long getFieldMapStringUint64170OrDefault(
        java.lang.String key,
        long defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetFieldMapStringUint64170();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
     */
    @java.lang.Override

    public long getFieldMapStringUint64170OrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetFieldMapStringUint64170();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
     */
    private java.util.Map<java.lang.String, java.lang.Long>
    getMutableFieldMapStringUint64170Map() {
      return internalGetMutableFieldMapStringUint64170();
    }

    public static final int FIELD_MAP_UINT32_BOOL_171_FIELD_NUMBER = 171;
    private static final class FieldMapUint32Bool171DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Boolean> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Boolean>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Boolean> fieldMapUint32Bool171_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Boolean>
    internalGetFieldMapUint32Bool171() {
      return fieldMapUint32Bool171_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Boolean>
    internalGetMutableFieldMapUint32Bool171() {
      if (!fieldMapUint32Bool171_.isMutable()) {
        fieldMapUint32Bool171_ = fieldMapUint32Bool171_.mutableCopy();
      }
      return fieldMapUint32Bool171_;
    }
    @java.lang.Override

    public int getFieldMapUint32Bool171Count() {
      return internalGetFieldMapUint32Bool171().size();
    }
    /**
     * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32Bool171(
        int key) {
      
      return internalGetFieldMapUint32Bool171().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint32Bool171Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapUint32Bool171() {
      return getFieldMapUint32Bool171Map();
    }
    /**
     * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapUint32Bool171Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint32Bool171());
    }
    /**
     * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
     */
    @java.lang.Override

    public boolean getFieldMapUint32Bool171OrDefault(
        int key,
        boolean defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Boolean> map =
          internalGetFieldMapUint32Bool171();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
     */
    @java.lang.Override

    public boolean getFieldMapUint32Bool171OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Boolean> map =
          internalGetFieldMapUint32Bool171();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Boolean>
    getMutableFieldMapUint32Bool171Map() {
      return internalGetMutableFieldMapUint32Bool171();
    }

    public static final int FIELD_MAP_UINT32_BYTES_172_FIELD_NUMBER = 172;
    private static final class FieldMapUint32Bytes172DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, com.google.protobuf.ByteString> fieldMapUint32Bytes172_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.ByteString>
    internalGetFieldMapUint32Bytes172() {
      return fieldMapUint32Bytes172_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.ByteString>
    internalGetMutableFieldMapUint32Bytes172() {
      if (!fieldMapUint32Bytes172_.isMutable()) {
        fieldMapUint32Bytes172_ = fieldMapUint32Bytes172_.mutableCopy();
      }
      return fieldMapUint32Bytes172_;
    }
    @java.lang.Override

    public int getFieldMapUint32Bytes172Count() {
      return internalGetFieldMapUint32Bytes172().size();
    }
    /**
     * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32Bytes172(
        int key) {
      
      return internalGetFieldMapUint32Bytes172().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint32Bytes172Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapUint32Bytes172() {
      return getFieldMapUint32Bytes172Map();
    }
    /**
     * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapUint32Bytes172Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint32Bytes172());
    }
    /**
     * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapUint32Bytes172OrDefault(
        int key,
        com.google.protobuf.ByteString defaultValue) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
          internalGetFieldMapUint32Bytes172();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapUint32Bytes172OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
          internalGetFieldMapUint32Bytes172();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getMutableFieldMapUint32Bytes172Map() {
      return internalGetMutableFieldMapUint32Bytes172();
    }

    public static final int FIELD_MAP_UINT32_DOUBLE_173_FIELD_NUMBER = 173;
    private static final class FieldMapUint32Double173DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Double>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Double> fieldMapUint32Double173_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Double>
    internalGetFieldMapUint32Double173() {
      return fieldMapUint32Double173_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Double>
    internalGetMutableFieldMapUint32Double173() {
      if (!fieldMapUint32Double173_.isMutable()) {
        fieldMapUint32Double173_ = fieldMapUint32Double173_.mutableCopy();
      }
      return fieldMapUint32Double173_;
    }
    @java.lang.Override

    public int getFieldMapUint32Double173Count() {
      return internalGetFieldMapUint32Double173().size();
    }
    /**
     * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32Double173(
        int key) {
      
      return internalGetFieldMapUint32Double173().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint32Double173Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapUint32Double173() {
      return getFieldMapUint32Double173Map();
    }
    /**
     * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapUint32Double173Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint32Double173());
    }
    /**
     * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
     */
    @java.lang.Override

    public double getFieldMapUint32Double173OrDefault(
        int key,
        double defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Double> map =
          internalGetFieldMapUint32Double173();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
     */
    @java.lang.Override

    public double getFieldMapUint32Double173OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Double> map =
          internalGetFieldMapUint32Double173();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Double>
    getMutableFieldMapUint32Double173Map() {
      return internalGetMutableFieldMapUint32Double173();
    }

    public static final int FIELD_MAP_UINT32_ENUM_174_FIELD_NUMBER = 174;
    private static final class FieldMapUint32Enum174DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapUint32Enum174_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapUint32Enum174() {
      return fieldMapUint32Enum174_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapUint32Enum174() {
      if (!fieldMapUint32Enum174_.isMutable()) {
        fieldMapUint32Enum174_ = fieldMapUint32Enum174_.mutableCopy();
      }
      return fieldMapUint32Enum174_;
    }
    @java.lang.Override

    public int getFieldMapUint32Enum174Count() {
      return internalGetFieldMapUint32Enum174().size();
    }
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32Enum174(
        int key) {
      
      return internalGetFieldMapUint32Enum174().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> fieldMapUint32Enum174ValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetValueMap(),
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO);
    /**
     * Use {@link #getFieldMapUint32Enum174Map()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapUint32Enum174() {
      return getFieldMapUint32Enum174Map();
    }
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapUint32Enum174Map() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
                internalGetFieldMapUint32Enum174(),
                fieldMapUint32Enum174ValueConverter));
    }
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapUint32Enum174OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapUint32Enum174();
      return map.containsKey(key)
             ? fieldMapUint32Enum174ValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapUint32Enum174OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapUint32Enum174();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return fieldMapUint32Enum174ValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getMutableFieldMapUint32Enum174Map() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
              internalGetMutableFieldMapUint32Enum174(),
              fieldMapUint32Enum174ValueConverter);
    }

    public static final int FIELD_MAP_UINT32_FIXED32_175_FIELD_NUMBER = 175;
    private static final class FieldMapUint32Fixed32175DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapUint32Fixed32175_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapUint32Fixed32175() {
      return fieldMapUint32Fixed32175_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapUint32Fixed32175() {
      if (!fieldMapUint32Fixed32175_.isMutable()) {
        fieldMapUint32Fixed32175_ = fieldMapUint32Fixed32175_.mutableCopy();
      }
      return fieldMapUint32Fixed32175_;
    }
    @java.lang.Override

    public int getFieldMapUint32Fixed32175Count() {
      return internalGetFieldMapUint32Fixed32175().size();
    }
    /**
     * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32Fixed32175(
        int key) {
      
      return internalGetFieldMapUint32Fixed32175().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint32Fixed32175Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Fixed32175() {
      return getFieldMapUint32Fixed32175Map();
    }
    /**
     * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Fixed32175Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint32Fixed32175());
    }
    /**
     * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
     */
    @java.lang.Override

    public int getFieldMapUint32Fixed32175OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapUint32Fixed32175();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
     */
    @java.lang.Override

    public int getFieldMapUint32Fixed32175OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapUint32Fixed32175();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapUint32Fixed32175Map() {
      return internalGetMutableFieldMapUint32Fixed32175();
    }

    public static final int FIELD_MAP_UINT32_FIXED64_176_FIELD_NUMBER = 176;
    private static final class FieldMapUint32Fixed64176DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapUint32Fixed64176_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapUint32Fixed64176() {
      return fieldMapUint32Fixed64176_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapUint32Fixed64176() {
      if (!fieldMapUint32Fixed64176_.isMutable()) {
        fieldMapUint32Fixed64176_ = fieldMapUint32Fixed64176_.mutableCopy();
      }
      return fieldMapUint32Fixed64176_;
    }
    @java.lang.Override

    public int getFieldMapUint32Fixed64176Count() {
      return internalGetFieldMapUint32Fixed64176().size();
    }
    /**
     * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32Fixed64176(
        int key) {
      
      return internalGetFieldMapUint32Fixed64176().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint32Fixed64176Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Fixed64176() {
      return getFieldMapUint32Fixed64176Map();
    }
    /**
     * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Fixed64176Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint32Fixed64176());
    }
    /**
     * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
     */
    @java.lang.Override

    public long getFieldMapUint32Fixed64176OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapUint32Fixed64176();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
     */
    @java.lang.Override

    public long getFieldMapUint32Fixed64176OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapUint32Fixed64176();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapUint32Fixed64176Map() {
      return internalGetMutableFieldMapUint32Fixed64176();
    }

    public static final int FIELD_MAP_UINT32_FLOAT_177_FIELD_NUMBER = 177;
    private static final class FieldMapUint32Float177DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Float> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Float>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.FLOAT,
                  0F);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Float> fieldMapUint32Float177_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Float>
    internalGetFieldMapUint32Float177() {
      return fieldMapUint32Float177_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Float>
    internalGetMutableFieldMapUint32Float177() {
      if (!fieldMapUint32Float177_.isMutable()) {
        fieldMapUint32Float177_ = fieldMapUint32Float177_.mutableCopy();
      }
      return fieldMapUint32Float177_;
    }
    @java.lang.Override

    public int getFieldMapUint32Float177Count() {
      return internalGetFieldMapUint32Float177().size();
    }
    /**
     * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32Float177(
        int key) {
      
      return internalGetFieldMapUint32Float177().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint32Float177Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapUint32Float177() {
      return getFieldMapUint32Float177Map();
    }
    /**
     * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapUint32Float177Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint32Float177());
    }
    /**
     * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
     */
    @java.lang.Override

    public float getFieldMapUint32Float177OrDefault(
        int key,
        float defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Float> map =
          internalGetFieldMapUint32Float177();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
     */
    @java.lang.Override

    public float getFieldMapUint32Float177OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Float> map =
          internalGetFieldMapUint32Float177();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Float>
    getMutableFieldMapUint32Float177Map() {
      return internalGetMutableFieldMapUint32Float177();
    }

    public static final int FIELD_MAP_UINT32_INT32_178_FIELD_NUMBER = 178;
    private static final class FieldMapUint32Int32178DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapUint32Int32178_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapUint32Int32178() {
      return fieldMapUint32Int32178_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapUint32Int32178() {
      if (!fieldMapUint32Int32178_.isMutable()) {
        fieldMapUint32Int32178_ = fieldMapUint32Int32178_.mutableCopy();
      }
      return fieldMapUint32Int32178_;
    }
    @java.lang.Override

    public int getFieldMapUint32Int32178Count() {
      return internalGetFieldMapUint32Int32178().size();
    }
    /**
     * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32Int32178(
        int key) {
      
      return internalGetFieldMapUint32Int32178().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint32Int32178Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Int32178() {
      return getFieldMapUint32Int32178Map();
    }
    /**
     * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Int32178Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint32Int32178());
    }
    /**
     * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
     */
    @java.lang.Override

    public int getFieldMapUint32Int32178OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapUint32Int32178();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
     */
    @java.lang.Override

    public int getFieldMapUint32Int32178OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapUint32Int32178();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapUint32Int32178Map() {
      return internalGetMutableFieldMapUint32Int32178();
    }

    public static final int FIELD_MAP_UINT32_INT64_179_FIELD_NUMBER = 179;
    private static final class FieldMapUint32Int64179DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapUint32Int64179_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapUint32Int64179() {
      return fieldMapUint32Int64179_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapUint32Int64179() {
      if (!fieldMapUint32Int64179_.isMutable()) {
        fieldMapUint32Int64179_ = fieldMapUint32Int64179_.mutableCopy();
      }
      return fieldMapUint32Int64179_;
    }
    @java.lang.Override

    public int getFieldMapUint32Int64179Count() {
      return internalGetFieldMapUint32Int64179().size();
    }
    /**
     * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32Int64179(
        int key) {
      
      return internalGetFieldMapUint32Int64179().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint32Int64179Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Int64179() {
      return getFieldMapUint32Int64179Map();
    }
    /**
     * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Int64179Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint32Int64179());
    }
    /**
     * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
     */
    @java.lang.Override

    public long getFieldMapUint32Int64179OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapUint32Int64179();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
     */
    @java.lang.Override

    public long getFieldMapUint32Int64179OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapUint32Int64179();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapUint32Int64179Map() {
      return internalGetMutableFieldMapUint32Int64179();
    }

    public static final int FIELD_MAP_UINT32_MESSAGE_180_FIELD_NUMBER = 180;
    private static final class FieldMapUint32Message180DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> fieldMapUint32Message180_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetFieldMapUint32Message180() {
      return fieldMapUint32Message180_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetMutableFieldMapUint32Message180() {
      if (!fieldMapUint32Message180_.isMutable()) {
        fieldMapUint32Message180_ = fieldMapUint32Message180_.mutableCopy();
      }
      return fieldMapUint32Message180_;
    }
    @java.lang.Override

    public int getFieldMapUint32Message180Count() {
      return internalGetFieldMapUint32Message180().size();
    }
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32Message180(
        int key) {
      
      return internalGetFieldMapUint32Message180().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint32Message180Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapUint32Message180() {
      return getFieldMapUint32Message180Map();
    }
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapUint32Message180Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint32Message180());
    }
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapUint32Message180OrDefault(
        int key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapUint32Message180();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapUint32Message180OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapUint32Message180();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
     */
    private java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getMutableFieldMapUint32Message180Map() {
      return internalGetMutableFieldMapUint32Message180();
    }

    public static final int FIELD_MAP_UINT32_SFIXED32_181_FIELD_NUMBER = 181;
    private static final class FieldMapUint32Sfixed32181DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapUint32Sfixed32181_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapUint32Sfixed32181() {
      return fieldMapUint32Sfixed32181_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapUint32Sfixed32181() {
      if (!fieldMapUint32Sfixed32181_.isMutable()) {
        fieldMapUint32Sfixed32181_ = fieldMapUint32Sfixed32181_.mutableCopy();
      }
      return fieldMapUint32Sfixed32181_;
    }
    @java.lang.Override

    public int getFieldMapUint32Sfixed32181Count() {
      return internalGetFieldMapUint32Sfixed32181().size();
    }
    /**
     * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32Sfixed32181(
        int key) {
      
      return internalGetFieldMapUint32Sfixed32181().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint32Sfixed32181Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Sfixed32181() {
      return getFieldMapUint32Sfixed32181Map();
    }
    /**
     * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Sfixed32181Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint32Sfixed32181());
    }
    /**
     * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
     */
    @java.lang.Override

    public int getFieldMapUint32Sfixed32181OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapUint32Sfixed32181();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
     */
    @java.lang.Override

    public int getFieldMapUint32Sfixed32181OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapUint32Sfixed32181();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapUint32Sfixed32181Map() {
      return internalGetMutableFieldMapUint32Sfixed32181();
    }

    public static final int FIELD_MAP_UINT32_SFIXED64_182_FIELD_NUMBER = 182;
    private static final class FieldMapUint32Sfixed64182DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapUint32Sfixed64182_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapUint32Sfixed64182() {
      return fieldMapUint32Sfixed64182_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapUint32Sfixed64182() {
      if (!fieldMapUint32Sfixed64182_.isMutable()) {
        fieldMapUint32Sfixed64182_ = fieldMapUint32Sfixed64182_.mutableCopy();
      }
      return fieldMapUint32Sfixed64182_;
    }
    @java.lang.Override

    public int getFieldMapUint32Sfixed64182Count() {
      return internalGetFieldMapUint32Sfixed64182().size();
    }
    /**
     * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32Sfixed64182(
        int key) {
      
      return internalGetFieldMapUint32Sfixed64182().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint32Sfixed64182Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Sfixed64182() {
      return getFieldMapUint32Sfixed64182Map();
    }
    /**
     * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Sfixed64182Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint32Sfixed64182());
    }
    /**
     * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
     */
    @java.lang.Override

    public long getFieldMapUint32Sfixed64182OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapUint32Sfixed64182();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
     */
    @java.lang.Override

    public long getFieldMapUint32Sfixed64182OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapUint32Sfixed64182();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapUint32Sfixed64182Map() {
      return internalGetMutableFieldMapUint32Sfixed64182();
    }

    public static final int FIELD_MAP_UINT32_SINT32_183_FIELD_NUMBER = 183;
    private static final class FieldMapUint32Sint32183DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapUint32Sint32183_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapUint32Sint32183() {
      return fieldMapUint32Sint32183_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapUint32Sint32183() {
      if (!fieldMapUint32Sint32183_.isMutable()) {
        fieldMapUint32Sint32183_ = fieldMapUint32Sint32183_.mutableCopy();
      }
      return fieldMapUint32Sint32183_;
    }
    @java.lang.Override

    public int getFieldMapUint32Sint32183Count() {
      return internalGetFieldMapUint32Sint32183().size();
    }
    /**
     * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32Sint32183(
        int key) {
      
      return internalGetFieldMapUint32Sint32183().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint32Sint32183Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Sint32183() {
      return getFieldMapUint32Sint32183Map();
    }
    /**
     * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Sint32183Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint32Sint32183());
    }
    /**
     * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
     */
    @java.lang.Override

    public int getFieldMapUint32Sint32183OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapUint32Sint32183();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
     */
    @java.lang.Override

    public int getFieldMapUint32Sint32183OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapUint32Sint32183();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapUint32Sint32183Map() {
      return internalGetMutableFieldMapUint32Sint32183();
    }

    public static final int FIELD_MAP_UINT32_SINT64_184_FIELD_NUMBER = 184;
    private static final class FieldMapUint32Sint64184DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapUint32Sint64184_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapUint32Sint64184() {
      return fieldMapUint32Sint64184_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapUint32Sint64184() {
      if (!fieldMapUint32Sint64184_.isMutable()) {
        fieldMapUint32Sint64184_ = fieldMapUint32Sint64184_.mutableCopy();
      }
      return fieldMapUint32Sint64184_;
    }
    @java.lang.Override

    public int getFieldMapUint32Sint64184Count() {
      return internalGetFieldMapUint32Sint64184().size();
    }
    /**
     * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32Sint64184(
        int key) {
      
      return internalGetFieldMapUint32Sint64184().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint32Sint64184Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Sint64184() {
      return getFieldMapUint32Sint64184Map();
    }
    /**
     * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Sint64184Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint32Sint64184());
    }
    /**
     * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
     */
    @java.lang.Override

    public long getFieldMapUint32Sint64184OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapUint32Sint64184();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
     */
    @java.lang.Override

    public long getFieldMapUint32Sint64184OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapUint32Sint64184();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapUint32Sint64184Map() {
      return internalGetMutableFieldMapUint32Sint64184();
    }

    public static final int FIELD_MAP_UINT32_STRING_185_FIELD_NUMBER = 185;
    private static final class FieldMapUint32String185DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.String> fieldMapUint32String185_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.String>
    internalGetFieldMapUint32String185() {
      return fieldMapUint32String185_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.String>
    internalGetMutableFieldMapUint32String185() {
      if (!fieldMapUint32String185_.isMutable()) {
        fieldMapUint32String185_ = fieldMapUint32String185_.mutableCopy();
      }
      return fieldMapUint32String185_;
    }
    @java.lang.Override

    public int getFieldMapUint32String185Count() {
      return internalGetFieldMapUint32String185().size();
    }
    /**
     * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32String185(
        int key) {
      
      return internalGetFieldMapUint32String185().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint32String185Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapUint32String185() {
      return getFieldMapUint32String185Map();
    }
    /**
     * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapUint32String185Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint32String185());
    }
    /**
     * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapUint32String185OrDefault(
        int key,
        java.lang.String defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.String> map =
          internalGetFieldMapUint32String185();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapUint32String185OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.String> map =
          internalGetFieldMapUint32String185();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.String>
    getMutableFieldMapUint32String185Map() {
      return internalGetMutableFieldMapUint32String185();
    }

    public static final int FIELD_MAP_UINT32_UINT32_186_FIELD_NUMBER = 186;
    private static final class FieldMapUint32Uint32186DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> fieldMapUint32Uint32186_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetFieldMapUint32Uint32186() {
      return fieldMapUint32Uint32186_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableFieldMapUint32Uint32186() {
      if (!fieldMapUint32Uint32186_.isMutable()) {
        fieldMapUint32Uint32186_ = fieldMapUint32Uint32186_.mutableCopy();
      }
      return fieldMapUint32Uint32186_;
    }
    @java.lang.Override

    public int getFieldMapUint32Uint32186Count() {
      return internalGetFieldMapUint32Uint32186().size();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32Uint32186(
        int key) {
      
      return internalGetFieldMapUint32Uint32186().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint32Uint32186Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Uint32186() {
      return getFieldMapUint32Uint32186Map();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Uint32186Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint32Uint32186());
    }
    /**
     * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
     */
    @java.lang.Override

    public int getFieldMapUint32Uint32186OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapUint32Uint32186();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
     */
    @java.lang.Override

    public int getFieldMapUint32Uint32186OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFieldMapUint32Uint32186();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFieldMapUint32Uint32186Map() {
      return internalGetMutableFieldMapUint32Uint32186();
    }

    public static final int FIELD_MAP_UINT32_UINT64_187_FIELD_NUMBER = 187;
    private static final class FieldMapUint32Uint64187DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Long> fieldMapUint32Uint64187_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetFieldMapUint32Uint64187() {
      return fieldMapUint32Uint64187_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Long>
    internalGetMutableFieldMapUint32Uint64187() {
      if (!fieldMapUint32Uint64187_.isMutable()) {
        fieldMapUint32Uint64187_ = fieldMapUint32Uint64187_.mutableCopy();
      }
      return fieldMapUint32Uint64187_;
    }
    @java.lang.Override

    public int getFieldMapUint32Uint64187Count() {
      return internalGetFieldMapUint32Uint64187().size();
    }
    /**
     * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint32Uint64187(
        int key) {
      
      return internalGetFieldMapUint32Uint64187().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint32Uint64187Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Uint64187() {
      return getFieldMapUint32Uint64187Map();
    }
    /**
     * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Uint64187Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint32Uint64187());
    }
    /**
     * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
     */
    @java.lang.Override

    public long getFieldMapUint32Uint64187OrDefault(
        int key,
        long defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapUint32Uint64187();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
     */
    @java.lang.Override

    public long getFieldMapUint32Uint64187OrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Long> map =
          internalGetFieldMapUint32Uint64187();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Long>
    getMutableFieldMapUint32Uint64187Map() {
      return internalGetMutableFieldMapUint32Uint64187();
    }

    public static final int FIELD_MAP_UINT64_BOOL_188_FIELD_NUMBER = 188;
    private static final class FieldMapUint64Bool188DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Boolean> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Boolean>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.BOOL,
                  false);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Boolean> fieldMapUint64Bool188_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Boolean>
    internalGetFieldMapUint64Bool188() {
      return fieldMapUint64Bool188_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Boolean>
    internalGetMutableFieldMapUint64Bool188() {
      if (!fieldMapUint64Bool188_.isMutable()) {
        fieldMapUint64Bool188_ = fieldMapUint64Bool188_.mutableCopy();
      }
      return fieldMapUint64Bool188_;
    }
    @java.lang.Override

    public int getFieldMapUint64Bool188Count() {
      return internalGetFieldMapUint64Bool188().size();
    }
    /**
     * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64Bool188(
        long key) {
      
      return internalGetFieldMapUint64Bool188().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint64Bool188Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapUint64Bool188() {
      return getFieldMapUint64Bool188Map();
    }
    /**
     * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapUint64Bool188Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint64Bool188());
    }
    /**
     * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
     */
    @java.lang.Override

    public boolean getFieldMapUint64Bool188OrDefault(
        long key,
        boolean defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Boolean> map =
          internalGetFieldMapUint64Bool188();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
     */
    @java.lang.Override

    public boolean getFieldMapUint64Bool188OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Boolean> map =
          internalGetFieldMapUint64Bool188();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Boolean>
    getMutableFieldMapUint64Bool188Map() {
      return internalGetMutableFieldMapUint64Bool188();
    }

    public static final int FIELD_MAP_UINT64_BYTES_189_FIELD_NUMBER = 189;
    private static final class FieldMapUint64Bytes189DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, com.google.protobuf.ByteString> fieldMapUint64Bytes189_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.ByteString>
    internalGetFieldMapUint64Bytes189() {
      return fieldMapUint64Bytes189_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.ByteString>
    internalGetMutableFieldMapUint64Bytes189() {
      if (!fieldMapUint64Bytes189_.isMutable()) {
        fieldMapUint64Bytes189_ = fieldMapUint64Bytes189_.mutableCopy();
      }
      return fieldMapUint64Bytes189_;
    }
    @java.lang.Override

    public int getFieldMapUint64Bytes189Count() {
      return internalGetFieldMapUint64Bytes189().size();
    }
    /**
     * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64Bytes189(
        long key) {
      
      return internalGetFieldMapUint64Bytes189().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint64Bytes189Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapUint64Bytes189() {
      return getFieldMapUint64Bytes189Map();
    }
    /**
     * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapUint64Bytes189Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint64Bytes189());
    }
    /**
     * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapUint64Bytes189OrDefault(
        long key,
        com.google.protobuf.ByteString defaultValue) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
          internalGetFieldMapUint64Bytes189();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getFieldMapUint64Bytes189OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
          internalGetFieldMapUint64Bytes189();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
     */
    private java.util.Map<java.lang.Long, com.google.protobuf.ByteString>
    getMutableFieldMapUint64Bytes189Map() {
      return internalGetMutableFieldMapUint64Bytes189();
    }

    public static final int FIELD_MAP_UINT64_DOUBLE_190_FIELD_NUMBER = 190;
    private static final class FieldMapUint64Double190DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Double>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Double> fieldMapUint64Double190_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Double>
    internalGetFieldMapUint64Double190() {
      return fieldMapUint64Double190_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Double>
    internalGetMutableFieldMapUint64Double190() {
      if (!fieldMapUint64Double190_.isMutable()) {
        fieldMapUint64Double190_ = fieldMapUint64Double190_.mutableCopy();
      }
      return fieldMapUint64Double190_;
    }
    @java.lang.Override

    public int getFieldMapUint64Double190Count() {
      return internalGetFieldMapUint64Double190().size();
    }
    /**
     * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64Double190(
        long key) {
      
      return internalGetFieldMapUint64Double190().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint64Double190Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapUint64Double190() {
      return getFieldMapUint64Double190Map();
    }
    /**
     * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapUint64Double190Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint64Double190());
    }
    /**
     * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
     */
    @java.lang.Override

    public double getFieldMapUint64Double190OrDefault(
        long key,
        double defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Double> map =
          internalGetFieldMapUint64Double190();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
     */
    @java.lang.Override

    public double getFieldMapUint64Double190OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Double> map =
          internalGetFieldMapUint64Double190();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Double>
    getMutableFieldMapUint64Double190Map() {
      return internalGetMutableFieldMapUint64Double190();
    }

    public static final int FIELD_MAP_UINT64_ENUM_191_FIELD_NUMBER = 191;
    private static final class FieldMapUint64Enum191DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO.getNumber());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapUint64Enum191_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapUint64Enum191() {
      return fieldMapUint64Enum191_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapUint64Enum191() {
      if (!fieldMapUint64Enum191_.isMutable()) {
        fieldMapUint64Enum191_ = fieldMapUint64Enum191_.mutableCopy();
      }
      return fieldMapUint64Enum191_;
    }
    @java.lang.Override

    public int getFieldMapUint64Enum191Count() {
      return internalGetFieldMapUint64Enum191().size();
    }
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64Enum191(
        long key) {
      
      return internalGetFieldMapUint64Enum191().containsKey(key);
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> fieldMapUint64Enum191ValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetValueMap(),
                com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO);
    /**
     * Use {@link #getFieldMapUint64Enum191Map()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapUint64Enum191() {
      return getFieldMapUint64Enum191Map();
    }
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getFieldMapUint64Enum191Map() {
      return java.util.Collections.unmodifiableMap(
          new com.google.protobuf.Internal.MapAdapter<
            java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
                internalGetFieldMapUint64Enum191(),
                fieldMapUint64Enum191ValueConverter));
    }
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapUint64Enum191OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapUint64Enum191();
      return map.containsKey(key)
             ? fieldMapUint64Enum191ValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapUint64Enum191OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapUint64Enum191();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return fieldMapUint64Enum191ValueConverter.doForward(map.get(key));
    }
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
     */
    private java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
    getMutableFieldMapUint64Enum191Map() {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum, java.lang.Integer>(
              internalGetMutableFieldMapUint64Enum191(),
              fieldMapUint64Enum191ValueConverter);
    }

    public static final int FIELD_MAP_UINT64_FIXED32_192_FIELD_NUMBER = 192;
    private static final class FieldMapUint64Fixed32192DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapUint64Fixed32192_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapUint64Fixed32192() {
      return fieldMapUint64Fixed32192_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapUint64Fixed32192() {
      if (!fieldMapUint64Fixed32192_.isMutable()) {
        fieldMapUint64Fixed32192_ = fieldMapUint64Fixed32192_.mutableCopy();
      }
      return fieldMapUint64Fixed32192_;
    }
    @java.lang.Override

    public int getFieldMapUint64Fixed32192Count() {
      return internalGetFieldMapUint64Fixed32192().size();
    }
    /**
     * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64Fixed32192(
        long key) {
      
      return internalGetFieldMapUint64Fixed32192().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint64Fixed32192Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Fixed32192() {
      return getFieldMapUint64Fixed32192Map();
    }
    /**
     * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Fixed32192Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint64Fixed32192());
    }
    /**
     * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
     */
    @java.lang.Override

    public int getFieldMapUint64Fixed32192OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapUint64Fixed32192();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
     */
    @java.lang.Override

    public int getFieldMapUint64Fixed32192OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapUint64Fixed32192();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapUint64Fixed32192Map() {
      return internalGetMutableFieldMapUint64Fixed32192();
    }

    public static final int FIELD_MAP_UINT64_FIXED64_193_FIELD_NUMBER = 193;
    private static final class FieldMapUint64Fixed64193DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapUint64Fixed64193_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapUint64Fixed64193() {
      return fieldMapUint64Fixed64193_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapUint64Fixed64193() {
      if (!fieldMapUint64Fixed64193_.isMutable()) {
        fieldMapUint64Fixed64193_ = fieldMapUint64Fixed64193_.mutableCopy();
      }
      return fieldMapUint64Fixed64193_;
    }
    @java.lang.Override

    public int getFieldMapUint64Fixed64193Count() {
      return internalGetFieldMapUint64Fixed64193().size();
    }
    /**
     * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64Fixed64193(
        long key) {
      
      return internalGetFieldMapUint64Fixed64193().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint64Fixed64193Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Fixed64193() {
      return getFieldMapUint64Fixed64193Map();
    }
    /**
     * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Fixed64193Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint64Fixed64193());
    }
    /**
     * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
     */
    @java.lang.Override

    public long getFieldMapUint64Fixed64193OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapUint64Fixed64193();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
     */
    @java.lang.Override

    public long getFieldMapUint64Fixed64193OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapUint64Fixed64193();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapUint64Fixed64193Map() {
      return internalGetMutableFieldMapUint64Fixed64193();
    }

    public static final int FIELD_MAP_UINT64_FLOAT_194_FIELD_NUMBER = 194;
    private static final class FieldMapUint64Float194DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Float> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Float>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.FLOAT,
                  0F);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Float> fieldMapUint64Float194_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Float>
    internalGetFieldMapUint64Float194() {
      return fieldMapUint64Float194_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Float>
    internalGetMutableFieldMapUint64Float194() {
      if (!fieldMapUint64Float194_.isMutable()) {
        fieldMapUint64Float194_ = fieldMapUint64Float194_.mutableCopy();
      }
      return fieldMapUint64Float194_;
    }
    @java.lang.Override

    public int getFieldMapUint64Float194Count() {
      return internalGetFieldMapUint64Float194().size();
    }
    /**
     * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64Float194(
        long key) {
      
      return internalGetFieldMapUint64Float194().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint64Float194Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapUint64Float194() {
      return getFieldMapUint64Float194Map();
    }
    /**
     * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapUint64Float194Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint64Float194());
    }
    /**
     * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
     */
    @java.lang.Override

    public float getFieldMapUint64Float194OrDefault(
        long key,
        float defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Float> map =
          internalGetFieldMapUint64Float194();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
     */
    @java.lang.Override

    public float getFieldMapUint64Float194OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Float> map =
          internalGetFieldMapUint64Float194();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Float>
    getMutableFieldMapUint64Float194Map() {
      return internalGetMutableFieldMapUint64Float194();
    }

    public static final int FIELD_MAP_UINT64_INT32_195_FIELD_NUMBER = 195;
    private static final class FieldMapUint64Int32195DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapUint64Int32195_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapUint64Int32195() {
      return fieldMapUint64Int32195_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapUint64Int32195() {
      if (!fieldMapUint64Int32195_.isMutable()) {
        fieldMapUint64Int32195_ = fieldMapUint64Int32195_.mutableCopy();
      }
      return fieldMapUint64Int32195_;
    }
    @java.lang.Override

    public int getFieldMapUint64Int32195Count() {
      return internalGetFieldMapUint64Int32195().size();
    }
    /**
     * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64Int32195(
        long key) {
      
      return internalGetFieldMapUint64Int32195().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint64Int32195Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Int32195() {
      return getFieldMapUint64Int32195Map();
    }
    /**
     * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Int32195Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint64Int32195());
    }
    /**
     * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
     */
    @java.lang.Override

    public int getFieldMapUint64Int32195OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapUint64Int32195();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
     */
    @java.lang.Override

    public int getFieldMapUint64Int32195OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapUint64Int32195();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapUint64Int32195Map() {
      return internalGetMutableFieldMapUint64Int32195();
    }

    public static final int FIELD_MAP_UINT64_INT64_196_FIELD_NUMBER = 196;
    private static final class FieldMapUint64Int64196DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapUint64Int64196_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapUint64Int64196() {
      return fieldMapUint64Int64196_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapUint64Int64196() {
      if (!fieldMapUint64Int64196_.isMutable()) {
        fieldMapUint64Int64196_ = fieldMapUint64Int64196_.mutableCopy();
      }
      return fieldMapUint64Int64196_;
    }
    @java.lang.Override

    public int getFieldMapUint64Int64196Count() {
      return internalGetFieldMapUint64Int64196().size();
    }
    /**
     * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64Int64196(
        long key) {
      
      return internalGetFieldMapUint64Int64196().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint64Int64196Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Int64196() {
      return getFieldMapUint64Int64196Map();
    }
    /**
     * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Int64196Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint64Int64196());
    }
    /**
     * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
     */
    @java.lang.Override

    public long getFieldMapUint64Int64196OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapUint64Int64196();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
     */
    @java.lang.Override

    public long getFieldMapUint64Int64196OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapUint64Int64196();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapUint64Int64196Map() {
      return internalGetMutableFieldMapUint64Int64196();
    }

    public static final int FIELD_MAP_UINT64_MESSAGE_197_FIELD_NUMBER = 197;
    private static final class FieldMapUint64Message197DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> fieldMapUint64Message197_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetFieldMapUint64Message197() {
      return fieldMapUint64Message197_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    internalGetMutableFieldMapUint64Message197() {
      if (!fieldMapUint64Message197_.isMutable()) {
        fieldMapUint64Message197_ = fieldMapUint64Message197_.mutableCopy();
      }
      return fieldMapUint64Message197_;
    }
    @java.lang.Override

    public int getFieldMapUint64Message197Count() {
      return internalGetFieldMapUint64Message197().size();
    }
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64Message197(
        long key) {
      
      return internalGetFieldMapUint64Message197().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint64Message197Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapUint64Message197() {
      return getFieldMapUint64Message197Map();
    }
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapUint64Message197Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint64Message197());
    }
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapUint64Message197OrDefault(
        long key,
        com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapUint64Message197();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
     */
    @java.lang.Override

    public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapUint64Message197OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
          internalGetFieldMapUint64Message197();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
     */
    private java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message>
    getMutableFieldMapUint64Message197Map() {
      return internalGetMutableFieldMapUint64Message197();
    }

    public static final int FIELD_MAP_UINT64_SFIXED32_198_FIELD_NUMBER = 198;
    private static final class FieldMapUint64Sfixed32198DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SFIXED32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapUint64Sfixed32198_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapUint64Sfixed32198() {
      return fieldMapUint64Sfixed32198_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapUint64Sfixed32198() {
      if (!fieldMapUint64Sfixed32198_.isMutable()) {
        fieldMapUint64Sfixed32198_ = fieldMapUint64Sfixed32198_.mutableCopy();
      }
      return fieldMapUint64Sfixed32198_;
    }
    @java.lang.Override

    public int getFieldMapUint64Sfixed32198Count() {
      return internalGetFieldMapUint64Sfixed32198().size();
    }
    /**
     * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64Sfixed32198(
        long key) {
      
      return internalGetFieldMapUint64Sfixed32198().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint64Sfixed32198Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Sfixed32198() {
      return getFieldMapUint64Sfixed32198Map();
    }
    /**
     * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Sfixed32198Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint64Sfixed32198());
    }
    /**
     * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
     */
    @java.lang.Override

    public int getFieldMapUint64Sfixed32198OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapUint64Sfixed32198();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
     */
    @java.lang.Override

    public int getFieldMapUint64Sfixed32198OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapUint64Sfixed32198();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapUint64Sfixed32198Map() {
      return internalGetMutableFieldMapUint64Sfixed32198();
    }

    public static final int FIELD_MAP_UINT64_SFIXED64_199_FIELD_NUMBER = 199;
    private static final class FieldMapUint64Sfixed64199DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SFIXED64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapUint64Sfixed64199_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapUint64Sfixed64199() {
      return fieldMapUint64Sfixed64199_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapUint64Sfixed64199() {
      if (!fieldMapUint64Sfixed64199_.isMutable()) {
        fieldMapUint64Sfixed64199_ = fieldMapUint64Sfixed64199_.mutableCopy();
      }
      return fieldMapUint64Sfixed64199_;
    }
    @java.lang.Override

    public int getFieldMapUint64Sfixed64199Count() {
      return internalGetFieldMapUint64Sfixed64199().size();
    }
    /**
     * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64Sfixed64199(
        long key) {
      
      return internalGetFieldMapUint64Sfixed64199().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint64Sfixed64199Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Sfixed64199() {
      return getFieldMapUint64Sfixed64199Map();
    }
    /**
     * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Sfixed64199Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint64Sfixed64199());
    }
    /**
     * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
     */
    @java.lang.Override

    public long getFieldMapUint64Sfixed64199OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapUint64Sfixed64199();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
     */
    @java.lang.Override

    public long getFieldMapUint64Sfixed64199OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapUint64Sfixed64199();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapUint64Sfixed64199Map() {
      return internalGetMutableFieldMapUint64Sfixed64199();
    }

    public static final int FIELD_MAP_UINT64_SINT32_200_FIELD_NUMBER = 200;
    private static final class FieldMapUint64Sint32200DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapUint64Sint32200_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapUint64Sint32200() {
      return fieldMapUint64Sint32200_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapUint64Sint32200() {
      if (!fieldMapUint64Sint32200_.isMutable()) {
        fieldMapUint64Sint32200_ = fieldMapUint64Sint32200_.mutableCopy();
      }
      return fieldMapUint64Sint32200_;
    }
    @java.lang.Override

    public int getFieldMapUint64Sint32200Count() {
      return internalGetFieldMapUint64Sint32200().size();
    }
    /**
     * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64Sint32200(
        long key) {
      
      return internalGetFieldMapUint64Sint32200().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint64Sint32200Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Sint32200() {
      return getFieldMapUint64Sint32200Map();
    }
    /**
     * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Sint32200Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint64Sint32200());
    }
    /**
     * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
     */
    @java.lang.Override

    public int getFieldMapUint64Sint32200OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapUint64Sint32200();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
     */
    @java.lang.Override

    public int getFieldMapUint64Sint32200OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapUint64Sint32200();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapUint64Sint32200Map() {
      return internalGetMutableFieldMapUint64Sint32200();
    }

    public static final int FIELD_MAP_UINT64_SINT64_201_FIELD_NUMBER = 201;
    private static final class FieldMapUint64Sint64201DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.SINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapUint64Sint64201_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapUint64Sint64201() {
      return fieldMapUint64Sint64201_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapUint64Sint64201() {
      if (!fieldMapUint64Sint64201_.isMutable()) {
        fieldMapUint64Sint64201_ = fieldMapUint64Sint64201_.mutableCopy();
      }
      return fieldMapUint64Sint64201_;
    }
    @java.lang.Override

    public int getFieldMapUint64Sint64201Count() {
      return internalGetFieldMapUint64Sint64201().size();
    }
    /**
     * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64Sint64201(
        long key) {
      
      return internalGetFieldMapUint64Sint64201().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint64Sint64201Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Sint64201() {
      return getFieldMapUint64Sint64201Map();
    }
    /**
     * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Sint64201Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint64Sint64201());
    }
    /**
     * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
     */
    @java.lang.Override

    public long getFieldMapUint64Sint64201OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapUint64Sint64201();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
     */
    @java.lang.Override

    public long getFieldMapUint64Sint64201OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapUint64Sint64201();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapUint64Sint64201Map() {
      return internalGetMutableFieldMapUint64Sint64201();
    }

    public static final int FIELD_MAP_UINT64_STRING_202_FIELD_NUMBER = 202;
    private static final class FieldMapUint64String202DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.String> fieldMapUint64String202_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.String>
    internalGetFieldMapUint64String202() {
      return fieldMapUint64String202_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.String>
    internalGetMutableFieldMapUint64String202() {
      if (!fieldMapUint64String202_.isMutable()) {
        fieldMapUint64String202_ = fieldMapUint64String202_.mutableCopy();
      }
      return fieldMapUint64String202_;
    }
    @java.lang.Override

    public int getFieldMapUint64String202Count() {
      return internalGetFieldMapUint64String202().size();
    }
    /**
     * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64String202(
        long key) {
      
      return internalGetFieldMapUint64String202().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint64String202Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.String> getFieldMapUint64String202() {
      return getFieldMapUint64String202Map();
    }
    /**
     * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.String> getFieldMapUint64String202Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint64String202());
    }
    /**
     * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapUint64String202OrDefault(
        long key,
        java.lang.String defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.String> map =
          internalGetFieldMapUint64String202();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
     */
    @java.lang.Override

    public java.lang.String getFieldMapUint64String202OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.String> map =
          internalGetFieldMapUint64String202();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.String>
    getMutableFieldMapUint64String202Map() {
      return internalGetMutableFieldMapUint64String202();
    }

    public static final int FIELD_MAP_UINT64_UINT32_203_FIELD_NUMBER = 203;
    private static final class FieldMapUint64Uint32203DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Integer> fieldMapUint64Uint32203_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetFieldMapUint64Uint32203() {
      return fieldMapUint64Uint32203_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Integer>
    internalGetMutableFieldMapUint64Uint32203() {
      if (!fieldMapUint64Uint32203_.isMutable()) {
        fieldMapUint64Uint32203_ = fieldMapUint64Uint32203_.mutableCopy();
      }
      return fieldMapUint64Uint32203_;
    }
    @java.lang.Override

    public int getFieldMapUint64Uint32203Count() {
      return internalGetFieldMapUint64Uint32203().size();
    }
    /**
     * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64Uint32203(
        long key) {
      
      return internalGetFieldMapUint64Uint32203().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint64Uint32203Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Uint32203() {
      return getFieldMapUint64Uint32203Map();
    }
    /**
     * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Uint32203Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint64Uint32203());
    }
    /**
     * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
     */
    @java.lang.Override

    public int getFieldMapUint64Uint32203OrDefault(
        long key,
        int defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapUint64Uint32203();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
     */
    @java.lang.Override

    public int getFieldMapUint64Uint32203OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Integer> map =
          internalGetFieldMapUint64Uint32203();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Integer>
    getMutableFieldMapUint64Uint32203Map() {
      return internalGetMutableFieldMapUint64Uint32203();
    }

    public static final int FIELD_MAP_UINT64_UINT64_204_FIELD_NUMBER = 204;
    private static final class FieldMapUint64Uint64204DefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.UINT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Long, java.lang.Long> fieldMapUint64Uint64204_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetFieldMapUint64Uint64204() {
      return fieldMapUint64Uint64204_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Long, java.lang.Long>
    internalGetMutableFieldMapUint64Uint64204() {
      if (!fieldMapUint64Uint64204_.isMutable()) {
        fieldMapUint64Uint64204_ = fieldMapUint64Uint64204_.mutableCopy();
      }
      return fieldMapUint64Uint64204_;
    }
    @java.lang.Override

    public int getFieldMapUint64Uint64204Count() {
      return internalGetFieldMapUint64Uint64204().size();
    }
    /**
     * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
     */
    @java.lang.Override

    public boolean containsFieldMapUint64Uint64204(
        long key) {
      
      return internalGetFieldMapUint64Uint64204().containsKey(key);
    }
    /**
     * Use {@link #getFieldMapUint64Uint64204Map()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Uint64204() {
      return getFieldMapUint64Uint64204Map();
    }
    /**
     * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Uint64204Map() {
      return java.util.Collections.unmodifiableMap(
          internalGetFieldMapUint64Uint64204());
    }
    /**
     * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
     */
    @java.lang.Override

    public long getFieldMapUint64Uint64204OrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapUint64Uint64204();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
     */
    @java.lang.Override

    public long getFieldMapUint64Uint64204OrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFieldMapUint64Uint64204();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
     */
    private java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFieldMapUint64Uint64204Map() {
      return internalGetMutableFieldMapUint64Uint64204();
    }

    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code protobuf.experimental.Proto2MessageWithMaps}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps, Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf.experimental.Proto2MessageWithMaps)
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMapsOrBuilder {
      // Construct using com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      @java.lang.Override

      public int getFieldMapBoolBool1Count() {
        return instance.getFieldMapBoolBool1Map().size();
      }
      /**
       * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolBool1(
          boolean key) {
        
        return instance.getFieldMapBoolBool1Map().containsKey(key);
      }

      public Builder clearFieldMapBoolBool1() {
        copyOnWrite();
        instance.getMutableFieldMapBoolBool1Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
       */

      public Builder removeFieldMapBoolBool1(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolBool1Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolBool1Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, java.lang.Boolean> getFieldMapBoolBool1() {
        return getFieldMapBoolBool1Map();
      }
      /**
       * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, java.lang.Boolean> getFieldMapBoolBool1Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolBool1Map());
      }
      /**
       * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
       */
      @java.lang.Override

      public boolean getFieldMapBoolBool1OrDefault(
          boolean key,
          boolean defaultValue) {
        
        java.util.Map<java.lang.Boolean, java.lang.Boolean> map =
            instance.getFieldMapBoolBool1Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
       */
      @java.lang.Override

      public boolean getFieldMapBoolBool1OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, java.lang.Boolean> map =
            instance.getFieldMapBoolBool1Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
       */
      public Builder putFieldMapBoolBool1(
          boolean key,
          boolean value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapBoolBool1Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, bool&gt; field_map_bool_bool_1 = 1;</code>
       */
      public Builder putAllFieldMapBoolBool1(
          java.util.Map<java.lang.Boolean, java.lang.Boolean> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolBool1Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapBoolBytes2Count() {
        return instance.getFieldMapBoolBytes2Map().size();
      }
      /**
       * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolBytes2(
          boolean key) {
        
        return instance.getFieldMapBoolBytes2Map().containsKey(key);
      }

      public Builder clearFieldMapBoolBytes2() {
        copyOnWrite();
        instance.getMutableFieldMapBoolBytes2Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
       */

      public Builder removeFieldMapBoolBytes2(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolBytes2Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolBytes2Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, com.google.protobuf.ByteString> getFieldMapBoolBytes2() {
        return getFieldMapBoolBytes2Map();
      }
      /**
       * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, com.google.protobuf.ByteString> getFieldMapBoolBytes2Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolBytes2Map());
      }
      /**
       * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapBoolBytes2OrDefault(
          boolean key,
          com.google.protobuf.ByteString defaultValue) {
        
        java.util.Map<java.lang.Boolean, com.google.protobuf.ByteString> map =
            instance.getFieldMapBoolBytes2Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapBoolBytes2OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, com.google.protobuf.ByteString> map =
            instance.getFieldMapBoolBytes2Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
       */
      public Builder putFieldMapBoolBytes2(
          boolean key,
          com.google.protobuf.ByteString value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapBoolBytes2Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, bytes&gt; field_map_bool_bytes_2 = 2;</code>
       */
      public Builder putAllFieldMapBoolBytes2(
          java.util.Map<java.lang.Boolean, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolBytes2Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapBoolDouble3Count() {
        return instance.getFieldMapBoolDouble3Map().size();
      }
      /**
       * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolDouble3(
          boolean key) {
        
        return instance.getFieldMapBoolDouble3Map().containsKey(key);
      }

      public Builder clearFieldMapBoolDouble3() {
        copyOnWrite();
        instance.getMutableFieldMapBoolDouble3Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
       */

      public Builder removeFieldMapBoolDouble3(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolDouble3Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolDouble3Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, java.lang.Double> getFieldMapBoolDouble3() {
        return getFieldMapBoolDouble3Map();
      }
      /**
       * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, java.lang.Double> getFieldMapBoolDouble3Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolDouble3Map());
      }
      /**
       * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
       */
      @java.lang.Override

      public double getFieldMapBoolDouble3OrDefault(
          boolean key,
          double defaultValue) {
        
        java.util.Map<java.lang.Boolean, java.lang.Double> map =
            instance.getFieldMapBoolDouble3Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
       */
      @java.lang.Override

      public double getFieldMapBoolDouble3OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, java.lang.Double> map =
            instance.getFieldMapBoolDouble3Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
       */
      public Builder putFieldMapBoolDouble3(
          boolean key,
          double value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapBoolDouble3Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, double&gt; field_map_bool_double_3 = 3;</code>
       */
      public Builder putAllFieldMapBoolDouble3(
          java.util.Map<java.lang.Boolean, java.lang.Double> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolDouble3Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapBoolEnum4Count() {
        return instance.getFieldMapBoolEnum4Map().size();
      }
      /**
       * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolEnum4(
          boolean key) {
        
        return instance.getFieldMapBoolEnum4Map().containsKey(key);
      }

      public Builder clearFieldMapBoolEnum4() {
        copyOnWrite();
        instance.getMutableFieldMapBoolEnum4Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
       */

      public Builder removeFieldMapBoolEnum4(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolEnum4Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolEnum4Map()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapBoolEnum4() {
        return getFieldMapBoolEnum4Map();
      }
      /**
       * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapBoolEnum4Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolEnum4Map());
      }
      /**
       * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapBoolEnum4OrDefault(
          boolean key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
        
        java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapBoolEnum4Map();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapBoolEnum4OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapBoolEnum4Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
       */
      public Builder putFieldMapBoolEnum4(
          boolean key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapBoolEnum4Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_bool_enum_4 = 4;</code>
       */
      public Builder putAllFieldMapBoolEnum4(
          java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolEnum4Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapBoolFixed325Count() {
        return instance.getFieldMapBoolFixed325Map().size();
      }
      /**
       * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolFixed325(
          boolean key) {
        
        return instance.getFieldMapBoolFixed325Map().containsKey(key);
      }

      public Builder clearFieldMapBoolFixed325() {
        copyOnWrite();
        instance.getMutableFieldMapBoolFixed325Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
       */

      public Builder removeFieldMapBoolFixed325(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolFixed325Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolFixed325Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolFixed325() {
        return getFieldMapBoolFixed325Map();
      }
      /**
       * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolFixed325Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolFixed325Map());
      }
      /**
       * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
       */
      @java.lang.Override

      public int getFieldMapBoolFixed325OrDefault(
          boolean key,
          int defaultValue) {
        
        java.util.Map<java.lang.Boolean, java.lang.Integer> map =
            instance.getFieldMapBoolFixed325Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
       */
      @java.lang.Override

      public int getFieldMapBoolFixed325OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, java.lang.Integer> map =
            instance.getFieldMapBoolFixed325Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
       */
      public Builder putFieldMapBoolFixed325(
          boolean key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapBoolFixed325Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, fixed32&gt; field_map_bool_fixed32_5 = 5;</code>
       */
      public Builder putAllFieldMapBoolFixed325(
          java.util.Map<java.lang.Boolean, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolFixed325Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapBoolFixed646Count() {
        return instance.getFieldMapBoolFixed646Map().size();
      }
      /**
       * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolFixed646(
          boolean key) {
        
        return instance.getFieldMapBoolFixed646Map().containsKey(key);
      }

      public Builder clearFieldMapBoolFixed646() {
        copyOnWrite();
        instance.getMutableFieldMapBoolFixed646Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
       */

      public Builder removeFieldMapBoolFixed646(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolFixed646Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolFixed646Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolFixed646() {
        return getFieldMapBoolFixed646Map();
      }
      /**
       * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolFixed646Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolFixed646Map());
      }
      /**
       * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
       */
      @java.lang.Override

      public long getFieldMapBoolFixed646OrDefault(
          boolean key,
          long defaultValue) {
        
        java.util.Map<java.lang.Boolean, java.lang.Long> map =
            instance.getFieldMapBoolFixed646Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
       */
      @java.lang.Override

      public long getFieldMapBoolFixed646OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, java.lang.Long> map =
            instance.getFieldMapBoolFixed646Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
       */
      public Builder putFieldMapBoolFixed646(
          boolean key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapBoolFixed646Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, fixed64&gt; field_map_bool_fixed64_6 = 6;</code>
       */
      public Builder putAllFieldMapBoolFixed646(
          java.util.Map<java.lang.Boolean, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolFixed646Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapBoolFloat7Count() {
        return instance.getFieldMapBoolFloat7Map().size();
      }
      /**
       * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolFloat7(
          boolean key) {
        
        return instance.getFieldMapBoolFloat7Map().containsKey(key);
      }

      public Builder clearFieldMapBoolFloat7() {
        copyOnWrite();
        instance.getMutableFieldMapBoolFloat7Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
       */

      public Builder removeFieldMapBoolFloat7(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolFloat7Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolFloat7Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, java.lang.Float> getFieldMapBoolFloat7() {
        return getFieldMapBoolFloat7Map();
      }
      /**
       * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, java.lang.Float> getFieldMapBoolFloat7Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolFloat7Map());
      }
      /**
       * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
       */
      @java.lang.Override

      public float getFieldMapBoolFloat7OrDefault(
          boolean key,
          float defaultValue) {
        
        java.util.Map<java.lang.Boolean, java.lang.Float> map =
            instance.getFieldMapBoolFloat7Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
       */
      @java.lang.Override

      public float getFieldMapBoolFloat7OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, java.lang.Float> map =
            instance.getFieldMapBoolFloat7Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
       */
      public Builder putFieldMapBoolFloat7(
          boolean key,
          float value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapBoolFloat7Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, float&gt; field_map_bool_float_7 = 7;</code>
       */
      public Builder putAllFieldMapBoolFloat7(
          java.util.Map<java.lang.Boolean, java.lang.Float> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolFloat7Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapBoolInt328Count() {
        return instance.getFieldMapBoolInt328Map().size();
      }
      /**
       * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolInt328(
          boolean key) {
        
        return instance.getFieldMapBoolInt328Map().containsKey(key);
      }

      public Builder clearFieldMapBoolInt328() {
        copyOnWrite();
        instance.getMutableFieldMapBoolInt328Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
       */

      public Builder removeFieldMapBoolInt328(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolInt328Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolInt328Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolInt328() {
        return getFieldMapBoolInt328Map();
      }
      /**
       * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolInt328Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolInt328Map());
      }
      /**
       * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
       */
      @java.lang.Override

      public int getFieldMapBoolInt328OrDefault(
          boolean key,
          int defaultValue) {
        
        java.util.Map<java.lang.Boolean, java.lang.Integer> map =
            instance.getFieldMapBoolInt328Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
       */
      @java.lang.Override

      public int getFieldMapBoolInt328OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, java.lang.Integer> map =
            instance.getFieldMapBoolInt328Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
       */
      public Builder putFieldMapBoolInt328(
          boolean key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapBoolInt328Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, int32&gt; field_map_bool_int32_8 = 8;</code>
       */
      public Builder putAllFieldMapBoolInt328(
          java.util.Map<java.lang.Boolean, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolInt328Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapBoolInt649Count() {
        return instance.getFieldMapBoolInt649Map().size();
      }
      /**
       * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolInt649(
          boolean key) {
        
        return instance.getFieldMapBoolInt649Map().containsKey(key);
      }

      public Builder clearFieldMapBoolInt649() {
        copyOnWrite();
        instance.getMutableFieldMapBoolInt649Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
       */

      public Builder removeFieldMapBoolInt649(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolInt649Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolInt649Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolInt649() {
        return getFieldMapBoolInt649Map();
      }
      /**
       * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolInt649Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolInt649Map());
      }
      /**
       * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
       */
      @java.lang.Override

      public long getFieldMapBoolInt649OrDefault(
          boolean key,
          long defaultValue) {
        
        java.util.Map<java.lang.Boolean, java.lang.Long> map =
            instance.getFieldMapBoolInt649Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
       */
      @java.lang.Override

      public long getFieldMapBoolInt649OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, java.lang.Long> map =
            instance.getFieldMapBoolInt649Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
       */
      public Builder putFieldMapBoolInt649(
          boolean key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapBoolInt649Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, int64&gt; field_map_bool_int64_9 = 9;</code>
       */
      public Builder putAllFieldMapBoolInt649(
          java.util.Map<java.lang.Boolean, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolInt649Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapBoolMessage10Count() {
        return instance.getFieldMapBoolMessage10Map().size();
      }
      /**
       * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolMessage10(
          boolean key) {
        
        return instance.getFieldMapBoolMessage10Map().containsKey(key);
      }

      public Builder clearFieldMapBoolMessage10() {
        copyOnWrite();
        instance.getMutableFieldMapBoolMessage10Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
       */

      public Builder removeFieldMapBoolMessage10(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolMessage10Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolMessage10Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapBoolMessage10() {
        return getFieldMapBoolMessage10Map();
      }
      /**
       * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapBoolMessage10Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolMessage10Map());
      }
      /**
       * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapBoolMessage10OrDefault(
          boolean key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
        
        java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapBoolMessage10Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapBoolMessage10OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapBoolMessage10Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
       */
      public Builder putFieldMapBoolMessage10(
          boolean key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapBoolMessage10Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, .protobuf.experimental.Proto2Message&gt; field_map_bool_message_10 = 10;</code>
       */
      public Builder putAllFieldMapBoolMessage10(
          java.util.Map<java.lang.Boolean, com.google.protobuf.testing.Proto2Testing.Proto2Message> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolMessage10Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapBoolSfixed3211Count() {
        return instance.getFieldMapBoolSfixed3211Map().size();
      }
      /**
       * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolSfixed3211(
          boolean key) {
        
        return instance.getFieldMapBoolSfixed3211Map().containsKey(key);
      }

      public Builder clearFieldMapBoolSfixed3211() {
        copyOnWrite();
        instance.getMutableFieldMapBoolSfixed3211Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
       */

      public Builder removeFieldMapBoolSfixed3211(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolSfixed3211Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolSfixed3211Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolSfixed3211() {
        return getFieldMapBoolSfixed3211Map();
      }
      /**
       * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolSfixed3211Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolSfixed3211Map());
      }
      /**
       * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
       */
      @java.lang.Override

      public int getFieldMapBoolSfixed3211OrDefault(
          boolean key,
          int defaultValue) {
        
        java.util.Map<java.lang.Boolean, java.lang.Integer> map =
            instance.getFieldMapBoolSfixed3211Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
       */
      @java.lang.Override

      public int getFieldMapBoolSfixed3211OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, java.lang.Integer> map =
            instance.getFieldMapBoolSfixed3211Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
       */
      public Builder putFieldMapBoolSfixed3211(
          boolean key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapBoolSfixed3211Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, sfixed32&gt; field_map_bool_sfixed32_11 = 11;</code>
       */
      public Builder putAllFieldMapBoolSfixed3211(
          java.util.Map<java.lang.Boolean, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolSfixed3211Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapBoolSfixed6412Count() {
        return instance.getFieldMapBoolSfixed6412Map().size();
      }
      /**
       * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolSfixed6412(
          boolean key) {
        
        return instance.getFieldMapBoolSfixed6412Map().containsKey(key);
      }

      public Builder clearFieldMapBoolSfixed6412() {
        copyOnWrite();
        instance.getMutableFieldMapBoolSfixed6412Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
       */

      public Builder removeFieldMapBoolSfixed6412(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolSfixed6412Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolSfixed6412Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolSfixed6412() {
        return getFieldMapBoolSfixed6412Map();
      }
      /**
       * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolSfixed6412Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolSfixed6412Map());
      }
      /**
       * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
       */
      @java.lang.Override

      public long getFieldMapBoolSfixed6412OrDefault(
          boolean key,
          long defaultValue) {
        
        java.util.Map<java.lang.Boolean, java.lang.Long> map =
            instance.getFieldMapBoolSfixed6412Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
       */
      @java.lang.Override

      public long getFieldMapBoolSfixed6412OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, java.lang.Long> map =
            instance.getFieldMapBoolSfixed6412Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
       */
      public Builder putFieldMapBoolSfixed6412(
          boolean key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapBoolSfixed6412Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, sfixed64&gt; field_map_bool_sfixed64_12 = 12;</code>
       */
      public Builder putAllFieldMapBoolSfixed6412(
          java.util.Map<java.lang.Boolean, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolSfixed6412Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapBoolSint3213Count() {
        return instance.getFieldMapBoolSint3213Map().size();
      }
      /**
       * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolSint3213(
          boolean key) {
        
        return instance.getFieldMapBoolSint3213Map().containsKey(key);
      }

      public Builder clearFieldMapBoolSint3213() {
        copyOnWrite();
        instance.getMutableFieldMapBoolSint3213Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
       */

      public Builder removeFieldMapBoolSint3213(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolSint3213Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolSint3213Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolSint3213() {
        return getFieldMapBoolSint3213Map();
      }
      /**
       * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolSint3213Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolSint3213Map());
      }
      /**
       * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
       */
      @java.lang.Override

      public int getFieldMapBoolSint3213OrDefault(
          boolean key,
          int defaultValue) {
        
        java.util.Map<java.lang.Boolean, java.lang.Integer> map =
            instance.getFieldMapBoolSint3213Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
       */
      @java.lang.Override

      public int getFieldMapBoolSint3213OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, java.lang.Integer> map =
            instance.getFieldMapBoolSint3213Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
       */
      public Builder putFieldMapBoolSint3213(
          boolean key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapBoolSint3213Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, sint32&gt; field_map_bool_sint32_13 = 13;</code>
       */
      public Builder putAllFieldMapBoolSint3213(
          java.util.Map<java.lang.Boolean, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolSint3213Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapBoolSint6414Count() {
        return instance.getFieldMapBoolSint6414Map().size();
      }
      /**
       * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolSint6414(
          boolean key) {
        
        return instance.getFieldMapBoolSint6414Map().containsKey(key);
      }

      public Builder clearFieldMapBoolSint6414() {
        copyOnWrite();
        instance.getMutableFieldMapBoolSint6414Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
       */

      public Builder removeFieldMapBoolSint6414(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolSint6414Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolSint6414Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolSint6414() {
        return getFieldMapBoolSint6414Map();
      }
      /**
       * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolSint6414Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolSint6414Map());
      }
      /**
       * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
       */
      @java.lang.Override

      public long getFieldMapBoolSint6414OrDefault(
          boolean key,
          long defaultValue) {
        
        java.util.Map<java.lang.Boolean, java.lang.Long> map =
            instance.getFieldMapBoolSint6414Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
       */
      @java.lang.Override

      public long getFieldMapBoolSint6414OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, java.lang.Long> map =
            instance.getFieldMapBoolSint6414Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
       */
      public Builder putFieldMapBoolSint6414(
          boolean key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapBoolSint6414Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, sint64&gt; field_map_bool_sint64_14 = 14;</code>
       */
      public Builder putAllFieldMapBoolSint6414(
          java.util.Map<java.lang.Boolean, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolSint6414Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapBoolString15Count() {
        return instance.getFieldMapBoolString15Map().size();
      }
      /**
       * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolString15(
          boolean key) {
        
        return instance.getFieldMapBoolString15Map().containsKey(key);
      }

      public Builder clearFieldMapBoolString15() {
        copyOnWrite();
        instance.getMutableFieldMapBoolString15Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
       */

      public Builder removeFieldMapBoolString15(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolString15Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolString15Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, java.lang.String> getFieldMapBoolString15() {
        return getFieldMapBoolString15Map();
      }
      /**
       * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, java.lang.String> getFieldMapBoolString15Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolString15Map());
      }
      /**
       * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapBoolString15OrDefault(
          boolean key,
          java.lang.String defaultValue) {
        
        java.util.Map<java.lang.Boolean, java.lang.String> map =
            instance.getFieldMapBoolString15Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapBoolString15OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, java.lang.String> map =
            instance.getFieldMapBoolString15Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
       */
      public Builder putFieldMapBoolString15(
          boolean key,
          java.lang.String value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapBoolString15Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, string&gt; field_map_bool_string_15 = 15;</code>
       */
      public Builder putAllFieldMapBoolString15(
          java.util.Map<java.lang.Boolean, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolString15Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapBoolUint3216Count() {
        return instance.getFieldMapBoolUint3216Map().size();
      }
      /**
       * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolUint3216(
          boolean key) {
        
        return instance.getFieldMapBoolUint3216Map().containsKey(key);
      }

      public Builder clearFieldMapBoolUint3216() {
        copyOnWrite();
        instance.getMutableFieldMapBoolUint3216Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
       */

      public Builder removeFieldMapBoolUint3216(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolUint3216Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolUint3216Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolUint3216() {
        return getFieldMapBoolUint3216Map();
      }
      /**
       * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, java.lang.Integer> getFieldMapBoolUint3216Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolUint3216Map());
      }
      /**
       * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
       */
      @java.lang.Override

      public int getFieldMapBoolUint3216OrDefault(
          boolean key,
          int defaultValue) {
        
        java.util.Map<java.lang.Boolean, java.lang.Integer> map =
            instance.getFieldMapBoolUint3216Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
       */
      @java.lang.Override

      public int getFieldMapBoolUint3216OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, java.lang.Integer> map =
            instance.getFieldMapBoolUint3216Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
       */
      public Builder putFieldMapBoolUint3216(
          boolean key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapBoolUint3216Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, uint32&gt; field_map_bool_uint32_16 = 16;</code>
       */
      public Builder putAllFieldMapBoolUint3216(
          java.util.Map<java.lang.Boolean, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolUint3216Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapBoolUint6417Count() {
        return instance.getFieldMapBoolUint6417Map().size();
      }
      /**
       * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapBoolUint6417(
          boolean key) {
        
        return instance.getFieldMapBoolUint6417Map().containsKey(key);
      }

      public Builder clearFieldMapBoolUint6417() {
        copyOnWrite();
        instance.getMutableFieldMapBoolUint6417Map().clear();
        return this;
      }
      /**
       * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
       */

      public Builder removeFieldMapBoolUint6417(
          boolean key) {
        
        copyOnWrite();
        instance.getMutableFieldMapBoolUint6417Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapBoolUint6417Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolUint6417() {
        return getFieldMapBoolUint6417Map();
      }
      /**
       * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Boolean, java.lang.Long> getFieldMapBoolUint6417Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapBoolUint6417Map());
      }
      /**
       * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
       */
      @java.lang.Override

      public long getFieldMapBoolUint6417OrDefault(
          boolean key,
          long defaultValue) {
        
        java.util.Map<java.lang.Boolean, java.lang.Long> map =
            instance.getFieldMapBoolUint6417Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
       */
      @java.lang.Override

      public long getFieldMapBoolUint6417OrThrow(
          boolean key) {
        
        java.util.Map<java.lang.Boolean, java.lang.Long> map =
            instance.getFieldMapBoolUint6417Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
       */
      public Builder putFieldMapBoolUint6417(
          boolean key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapBoolUint6417Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;bool, uint64&gt; field_map_bool_uint64_17 = 17;</code>
       */
      public Builder putAllFieldMapBoolUint6417(
          java.util.Map<java.lang.Boolean, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapBoolUint6417Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32Bool18Count() {
        return instance.getFieldMapFixed32Bool18Map().size();
      }
      /**
       * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32Bool18(
          int key) {
        
        return instance.getFieldMapFixed32Bool18Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32Bool18() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Bool18Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
       */

      public Builder removeFieldMapFixed32Bool18(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Bool18Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32Bool18Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapFixed32Bool18() {
        return getFieldMapFixed32Bool18Map();
      }
      /**
       * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapFixed32Bool18Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32Bool18Map());
      }
      /**
       * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
       */
      @java.lang.Override

      public boolean getFieldMapFixed32Bool18OrDefault(
          int key,
          boolean defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Boolean> map =
            instance.getFieldMapFixed32Bool18Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
       */
      @java.lang.Override

      public boolean getFieldMapFixed32Bool18OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Boolean> map =
            instance.getFieldMapFixed32Bool18Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
       */
      public Builder putFieldMapFixed32Bool18(
          int key,
          boolean value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Bool18Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, bool&gt; field_map_fixed32_bool_18 = 18;</code>
       */
      public Builder putAllFieldMapFixed32Bool18(
          java.util.Map<java.lang.Integer, java.lang.Boolean> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Bool18Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32Bytes19Count() {
        return instance.getFieldMapFixed32Bytes19Map().size();
      }
      /**
       * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32Bytes19(
          int key) {
        
        return instance.getFieldMapFixed32Bytes19Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32Bytes19() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Bytes19Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
       */

      public Builder removeFieldMapFixed32Bytes19(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Bytes19Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32Bytes19Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapFixed32Bytes19() {
        return getFieldMapFixed32Bytes19Map();
      }
      /**
       * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapFixed32Bytes19Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32Bytes19Map());
      }
      /**
       * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapFixed32Bytes19OrDefault(
          int key,
          com.google.protobuf.ByteString defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
            instance.getFieldMapFixed32Bytes19Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapFixed32Bytes19OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
            instance.getFieldMapFixed32Bytes19Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
       */
      public Builder putFieldMapFixed32Bytes19(
          int key,
          com.google.protobuf.ByteString value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapFixed32Bytes19Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, bytes&gt; field_map_fixed32_bytes_19 = 19;</code>
       */
      public Builder putAllFieldMapFixed32Bytes19(
          java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Bytes19Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32Double20Count() {
        return instance.getFieldMapFixed32Double20Map().size();
      }
      /**
       * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32Double20(
          int key) {
        
        return instance.getFieldMapFixed32Double20Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32Double20() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Double20Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
       */

      public Builder removeFieldMapFixed32Double20(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Double20Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32Double20Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapFixed32Double20() {
        return getFieldMapFixed32Double20Map();
      }
      /**
       * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapFixed32Double20Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32Double20Map());
      }
      /**
       * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
       */
      @java.lang.Override

      public double getFieldMapFixed32Double20OrDefault(
          int key,
          double defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Double> map =
            instance.getFieldMapFixed32Double20Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
       */
      @java.lang.Override

      public double getFieldMapFixed32Double20OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Double> map =
            instance.getFieldMapFixed32Double20Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
       */
      public Builder putFieldMapFixed32Double20(
          int key,
          double value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Double20Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, double&gt; field_map_fixed32_double_20 = 20;</code>
       */
      public Builder putAllFieldMapFixed32Double20(
          java.util.Map<java.lang.Integer, java.lang.Double> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Double20Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32Enum21Count() {
        return instance.getFieldMapFixed32Enum21Map().size();
      }
      /**
       * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32Enum21(
          int key) {
        
        return instance.getFieldMapFixed32Enum21Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32Enum21() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Enum21Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
       */

      public Builder removeFieldMapFixed32Enum21(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Enum21Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32Enum21Map()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapFixed32Enum21() {
        return getFieldMapFixed32Enum21Map();
      }
      /**
       * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapFixed32Enum21Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32Enum21Map());
      }
      /**
       * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapFixed32Enum21OrDefault(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapFixed32Enum21Map();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapFixed32Enum21OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapFixed32Enum21Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
       */
      public Builder putFieldMapFixed32Enum21(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapFixed32Enum21Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed32_enum_21 = 21;</code>
       */
      public Builder putAllFieldMapFixed32Enum21(
          java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Enum21Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32Fixed3222Count() {
        return instance.getFieldMapFixed32Fixed3222Map().size();
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32Fixed3222(
          int key) {
        
        return instance.getFieldMapFixed32Fixed3222Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32Fixed3222() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Fixed3222Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
       */

      public Builder removeFieldMapFixed32Fixed3222(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Fixed3222Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32Fixed3222Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Fixed3222() {
        return getFieldMapFixed32Fixed3222Map();
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Fixed3222Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32Fixed3222Map());
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed32Fixed3222OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapFixed32Fixed3222Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed32Fixed3222OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapFixed32Fixed3222Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
       */
      public Builder putFieldMapFixed32Fixed3222(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Fixed3222Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, fixed32&gt; field_map_fixed32_fixed32_22 = 22;</code>
       */
      public Builder putAllFieldMapFixed32Fixed3222(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Fixed3222Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32Fixed6423Count() {
        return instance.getFieldMapFixed32Fixed6423Map().size();
      }
      /**
       * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32Fixed6423(
          int key) {
        
        return instance.getFieldMapFixed32Fixed6423Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32Fixed6423() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Fixed6423Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
       */

      public Builder removeFieldMapFixed32Fixed6423(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Fixed6423Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32Fixed6423Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Fixed6423() {
        return getFieldMapFixed32Fixed6423Map();
      }
      /**
       * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Fixed6423Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32Fixed6423Map());
      }
      /**
       * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed32Fixed6423OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapFixed32Fixed6423Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed32Fixed6423OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapFixed32Fixed6423Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
       */
      public Builder putFieldMapFixed32Fixed6423(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Fixed6423Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, fixed64&gt; field_map_fixed32_fixed64_23 = 23;</code>
       */
      public Builder putAllFieldMapFixed32Fixed6423(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Fixed6423Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32Float24Count() {
        return instance.getFieldMapFixed32Float24Map().size();
      }
      /**
       * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32Float24(
          int key) {
        
        return instance.getFieldMapFixed32Float24Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32Float24() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Float24Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
       */

      public Builder removeFieldMapFixed32Float24(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Float24Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32Float24Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapFixed32Float24() {
        return getFieldMapFixed32Float24Map();
      }
      /**
       * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapFixed32Float24Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32Float24Map());
      }
      /**
       * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
       */
      @java.lang.Override

      public float getFieldMapFixed32Float24OrDefault(
          int key,
          float defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Float> map =
            instance.getFieldMapFixed32Float24Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
       */
      @java.lang.Override

      public float getFieldMapFixed32Float24OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Float> map =
            instance.getFieldMapFixed32Float24Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
       */
      public Builder putFieldMapFixed32Float24(
          int key,
          float value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Float24Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, float&gt; field_map_fixed32_float_24 = 24;</code>
       */
      public Builder putAllFieldMapFixed32Float24(
          java.util.Map<java.lang.Integer, java.lang.Float> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Float24Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32Int3225Count() {
        return instance.getFieldMapFixed32Int3225Map().size();
      }
      /**
       * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32Int3225(
          int key) {
        
        return instance.getFieldMapFixed32Int3225Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32Int3225() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Int3225Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
       */

      public Builder removeFieldMapFixed32Int3225(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Int3225Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32Int3225Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Int3225() {
        return getFieldMapFixed32Int3225Map();
      }
      /**
       * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Int3225Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32Int3225Map());
      }
      /**
       * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed32Int3225OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapFixed32Int3225Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed32Int3225OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapFixed32Int3225Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
       */
      public Builder putFieldMapFixed32Int3225(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Int3225Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, int32&gt; field_map_fixed32_int32_25 = 25;</code>
       */
      public Builder putAllFieldMapFixed32Int3225(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Int3225Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32Int6426Count() {
        return instance.getFieldMapFixed32Int6426Map().size();
      }
      /**
       * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32Int6426(
          int key) {
        
        return instance.getFieldMapFixed32Int6426Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32Int6426() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Int6426Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
       */

      public Builder removeFieldMapFixed32Int6426(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Int6426Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32Int6426Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Int6426() {
        return getFieldMapFixed32Int6426Map();
      }
      /**
       * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Int6426Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32Int6426Map());
      }
      /**
       * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed32Int6426OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapFixed32Int6426Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed32Int6426OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapFixed32Int6426Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
       */
      public Builder putFieldMapFixed32Int6426(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Int6426Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, int64&gt; field_map_fixed32_int64_26 = 26;</code>
       */
      public Builder putAllFieldMapFixed32Int6426(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Int6426Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32Message27Count() {
        return instance.getFieldMapFixed32Message27Map().size();
      }
      /**
       * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32Message27(
          int key) {
        
        return instance.getFieldMapFixed32Message27Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32Message27() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Message27Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
       */

      public Builder removeFieldMapFixed32Message27(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Message27Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32Message27Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapFixed32Message27() {
        return getFieldMapFixed32Message27Map();
      }
      /**
       * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapFixed32Message27Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32Message27Map());
      }
      /**
       * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapFixed32Message27OrDefault(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapFixed32Message27Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapFixed32Message27OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapFixed32Message27Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
       */
      public Builder putFieldMapFixed32Message27(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapFixed32Message27Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, .protobuf.experimental.Proto2Message&gt; field_map_fixed32_message_27 = 27;</code>
       */
      public Builder putAllFieldMapFixed32Message27(
          java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Message27Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32Sfixed3228Count() {
        return instance.getFieldMapFixed32Sfixed3228Map().size();
      }
      /**
       * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32Sfixed3228(
          int key) {
        
        return instance.getFieldMapFixed32Sfixed3228Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32Sfixed3228() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Sfixed3228Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
       */

      public Builder removeFieldMapFixed32Sfixed3228(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Sfixed3228Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32Sfixed3228Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Sfixed3228() {
        return getFieldMapFixed32Sfixed3228Map();
      }
      /**
       * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Sfixed3228Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32Sfixed3228Map());
      }
      /**
       * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed32Sfixed3228OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapFixed32Sfixed3228Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed32Sfixed3228OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapFixed32Sfixed3228Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
       */
      public Builder putFieldMapFixed32Sfixed3228(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Sfixed3228Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, sfixed32&gt; field_map_fixed32_sfixed32_28 = 28;</code>
       */
      public Builder putAllFieldMapFixed32Sfixed3228(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Sfixed3228Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32Sfixed6429Count() {
        return instance.getFieldMapFixed32Sfixed6429Map().size();
      }
      /**
       * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32Sfixed6429(
          int key) {
        
        return instance.getFieldMapFixed32Sfixed6429Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32Sfixed6429() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Sfixed6429Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
       */

      public Builder removeFieldMapFixed32Sfixed6429(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Sfixed6429Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32Sfixed6429Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Sfixed6429() {
        return getFieldMapFixed32Sfixed6429Map();
      }
      /**
       * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Sfixed6429Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32Sfixed6429Map());
      }
      /**
       * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed32Sfixed6429OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapFixed32Sfixed6429Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed32Sfixed6429OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapFixed32Sfixed6429Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
       */
      public Builder putFieldMapFixed32Sfixed6429(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Sfixed6429Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, sfixed64&gt; field_map_fixed32_sfixed64_29 = 29;</code>
       */
      public Builder putAllFieldMapFixed32Sfixed6429(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Sfixed6429Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32Sint3230Count() {
        return instance.getFieldMapFixed32Sint3230Map().size();
      }
      /**
       * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32Sint3230(
          int key) {
        
        return instance.getFieldMapFixed32Sint3230Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32Sint3230() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Sint3230Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
       */

      public Builder removeFieldMapFixed32Sint3230(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Sint3230Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32Sint3230Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Sint3230() {
        return getFieldMapFixed32Sint3230Map();
      }
      /**
       * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Sint3230Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32Sint3230Map());
      }
      /**
       * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed32Sint3230OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapFixed32Sint3230Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed32Sint3230OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapFixed32Sint3230Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
       */
      public Builder putFieldMapFixed32Sint3230(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Sint3230Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, sint32&gt; field_map_fixed32_sint32_30 = 30;</code>
       */
      public Builder putAllFieldMapFixed32Sint3230(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Sint3230Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32Sint6431Count() {
        return instance.getFieldMapFixed32Sint6431Map().size();
      }
      /**
       * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32Sint6431(
          int key) {
        
        return instance.getFieldMapFixed32Sint6431Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32Sint6431() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Sint6431Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
       */

      public Builder removeFieldMapFixed32Sint6431(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Sint6431Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32Sint6431Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Sint6431() {
        return getFieldMapFixed32Sint6431Map();
      }
      /**
       * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Sint6431Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32Sint6431Map());
      }
      /**
       * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed32Sint6431OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapFixed32Sint6431Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed32Sint6431OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapFixed32Sint6431Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
       */
      public Builder putFieldMapFixed32Sint6431(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Sint6431Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, sint64&gt; field_map_fixed32_sint64_31 = 31;</code>
       */
      public Builder putAllFieldMapFixed32Sint6431(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Sint6431Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32String32Count() {
        return instance.getFieldMapFixed32String32Map().size();
      }
      /**
       * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32String32(
          int key) {
        
        return instance.getFieldMapFixed32String32Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32String32() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32String32Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
       */

      public Builder removeFieldMapFixed32String32(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32String32Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32String32Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapFixed32String32() {
        return getFieldMapFixed32String32Map();
      }
      /**
       * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapFixed32String32Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32String32Map());
      }
      /**
       * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapFixed32String32OrDefault(
          int key,
          java.lang.String defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.String> map =
            instance.getFieldMapFixed32String32Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapFixed32String32OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.String> map =
            instance.getFieldMapFixed32String32Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
       */
      public Builder putFieldMapFixed32String32(
          int key,
          java.lang.String value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapFixed32String32Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, string&gt; field_map_fixed32_string_32 = 32;</code>
       */
      public Builder putAllFieldMapFixed32String32(
          java.util.Map<java.lang.Integer, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32String32Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32Uint3233Count() {
        return instance.getFieldMapFixed32Uint3233Map().size();
      }
      /**
       * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32Uint3233(
          int key) {
        
        return instance.getFieldMapFixed32Uint3233Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32Uint3233() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Uint3233Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
       */

      public Builder removeFieldMapFixed32Uint3233(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Uint3233Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32Uint3233Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Uint3233() {
        return getFieldMapFixed32Uint3233Map();
      }
      /**
       * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapFixed32Uint3233Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32Uint3233Map());
      }
      /**
       * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed32Uint3233OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapFixed32Uint3233Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed32Uint3233OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapFixed32Uint3233Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
       */
      public Builder putFieldMapFixed32Uint3233(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Uint3233Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, uint32&gt; field_map_fixed32_uint32_33 = 33;</code>
       */
      public Builder putAllFieldMapFixed32Uint3233(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Uint3233Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed32Uint6434Count() {
        return instance.getFieldMapFixed32Uint6434Map().size();
      }
      /**
       * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed32Uint6434(
          int key) {
        
        return instance.getFieldMapFixed32Uint6434Map().containsKey(key);
      }

      public Builder clearFieldMapFixed32Uint6434() {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Uint6434Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
       */

      public Builder removeFieldMapFixed32Uint6434(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Uint6434Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed32Uint6434Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Uint6434() {
        return getFieldMapFixed32Uint6434Map();
      }
      /**
       * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapFixed32Uint6434Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed32Uint6434Map());
      }
      /**
       * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed32Uint6434OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapFixed32Uint6434Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed32Uint6434OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapFixed32Uint6434Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
       */
      public Builder putFieldMapFixed32Uint6434(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed32Uint6434Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed32, uint64&gt; field_map_fixed32_uint64_34 = 34;</code>
       */
      public Builder putAllFieldMapFixed32Uint6434(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed32Uint6434Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64Bool35Count() {
        return instance.getFieldMapFixed64Bool35Map().size();
      }
      /**
       * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64Bool35(
          long key) {
        
        return instance.getFieldMapFixed64Bool35Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64Bool35() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Bool35Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
       */

      public Builder removeFieldMapFixed64Bool35(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Bool35Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64Bool35Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapFixed64Bool35() {
        return getFieldMapFixed64Bool35Map();
      }
      /**
       * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapFixed64Bool35Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64Bool35Map());
      }
      /**
       * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
       */
      @java.lang.Override

      public boolean getFieldMapFixed64Bool35OrDefault(
          long key,
          boolean defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Boolean> map =
            instance.getFieldMapFixed64Bool35Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
       */
      @java.lang.Override

      public boolean getFieldMapFixed64Bool35OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Boolean> map =
            instance.getFieldMapFixed64Bool35Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
       */
      public Builder putFieldMapFixed64Bool35(
          long key,
          boolean value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Bool35Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, bool&gt; field_map_fixed64_bool_35 = 35;</code>
       */
      public Builder putAllFieldMapFixed64Bool35(
          java.util.Map<java.lang.Long, java.lang.Boolean> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Bool35Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64Bytes36Count() {
        return instance.getFieldMapFixed64Bytes36Map().size();
      }
      /**
       * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64Bytes36(
          long key) {
        
        return instance.getFieldMapFixed64Bytes36Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64Bytes36() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Bytes36Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
       */

      public Builder removeFieldMapFixed64Bytes36(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Bytes36Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64Bytes36Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapFixed64Bytes36() {
        return getFieldMapFixed64Bytes36Map();
      }
      /**
       * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapFixed64Bytes36Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64Bytes36Map());
      }
      /**
       * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapFixed64Bytes36OrDefault(
          long key,
          com.google.protobuf.ByteString defaultValue) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
            instance.getFieldMapFixed64Bytes36Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapFixed64Bytes36OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
            instance.getFieldMapFixed64Bytes36Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
       */
      public Builder putFieldMapFixed64Bytes36(
          long key,
          com.google.protobuf.ByteString value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapFixed64Bytes36Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, bytes&gt; field_map_fixed64_bytes_36 = 36;</code>
       */
      public Builder putAllFieldMapFixed64Bytes36(
          java.util.Map<java.lang.Long, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Bytes36Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64Double37Count() {
        return instance.getFieldMapFixed64Double37Map().size();
      }
      /**
       * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64Double37(
          long key) {
        
        return instance.getFieldMapFixed64Double37Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64Double37() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Double37Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
       */

      public Builder removeFieldMapFixed64Double37(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Double37Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64Double37Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapFixed64Double37() {
        return getFieldMapFixed64Double37Map();
      }
      /**
       * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapFixed64Double37Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64Double37Map());
      }
      /**
       * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
       */
      @java.lang.Override

      public double getFieldMapFixed64Double37OrDefault(
          long key,
          double defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Double> map =
            instance.getFieldMapFixed64Double37Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
       */
      @java.lang.Override

      public double getFieldMapFixed64Double37OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Double> map =
            instance.getFieldMapFixed64Double37Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
       */
      public Builder putFieldMapFixed64Double37(
          long key,
          double value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Double37Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, double&gt; field_map_fixed64_double_37 = 37;</code>
       */
      public Builder putAllFieldMapFixed64Double37(
          java.util.Map<java.lang.Long, java.lang.Double> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Double37Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64Enum38Count() {
        return instance.getFieldMapFixed64Enum38Map().size();
      }
      /**
       * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64Enum38(
          long key) {
        
        return instance.getFieldMapFixed64Enum38Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64Enum38() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Enum38Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
       */

      public Builder removeFieldMapFixed64Enum38(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Enum38Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64Enum38Map()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapFixed64Enum38() {
        return getFieldMapFixed64Enum38Map();
      }
      /**
       * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapFixed64Enum38Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64Enum38Map());
      }
      /**
       * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapFixed64Enum38OrDefault(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapFixed64Enum38Map();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapFixed64Enum38OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapFixed64Enum38Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
       */
      public Builder putFieldMapFixed64Enum38(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapFixed64Enum38Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_fixed64_enum_38 = 38;</code>
       */
      public Builder putAllFieldMapFixed64Enum38(
          java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Enum38Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64Fixed3239Count() {
        return instance.getFieldMapFixed64Fixed3239Map().size();
      }
      /**
       * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64Fixed3239(
          long key) {
        
        return instance.getFieldMapFixed64Fixed3239Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64Fixed3239() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Fixed3239Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
       */

      public Builder removeFieldMapFixed64Fixed3239(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Fixed3239Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64Fixed3239Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Fixed3239() {
        return getFieldMapFixed64Fixed3239Map();
      }
      /**
       * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Fixed3239Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64Fixed3239Map());
      }
      /**
       * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed64Fixed3239OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapFixed64Fixed3239Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed64Fixed3239OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapFixed64Fixed3239Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
       */
      public Builder putFieldMapFixed64Fixed3239(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Fixed3239Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, fixed32&gt; field_map_fixed64_fixed32_39 = 39;</code>
       */
      public Builder putAllFieldMapFixed64Fixed3239(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Fixed3239Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64Fixed6440Count() {
        return instance.getFieldMapFixed64Fixed6440Map().size();
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64Fixed6440(
          long key) {
        
        return instance.getFieldMapFixed64Fixed6440Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64Fixed6440() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Fixed6440Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
       */

      public Builder removeFieldMapFixed64Fixed6440(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Fixed6440Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64Fixed6440Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Fixed6440() {
        return getFieldMapFixed64Fixed6440Map();
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Fixed6440Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64Fixed6440Map());
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed64Fixed6440OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapFixed64Fixed6440Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed64Fixed6440OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapFixed64Fixed6440Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
       */
      public Builder putFieldMapFixed64Fixed6440(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Fixed6440Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, fixed64&gt; field_map_fixed64_fixed64_40 = 40;</code>
       */
      public Builder putAllFieldMapFixed64Fixed6440(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Fixed6440Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64Float41Count() {
        return instance.getFieldMapFixed64Float41Map().size();
      }
      /**
       * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64Float41(
          long key) {
        
        return instance.getFieldMapFixed64Float41Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64Float41() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Float41Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
       */

      public Builder removeFieldMapFixed64Float41(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Float41Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64Float41Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapFixed64Float41() {
        return getFieldMapFixed64Float41Map();
      }
      /**
       * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapFixed64Float41Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64Float41Map());
      }
      /**
       * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
       */
      @java.lang.Override

      public float getFieldMapFixed64Float41OrDefault(
          long key,
          float defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Float> map =
            instance.getFieldMapFixed64Float41Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
       */
      @java.lang.Override

      public float getFieldMapFixed64Float41OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Float> map =
            instance.getFieldMapFixed64Float41Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
       */
      public Builder putFieldMapFixed64Float41(
          long key,
          float value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Float41Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, float&gt; field_map_fixed64_float_41 = 41;</code>
       */
      public Builder putAllFieldMapFixed64Float41(
          java.util.Map<java.lang.Long, java.lang.Float> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Float41Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64Int3242Count() {
        return instance.getFieldMapFixed64Int3242Map().size();
      }
      /**
       * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64Int3242(
          long key) {
        
        return instance.getFieldMapFixed64Int3242Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64Int3242() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Int3242Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
       */

      public Builder removeFieldMapFixed64Int3242(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Int3242Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64Int3242Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Int3242() {
        return getFieldMapFixed64Int3242Map();
      }
      /**
       * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Int3242Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64Int3242Map());
      }
      /**
       * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed64Int3242OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapFixed64Int3242Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed64Int3242OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapFixed64Int3242Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
       */
      public Builder putFieldMapFixed64Int3242(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Int3242Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, int32&gt; field_map_fixed64_int32_42 = 42;</code>
       */
      public Builder putAllFieldMapFixed64Int3242(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Int3242Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64Int6443Count() {
        return instance.getFieldMapFixed64Int6443Map().size();
      }
      /**
       * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64Int6443(
          long key) {
        
        return instance.getFieldMapFixed64Int6443Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64Int6443() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Int6443Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
       */

      public Builder removeFieldMapFixed64Int6443(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Int6443Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64Int6443Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Int6443() {
        return getFieldMapFixed64Int6443Map();
      }
      /**
       * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Int6443Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64Int6443Map());
      }
      /**
       * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed64Int6443OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapFixed64Int6443Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed64Int6443OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapFixed64Int6443Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
       */
      public Builder putFieldMapFixed64Int6443(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Int6443Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, int64&gt; field_map_fixed64_int64_43 = 43;</code>
       */
      public Builder putAllFieldMapFixed64Int6443(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Int6443Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64Message44Count() {
        return instance.getFieldMapFixed64Message44Map().size();
      }
      /**
       * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64Message44(
          long key) {
        
        return instance.getFieldMapFixed64Message44Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64Message44() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Message44Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
       */

      public Builder removeFieldMapFixed64Message44(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Message44Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64Message44Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapFixed64Message44() {
        return getFieldMapFixed64Message44Map();
      }
      /**
       * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapFixed64Message44Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64Message44Map());
      }
      /**
       * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapFixed64Message44OrDefault(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapFixed64Message44Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapFixed64Message44OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapFixed64Message44Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
       */
      public Builder putFieldMapFixed64Message44(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapFixed64Message44Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, .protobuf.experimental.Proto2Message&gt; field_map_fixed64_message_44 = 44;</code>
       */
      public Builder putAllFieldMapFixed64Message44(
          java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Message44Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64Sfixed3245Count() {
        return instance.getFieldMapFixed64Sfixed3245Map().size();
      }
      /**
       * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64Sfixed3245(
          long key) {
        
        return instance.getFieldMapFixed64Sfixed3245Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64Sfixed3245() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Sfixed3245Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
       */

      public Builder removeFieldMapFixed64Sfixed3245(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Sfixed3245Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64Sfixed3245Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Sfixed3245() {
        return getFieldMapFixed64Sfixed3245Map();
      }
      /**
       * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Sfixed3245Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64Sfixed3245Map());
      }
      /**
       * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed64Sfixed3245OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapFixed64Sfixed3245Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed64Sfixed3245OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapFixed64Sfixed3245Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
       */
      public Builder putFieldMapFixed64Sfixed3245(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Sfixed3245Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, sfixed32&gt; field_map_fixed64_sfixed32_45 = 45;</code>
       */
      public Builder putAllFieldMapFixed64Sfixed3245(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Sfixed3245Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64Sfixed6446Count() {
        return instance.getFieldMapFixed64Sfixed6446Map().size();
      }
      /**
       * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64Sfixed6446(
          long key) {
        
        return instance.getFieldMapFixed64Sfixed6446Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64Sfixed6446() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Sfixed6446Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
       */

      public Builder removeFieldMapFixed64Sfixed6446(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Sfixed6446Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64Sfixed6446Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Sfixed6446() {
        return getFieldMapFixed64Sfixed6446Map();
      }
      /**
       * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Sfixed6446Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64Sfixed6446Map());
      }
      /**
       * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed64Sfixed6446OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapFixed64Sfixed6446Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed64Sfixed6446OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapFixed64Sfixed6446Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
       */
      public Builder putFieldMapFixed64Sfixed6446(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Sfixed6446Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, sfixed64&gt; field_map_fixed64_sfixed64_46 = 46;</code>
       */
      public Builder putAllFieldMapFixed64Sfixed6446(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Sfixed6446Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64Sint3247Count() {
        return instance.getFieldMapFixed64Sint3247Map().size();
      }
      /**
       * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64Sint3247(
          long key) {
        
        return instance.getFieldMapFixed64Sint3247Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64Sint3247() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Sint3247Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
       */

      public Builder removeFieldMapFixed64Sint3247(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Sint3247Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64Sint3247Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Sint3247() {
        return getFieldMapFixed64Sint3247Map();
      }
      /**
       * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Sint3247Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64Sint3247Map());
      }
      /**
       * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed64Sint3247OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapFixed64Sint3247Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed64Sint3247OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapFixed64Sint3247Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
       */
      public Builder putFieldMapFixed64Sint3247(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Sint3247Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, sint32&gt; field_map_fixed64_sint32_47 = 47;</code>
       */
      public Builder putAllFieldMapFixed64Sint3247(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Sint3247Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64Sint6448Count() {
        return instance.getFieldMapFixed64Sint6448Map().size();
      }
      /**
       * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64Sint6448(
          long key) {
        
        return instance.getFieldMapFixed64Sint6448Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64Sint6448() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Sint6448Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
       */

      public Builder removeFieldMapFixed64Sint6448(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Sint6448Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64Sint6448Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Sint6448() {
        return getFieldMapFixed64Sint6448Map();
      }
      /**
       * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Sint6448Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64Sint6448Map());
      }
      /**
       * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed64Sint6448OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapFixed64Sint6448Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed64Sint6448OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapFixed64Sint6448Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
       */
      public Builder putFieldMapFixed64Sint6448(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Sint6448Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, sint64&gt; field_map_fixed64_sint64_48 = 48;</code>
       */
      public Builder putAllFieldMapFixed64Sint6448(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Sint6448Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64String49Count() {
        return instance.getFieldMapFixed64String49Map().size();
      }
      /**
       * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64String49(
          long key) {
        
        return instance.getFieldMapFixed64String49Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64String49() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64String49Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
       */

      public Builder removeFieldMapFixed64String49(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64String49Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64String49Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.String> getFieldMapFixed64String49() {
        return getFieldMapFixed64String49Map();
      }
      /**
       * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.String> getFieldMapFixed64String49Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64String49Map());
      }
      /**
       * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapFixed64String49OrDefault(
          long key,
          java.lang.String defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.String> map =
            instance.getFieldMapFixed64String49Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapFixed64String49OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.String> map =
            instance.getFieldMapFixed64String49Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
       */
      public Builder putFieldMapFixed64String49(
          long key,
          java.lang.String value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapFixed64String49Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, string&gt; field_map_fixed64_string_49 = 49;</code>
       */
      public Builder putAllFieldMapFixed64String49(
          java.util.Map<java.lang.Long, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64String49Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64Uint3250Count() {
        return instance.getFieldMapFixed64Uint3250Map().size();
      }
      /**
       * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64Uint3250(
          long key) {
        
        return instance.getFieldMapFixed64Uint3250Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64Uint3250() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Uint3250Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
       */

      public Builder removeFieldMapFixed64Uint3250(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Uint3250Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64Uint3250Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Uint3250() {
        return getFieldMapFixed64Uint3250Map();
      }
      /**
       * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapFixed64Uint3250Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64Uint3250Map());
      }
      /**
       * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed64Uint3250OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapFixed64Uint3250Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
       */
      @java.lang.Override

      public int getFieldMapFixed64Uint3250OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapFixed64Uint3250Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
       */
      public Builder putFieldMapFixed64Uint3250(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Uint3250Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, uint32&gt; field_map_fixed64_uint32_50 = 50;</code>
       */
      public Builder putAllFieldMapFixed64Uint3250(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Uint3250Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapFixed64Uint6451Count() {
        return instance.getFieldMapFixed64Uint6451Map().size();
      }
      /**
       * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapFixed64Uint6451(
          long key) {
        
        return instance.getFieldMapFixed64Uint6451Map().containsKey(key);
      }

      public Builder clearFieldMapFixed64Uint6451() {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Uint6451Map().clear();
        return this;
      }
      /**
       * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
       */

      public Builder removeFieldMapFixed64Uint6451(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Uint6451Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapFixed64Uint6451Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Uint6451() {
        return getFieldMapFixed64Uint6451Map();
      }
      /**
       * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapFixed64Uint6451Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapFixed64Uint6451Map());
      }
      /**
       * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed64Uint6451OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapFixed64Uint6451Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
       */
      @java.lang.Override

      public long getFieldMapFixed64Uint6451OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapFixed64Uint6451Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
       */
      public Builder putFieldMapFixed64Uint6451(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapFixed64Uint6451Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;fixed64, uint64&gt; field_map_fixed64_uint64_51 = 51;</code>
       */
      public Builder putAllFieldMapFixed64Uint6451(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapFixed64Uint6451Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32Bool52Count() {
        return instance.getFieldMapInt32Bool52Map().size();
      }
      /**
       * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32Bool52(
          int key) {
        
        return instance.getFieldMapInt32Bool52Map().containsKey(key);
      }

      public Builder clearFieldMapInt32Bool52() {
        copyOnWrite();
        instance.getMutableFieldMapInt32Bool52Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
       */

      public Builder removeFieldMapInt32Bool52(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Bool52Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32Bool52Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapInt32Bool52() {
        return getFieldMapInt32Bool52Map();
      }
      /**
       * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapInt32Bool52Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32Bool52Map());
      }
      /**
       * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
       */
      @java.lang.Override

      public boolean getFieldMapInt32Bool52OrDefault(
          int key,
          boolean defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Boolean> map =
            instance.getFieldMapInt32Bool52Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
       */
      @java.lang.Override

      public boolean getFieldMapInt32Bool52OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Boolean> map =
            instance.getFieldMapInt32Bool52Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
       */
      public Builder putFieldMapInt32Bool52(
          int key,
          boolean value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Bool52Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, bool&gt; field_map_int32_bool_52 = 52;</code>
       */
      public Builder putAllFieldMapInt32Bool52(
          java.util.Map<java.lang.Integer, java.lang.Boolean> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32Bool52Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32Bytes53Count() {
        return instance.getFieldMapInt32Bytes53Map().size();
      }
      /**
       * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32Bytes53(
          int key) {
        
        return instance.getFieldMapInt32Bytes53Map().containsKey(key);
      }

      public Builder clearFieldMapInt32Bytes53() {
        copyOnWrite();
        instance.getMutableFieldMapInt32Bytes53Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
       */

      public Builder removeFieldMapInt32Bytes53(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Bytes53Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32Bytes53Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapInt32Bytes53() {
        return getFieldMapInt32Bytes53Map();
      }
      /**
       * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapInt32Bytes53Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32Bytes53Map());
      }
      /**
       * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapInt32Bytes53OrDefault(
          int key,
          com.google.protobuf.ByteString defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
            instance.getFieldMapInt32Bytes53Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapInt32Bytes53OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
            instance.getFieldMapInt32Bytes53Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
       */
      public Builder putFieldMapInt32Bytes53(
          int key,
          com.google.protobuf.ByteString value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapInt32Bytes53Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, bytes&gt; field_map_int32_bytes_53 = 53;</code>
       */
      public Builder putAllFieldMapInt32Bytes53(
          java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32Bytes53Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32Double54Count() {
        return instance.getFieldMapInt32Double54Map().size();
      }
      /**
       * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32Double54(
          int key) {
        
        return instance.getFieldMapInt32Double54Map().containsKey(key);
      }

      public Builder clearFieldMapInt32Double54() {
        copyOnWrite();
        instance.getMutableFieldMapInt32Double54Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
       */

      public Builder removeFieldMapInt32Double54(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Double54Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32Double54Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapInt32Double54() {
        return getFieldMapInt32Double54Map();
      }
      /**
       * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapInt32Double54Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32Double54Map());
      }
      /**
       * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
       */
      @java.lang.Override

      public double getFieldMapInt32Double54OrDefault(
          int key,
          double defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Double> map =
            instance.getFieldMapInt32Double54Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
       */
      @java.lang.Override

      public double getFieldMapInt32Double54OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Double> map =
            instance.getFieldMapInt32Double54Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
       */
      public Builder putFieldMapInt32Double54(
          int key,
          double value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Double54Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, double&gt; field_map_int32_double_54 = 54;</code>
       */
      public Builder putAllFieldMapInt32Double54(
          java.util.Map<java.lang.Integer, java.lang.Double> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32Double54Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32Enum55Count() {
        return instance.getFieldMapInt32Enum55Map().size();
      }
      /**
       * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32Enum55(
          int key) {
        
        return instance.getFieldMapInt32Enum55Map().containsKey(key);
      }

      public Builder clearFieldMapInt32Enum55() {
        copyOnWrite();
        instance.getMutableFieldMapInt32Enum55Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
       */

      public Builder removeFieldMapInt32Enum55(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Enum55Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32Enum55Map()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapInt32Enum55() {
        return getFieldMapInt32Enum55Map();
      }
      /**
       * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapInt32Enum55Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32Enum55Map());
      }
      /**
       * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapInt32Enum55OrDefault(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapInt32Enum55Map();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapInt32Enum55OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapInt32Enum55Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
       */
      public Builder putFieldMapInt32Enum55(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapInt32Enum55Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int32_enum_55 = 55;</code>
       */
      public Builder putAllFieldMapInt32Enum55(
          java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32Enum55Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32Fixed3256Count() {
        return instance.getFieldMapInt32Fixed3256Map().size();
      }
      /**
       * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32Fixed3256(
          int key) {
        
        return instance.getFieldMapInt32Fixed3256Map().containsKey(key);
      }

      public Builder clearFieldMapInt32Fixed3256() {
        copyOnWrite();
        instance.getMutableFieldMapInt32Fixed3256Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
       */

      public Builder removeFieldMapInt32Fixed3256(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Fixed3256Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32Fixed3256Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Fixed3256() {
        return getFieldMapInt32Fixed3256Map();
      }
      /**
       * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Fixed3256Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32Fixed3256Map());
      }
      /**
       * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
       */
      @java.lang.Override

      public int getFieldMapInt32Fixed3256OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapInt32Fixed3256Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
       */
      @java.lang.Override

      public int getFieldMapInt32Fixed3256OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapInt32Fixed3256Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
       */
      public Builder putFieldMapInt32Fixed3256(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Fixed3256Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, fixed32&gt; field_map_int32_fixed32_56 = 56;</code>
       */
      public Builder putAllFieldMapInt32Fixed3256(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32Fixed3256Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32Fixed6457Count() {
        return instance.getFieldMapInt32Fixed6457Map().size();
      }
      /**
       * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32Fixed6457(
          int key) {
        
        return instance.getFieldMapInt32Fixed6457Map().containsKey(key);
      }

      public Builder clearFieldMapInt32Fixed6457() {
        copyOnWrite();
        instance.getMutableFieldMapInt32Fixed6457Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
       */

      public Builder removeFieldMapInt32Fixed6457(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Fixed6457Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32Fixed6457Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Fixed6457() {
        return getFieldMapInt32Fixed6457Map();
      }
      /**
       * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Fixed6457Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32Fixed6457Map());
      }
      /**
       * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
       */
      @java.lang.Override

      public long getFieldMapInt32Fixed6457OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapInt32Fixed6457Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
       */
      @java.lang.Override

      public long getFieldMapInt32Fixed6457OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapInt32Fixed6457Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
       */
      public Builder putFieldMapInt32Fixed6457(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Fixed6457Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, fixed64&gt; field_map_int32_fixed64_57 = 57;</code>
       */
      public Builder putAllFieldMapInt32Fixed6457(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32Fixed6457Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32Float58Count() {
        return instance.getFieldMapInt32Float58Map().size();
      }
      /**
       * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32Float58(
          int key) {
        
        return instance.getFieldMapInt32Float58Map().containsKey(key);
      }

      public Builder clearFieldMapInt32Float58() {
        copyOnWrite();
        instance.getMutableFieldMapInt32Float58Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
       */

      public Builder removeFieldMapInt32Float58(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Float58Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32Float58Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapInt32Float58() {
        return getFieldMapInt32Float58Map();
      }
      /**
       * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapInt32Float58Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32Float58Map());
      }
      /**
       * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
       */
      @java.lang.Override

      public float getFieldMapInt32Float58OrDefault(
          int key,
          float defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Float> map =
            instance.getFieldMapInt32Float58Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
       */
      @java.lang.Override

      public float getFieldMapInt32Float58OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Float> map =
            instance.getFieldMapInt32Float58Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
       */
      public Builder putFieldMapInt32Float58(
          int key,
          float value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Float58Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, float&gt; field_map_int32_float_58 = 58;</code>
       */
      public Builder putAllFieldMapInt32Float58(
          java.util.Map<java.lang.Integer, java.lang.Float> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32Float58Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32Int3259Count() {
        return instance.getFieldMapInt32Int3259Map().size();
      }
      /**
       * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32Int3259(
          int key) {
        
        return instance.getFieldMapInt32Int3259Map().containsKey(key);
      }

      public Builder clearFieldMapInt32Int3259() {
        copyOnWrite();
        instance.getMutableFieldMapInt32Int3259Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
       */

      public Builder removeFieldMapInt32Int3259(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Int3259Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32Int3259Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Int3259() {
        return getFieldMapInt32Int3259Map();
      }
      /**
       * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Int3259Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32Int3259Map());
      }
      /**
       * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
       */
      @java.lang.Override

      public int getFieldMapInt32Int3259OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapInt32Int3259Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
       */
      @java.lang.Override

      public int getFieldMapInt32Int3259OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapInt32Int3259Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
       */
      public Builder putFieldMapInt32Int3259(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Int3259Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, int32&gt; field_map_int32_int32_59 = 59;</code>
       */
      public Builder putAllFieldMapInt32Int3259(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32Int3259Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32Int6460Count() {
        return instance.getFieldMapInt32Int6460Map().size();
      }
      /**
       * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32Int6460(
          int key) {
        
        return instance.getFieldMapInt32Int6460Map().containsKey(key);
      }

      public Builder clearFieldMapInt32Int6460() {
        copyOnWrite();
        instance.getMutableFieldMapInt32Int6460Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
       */

      public Builder removeFieldMapInt32Int6460(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Int6460Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32Int6460Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Int6460() {
        return getFieldMapInt32Int6460Map();
      }
      /**
       * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Int6460Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32Int6460Map());
      }
      /**
       * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
       */
      @java.lang.Override

      public long getFieldMapInt32Int6460OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapInt32Int6460Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
       */
      @java.lang.Override

      public long getFieldMapInt32Int6460OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapInt32Int6460Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
       */
      public Builder putFieldMapInt32Int6460(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Int6460Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, int64&gt; field_map_int32_int64_60 = 60;</code>
       */
      public Builder putAllFieldMapInt32Int6460(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32Int6460Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32Message61Count() {
        return instance.getFieldMapInt32Message61Map().size();
      }
      /**
       * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32Message61(
          int key) {
        
        return instance.getFieldMapInt32Message61Map().containsKey(key);
      }

      public Builder clearFieldMapInt32Message61() {
        copyOnWrite();
        instance.getMutableFieldMapInt32Message61Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
       */

      public Builder removeFieldMapInt32Message61(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Message61Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32Message61Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapInt32Message61() {
        return getFieldMapInt32Message61Map();
      }
      /**
       * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapInt32Message61Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32Message61Map());
      }
      /**
       * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapInt32Message61OrDefault(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapInt32Message61Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapInt32Message61OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapInt32Message61Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
       */
      public Builder putFieldMapInt32Message61(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapInt32Message61Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, .protobuf.experimental.Proto2Message&gt; field_map_int32_message_61 = 61;</code>
       */
      public Builder putAllFieldMapInt32Message61(
          java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32Message61Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32Sfixed3262Count() {
        return instance.getFieldMapInt32Sfixed3262Map().size();
      }
      /**
       * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32Sfixed3262(
          int key) {
        
        return instance.getFieldMapInt32Sfixed3262Map().containsKey(key);
      }

      public Builder clearFieldMapInt32Sfixed3262() {
        copyOnWrite();
        instance.getMutableFieldMapInt32Sfixed3262Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
       */

      public Builder removeFieldMapInt32Sfixed3262(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Sfixed3262Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32Sfixed3262Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Sfixed3262() {
        return getFieldMapInt32Sfixed3262Map();
      }
      /**
       * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Sfixed3262Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32Sfixed3262Map());
      }
      /**
       * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
       */
      @java.lang.Override

      public int getFieldMapInt32Sfixed3262OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapInt32Sfixed3262Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
       */
      @java.lang.Override

      public int getFieldMapInt32Sfixed3262OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapInt32Sfixed3262Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
       */
      public Builder putFieldMapInt32Sfixed3262(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Sfixed3262Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, sfixed32&gt; field_map_int32_sfixed32_62 = 62;</code>
       */
      public Builder putAllFieldMapInt32Sfixed3262(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32Sfixed3262Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32Sfixed6463Count() {
        return instance.getFieldMapInt32Sfixed6463Map().size();
      }
      /**
       * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32Sfixed6463(
          int key) {
        
        return instance.getFieldMapInt32Sfixed6463Map().containsKey(key);
      }

      public Builder clearFieldMapInt32Sfixed6463() {
        copyOnWrite();
        instance.getMutableFieldMapInt32Sfixed6463Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
       */

      public Builder removeFieldMapInt32Sfixed6463(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Sfixed6463Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32Sfixed6463Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Sfixed6463() {
        return getFieldMapInt32Sfixed6463Map();
      }
      /**
       * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Sfixed6463Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32Sfixed6463Map());
      }
      /**
       * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
       */
      @java.lang.Override

      public long getFieldMapInt32Sfixed6463OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapInt32Sfixed6463Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
       */
      @java.lang.Override

      public long getFieldMapInt32Sfixed6463OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapInt32Sfixed6463Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
       */
      public Builder putFieldMapInt32Sfixed6463(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Sfixed6463Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, sfixed64&gt; field_map_int32_sfixed64_63 = 63;</code>
       */
      public Builder putAllFieldMapInt32Sfixed6463(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32Sfixed6463Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32Sint3264Count() {
        return instance.getFieldMapInt32Sint3264Map().size();
      }
      /**
       * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32Sint3264(
          int key) {
        
        return instance.getFieldMapInt32Sint3264Map().containsKey(key);
      }

      public Builder clearFieldMapInt32Sint3264() {
        copyOnWrite();
        instance.getMutableFieldMapInt32Sint3264Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
       */

      public Builder removeFieldMapInt32Sint3264(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Sint3264Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32Sint3264Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Sint3264() {
        return getFieldMapInt32Sint3264Map();
      }
      /**
       * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Sint3264Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32Sint3264Map());
      }
      /**
       * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
       */
      @java.lang.Override

      public int getFieldMapInt32Sint3264OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapInt32Sint3264Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
       */
      @java.lang.Override

      public int getFieldMapInt32Sint3264OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapInt32Sint3264Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
       */
      public Builder putFieldMapInt32Sint3264(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Sint3264Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, sint32&gt; field_map_int32_sint32_64 = 64;</code>
       */
      public Builder putAllFieldMapInt32Sint3264(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32Sint3264Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32Sint6465Count() {
        return instance.getFieldMapInt32Sint6465Map().size();
      }
      /**
       * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32Sint6465(
          int key) {
        
        return instance.getFieldMapInt32Sint6465Map().containsKey(key);
      }

      public Builder clearFieldMapInt32Sint6465() {
        copyOnWrite();
        instance.getMutableFieldMapInt32Sint6465Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
       */

      public Builder removeFieldMapInt32Sint6465(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Sint6465Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32Sint6465Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Sint6465() {
        return getFieldMapInt32Sint6465Map();
      }
      /**
       * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Sint6465Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32Sint6465Map());
      }
      /**
       * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
       */
      @java.lang.Override

      public long getFieldMapInt32Sint6465OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapInt32Sint6465Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
       */
      @java.lang.Override

      public long getFieldMapInt32Sint6465OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapInt32Sint6465Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
       */
      public Builder putFieldMapInt32Sint6465(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Sint6465Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, sint64&gt; field_map_int32_sint64_65 = 65;</code>
       */
      public Builder putAllFieldMapInt32Sint6465(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32Sint6465Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32String66Count() {
        return instance.getFieldMapInt32String66Map().size();
      }
      /**
       * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32String66(
          int key) {
        
        return instance.getFieldMapInt32String66Map().containsKey(key);
      }

      public Builder clearFieldMapInt32String66() {
        copyOnWrite();
        instance.getMutableFieldMapInt32String66Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
       */

      public Builder removeFieldMapInt32String66(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32String66Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32String66Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapInt32String66() {
        return getFieldMapInt32String66Map();
      }
      /**
       * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapInt32String66Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32String66Map());
      }
      /**
       * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapInt32String66OrDefault(
          int key,
          java.lang.String defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.String> map =
            instance.getFieldMapInt32String66Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapInt32String66OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.String> map =
            instance.getFieldMapInt32String66Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
       */
      public Builder putFieldMapInt32String66(
          int key,
          java.lang.String value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapInt32String66Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, string&gt; field_map_int32_string_66 = 66;</code>
       */
      public Builder putAllFieldMapInt32String66(
          java.util.Map<java.lang.Integer, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32String66Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32Uint3267Count() {
        return instance.getFieldMapInt32Uint3267Map().size();
      }
      /**
       * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32Uint3267(
          int key) {
        
        return instance.getFieldMapInt32Uint3267Map().containsKey(key);
      }

      public Builder clearFieldMapInt32Uint3267() {
        copyOnWrite();
        instance.getMutableFieldMapInt32Uint3267Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
       */

      public Builder removeFieldMapInt32Uint3267(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Uint3267Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32Uint3267Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Uint3267() {
        return getFieldMapInt32Uint3267Map();
      }
      /**
       * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapInt32Uint3267Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32Uint3267Map());
      }
      /**
       * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
       */
      @java.lang.Override

      public int getFieldMapInt32Uint3267OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapInt32Uint3267Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
       */
      @java.lang.Override

      public int getFieldMapInt32Uint3267OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapInt32Uint3267Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
       */
      public Builder putFieldMapInt32Uint3267(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Uint3267Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, uint32&gt; field_map_int32_uint32_67 = 67;</code>
       */
      public Builder putAllFieldMapInt32Uint3267(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32Uint3267Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt32Uint6468Count() {
        return instance.getFieldMapInt32Uint6468Map().size();
      }
      /**
       * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt32Uint6468(
          int key) {
        
        return instance.getFieldMapInt32Uint6468Map().containsKey(key);
      }

      public Builder clearFieldMapInt32Uint6468() {
        copyOnWrite();
        instance.getMutableFieldMapInt32Uint6468Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
       */

      public Builder removeFieldMapInt32Uint6468(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Uint6468Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt32Uint6468Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Uint6468() {
        return getFieldMapInt32Uint6468Map();
      }
      /**
       * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapInt32Uint6468Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt32Uint6468Map());
      }
      /**
       * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
       */
      @java.lang.Override

      public long getFieldMapInt32Uint6468OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapInt32Uint6468Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
       */
      @java.lang.Override

      public long getFieldMapInt32Uint6468OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapInt32Uint6468Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
       */
      public Builder putFieldMapInt32Uint6468(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt32Uint6468Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, uint64&gt; field_map_int32_uint64_68 = 68;</code>
       */
      public Builder putAllFieldMapInt32Uint6468(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt32Uint6468Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64Bool69Count() {
        return instance.getFieldMapInt64Bool69Map().size();
      }
      /**
       * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64Bool69(
          long key) {
        
        return instance.getFieldMapInt64Bool69Map().containsKey(key);
      }

      public Builder clearFieldMapInt64Bool69() {
        copyOnWrite();
        instance.getMutableFieldMapInt64Bool69Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
       */

      public Builder removeFieldMapInt64Bool69(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Bool69Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64Bool69Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapInt64Bool69() {
        return getFieldMapInt64Bool69Map();
      }
      /**
       * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapInt64Bool69Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64Bool69Map());
      }
      /**
       * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
       */
      @java.lang.Override

      public boolean getFieldMapInt64Bool69OrDefault(
          long key,
          boolean defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Boolean> map =
            instance.getFieldMapInt64Bool69Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
       */
      @java.lang.Override

      public boolean getFieldMapInt64Bool69OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Boolean> map =
            instance.getFieldMapInt64Bool69Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
       */
      public Builder putFieldMapInt64Bool69(
          long key,
          boolean value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Bool69Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, bool&gt; field_map_int64_bool_69 = 69;</code>
       */
      public Builder putAllFieldMapInt64Bool69(
          java.util.Map<java.lang.Long, java.lang.Boolean> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64Bool69Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64Bytes70Count() {
        return instance.getFieldMapInt64Bytes70Map().size();
      }
      /**
       * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64Bytes70(
          long key) {
        
        return instance.getFieldMapInt64Bytes70Map().containsKey(key);
      }

      public Builder clearFieldMapInt64Bytes70() {
        copyOnWrite();
        instance.getMutableFieldMapInt64Bytes70Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
       */

      public Builder removeFieldMapInt64Bytes70(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Bytes70Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64Bytes70Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapInt64Bytes70() {
        return getFieldMapInt64Bytes70Map();
      }
      /**
       * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapInt64Bytes70Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64Bytes70Map());
      }
      /**
       * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapInt64Bytes70OrDefault(
          long key,
          com.google.protobuf.ByteString defaultValue) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
            instance.getFieldMapInt64Bytes70Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapInt64Bytes70OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
            instance.getFieldMapInt64Bytes70Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
       */
      public Builder putFieldMapInt64Bytes70(
          long key,
          com.google.protobuf.ByteString value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapInt64Bytes70Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, bytes&gt; field_map_int64_bytes_70 = 70;</code>
       */
      public Builder putAllFieldMapInt64Bytes70(
          java.util.Map<java.lang.Long, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64Bytes70Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64Double71Count() {
        return instance.getFieldMapInt64Double71Map().size();
      }
      /**
       * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64Double71(
          long key) {
        
        return instance.getFieldMapInt64Double71Map().containsKey(key);
      }

      public Builder clearFieldMapInt64Double71() {
        copyOnWrite();
        instance.getMutableFieldMapInt64Double71Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
       */

      public Builder removeFieldMapInt64Double71(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Double71Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64Double71Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapInt64Double71() {
        return getFieldMapInt64Double71Map();
      }
      /**
       * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapInt64Double71Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64Double71Map());
      }
      /**
       * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
       */
      @java.lang.Override

      public double getFieldMapInt64Double71OrDefault(
          long key,
          double defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Double> map =
            instance.getFieldMapInt64Double71Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
       */
      @java.lang.Override

      public double getFieldMapInt64Double71OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Double> map =
            instance.getFieldMapInt64Double71Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
       */
      public Builder putFieldMapInt64Double71(
          long key,
          double value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Double71Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, double&gt; field_map_int64_double_71 = 71;</code>
       */
      public Builder putAllFieldMapInt64Double71(
          java.util.Map<java.lang.Long, java.lang.Double> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64Double71Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64Enum72Count() {
        return instance.getFieldMapInt64Enum72Map().size();
      }
      /**
       * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64Enum72(
          long key) {
        
        return instance.getFieldMapInt64Enum72Map().containsKey(key);
      }

      public Builder clearFieldMapInt64Enum72() {
        copyOnWrite();
        instance.getMutableFieldMapInt64Enum72Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
       */

      public Builder removeFieldMapInt64Enum72(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Enum72Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64Enum72Map()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapInt64Enum72() {
        return getFieldMapInt64Enum72Map();
      }
      /**
       * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapInt64Enum72Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64Enum72Map());
      }
      /**
       * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapInt64Enum72OrDefault(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapInt64Enum72Map();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapInt64Enum72OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapInt64Enum72Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
       */
      public Builder putFieldMapInt64Enum72(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapInt64Enum72Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_int64_enum_72 = 72;</code>
       */
      public Builder putAllFieldMapInt64Enum72(
          java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64Enum72Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64Fixed3273Count() {
        return instance.getFieldMapInt64Fixed3273Map().size();
      }
      /**
       * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64Fixed3273(
          long key) {
        
        return instance.getFieldMapInt64Fixed3273Map().containsKey(key);
      }

      public Builder clearFieldMapInt64Fixed3273() {
        copyOnWrite();
        instance.getMutableFieldMapInt64Fixed3273Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
       */

      public Builder removeFieldMapInt64Fixed3273(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Fixed3273Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64Fixed3273Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Fixed3273() {
        return getFieldMapInt64Fixed3273Map();
      }
      /**
       * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Fixed3273Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64Fixed3273Map());
      }
      /**
       * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
       */
      @java.lang.Override

      public int getFieldMapInt64Fixed3273OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapInt64Fixed3273Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
       */
      @java.lang.Override

      public int getFieldMapInt64Fixed3273OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapInt64Fixed3273Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
       */
      public Builder putFieldMapInt64Fixed3273(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Fixed3273Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, fixed32&gt; field_map_int64_fixed32_73 = 73;</code>
       */
      public Builder putAllFieldMapInt64Fixed3273(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64Fixed3273Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64Fixed6474Count() {
        return instance.getFieldMapInt64Fixed6474Map().size();
      }
      /**
       * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64Fixed6474(
          long key) {
        
        return instance.getFieldMapInt64Fixed6474Map().containsKey(key);
      }

      public Builder clearFieldMapInt64Fixed6474() {
        copyOnWrite();
        instance.getMutableFieldMapInt64Fixed6474Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
       */

      public Builder removeFieldMapInt64Fixed6474(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Fixed6474Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64Fixed6474Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Fixed6474() {
        return getFieldMapInt64Fixed6474Map();
      }
      /**
       * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Fixed6474Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64Fixed6474Map());
      }
      /**
       * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
       */
      @java.lang.Override

      public long getFieldMapInt64Fixed6474OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapInt64Fixed6474Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
       */
      @java.lang.Override

      public long getFieldMapInt64Fixed6474OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapInt64Fixed6474Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
       */
      public Builder putFieldMapInt64Fixed6474(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Fixed6474Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, fixed64&gt; field_map_int64_fixed64_74 = 74;</code>
       */
      public Builder putAllFieldMapInt64Fixed6474(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64Fixed6474Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64Float75Count() {
        return instance.getFieldMapInt64Float75Map().size();
      }
      /**
       * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64Float75(
          long key) {
        
        return instance.getFieldMapInt64Float75Map().containsKey(key);
      }

      public Builder clearFieldMapInt64Float75() {
        copyOnWrite();
        instance.getMutableFieldMapInt64Float75Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
       */

      public Builder removeFieldMapInt64Float75(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Float75Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64Float75Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapInt64Float75() {
        return getFieldMapInt64Float75Map();
      }
      /**
       * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapInt64Float75Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64Float75Map());
      }
      /**
       * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
       */
      @java.lang.Override

      public float getFieldMapInt64Float75OrDefault(
          long key,
          float defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Float> map =
            instance.getFieldMapInt64Float75Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
       */
      @java.lang.Override

      public float getFieldMapInt64Float75OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Float> map =
            instance.getFieldMapInt64Float75Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
       */
      public Builder putFieldMapInt64Float75(
          long key,
          float value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Float75Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, float&gt; field_map_int64_float_75 = 75;</code>
       */
      public Builder putAllFieldMapInt64Float75(
          java.util.Map<java.lang.Long, java.lang.Float> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64Float75Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64Int3276Count() {
        return instance.getFieldMapInt64Int3276Map().size();
      }
      /**
       * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64Int3276(
          long key) {
        
        return instance.getFieldMapInt64Int3276Map().containsKey(key);
      }

      public Builder clearFieldMapInt64Int3276() {
        copyOnWrite();
        instance.getMutableFieldMapInt64Int3276Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
       */

      public Builder removeFieldMapInt64Int3276(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Int3276Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64Int3276Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Int3276() {
        return getFieldMapInt64Int3276Map();
      }
      /**
       * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Int3276Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64Int3276Map());
      }
      /**
       * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
       */
      @java.lang.Override

      public int getFieldMapInt64Int3276OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapInt64Int3276Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
       */
      @java.lang.Override

      public int getFieldMapInt64Int3276OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapInt64Int3276Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
       */
      public Builder putFieldMapInt64Int3276(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Int3276Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, int32&gt; field_map_int64_int32_76 = 76;</code>
       */
      public Builder putAllFieldMapInt64Int3276(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64Int3276Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64Int6477Count() {
        return instance.getFieldMapInt64Int6477Map().size();
      }
      /**
       * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64Int6477(
          long key) {
        
        return instance.getFieldMapInt64Int6477Map().containsKey(key);
      }

      public Builder clearFieldMapInt64Int6477() {
        copyOnWrite();
        instance.getMutableFieldMapInt64Int6477Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
       */

      public Builder removeFieldMapInt64Int6477(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Int6477Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64Int6477Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Int6477() {
        return getFieldMapInt64Int6477Map();
      }
      /**
       * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Int6477Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64Int6477Map());
      }
      /**
       * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
       */
      @java.lang.Override

      public long getFieldMapInt64Int6477OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapInt64Int6477Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
       */
      @java.lang.Override

      public long getFieldMapInt64Int6477OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapInt64Int6477Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
       */
      public Builder putFieldMapInt64Int6477(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Int6477Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, int64&gt; field_map_int64_int64_77 = 77;</code>
       */
      public Builder putAllFieldMapInt64Int6477(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64Int6477Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64Message78Count() {
        return instance.getFieldMapInt64Message78Map().size();
      }
      /**
       * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64Message78(
          long key) {
        
        return instance.getFieldMapInt64Message78Map().containsKey(key);
      }

      public Builder clearFieldMapInt64Message78() {
        copyOnWrite();
        instance.getMutableFieldMapInt64Message78Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
       */

      public Builder removeFieldMapInt64Message78(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Message78Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64Message78Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapInt64Message78() {
        return getFieldMapInt64Message78Map();
      }
      /**
       * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapInt64Message78Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64Message78Map());
      }
      /**
       * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapInt64Message78OrDefault(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapInt64Message78Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapInt64Message78OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapInt64Message78Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
       */
      public Builder putFieldMapInt64Message78(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapInt64Message78Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, .protobuf.experimental.Proto2Message&gt; field_map_int64_message_78 = 78;</code>
       */
      public Builder putAllFieldMapInt64Message78(
          java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64Message78Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64Sfixed3279Count() {
        return instance.getFieldMapInt64Sfixed3279Map().size();
      }
      /**
       * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64Sfixed3279(
          long key) {
        
        return instance.getFieldMapInt64Sfixed3279Map().containsKey(key);
      }

      public Builder clearFieldMapInt64Sfixed3279() {
        copyOnWrite();
        instance.getMutableFieldMapInt64Sfixed3279Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
       */

      public Builder removeFieldMapInt64Sfixed3279(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Sfixed3279Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64Sfixed3279Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Sfixed3279() {
        return getFieldMapInt64Sfixed3279Map();
      }
      /**
       * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Sfixed3279Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64Sfixed3279Map());
      }
      /**
       * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
       */
      @java.lang.Override

      public int getFieldMapInt64Sfixed3279OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapInt64Sfixed3279Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
       */
      @java.lang.Override

      public int getFieldMapInt64Sfixed3279OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapInt64Sfixed3279Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
       */
      public Builder putFieldMapInt64Sfixed3279(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Sfixed3279Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, sfixed32&gt; field_map_int64_sfixed32_79 = 79;</code>
       */
      public Builder putAllFieldMapInt64Sfixed3279(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64Sfixed3279Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64Sfixed6480Count() {
        return instance.getFieldMapInt64Sfixed6480Map().size();
      }
      /**
       * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64Sfixed6480(
          long key) {
        
        return instance.getFieldMapInt64Sfixed6480Map().containsKey(key);
      }

      public Builder clearFieldMapInt64Sfixed6480() {
        copyOnWrite();
        instance.getMutableFieldMapInt64Sfixed6480Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
       */

      public Builder removeFieldMapInt64Sfixed6480(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Sfixed6480Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64Sfixed6480Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Sfixed6480() {
        return getFieldMapInt64Sfixed6480Map();
      }
      /**
       * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Sfixed6480Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64Sfixed6480Map());
      }
      /**
       * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
       */
      @java.lang.Override

      public long getFieldMapInt64Sfixed6480OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapInt64Sfixed6480Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
       */
      @java.lang.Override

      public long getFieldMapInt64Sfixed6480OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapInt64Sfixed6480Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
       */
      public Builder putFieldMapInt64Sfixed6480(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Sfixed6480Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, sfixed64&gt; field_map_int64_sfixed64_80 = 80;</code>
       */
      public Builder putAllFieldMapInt64Sfixed6480(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64Sfixed6480Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64Sint3281Count() {
        return instance.getFieldMapInt64Sint3281Map().size();
      }
      /**
       * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64Sint3281(
          long key) {
        
        return instance.getFieldMapInt64Sint3281Map().containsKey(key);
      }

      public Builder clearFieldMapInt64Sint3281() {
        copyOnWrite();
        instance.getMutableFieldMapInt64Sint3281Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
       */

      public Builder removeFieldMapInt64Sint3281(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Sint3281Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64Sint3281Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Sint3281() {
        return getFieldMapInt64Sint3281Map();
      }
      /**
       * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Sint3281Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64Sint3281Map());
      }
      /**
       * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
       */
      @java.lang.Override

      public int getFieldMapInt64Sint3281OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapInt64Sint3281Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
       */
      @java.lang.Override

      public int getFieldMapInt64Sint3281OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapInt64Sint3281Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
       */
      public Builder putFieldMapInt64Sint3281(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Sint3281Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, sint32&gt; field_map_int64_sint32_81 = 81;</code>
       */
      public Builder putAllFieldMapInt64Sint3281(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64Sint3281Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64Sint6482Count() {
        return instance.getFieldMapInt64Sint6482Map().size();
      }
      /**
       * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64Sint6482(
          long key) {
        
        return instance.getFieldMapInt64Sint6482Map().containsKey(key);
      }

      public Builder clearFieldMapInt64Sint6482() {
        copyOnWrite();
        instance.getMutableFieldMapInt64Sint6482Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
       */

      public Builder removeFieldMapInt64Sint6482(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Sint6482Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64Sint6482Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Sint6482() {
        return getFieldMapInt64Sint6482Map();
      }
      /**
       * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Sint6482Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64Sint6482Map());
      }
      /**
       * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
       */
      @java.lang.Override

      public long getFieldMapInt64Sint6482OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapInt64Sint6482Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
       */
      @java.lang.Override

      public long getFieldMapInt64Sint6482OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapInt64Sint6482Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
       */
      public Builder putFieldMapInt64Sint6482(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Sint6482Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, sint64&gt; field_map_int64_sint64_82 = 82;</code>
       */
      public Builder putAllFieldMapInt64Sint6482(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64Sint6482Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64String83Count() {
        return instance.getFieldMapInt64String83Map().size();
      }
      /**
       * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64String83(
          long key) {
        
        return instance.getFieldMapInt64String83Map().containsKey(key);
      }

      public Builder clearFieldMapInt64String83() {
        copyOnWrite();
        instance.getMutableFieldMapInt64String83Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
       */

      public Builder removeFieldMapInt64String83(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64String83Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64String83Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.String> getFieldMapInt64String83() {
        return getFieldMapInt64String83Map();
      }
      /**
       * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.String> getFieldMapInt64String83Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64String83Map());
      }
      /**
       * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapInt64String83OrDefault(
          long key,
          java.lang.String defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.String> map =
            instance.getFieldMapInt64String83Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapInt64String83OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.String> map =
            instance.getFieldMapInt64String83Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
       */
      public Builder putFieldMapInt64String83(
          long key,
          java.lang.String value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapInt64String83Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, string&gt; field_map_int64_string_83 = 83;</code>
       */
      public Builder putAllFieldMapInt64String83(
          java.util.Map<java.lang.Long, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64String83Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64Uint3284Count() {
        return instance.getFieldMapInt64Uint3284Map().size();
      }
      /**
       * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64Uint3284(
          long key) {
        
        return instance.getFieldMapInt64Uint3284Map().containsKey(key);
      }

      public Builder clearFieldMapInt64Uint3284() {
        copyOnWrite();
        instance.getMutableFieldMapInt64Uint3284Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
       */

      public Builder removeFieldMapInt64Uint3284(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Uint3284Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64Uint3284Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Uint3284() {
        return getFieldMapInt64Uint3284Map();
      }
      /**
       * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapInt64Uint3284Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64Uint3284Map());
      }
      /**
       * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
       */
      @java.lang.Override

      public int getFieldMapInt64Uint3284OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapInt64Uint3284Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
       */
      @java.lang.Override

      public int getFieldMapInt64Uint3284OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapInt64Uint3284Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
       */
      public Builder putFieldMapInt64Uint3284(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Uint3284Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, uint32&gt; field_map_int64_uint32_84 = 84;</code>
       */
      public Builder putAllFieldMapInt64Uint3284(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64Uint3284Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapInt64Uint6485Count() {
        return instance.getFieldMapInt64Uint6485Map().size();
      }
      /**
       * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapInt64Uint6485(
          long key) {
        
        return instance.getFieldMapInt64Uint6485Map().containsKey(key);
      }

      public Builder clearFieldMapInt64Uint6485() {
        copyOnWrite();
        instance.getMutableFieldMapInt64Uint6485Map().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
       */

      public Builder removeFieldMapInt64Uint6485(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Uint6485Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapInt64Uint6485Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Uint6485() {
        return getFieldMapInt64Uint6485Map();
      }
      /**
       * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapInt64Uint6485Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapInt64Uint6485Map());
      }
      /**
       * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
       */
      @java.lang.Override

      public long getFieldMapInt64Uint6485OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapInt64Uint6485Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
       */
      @java.lang.Override

      public long getFieldMapInt64Uint6485OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapInt64Uint6485Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
       */
      public Builder putFieldMapInt64Uint6485(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapInt64Uint6485Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int64, uint64&gt; field_map_int64_uint64_85 = 85;</code>
       */
      public Builder putAllFieldMapInt64Uint6485(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapInt64Uint6485Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32Bool86Count() {
        return instance.getFieldMapSfixed32Bool86Map().size();
      }
      /**
       * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32Bool86(
          int key) {
        
        return instance.getFieldMapSfixed32Bool86Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32Bool86() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Bool86Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
       */

      public Builder removeFieldMapSfixed32Bool86(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Bool86Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32Bool86Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapSfixed32Bool86() {
        return getFieldMapSfixed32Bool86Map();
      }
      /**
       * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapSfixed32Bool86Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32Bool86Map());
      }
      /**
       * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
       */
      @java.lang.Override

      public boolean getFieldMapSfixed32Bool86OrDefault(
          int key,
          boolean defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Boolean> map =
            instance.getFieldMapSfixed32Bool86Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
       */
      @java.lang.Override

      public boolean getFieldMapSfixed32Bool86OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Boolean> map =
            instance.getFieldMapSfixed32Bool86Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
       */
      public Builder putFieldMapSfixed32Bool86(
          int key,
          boolean value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Bool86Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, bool&gt; field_map_sfixed32_bool_86 = 86;</code>
       */
      public Builder putAllFieldMapSfixed32Bool86(
          java.util.Map<java.lang.Integer, java.lang.Boolean> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Bool86Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32Bytes87Count() {
        return instance.getFieldMapSfixed32Bytes87Map().size();
      }
      /**
       * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32Bytes87(
          int key) {
        
        return instance.getFieldMapSfixed32Bytes87Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32Bytes87() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Bytes87Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
       */

      public Builder removeFieldMapSfixed32Bytes87(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Bytes87Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32Bytes87Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapSfixed32Bytes87() {
        return getFieldMapSfixed32Bytes87Map();
      }
      /**
       * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapSfixed32Bytes87Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32Bytes87Map());
      }
      /**
       * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapSfixed32Bytes87OrDefault(
          int key,
          com.google.protobuf.ByteString defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
            instance.getFieldMapSfixed32Bytes87Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapSfixed32Bytes87OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
            instance.getFieldMapSfixed32Bytes87Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
       */
      public Builder putFieldMapSfixed32Bytes87(
          int key,
          com.google.protobuf.ByteString value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Bytes87Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, bytes&gt; field_map_sfixed32_bytes_87 = 87;</code>
       */
      public Builder putAllFieldMapSfixed32Bytes87(
          java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Bytes87Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32Double88Count() {
        return instance.getFieldMapSfixed32Double88Map().size();
      }
      /**
       * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32Double88(
          int key) {
        
        return instance.getFieldMapSfixed32Double88Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32Double88() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Double88Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
       */

      public Builder removeFieldMapSfixed32Double88(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Double88Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32Double88Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapSfixed32Double88() {
        return getFieldMapSfixed32Double88Map();
      }
      /**
       * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapSfixed32Double88Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32Double88Map());
      }
      /**
       * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
       */
      @java.lang.Override

      public double getFieldMapSfixed32Double88OrDefault(
          int key,
          double defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Double> map =
            instance.getFieldMapSfixed32Double88Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
       */
      @java.lang.Override

      public double getFieldMapSfixed32Double88OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Double> map =
            instance.getFieldMapSfixed32Double88Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
       */
      public Builder putFieldMapSfixed32Double88(
          int key,
          double value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Double88Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, double&gt; field_map_sfixed32_double_88 = 88;</code>
       */
      public Builder putAllFieldMapSfixed32Double88(
          java.util.Map<java.lang.Integer, java.lang.Double> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Double88Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32Enum89Count() {
        return instance.getFieldMapSfixed32Enum89Map().size();
      }
      /**
       * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32Enum89(
          int key) {
        
        return instance.getFieldMapSfixed32Enum89Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32Enum89() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Enum89Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
       */

      public Builder removeFieldMapSfixed32Enum89(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Enum89Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32Enum89Map()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapSfixed32Enum89() {
        return getFieldMapSfixed32Enum89Map();
      }
      /**
       * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapSfixed32Enum89Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32Enum89Map());
      }
      /**
       * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSfixed32Enum89OrDefault(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapSfixed32Enum89Map();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSfixed32Enum89OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapSfixed32Enum89Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
       */
      public Builder putFieldMapSfixed32Enum89(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Enum89Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed32_enum_89 = 89;</code>
       */
      public Builder putAllFieldMapSfixed32Enum89(
          java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Enum89Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32Fixed3290Count() {
        return instance.getFieldMapSfixed32Fixed3290Map().size();
      }
      /**
       * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32Fixed3290(
          int key) {
        
        return instance.getFieldMapSfixed32Fixed3290Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32Fixed3290() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Fixed3290Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
       */

      public Builder removeFieldMapSfixed32Fixed3290(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Fixed3290Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32Fixed3290Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Fixed3290() {
        return getFieldMapSfixed32Fixed3290Map();
      }
      /**
       * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Fixed3290Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32Fixed3290Map());
      }
      /**
       * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed32Fixed3290OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSfixed32Fixed3290Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed32Fixed3290OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSfixed32Fixed3290Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
       */
      public Builder putFieldMapSfixed32Fixed3290(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Fixed3290Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, fixed32&gt; field_map_sfixed32_fixed32_90 = 90;</code>
       */
      public Builder putAllFieldMapSfixed32Fixed3290(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Fixed3290Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32Fixed6491Count() {
        return instance.getFieldMapSfixed32Fixed6491Map().size();
      }
      /**
       * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32Fixed6491(
          int key) {
        
        return instance.getFieldMapSfixed32Fixed6491Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32Fixed6491() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Fixed6491Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
       */

      public Builder removeFieldMapSfixed32Fixed6491(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Fixed6491Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32Fixed6491Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Fixed6491() {
        return getFieldMapSfixed32Fixed6491Map();
      }
      /**
       * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Fixed6491Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32Fixed6491Map());
      }
      /**
       * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed32Fixed6491OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSfixed32Fixed6491Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed32Fixed6491OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSfixed32Fixed6491Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
       */
      public Builder putFieldMapSfixed32Fixed6491(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Fixed6491Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, fixed64&gt; field_map_sfixed32_fixed64_91 = 91;</code>
       */
      public Builder putAllFieldMapSfixed32Fixed6491(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Fixed6491Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32Float92Count() {
        return instance.getFieldMapSfixed32Float92Map().size();
      }
      /**
       * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32Float92(
          int key) {
        
        return instance.getFieldMapSfixed32Float92Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32Float92() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Float92Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
       */

      public Builder removeFieldMapSfixed32Float92(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Float92Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32Float92Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapSfixed32Float92() {
        return getFieldMapSfixed32Float92Map();
      }
      /**
       * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapSfixed32Float92Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32Float92Map());
      }
      /**
       * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
       */
      @java.lang.Override

      public float getFieldMapSfixed32Float92OrDefault(
          int key,
          float defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Float> map =
            instance.getFieldMapSfixed32Float92Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
       */
      @java.lang.Override

      public float getFieldMapSfixed32Float92OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Float> map =
            instance.getFieldMapSfixed32Float92Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
       */
      public Builder putFieldMapSfixed32Float92(
          int key,
          float value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Float92Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, float&gt; field_map_sfixed32_float_92 = 92;</code>
       */
      public Builder putAllFieldMapSfixed32Float92(
          java.util.Map<java.lang.Integer, java.lang.Float> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Float92Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32Int3293Count() {
        return instance.getFieldMapSfixed32Int3293Map().size();
      }
      /**
       * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32Int3293(
          int key) {
        
        return instance.getFieldMapSfixed32Int3293Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32Int3293() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Int3293Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
       */

      public Builder removeFieldMapSfixed32Int3293(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Int3293Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32Int3293Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Int3293() {
        return getFieldMapSfixed32Int3293Map();
      }
      /**
       * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Int3293Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32Int3293Map());
      }
      /**
       * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed32Int3293OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSfixed32Int3293Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed32Int3293OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSfixed32Int3293Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
       */
      public Builder putFieldMapSfixed32Int3293(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Int3293Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, int32&gt; field_map_sfixed32_int32_93 = 93;</code>
       */
      public Builder putAllFieldMapSfixed32Int3293(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Int3293Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32Int6494Count() {
        return instance.getFieldMapSfixed32Int6494Map().size();
      }
      /**
       * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32Int6494(
          int key) {
        
        return instance.getFieldMapSfixed32Int6494Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32Int6494() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Int6494Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
       */

      public Builder removeFieldMapSfixed32Int6494(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Int6494Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32Int6494Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Int6494() {
        return getFieldMapSfixed32Int6494Map();
      }
      /**
       * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Int6494Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32Int6494Map());
      }
      /**
       * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed32Int6494OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSfixed32Int6494Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed32Int6494OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSfixed32Int6494Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
       */
      public Builder putFieldMapSfixed32Int6494(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Int6494Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, int64&gt; field_map_sfixed32_int64_94 = 94;</code>
       */
      public Builder putAllFieldMapSfixed32Int6494(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Int6494Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32Message95Count() {
        return instance.getFieldMapSfixed32Message95Map().size();
      }
      /**
       * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32Message95(
          int key) {
        
        return instance.getFieldMapSfixed32Message95Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32Message95() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Message95Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
       */

      public Builder removeFieldMapSfixed32Message95(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Message95Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32Message95Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapSfixed32Message95() {
        return getFieldMapSfixed32Message95Map();
      }
      /**
       * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapSfixed32Message95Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32Message95Map());
      }
      /**
       * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSfixed32Message95OrDefault(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapSfixed32Message95Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSfixed32Message95OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapSfixed32Message95Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
       */
      public Builder putFieldMapSfixed32Message95(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Message95Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, .protobuf.experimental.Proto2Message&gt; field_map_sfixed32_message_95 = 95;</code>
       */
      public Builder putAllFieldMapSfixed32Message95(
          java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Message95Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32Sfixed3296Count() {
        return instance.getFieldMapSfixed32Sfixed3296Map().size();
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32Sfixed3296(
          int key) {
        
        return instance.getFieldMapSfixed32Sfixed3296Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32Sfixed3296() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Sfixed3296Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
       */

      public Builder removeFieldMapSfixed32Sfixed3296(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Sfixed3296Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32Sfixed3296Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Sfixed3296() {
        return getFieldMapSfixed32Sfixed3296Map();
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Sfixed3296Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32Sfixed3296Map());
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed32Sfixed3296OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSfixed32Sfixed3296Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed32Sfixed3296OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSfixed32Sfixed3296Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
       */
      public Builder putFieldMapSfixed32Sfixed3296(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Sfixed3296Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, sfixed32&gt; field_map_sfixed32_sfixed32_96 = 96;</code>
       */
      public Builder putAllFieldMapSfixed32Sfixed3296(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Sfixed3296Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32Sfixed6497Count() {
        return instance.getFieldMapSfixed32Sfixed6497Map().size();
      }
      /**
       * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32Sfixed6497(
          int key) {
        
        return instance.getFieldMapSfixed32Sfixed6497Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32Sfixed6497() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Sfixed6497Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
       */

      public Builder removeFieldMapSfixed32Sfixed6497(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Sfixed6497Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32Sfixed6497Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Sfixed6497() {
        return getFieldMapSfixed32Sfixed6497Map();
      }
      /**
       * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Sfixed6497Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32Sfixed6497Map());
      }
      /**
       * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed32Sfixed6497OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSfixed32Sfixed6497Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed32Sfixed6497OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSfixed32Sfixed6497Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
       */
      public Builder putFieldMapSfixed32Sfixed6497(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Sfixed6497Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, sfixed64&gt; field_map_sfixed32_sfixed64_97 = 97;</code>
       */
      public Builder putAllFieldMapSfixed32Sfixed6497(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Sfixed6497Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32Sint3298Count() {
        return instance.getFieldMapSfixed32Sint3298Map().size();
      }
      /**
       * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32Sint3298(
          int key) {
        
        return instance.getFieldMapSfixed32Sint3298Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32Sint3298() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Sint3298Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
       */

      public Builder removeFieldMapSfixed32Sint3298(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Sint3298Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32Sint3298Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Sint3298() {
        return getFieldMapSfixed32Sint3298Map();
      }
      /**
       * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Sint3298Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32Sint3298Map());
      }
      /**
       * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed32Sint3298OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSfixed32Sint3298Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed32Sint3298OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSfixed32Sint3298Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
       */
      public Builder putFieldMapSfixed32Sint3298(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Sint3298Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, sint32&gt; field_map_sfixed32_sint32_98 = 98;</code>
       */
      public Builder putAllFieldMapSfixed32Sint3298(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Sint3298Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32Sint6499Count() {
        return instance.getFieldMapSfixed32Sint6499Map().size();
      }
      /**
       * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32Sint6499(
          int key) {
        
        return instance.getFieldMapSfixed32Sint6499Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32Sint6499() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Sint6499Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
       */

      public Builder removeFieldMapSfixed32Sint6499(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Sint6499Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32Sint6499Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Sint6499() {
        return getFieldMapSfixed32Sint6499Map();
      }
      /**
       * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Sint6499Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32Sint6499Map());
      }
      /**
       * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed32Sint6499OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSfixed32Sint6499Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed32Sint6499OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSfixed32Sint6499Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
       */
      public Builder putFieldMapSfixed32Sint6499(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Sint6499Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, sint64&gt; field_map_sfixed32_sint64_99 = 99;</code>
       */
      public Builder putAllFieldMapSfixed32Sint6499(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Sint6499Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32String100Count() {
        return instance.getFieldMapSfixed32String100Map().size();
      }
      /**
       * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32String100(
          int key) {
        
        return instance.getFieldMapSfixed32String100Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32String100() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32String100Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
       */

      public Builder removeFieldMapSfixed32String100(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32String100Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32String100Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapSfixed32String100() {
        return getFieldMapSfixed32String100Map();
      }
      /**
       * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapSfixed32String100Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32String100Map());
      }
      /**
       * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapSfixed32String100OrDefault(
          int key,
          java.lang.String defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.String> map =
            instance.getFieldMapSfixed32String100Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapSfixed32String100OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.String> map =
            instance.getFieldMapSfixed32String100Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
       */
      public Builder putFieldMapSfixed32String100(
          int key,
          java.lang.String value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapSfixed32String100Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, string&gt; field_map_sfixed32_string_100 = 100;</code>
       */
      public Builder putAllFieldMapSfixed32String100(
          java.util.Map<java.lang.Integer, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32String100Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32Uint32101Count() {
        return instance.getFieldMapSfixed32Uint32101Map().size();
      }
      /**
       * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32Uint32101(
          int key) {
        
        return instance.getFieldMapSfixed32Uint32101Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32Uint32101() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Uint32101Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
       */

      public Builder removeFieldMapSfixed32Uint32101(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Uint32101Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32Uint32101Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Uint32101() {
        return getFieldMapSfixed32Uint32101Map();
      }
      /**
       * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSfixed32Uint32101Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32Uint32101Map());
      }
      /**
       * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed32Uint32101OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSfixed32Uint32101Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed32Uint32101OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSfixed32Uint32101Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
       */
      public Builder putFieldMapSfixed32Uint32101(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Uint32101Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, uint32&gt; field_map_sfixed32_uint32_101 = 101;</code>
       */
      public Builder putAllFieldMapSfixed32Uint32101(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Uint32101Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed32Uint64102Count() {
        return instance.getFieldMapSfixed32Uint64102Map().size();
      }
      /**
       * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed32Uint64102(
          int key) {
        
        return instance.getFieldMapSfixed32Uint64102Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed32Uint64102() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Uint64102Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
       */

      public Builder removeFieldMapSfixed32Uint64102(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Uint64102Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed32Uint64102Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Uint64102() {
        return getFieldMapSfixed32Uint64102Map();
      }
      /**
       * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSfixed32Uint64102Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed32Uint64102Map());
      }
      /**
       * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed32Uint64102OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSfixed32Uint64102Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed32Uint64102OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSfixed32Uint64102Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
       */
      public Builder putFieldMapSfixed32Uint64102(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Uint64102Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed32, uint64&gt; field_map_sfixed32_uint64_102 = 102;</code>
       */
      public Builder putAllFieldMapSfixed32Uint64102(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed32Uint64102Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64Bool103Count() {
        return instance.getFieldMapSfixed64Bool103Map().size();
      }
      /**
       * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64Bool103(
          long key) {
        
        return instance.getFieldMapSfixed64Bool103Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64Bool103() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Bool103Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
       */

      public Builder removeFieldMapSfixed64Bool103(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Bool103Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64Bool103Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapSfixed64Bool103() {
        return getFieldMapSfixed64Bool103Map();
      }
      /**
       * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapSfixed64Bool103Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64Bool103Map());
      }
      /**
       * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
       */
      @java.lang.Override

      public boolean getFieldMapSfixed64Bool103OrDefault(
          long key,
          boolean defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Boolean> map =
            instance.getFieldMapSfixed64Bool103Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
       */
      @java.lang.Override

      public boolean getFieldMapSfixed64Bool103OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Boolean> map =
            instance.getFieldMapSfixed64Bool103Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
       */
      public Builder putFieldMapSfixed64Bool103(
          long key,
          boolean value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Bool103Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, bool&gt; field_map_sfixed64_bool_103 = 103;</code>
       */
      public Builder putAllFieldMapSfixed64Bool103(
          java.util.Map<java.lang.Long, java.lang.Boolean> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Bool103Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64Bytes104Count() {
        return instance.getFieldMapSfixed64Bytes104Map().size();
      }
      /**
       * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64Bytes104(
          long key) {
        
        return instance.getFieldMapSfixed64Bytes104Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64Bytes104() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Bytes104Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
       */

      public Builder removeFieldMapSfixed64Bytes104(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Bytes104Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64Bytes104Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapSfixed64Bytes104() {
        return getFieldMapSfixed64Bytes104Map();
      }
      /**
       * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapSfixed64Bytes104Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64Bytes104Map());
      }
      /**
       * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapSfixed64Bytes104OrDefault(
          long key,
          com.google.protobuf.ByteString defaultValue) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
            instance.getFieldMapSfixed64Bytes104Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapSfixed64Bytes104OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
            instance.getFieldMapSfixed64Bytes104Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
       */
      public Builder putFieldMapSfixed64Bytes104(
          long key,
          com.google.protobuf.ByteString value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Bytes104Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, bytes&gt; field_map_sfixed64_bytes_104 = 104;</code>
       */
      public Builder putAllFieldMapSfixed64Bytes104(
          java.util.Map<java.lang.Long, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Bytes104Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64Double105Count() {
        return instance.getFieldMapSfixed64Double105Map().size();
      }
      /**
       * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64Double105(
          long key) {
        
        return instance.getFieldMapSfixed64Double105Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64Double105() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Double105Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
       */

      public Builder removeFieldMapSfixed64Double105(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Double105Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64Double105Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapSfixed64Double105() {
        return getFieldMapSfixed64Double105Map();
      }
      /**
       * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapSfixed64Double105Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64Double105Map());
      }
      /**
       * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
       */
      @java.lang.Override

      public double getFieldMapSfixed64Double105OrDefault(
          long key,
          double defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Double> map =
            instance.getFieldMapSfixed64Double105Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
       */
      @java.lang.Override

      public double getFieldMapSfixed64Double105OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Double> map =
            instance.getFieldMapSfixed64Double105Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
       */
      public Builder putFieldMapSfixed64Double105(
          long key,
          double value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Double105Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, double&gt; field_map_sfixed64_double_105 = 105;</code>
       */
      public Builder putAllFieldMapSfixed64Double105(
          java.util.Map<java.lang.Long, java.lang.Double> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Double105Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64Enum106Count() {
        return instance.getFieldMapSfixed64Enum106Map().size();
      }
      /**
       * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64Enum106(
          long key) {
        
        return instance.getFieldMapSfixed64Enum106Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64Enum106() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Enum106Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
       */

      public Builder removeFieldMapSfixed64Enum106(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Enum106Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64Enum106Map()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapSfixed64Enum106() {
        return getFieldMapSfixed64Enum106Map();
      }
      /**
       * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapSfixed64Enum106Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64Enum106Map());
      }
      /**
       * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSfixed64Enum106OrDefault(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapSfixed64Enum106Map();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSfixed64Enum106OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapSfixed64Enum106Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
       */
      public Builder putFieldMapSfixed64Enum106(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Enum106Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sfixed64_enum_106 = 106;</code>
       */
      public Builder putAllFieldMapSfixed64Enum106(
          java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Enum106Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64Fixed32107Count() {
        return instance.getFieldMapSfixed64Fixed32107Map().size();
      }
      /**
       * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64Fixed32107(
          long key) {
        
        return instance.getFieldMapSfixed64Fixed32107Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64Fixed32107() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Fixed32107Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
       */

      public Builder removeFieldMapSfixed64Fixed32107(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Fixed32107Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64Fixed32107Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Fixed32107() {
        return getFieldMapSfixed64Fixed32107Map();
      }
      /**
       * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Fixed32107Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64Fixed32107Map());
      }
      /**
       * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed64Fixed32107OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSfixed64Fixed32107Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed64Fixed32107OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSfixed64Fixed32107Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
       */
      public Builder putFieldMapSfixed64Fixed32107(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Fixed32107Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, fixed32&gt; field_map_sfixed64_fixed32_107 = 107;</code>
       */
      public Builder putAllFieldMapSfixed64Fixed32107(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Fixed32107Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64Fixed64108Count() {
        return instance.getFieldMapSfixed64Fixed64108Map().size();
      }
      /**
       * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64Fixed64108(
          long key) {
        
        return instance.getFieldMapSfixed64Fixed64108Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64Fixed64108() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Fixed64108Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
       */

      public Builder removeFieldMapSfixed64Fixed64108(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Fixed64108Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64Fixed64108Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Fixed64108() {
        return getFieldMapSfixed64Fixed64108Map();
      }
      /**
       * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Fixed64108Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64Fixed64108Map());
      }
      /**
       * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed64Fixed64108OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSfixed64Fixed64108Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed64Fixed64108OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSfixed64Fixed64108Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
       */
      public Builder putFieldMapSfixed64Fixed64108(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Fixed64108Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, fixed64&gt; field_map_sfixed64_fixed64_108 = 108;</code>
       */
      public Builder putAllFieldMapSfixed64Fixed64108(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Fixed64108Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64Float109Count() {
        return instance.getFieldMapSfixed64Float109Map().size();
      }
      /**
       * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64Float109(
          long key) {
        
        return instance.getFieldMapSfixed64Float109Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64Float109() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Float109Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
       */

      public Builder removeFieldMapSfixed64Float109(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Float109Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64Float109Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapSfixed64Float109() {
        return getFieldMapSfixed64Float109Map();
      }
      /**
       * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapSfixed64Float109Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64Float109Map());
      }
      /**
       * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
       */
      @java.lang.Override

      public float getFieldMapSfixed64Float109OrDefault(
          long key,
          float defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Float> map =
            instance.getFieldMapSfixed64Float109Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
       */
      @java.lang.Override

      public float getFieldMapSfixed64Float109OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Float> map =
            instance.getFieldMapSfixed64Float109Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
       */
      public Builder putFieldMapSfixed64Float109(
          long key,
          float value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Float109Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, float&gt; field_map_sfixed64_float_109 = 109;</code>
       */
      public Builder putAllFieldMapSfixed64Float109(
          java.util.Map<java.lang.Long, java.lang.Float> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Float109Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64Int32110Count() {
        return instance.getFieldMapSfixed64Int32110Map().size();
      }
      /**
       * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64Int32110(
          long key) {
        
        return instance.getFieldMapSfixed64Int32110Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64Int32110() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Int32110Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
       */

      public Builder removeFieldMapSfixed64Int32110(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Int32110Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64Int32110Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Int32110() {
        return getFieldMapSfixed64Int32110Map();
      }
      /**
       * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Int32110Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64Int32110Map());
      }
      /**
       * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed64Int32110OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSfixed64Int32110Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed64Int32110OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSfixed64Int32110Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
       */
      public Builder putFieldMapSfixed64Int32110(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Int32110Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, int32&gt; field_map_sfixed64_int32_110 = 110;</code>
       */
      public Builder putAllFieldMapSfixed64Int32110(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Int32110Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64Int64111Count() {
        return instance.getFieldMapSfixed64Int64111Map().size();
      }
      /**
       * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64Int64111(
          long key) {
        
        return instance.getFieldMapSfixed64Int64111Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64Int64111() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Int64111Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
       */

      public Builder removeFieldMapSfixed64Int64111(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Int64111Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64Int64111Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Int64111() {
        return getFieldMapSfixed64Int64111Map();
      }
      /**
       * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Int64111Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64Int64111Map());
      }
      /**
       * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed64Int64111OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSfixed64Int64111Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed64Int64111OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSfixed64Int64111Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
       */
      public Builder putFieldMapSfixed64Int64111(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Int64111Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, int64&gt; field_map_sfixed64_int64_111 = 111;</code>
       */
      public Builder putAllFieldMapSfixed64Int64111(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Int64111Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64Message112Count() {
        return instance.getFieldMapSfixed64Message112Map().size();
      }
      /**
       * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64Message112(
          long key) {
        
        return instance.getFieldMapSfixed64Message112Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64Message112() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Message112Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
       */

      public Builder removeFieldMapSfixed64Message112(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Message112Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64Message112Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapSfixed64Message112() {
        return getFieldMapSfixed64Message112Map();
      }
      /**
       * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapSfixed64Message112Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64Message112Map());
      }
      /**
       * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSfixed64Message112OrDefault(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapSfixed64Message112Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSfixed64Message112OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapSfixed64Message112Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
       */
      public Builder putFieldMapSfixed64Message112(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Message112Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, .protobuf.experimental.Proto2Message&gt; field_map_sfixed64_message_112 = 112;</code>
       */
      public Builder putAllFieldMapSfixed64Message112(
          java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Message112Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64Sfixed32113Count() {
        return instance.getFieldMapSfixed64Sfixed32113Map().size();
      }
      /**
       * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64Sfixed32113(
          long key) {
        
        return instance.getFieldMapSfixed64Sfixed32113Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64Sfixed32113() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Sfixed32113Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
       */

      public Builder removeFieldMapSfixed64Sfixed32113(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Sfixed32113Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64Sfixed32113Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Sfixed32113() {
        return getFieldMapSfixed64Sfixed32113Map();
      }
      /**
       * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Sfixed32113Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64Sfixed32113Map());
      }
      /**
       * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed64Sfixed32113OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSfixed64Sfixed32113Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed64Sfixed32113OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSfixed64Sfixed32113Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
       */
      public Builder putFieldMapSfixed64Sfixed32113(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Sfixed32113Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, sfixed32&gt; field_map_sfixed64_sfixed32_113 = 113;</code>
       */
      public Builder putAllFieldMapSfixed64Sfixed32113(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Sfixed32113Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64Sfixed64114Count() {
        return instance.getFieldMapSfixed64Sfixed64114Map().size();
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64Sfixed64114(
          long key) {
        
        return instance.getFieldMapSfixed64Sfixed64114Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64Sfixed64114() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Sfixed64114Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
       */

      public Builder removeFieldMapSfixed64Sfixed64114(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Sfixed64114Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64Sfixed64114Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Sfixed64114() {
        return getFieldMapSfixed64Sfixed64114Map();
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Sfixed64114Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64Sfixed64114Map());
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed64Sfixed64114OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSfixed64Sfixed64114Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed64Sfixed64114OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSfixed64Sfixed64114Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
       */
      public Builder putFieldMapSfixed64Sfixed64114(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Sfixed64114Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, sfixed64&gt; field_map_sfixed64_sfixed64_114 = 114;</code>
       */
      public Builder putAllFieldMapSfixed64Sfixed64114(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Sfixed64114Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64Sint32115Count() {
        return instance.getFieldMapSfixed64Sint32115Map().size();
      }
      /**
       * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64Sint32115(
          long key) {
        
        return instance.getFieldMapSfixed64Sint32115Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64Sint32115() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Sint32115Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
       */

      public Builder removeFieldMapSfixed64Sint32115(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Sint32115Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64Sint32115Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Sint32115() {
        return getFieldMapSfixed64Sint32115Map();
      }
      /**
       * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Sint32115Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64Sint32115Map());
      }
      /**
       * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed64Sint32115OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSfixed64Sint32115Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed64Sint32115OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSfixed64Sint32115Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
       */
      public Builder putFieldMapSfixed64Sint32115(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Sint32115Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, sint32&gt; field_map_sfixed64_sint32_115 = 115;</code>
       */
      public Builder putAllFieldMapSfixed64Sint32115(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Sint32115Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64Sint64116Count() {
        return instance.getFieldMapSfixed64Sint64116Map().size();
      }
      /**
       * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64Sint64116(
          long key) {
        
        return instance.getFieldMapSfixed64Sint64116Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64Sint64116() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Sint64116Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
       */

      public Builder removeFieldMapSfixed64Sint64116(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Sint64116Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64Sint64116Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Sint64116() {
        return getFieldMapSfixed64Sint64116Map();
      }
      /**
       * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Sint64116Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64Sint64116Map());
      }
      /**
       * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed64Sint64116OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSfixed64Sint64116Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed64Sint64116OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSfixed64Sint64116Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
       */
      public Builder putFieldMapSfixed64Sint64116(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Sint64116Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, sint64&gt; field_map_sfixed64_sint64_116 = 116;</code>
       */
      public Builder putAllFieldMapSfixed64Sint64116(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Sint64116Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64String117Count() {
        return instance.getFieldMapSfixed64String117Map().size();
      }
      /**
       * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64String117(
          long key) {
        
        return instance.getFieldMapSfixed64String117Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64String117() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64String117Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
       */

      public Builder removeFieldMapSfixed64String117(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64String117Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64String117Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.String> getFieldMapSfixed64String117() {
        return getFieldMapSfixed64String117Map();
      }
      /**
       * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.String> getFieldMapSfixed64String117Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64String117Map());
      }
      /**
       * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapSfixed64String117OrDefault(
          long key,
          java.lang.String defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.String> map =
            instance.getFieldMapSfixed64String117Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapSfixed64String117OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.String> map =
            instance.getFieldMapSfixed64String117Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
       */
      public Builder putFieldMapSfixed64String117(
          long key,
          java.lang.String value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapSfixed64String117Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, string&gt; field_map_sfixed64_string_117 = 117;</code>
       */
      public Builder putAllFieldMapSfixed64String117(
          java.util.Map<java.lang.Long, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64String117Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64Uint32118Count() {
        return instance.getFieldMapSfixed64Uint32118Map().size();
      }
      /**
       * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64Uint32118(
          long key) {
        
        return instance.getFieldMapSfixed64Uint32118Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64Uint32118() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Uint32118Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
       */

      public Builder removeFieldMapSfixed64Uint32118(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Uint32118Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64Uint32118Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Uint32118() {
        return getFieldMapSfixed64Uint32118Map();
      }
      /**
       * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSfixed64Uint32118Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64Uint32118Map());
      }
      /**
       * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed64Uint32118OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSfixed64Uint32118Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
       */
      @java.lang.Override

      public int getFieldMapSfixed64Uint32118OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSfixed64Uint32118Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
       */
      public Builder putFieldMapSfixed64Uint32118(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Uint32118Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, uint32&gt; field_map_sfixed64_uint32_118 = 118;</code>
       */
      public Builder putAllFieldMapSfixed64Uint32118(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Uint32118Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSfixed64Uint64119Count() {
        return instance.getFieldMapSfixed64Uint64119Map().size();
      }
      /**
       * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSfixed64Uint64119(
          long key) {
        
        return instance.getFieldMapSfixed64Uint64119Map().containsKey(key);
      }

      public Builder clearFieldMapSfixed64Uint64119() {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Uint64119Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
       */

      public Builder removeFieldMapSfixed64Uint64119(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Uint64119Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSfixed64Uint64119Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Uint64119() {
        return getFieldMapSfixed64Uint64119Map();
      }
      /**
       * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSfixed64Uint64119Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSfixed64Uint64119Map());
      }
      /**
       * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed64Uint64119OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSfixed64Uint64119Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
       */
      @java.lang.Override

      public long getFieldMapSfixed64Uint64119OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSfixed64Uint64119Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
       */
      public Builder putFieldMapSfixed64Uint64119(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Uint64119Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sfixed64, uint64&gt; field_map_sfixed64_uint64_119 = 119;</code>
       */
      public Builder putAllFieldMapSfixed64Uint64119(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSfixed64Uint64119Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32Bool120Count() {
        return instance.getFieldMapSint32Bool120Map().size();
      }
      /**
       * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32Bool120(
          int key) {
        
        return instance.getFieldMapSint32Bool120Map().containsKey(key);
      }

      public Builder clearFieldMapSint32Bool120() {
        copyOnWrite();
        instance.getMutableFieldMapSint32Bool120Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
       */

      public Builder removeFieldMapSint32Bool120(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Bool120Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32Bool120Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapSint32Bool120() {
        return getFieldMapSint32Bool120Map();
      }
      /**
       * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapSint32Bool120Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32Bool120Map());
      }
      /**
       * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
       */
      @java.lang.Override

      public boolean getFieldMapSint32Bool120OrDefault(
          int key,
          boolean defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Boolean> map =
            instance.getFieldMapSint32Bool120Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
       */
      @java.lang.Override

      public boolean getFieldMapSint32Bool120OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Boolean> map =
            instance.getFieldMapSint32Bool120Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
       */
      public Builder putFieldMapSint32Bool120(
          int key,
          boolean value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Bool120Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, bool&gt; field_map_sint32_bool_120 = 120;</code>
       */
      public Builder putAllFieldMapSint32Bool120(
          java.util.Map<java.lang.Integer, java.lang.Boolean> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32Bool120Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32Bytes121Count() {
        return instance.getFieldMapSint32Bytes121Map().size();
      }
      /**
       * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32Bytes121(
          int key) {
        
        return instance.getFieldMapSint32Bytes121Map().containsKey(key);
      }

      public Builder clearFieldMapSint32Bytes121() {
        copyOnWrite();
        instance.getMutableFieldMapSint32Bytes121Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
       */

      public Builder removeFieldMapSint32Bytes121(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Bytes121Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32Bytes121Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapSint32Bytes121() {
        return getFieldMapSint32Bytes121Map();
      }
      /**
       * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapSint32Bytes121Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32Bytes121Map());
      }
      /**
       * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapSint32Bytes121OrDefault(
          int key,
          com.google.protobuf.ByteString defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
            instance.getFieldMapSint32Bytes121Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapSint32Bytes121OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
            instance.getFieldMapSint32Bytes121Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
       */
      public Builder putFieldMapSint32Bytes121(
          int key,
          com.google.protobuf.ByteString value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapSint32Bytes121Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, bytes&gt; field_map_sint32_bytes_121 = 121;</code>
       */
      public Builder putAllFieldMapSint32Bytes121(
          java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32Bytes121Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32Double122Count() {
        return instance.getFieldMapSint32Double122Map().size();
      }
      /**
       * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32Double122(
          int key) {
        
        return instance.getFieldMapSint32Double122Map().containsKey(key);
      }

      public Builder clearFieldMapSint32Double122() {
        copyOnWrite();
        instance.getMutableFieldMapSint32Double122Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
       */

      public Builder removeFieldMapSint32Double122(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Double122Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32Double122Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapSint32Double122() {
        return getFieldMapSint32Double122Map();
      }
      /**
       * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapSint32Double122Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32Double122Map());
      }
      /**
       * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
       */
      @java.lang.Override

      public double getFieldMapSint32Double122OrDefault(
          int key,
          double defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Double> map =
            instance.getFieldMapSint32Double122Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
       */
      @java.lang.Override

      public double getFieldMapSint32Double122OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Double> map =
            instance.getFieldMapSint32Double122Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
       */
      public Builder putFieldMapSint32Double122(
          int key,
          double value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Double122Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, double&gt; field_map_sint32_double_122 = 122;</code>
       */
      public Builder putAllFieldMapSint32Double122(
          java.util.Map<java.lang.Integer, java.lang.Double> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32Double122Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32Enum123Count() {
        return instance.getFieldMapSint32Enum123Map().size();
      }
      /**
       * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32Enum123(
          int key) {
        
        return instance.getFieldMapSint32Enum123Map().containsKey(key);
      }

      public Builder clearFieldMapSint32Enum123() {
        copyOnWrite();
        instance.getMutableFieldMapSint32Enum123Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
       */

      public Builder removeFieldMapSint32Enum123(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Enum123Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32Enum123Map()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapSint32Enum123() {
        return getFieldMapSint32Enum123Map();
      }
      /**
       * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapSint32Enum123Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32Enum123Map());
      }
      /**
       * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSint32Enum123OrDefault(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapSint32Enum123Map();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSint32Enum123OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapSint32Enum123Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
       */
      public Builder putFieldMapSint32Enum123(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapSint32Enum123Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint32_enum_123 = 123;</code>
       */
      public Builder putAllFieldMapSint32Enum123(
          java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32Enum123Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32Fixed32124Count() {
        return instance.getFieldMapSint32Fixed32124Map().size();
      }
      /**
       * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32Fixed32124(
          int key) {
        
        return instance.getFieldMapSint32Fixed32124Map().containsKey(key);
      }

      public Builder clearFieldMapSint32Fixed32124() {
        copyOnWrite();
        instance.getMutableFieldMapSint32Fixed32124Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
       */

      public Builder removeFieldMapSint32Fixed32124(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Fixed32124Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32Fixed32124Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Fixed32124() {
        return getFieldMapSint32Fixed32124Map();
      }
      /**
       * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Fixed32124Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32Fixed32124Map());
      }
      /**
       * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
       */
      @java.lang.Override

      public int getFieldMapSint32Fixed32124OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSint32Fixed32124Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
       */
      @java.lang.Override

      public int getFieldMapSint32Fixed32124OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSint32Fixed32124Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
       */
      public Builder putFieldMapSint32Fixed32124(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Fixed32124Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, fixed32&gt; field_map_sint32_fixed32_124 = 124;</code>
       */
      public Builder putAllFieldMapSint32Fixed32124(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32Fixed32124Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32Fixed64125Count() {
        return instance.getFieldMapSint32Fixed64125Map().size();
      }
      /**
       * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32Fixed64125(
          int key) {
        
        return instance.getFieldMapSint32Fixed64125Map().containsKey(key);
      }

      public Builder clearFieldMapSint32Fixed64125() {
        copyOnWrite();
        instance.getMutableFieldMapSint32Fixed64125Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
       */

      public Builder removeFieldMapSint32Fixed64125(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Fixed64125Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32Fixed64125Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Fixed64125() {
        return getFieldMapSint32Fixed64125Map();
      }
      /**
       * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Fixed64125Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32Fixed64125Map());
      }
      /**
       * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
       */
      @java.lang.Override

      public long getFieldMapSint32Fixed64125OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSint32Fixed64125Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
       */
      @java.lang.Override

      public long getFieldMapSint32Fixed64125OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSint32Fixed64125Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
       */
      public Builder putFieldMapSint32Fixed64125(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Fixed64125Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, fixed64&gt; field_map_sint32_fixed64_125 = 125;</code>
       */
      public Builder putAllFieldMapSint32Fixed64125(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32Fixed64125Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32Float126Count() {
        return instance.getFieldMapSint32Float126Map().size();
      }
      /**
       * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32Float126(
          int key) {
        
        return instance.getFieldMapSint32Float126Map().containsKey(key);
      }

      public Builder clearFieldMapSint32Float126() {
        copyOnWrite();
        instance.getMutableFieldMapSint32Float126Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
       */

      public Builder removeFieldMapSint32Float126(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Float126Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32Float126Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapSint32Float126() {
        return getFieldMapSint32Float126Map();
      }
      /**
       * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapSint32Float126Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32Float126Map());
      }
      /**
       * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
       */
      @java.lang.Override

      public float getFieldMapSint32Float126OrDefault(
          int key,
          float defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Float> map =
            instance.getFieldMapSint32Float126Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
       */
      @java.lang.Override

      public float getFieldMapSint32Float126OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Float> map =
            instance.getFieldMapSint32Float126Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
       */
      public Builder putFieldMapSint32Float126(
          int key,
          float value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Float126Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, float&gt; field_map_sint32_float_126 = 126;</code>
       */
      public Builder putAllFieldMapSint32Float126(
          java.util.Map<java.lang.Integer, java.lang.Float> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32Float126Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32Int32127Count() {
        return instance.getFieldMapSint32Int32127Map().size();
      }
      /**
       * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32Int32127(
          int key) {
        
        return instance.getFieldMapSint32Int32127Map().containsKey(key);
      }

      public Builder clearFieldMapSint32Int32127() {
        copyOnWrite();
        instance.getMutableFieldMapSint32Int32127Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
       */

      public Builder removeFieldMapSint32Int32127(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Int32127Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32Int32127Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Int32127() {
        return getFieldMapSint32Int32127Map();
      }
      /**
       * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Int32127Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32Int32127Map());
      }
      /**
       * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
       */
      @java.lang.Override

      public int getFieldMapSint32Int32127OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSint32Int32127Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
       */
      @java.lang.Override

      public int getFieldMapSint32Int32127OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSint32Int32127Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
       */
      public Builder putFieldMapSint32Int32127(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Int32127Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, int32&gt; field_map_sint32_int32_127 = 127;</code>
       */
      public Builder putAllFieldMapSint32Int32127(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32Int32127Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32Int64128Count() {
        return instance.getFieldMapSint32Int64128Map().size();
      }
      /**
       * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32Int64128(
          int key) {
        
        return instance.getFieldMapSint32Int64128Map().containsKey(key);
      }

      public Builder clearFieldMapSint32Int64128() {
        copyOnWrite();
        instance.getMutableFieldMapSint32Int64128Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
       */

      public Builder removeFieldMapSint32Int64128(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Int64128Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32Int64128Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Int64128() {
        return getFieldMapSint32Int64128Map();
      }
      /**
       * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Int64128Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32Int64128Map());
      }
      /**
       * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
       */
      @java.lang.Override

      public long getFieldMapSint32Int64128OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSint32Int64128Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
       */
      @java.lang.Override

      public long getFieldMapSint32Int64128OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSint32Int64128Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
       */
      public Builder putFieldMapSint32Int64128(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Int64128Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, int64&gt; field_map_sint32_int64_128 = 128;</code>
       */
      public Builder putAllFieldMapSint32Int64128(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32Int64128Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32Message129Count() {
        return instance.getFieldMapSint32Message129Map().size();
      }
      /**
       * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32Message129(
          int key) {
        
        return instance.getFieldMapSint32Message129Map().containsKey(key);
      }

      public Builder clearFieldMapSint32Message129() {
        copyOnWrite();
        instance.getMutableFieldMapSint32Message129Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
       */

      public Builder removeFieldMapSint32Message129(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Message129Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32Message129Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapSint32Message129() {
        return getFieldMapSint32Message129Map();
      }
      /**
       * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapSint32Message129Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32Message129Map());
      }
      /**
       * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSint32Message129OrDefault(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapSint32Message129Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSint32Message129OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapSint32Message129Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
       */
      public Builder putFieldMapSint32Message129(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapSint32Message129Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, .protobuf.experimental.Proto2Message&gt; field_map_sint32_message_129 = 129;</code>
       */
      public Builder putAllFieldMapSint32Message129(
          java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32Message129Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32Sfixed32130Count() {
        return instance.getFieldMapSint32Sfixed32130Map().size();
      }
      /**
       * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32Sfixed32130(
          int key) {
        
        return instance.getFieldMapSint32Sfixed32130Map().containsKey(key);
      }

      public Builder clearFieldMapSint32Sfixed32130() {
        copyOnWrite();
        instance.getMutableFieldMapSint32Sfixed32130Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
       */

      public Builder removeFieldMapSint32Sfixed32130(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Sfixed32130Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32Sfixed32130Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Sfixed32130() {
        return getFieldMapSint32Sfixed32130Map();
      }
      /**
       * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Sfixed32130Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32Sfixed32130Map());
      }
      /**
       * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
       */
      @java.lang.Override

      public int getFieldMapSint32Sfixed32130OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSint32Sfixed32130Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
       */
      @java.lang.Override

      public int getFieldMapSint32Sfixed32130OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSint32Sfixed32130Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
       */
      public Builder putFieldMapSint32Sfixed32130(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Sfixed32130Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, sfixed32&gt; field_map_sint32_sfixed32_130 = 130;</code>
       */
      public Builder putAllFieldMapSint32Sfixed32130(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32Sfixed32130Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32Sfixed64131Count() {
        return instance.getFieldMapSint32Sfixed64131Map().size();
      }
      /**
       * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32Sfixed64131(
          int key) {
        
        return instance.getFieldMapSint32Sfixed64131Map().containsKey(key);
      }

      public Builder clearFieldMapSint32Sfixed64131() {
        copyOnWrite();
        instance.getMutableFieldMapSint32Sfixed64131Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
       */

      public Builder removeFieldMapSint32Sfixed64131(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Sfixed64131Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32Sfixed64131Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Sfixed64131() {
        return getFieldMapSint32Sfixed64131Map();
      }
      /**
       * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Sfixed64131Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32Sfixed64131Map());
      }
      /**
       * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
       */
      @java.lang.Override

      public long getFieldMapSint32Sfixed64131OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSint32Sfixed64131Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
       */
      @java.lang.Override

      public long getFieldMapSint32Sfixed64131OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSint32Sfixed64131Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
       */
      public Builder putFieldMapSint32Sfixed64131(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Sfixed64131Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, sfixed64&gt; field_map_sint32_sfixed64_131 = 131;</code>
       */
      public Builder putAllFieldMapSint32Sfixed64131(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32Sfixed64131Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32Sint32132Count() {
        return instance.getFieldMapSint32Sint32132Map().size();
      }
      /**
       * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32Sint32132(
          int key) {
        
        return instance.getFieldMapSint32Sint32132Map().containsKey(key);
      }

      public Builder clearFieldMapSint32Sint32132() {
        copyOnWrite();
        instance.getMutableFieldMapSint32Sint32132Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
       */

      public Builder removeFieldMapSint32Sint32132(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Sint32132Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32Sint32132Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Sint32132() {
        return getFieldMapSint32Sint32132Map();
      }
      /**
       * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Sint32132Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32Sint32132Map());
      }
      /**
       * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
       */
      @java.lang.Override

      public int getFieldMapSint32Sint32132OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSint32Sint32132Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
       */
      @java.lang.Override

      public int getFieldMapSint32Sint32132OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSint32Sint32132Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
       */
      public Builder putFieldMapSint32Sint32132(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Sint32132Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, sint32&gt; field_map_sint32_sint32_132 = 132;</code>
       */
      public Builder putAllFieldMapSint32Sint32132(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32Sint32132Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32Sint64133Count() {
        return instance.getFieldMapSint32Sint64133Map().size();
      }
      /**
       * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32Sint64133(
          int key) {
        
        return instance.getFieldMapSint32Sint64133Map().containsKey(key);
      }

      public Builder clearFieldMapSint32Sint64133() {
        copyOnWrite();
        instance.getMutableFieldMapSint32Sint64133Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
       */

      public Builder removeFieldMapSint32Sint64133(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Sint64133Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32Sint64133Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Sint64133() {
        return getFieldMapSint32Sint64133Map();
      }
      /**
       * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Sint64133Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32Sint64133Map());
      }
      /**
       * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
       */
      @java.lang.Override

      public long getFieldMapSint32Sint64133OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSint32Sint64133Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
       */
      @java.lang.Override

      public long getFieldMapSint32Sint64133OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSint32Sint64133Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
       */
      public Builder putFieldMapSint32Sint64133(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Sint64133Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, sint64&gt; field_map_sint32_sint64_133 = 133;</code>
       */
      public Builder putAllFieldMapSint32Sint64133(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32Sint64133Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32String134Count() {
        return instance.getFieldMapSint32String134Map().size();
      }
      /**
       * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32String134(
          int key) {
        
        return instance.getFieldMapSint32String134Map().containsKey(key);
      }

      public Builder clearFieldMapSint32String134() {
        copyOnWrite();
        instance.getMutableFieldMapSint32String134Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
       */

      public Builder removeFieldMapSint32String134(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32String134Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32String134Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapSint32String134() {
        return getFieldMapSint32String134Map();
      }
      /**
       * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapSint32String134Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32String134Map());
      }
      /**
       * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapSint32String134OrDefault(
          int key,
          java.lang.String defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.String> map =
            instance.getFieldMapSint32String134Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapSint32String134OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.String> map =
            instance.getFieldMapSint32String134Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
       */
      public Builder putFieldMapSint32String134(
          int key,
          java.lang.String value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapSint32String134Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, string&gt; field_map_sint32_string_134 = 134;</code>
       */
      public Builder putAllFieldMapSint32String134(
          java.util.Map<java.lang.Integer, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32String134Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32Uint32135Count() {
        return instance.getFieldMapSint32Uint32135Map().size();
      }
      /**
       * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32Uint32135(
          int key) {
        
        return instance.getFieldMapSint32Uint32135Map().containsKey(key);
      }

      public Builder clearFieldMapSint32Uint32135() {
        copyOnWrite();
        instance.getMutableFieldMapSint32Uint32135Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
       */

      public Builder removeFieldMapSint32Uint32135(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Uint32135Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32Uint32135Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Uint32135() {
        return getFieldMapSint32Uint32135Map();
      }
      /**
       * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapSint32Uint32135Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32Uint32135Map());
      }
      /**
       * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
       */
      @java.lang.Override

      public int getFieldMapSint32Uint32135OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSint32Uint32135Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
       */
      @java.lang.Override

      public int getFieldMapSint32Uint32135OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapSint32Uint32135Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
       */
      public Builder putFieldMapSint32Uint32135(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Uint32135Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, uint32&gt; field_map_sint32_uint32_135 = 135;</code>
       */
      public Builder putAllFieldMapSint32Uint32135(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32Uint32135Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint32Uint64136Count() {
        return instance.getFieldMapSint32Uint64136Map().size();
      }
      /**
       * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint32Uint64136(
          int key) {
        
        return instance.getFieldMapSint32Uint64136Map().containsKey(key);
      }

      public Builder clearFieldMapSint32Uint64136() {
        copyOnWrite();
        instance.getMutableFieldMapSint32Uint64136Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
       */

      public Builder removeFieldMapSint32Uint64136(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Uint64136Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint32Uint64136Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Uint64136() {
        return getFieldMapSint32Uint64136Map();
      }
      /**
       * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapSint32Uint64136Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint32Uint64136Map());
      }
      /**
       * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
       */
      @java.lang.Override

      public long getFieldMapSint32Uint64136OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSint32Uint64136Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
       */
      @java.lang.Override

      public long getFieldMapSint32Uint64136OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapSint32Uint64136Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
       */
      public Builder putFieldMapSint32Uint64136(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint32Uint64136Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint32, uint64&gt; field_map_sint32_uint64_136 = 136;</code>
       */
      public Builder putAllFieldMapSint32Uint64136(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint32Uint64136Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64Bool137Count() {
        return instance.getFieldMapSint64Bool137Map().size();
      }
      /**
       * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64Bool137(
          long key) {
        
        return instance.getFieldMapSint64Bool137Map().containsKey(key);
      }

      public Builder clearFieldMapSint64Bool137() {
        copyOnWrite();
        instance.getMutableFieldMapSint64Bool137Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
       */

      public Builder removeFieldMapSint64Bool137(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Bool137Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64Bool137Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapSint64Bool137() {
        return getFieldMapSint64Bool137Map();
      }
      /**
       * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapSint64Bool137Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64Bool137Map());
      }
      /**
       * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
       */
      @java.lang.Override

      public boolean getFieldMapSint64Bool137OrDefault(
          long key,
          boolean defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Boolean> map =
            instance.getFieldMapSint64Bool137Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
       */
      @java.lang.Override

      public boolean getFieldMapSint64Bool137OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Boolean> map =
            instance.getFieldMapSint64Bool137Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
       */
      public Builder putFieldMapSint64Bool137(
          long key,
          boolean value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Bool137Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, bool&gt; field_map_sint64_bool_137 = 137;</code>
       */
      public Builder putAllFieldMapSint64Bool137(
          java.util.Map<java.lang.Long, java.lang.Boolean> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64Bool137Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64Bytes138Count() {
        return instance.getFieldMapSint64Bytes138Map().size();
      }
      /**
       * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64Bytes138(
          long key) {
        
        return instance.getFieldMapSint64Bytes138Map().containsKey(key);
      }

      public Builder clearFieldMapSint64Bytes138() {
        copyOnWrite();
        instance.getMutableFieldMapSint64Bytes138Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
       */

      public Builder removeFieldMapSint64Bytes138(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Bytes138Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64Bytes138Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapSint64Bytes138() {
        return getFieldMapSint64Bytes138Map();
      }
      /**
       * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapSint64Bytes138Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64Bytes138Map());
      }
      /**
       * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapSint64Bytes138OrDefault(
          long key,
          com.google.protobuf.ByteString defaultValue) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
            instance.getFieldMapSint64Bytes138Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapSint64Bytes138OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
            instance.getFieldMapSint64Bytes138Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
       */
      public Builder putFieldMapSint64Bytes138(
          long key,
          com.google.protobuf.ByteString value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapSint64Bytes138Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, bytes&gt; field_map_sint64_bytes_138 = 138;</code>
       */
      public Builder putAllFieldMapSint64Bytes138(
          java.util.Map<java.lang.Long, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64Bytes138Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64Double139Count() {
        return instance.getFieldMapSint64Double139Map().size();
      }
      /**
       * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64Double139(
          long key) {
        
        return instance.getFieldMapSint64Double139Map().containsKey(key);
      }

      public Builder clearFieldMapSint64Double139() {
        copyOnWrite();
        instance.getMutableFieldMapSint64Double139Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
       */

      public Builder removeFieldMapSint64Double139(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Double139Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64Double139Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapSint64Double139() {
        return getFieldMapSint64Double139Map();
      }
      /**
       * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapSint64Double139Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64Double139Map());
      }
      /**
       * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
       */
      @java.lang.Override

      public double getFieldMapSint64Double139OrDefault(
          long key,
          double defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Double> map =
            instance.getFieldMapSint64Double139Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
       */
      @java.lang.Override

      public double getFieldMapSint64Double139OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Double> map =
            instance.getFieldMapSint64Double139Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
       */
      public Builder putFieldMapSint64Double139(
          long key,
          double value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Double139Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, double&gt; field_map_sint64_double_139 = 139;</code>
       */
      public Builder putAllFieldMapSint64Double139(
          java.util.Map<java.lang.Long, java.lang.Double> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64Double139Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64Enum140Count() {
        return instance.getFieldMapSint64Enum140Map().size();
      }
      /**
       * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64Enum140(
          long key) {
        
        return instance.getFieldMapSint64Enum140Map().containsKey(key);
      }

      public Builder clearFieldMapSint64Enum140() {
        copyOnWrite();
        instance.getMutableFieldMapSint64Enum140Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
       */

      public Builder removeFieldMapSint64Enum140(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Enum140Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64Enum140Map()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapSint64Enum140() {
        return getFieldMapSint64Enum140Map();
      }
      /**
       * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapSint64Enum140Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64Enum140Map());
      }
      /**
       * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSint64Enum140OrDefault(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapSint64Enum140Map();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapSint64Enum140OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapSint64Enum140Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
       */
      public Builder putFieldMapSint64Enum140(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapSint64Enum140Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_sint64_enum_140 = 140;</code>
       */
      public Builder putAllFieldMapSint64Enum140(
          java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64Enum140Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64Fixed32141Count() {
        return instance.getFieldMapSint64Fixed32141Map().size();
      }
      /**
       * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64Fixed32141(
          long key) {
        
        return instance.getFieldMapSint64Fixed32141Map().containsKey(key);
      }

      public Builder clearFieldMapSint64Fixed32141() {
        copyOnWrite();
        instance.getMutableFieldMapSint64Fixed32141Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
       */

      public Builder removeFieldMapSint64Fixed32141(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Fixed32141Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64Fixed32141Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Fixed32141() {
        return getFieldMapSint64Fixed32141Map();
      }
      /**
       * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Fixed32141Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64Fixed32141Map());
      }
      /**
       * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
       */
      @java.lang.Override

      public int getFieldMapSint64Fixed32141OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSint64Fixed32141Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
       */
      @java.lang.Override

      public int getFieldMapSint64Fixed32141OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSint64Fixed32141Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
       */
      public Builder putFieldMapSint64Fixed32141(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Fixed32141Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, fixed32&gt; field_map_sint64_fixed32_141 = 141;</code>
       */
      public Builder putAllFieldMapSint64Fixed32141(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64Fixed32141Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64Fixed64142Count() {
        return instance.getFieldMapSint64Fixed64142Map().size();
      }
      /**
       * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64Fixed64142(
          long key) {
        
        return instance.getFieldMapSint64Fixed64142Map().containsKey(key);
      }

      public Builder clearFieldMapSint64Fixed64142() {
        copyOnWrite();
        instance.getMutableFieldMapSint64Fixed64142Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
       */

      public Builder removeFieldMapSint64Fixed64142(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Fixed64142Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64Fixed64142Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Fixed64142() {
        return getFieldMapSint64Fixed64142Map();
      }
      /**
       * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Fixed64142Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64Fixed64142Map());
      }
      /**
       * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
       */
      @java.lang.Override

      public long getFieldMapSint64Fixed64142OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSint64Fixed64142Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
       */
      @java.lang.Override

      public long getFieldMapSint64Fixed64142OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSint64Fixed64142Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
       */
      public Builder putFieldMapSint64Fixed64142(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Fixed64142Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, fixed64&gt; field_map_sint64_fixed64_142 = 142;</code>
       */
      public Builder putAllFieldMapSint64Fixed64142(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64Fixed64142Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64Float143Count() {
        return instance.getFieldMapSint64Float143Map().size();
      }
      /**
       * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64Float143(
          long key) {
        
        return instance.getFieldMapSint64Float143Map().containsKey(key);
      }

      public Builder clearFieldMapSint64Float143() {
        copyOnWrite();
        instance.getMutableFieldMapSint64Float143Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
       */

      public Builder removeFieldMapSint64Float143(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Float143Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64Float143Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapSint64Float143() {
        return getFieldMapSint64Float143Map();
      }
      /**
       * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapSint64Float143Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64Float143Map());
      }
      /**
       * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
       */
      @java.lang.Override

      public float getFieldMapSint64Float143OrDefault(
          long key,
          float defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Float> map =
            instance.getFieldMapSint64Float143Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
       */
      @java.lang.Override

      public float getFieldMapSint64Float143OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Float> map =
            instance.getFieldMapSint64Float143Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
       */
      public Builder putFieldMapSint64Float143(
          long key,
          float value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Float143Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, float&gt; field_map_sint64_float_143 = 143;</code>
       */
      public Builder putAllFieldMapSint64Float143(
          java.util.Map<java.lang.Long, java.lang.Float> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64Float143Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64Int32144Count() {
        return instance.getFieldMapSint64Int32144Map().size();
      }
      /**
       * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64Int32144(
          long key) {
        
        return instance.getFieldMapSint64Int32144Map().containsKey(key);
      }

      public Builder clearFieldMapSint64Int32144() {
        copyOnWrite();
        instance.getMutableFieldMapSint64Int32144Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
       */

      public Builder removeFieldMapSint64Int32144(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Int32144Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64Int32144Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Int32144() {
        return getFieldMapSint64Int32144Map();
      }
      /**
       * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Int32144Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64Int32144Map());
      }
      /**
       * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
       */
      @java.lang.Override

      public int getFieldMapSint64Int32144OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSint64Int32144Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
       */
      @java.lang.Override

      public int getFieldMapSint64Int32144OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSint64Int32144Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
       */
      public Builder putFieldMapSint64Int32144(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Int32144Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, int32&gt; field_map_sint64_int32_144 = 144;</code>
       */
      public Builder putAllFieldMapSint64Int32144(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64Int32144Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64Int64145Count() {
        return instance.getFieldMapSint64Int64145Map().size();
      }
      /**
       * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64Int64145(
          long key) {
        
        return instance.getFieldMapSint64Int64145Map().containsKey(key);
      }

      public Builder clearFieldMapSint64Int64145() {
        copyOnWrite();
        instance.getMutableFieldMapSint64Int64145Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
       */

      public Builder removeFieldMapSint64Int64145(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Int64145Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64Int64145Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Int64145() {
        return getFieldMapSint64Int64145Map();
      }
      /**
       * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Int64145Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64Int64145Map());
      }
      /**
       * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
       */
      @java.lang.Override

      public long getFieldMapSint64Int64145OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSint64Int64145Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
       */
      @java.lang.Override

      public long getFieldMapSint64Int64145OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSint64Int64145Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
       */
      public Builder putFieldMapSint64Int64145(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Int64145Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, int64&gt; field_map_sint64_int64_145 = 145;</code>
       */
      public Builder putAllFieldMapSint64Int64145(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64Int64145Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64Message146Count() {
        return instance.getFieldMapSint64Message146Map().size();
      }
      /**
       * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64Message146(
          long key) {
        
        return instance.getFieldMapSint64Message146Map().containsKey(key);
      }

      public Builder clearFieldMapSint64Message146() {
        copyOnWrite();
        instance.getMutableFieldMapSint64Message146Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
       */

      public Builder removeFieldMapSint64Message146(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Message146Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64Message146Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapSint64Message146() {
        return getFieldMapSint64Message146Map();
      }
      /**
       * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapSint64Message146Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64Message146Map());
      }
      /**
       * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSint64Message146OrDefault(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapSint64Message146Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapSint64Message146OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapSint64Message146Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
       */
      public Builder putFieldMapSint64Message146(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapSint64Message146Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, .protobuf.experimental.Proto2Message&gt; field_map_sint64_message_146 = 146;</code>
       */
      public Builder putAllFieldMapSint64Message146(
          java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64Message146Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64Sfixed32147Count() {
        return instance.getFieldMapSint64Sfixed32147Map().size();
      }
      /**
       * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64Sfixed32147(
          long key) {
        
        return instance.getFieldMapSint64Sfixed32147Map().containsKey(key);
      }

      public Builder clearFieldMapSint64Sfixed32147() {
        copyOnWrite();
        instance.getMutableFieldMapSint64Sfixed32147Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
       */

      public Builder removeFieldMapSint64Sfixed32147(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Sfixed32147Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64Sfixed32147Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Sfixed32147() {
        return getFieldMapSint64Sfixed32147Map();
      }
      /**
       * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Sfixed32147Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64Sfixed32147Map());
      }
      /**
       * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
       */
      @java.lang.Override

      public int getFieldMapSint64Sfixed32147OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSint64Sfixed32147Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
       */
      @java.lang.Override

      public int getFieldMapSint64Sfixed32147OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSint64Sfixed32147Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
       */
      public Builder putFieldMapSint64Sfixed32147(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Sfixed32147Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, sfixed32&gt; field_map_sint64_sfixed32_147 = 147;</code>
       */
      public Builder putAllFieldMapSint64Sfixed32147(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64Sfixed32147Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64Sfixed64148Count() {
        return instance.getFieldMapSint64Sfixed64148Map().size();
      }
      /**
       * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64Sfixed64148(
          long key) {
        
        return instance.getFieldMapSint64Sfixed64148Map().containsKey(key);
      }

      public Builder clearFieldMapSint64Sfixed64148() {
        copyOnWrite();
        instance.getMutableFieldMapSint64Sfixed64148Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
       */

      public Builder removeFieldMapSint64Sfixed64148(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Sfixed64148Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64Sfixed64148Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Sfixed64148() {
        return getFieldMapSint64Sfixed64148Map();
      }
      /**
       * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Sfixed64148Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64Sfixed64148Map());
      }
      /**
       * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
       */
      @java.lang.Override

      public long getFieldMapSint64Sfixed64148OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSint64Sfixed64148Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
       */
      @java.lang.Override

      public long getFieldMapSint64Sfixed64148OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSint64Sfixed64148Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
       */
      public Builder putFieldMapSint64Sfixed64148(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Sfixed64148Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, sfixed64&gt; field_map_sint64_sfixed64_148 = 148;</code>
       */
      public Builder putAllFieldMapSint64Sfixed64148(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64Sfixed64148Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64Sint32149Count() {
        return instance.getFieldMapSint64Sint32149Map().size();
      }
      /**
       * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64Sint32149(
          long key) {
        
        return instance.getFieldMapSint64Sint32149Map().containsKey(key);
      }

      public Builder clearFieldMapSint64Sint32149() {
        copyOnWrite();
        instance.getMutableFieldMapSint64Sint32149Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
       */

      public Builder removeFieldMapSint64Sint32149(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Sint32149Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64Sint32149Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Sint32149() {
        return getFieldMapSint64Sint32149Map();
      }
      /**
       * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Sint32149Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64Sint32149Map());
      }
      /**
       * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
       */
      @java.lang.Override

      public int getFieldMapSint64Sint32149OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSint64Sint32149Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
       */
      @java.lang.Override

      public int getFieldMapSint64Sint32149OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSint64Sint32149Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
       */
      public Builder putFieldMapSint64Sint32149(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Sint32149Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, sint32&gt; field_map_sint64_sint32_149 = 149;</code>
       */
      public Builder putAllFieldMapSint64Sint32149(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64Sint32149Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64Sint64150Count() {
        return instance.getFieldMapSint64Sint64150Map().size();
      }
      /**
       * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64Sint64150(
          long key) {
        
        return instance.getFieldMapSint64Sint64150Map().containsKey(key);
      }

      public Builder clearFieldMapSint64Sint64150() {
        copyOnWrite();
        instance.getMutableFieldMapSint64Sint64150Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
       */

      public Builder removeFieldMapSint64Sint64150(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Sint64150Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64Sint64150Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Sint64150() {
        return getFieldMapSint64Sint64150Map();
      }
      /**
       * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Sint64150Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64Sint64150Map());
      }
      /**
       * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
       */
      @java.lang.Override

      public long getFieldMapSint64Sint64150OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSint64Sint64150Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
       */
      @java.lang.Override

      public long getFieldMapSint64Sint64150OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSint64Sint64150Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
       */
      public Builder putFieldMapSint64Sint64150(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Sint64150Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, sint64&gt; field_map_sint64_sint64_150 = 150;</code>
       */
      public Builder putAllFieldMapSint64Sint64150(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64Sint64150Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64String151Count() {
        return instance.getFieldMapSint64String151Map().size();
      }
      /**
       * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64String151(
          long key) {
        
        return instance.getFieldMapSint64String151Map().containsKey(key);
      }

      public Builder clearFieldMapSint64String151() {
        copyOnWrite();
        instance.getMutableFieldMapSint64String151Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
       */

      public Builder removeFieldMapSint64String151(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64String151Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64String151Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.String> getFieldMapSint64String151() {
        return getFieldMapSint64String151Map();
      }
      /**
       * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.String> getFieldMapSint64String151Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64String151Map());
      }
      /**
       * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapSint64String151OrDefault(
          long key,
          java.lang.String defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.String> map =
            instance.getFieldMapSint64String151Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapSint64String151OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.String> map =
            instance.getFieldMapSint64String151Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
       */
      public Builder putFieldMapSint64String151(
          long key,
          java.lang.String value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapSint64String151Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, string&gt; field_map_sint64_string_151 = 151;</code>
       */
      public Builder putAllFieldMapSint64String151(
          java.util.Map<java.lang.Long, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64String151Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64Uint32152Count() {
        return instance.getFieldMapSint64Uint32152Map().size();
      }
      /**
       * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64Uint32152(
          long key) {
        
        return instance.getFieldMapSint64Uint32152Map().containsKey(key);
      }

      public Builder clearFieldMapSint64Uint32152() {
        copyOnWrite();
        instance.getMutableFieldMapSint64Uint32152Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
       */

      public Builder removeFieldMapSint64Uint32152(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Uint32152Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64Uint32152Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Uint32152() {
        return getFieldMapSint64Uint32152Map();
      }
      /**
       * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapSint64Uint32152Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64Uint32152Map());
      }
      /**
       * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
       */
      @java.lang.Override

      public int getFieldMapSint64Uint32152OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSint64Uint32152Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
       */
      @java.lang.Override

      public int getFieldMapSint64Uint32152OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapSint64Uint32152Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
       */
      public Builder putFieldMapSint64Uint32152(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Uint32152Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, uint32&gt; field_map_sint64_uint32_152 = 152;</code>
       */
      public Builder putAllFieldMapSint64Uint32152(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64Uint32152Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapSint64Uint64153Count() {
        return instance.getFieldMapSint64Uint64153Map().size();
      }
      /**
       * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapSint64Uint64153(
          long key) {
        
        return instance.getFieldMapSint64Uint64153Map().containsKey(key);
      }

      public Builder clearFieldMapSint64Uint64153() {
        copyOnWrite();
        instance.getMutableFieldMapSint64Uint64153Map().clear();
        return this;
      }
      /**
       * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
       */

      public Builder removeFieldMapSint64Uint64153(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Uint64153Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapSint64Uint64153Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Uint64153() {
        return getFieldMapSint64Uint64153Map();
      }
      /**
       * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapSint64Uint64153Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapSint64Uint64153Map());
      }
      /**
       * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
       */
      @java.lang.Override

      public long getFieldMapSint64Uint64153OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSint64Uint64153Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
       */
      @java.lang.Override

      public long getFieldMapSint64Uint64153OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapSint64Uint64153Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
       */
      public Builder putFieldMapSint64Uint64153(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapSint64Uint64153Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;sint64, uint64&gt; field_map_sint64_uint64_153 = 153;</code>
       */
      public Builder putAllFieldMapSint64Uint64153(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapSint64Uint64153Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringBool154Count() {
        return instance.getFieldMapStringBool154Map().size();
      }
      /**
       * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringBool154(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringBool154Map().containsKey(key);
      }

      public Builder clearFieldMapStringBool154() {
        copyOnWrite();
        instance.getMutableFieldMapStringBool154Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
       */

      public Builder removeFieldMapStringBool154(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringBool154Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringBool154Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Boolean> getFieldMapStringBool154() {
        return getFieldMapStringBool154Map();
      }
      /**
       * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.Boolean> getFieldMapStringBool154Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringBool154Map());
      }
      /**
       * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
       */
      @java.lang.Override

      public boolean getFieldMapStringBool154OrDefault(
          java.lang.String key,
          boolean defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Boolean> map =
            instance.getFieldMapStringBool154Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
       */
      @java.lang.Override

      public boolean getFieldMapStringBool154OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Boolean> map =
            instance.getFieldMapStringBool154Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
       */
      public Builder putFieldMapStringBool154(
          java.lang.String key,
          boolean value) {
        key.getClass();
        
        copyOnWrite();
        instance.getMutableFieldMapStringBool154Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, bool&gt; field_map_string_bool_154 = 154;</code>
       */
      public Builder putAllFieldMapStringBool154(
          java.util.Map<java.lang.String, java.lang.Boolean> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringBool154Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringBytes155Count() {
        return instance.getFieldMapStringBytes155Map().size();
      }
      /**
       * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringBytes155(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringBytes155Map().containsKey(key);
      }

      public Builder clearFieldMapStringBytes155() {
        copyOnWrite();
        instance.getMutableFieldMapStringBytes155Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
       */

      public Builder removeFieldMapStringBytes155(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringBytes155Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringBytes155Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getFieldMapStringBytes155() {
        return getFieldMapStringBytes155Map();
      }
      /**
       * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getFieldMapStringBytes155Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringBytes155Map());
      }
      /**
       * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapStringBytes155OrDefault(
          java.lang.String key,
          com.google.protobuf.ByteString defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            instance.getFieldMapStringBytes155Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapStringBytes155OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            instance.getFieldMapStringBytes155Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
       */
      public Builder putFieldMapStringBytes155(
          java.lang.String key,
          com.google.protobuf.ByteString value) {
        key.getClass();
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringBytes155Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, bytes&gt; field_map_string_bytes_155 = 155;</code>
       */
      public Builder putAllFieldMapStringBytes155(
          java.util.Map<java.lang.String, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringBytes155Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringDouble156Count() {
        return instance.getFieldMapStringDouble156Map().size();
      }
      /**
       * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringDouble156(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringDouble156Map().containsKey(key);
      }

      public Builder clearFieldMapStringDouble156() {
        copyOnWrite();
        instance.getMutableFieldMapStringDouble156Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
       */

      public Builder removeFieldMapStringDouble156(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringDouble156Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringDouble156Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Double> getFieldMapStringDouble156() {
        return getFieldMapStringDouble156Map();
      }
      /**
       * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.Double> getFieldMapStringDouble156Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringDouble156Map());
      }
      /**
       * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
       */
      @java.lang.Override

      public double getFieldMapStringDouble156OrDefault(
          java.lang.String key,
          double defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Double> map =
            instance.getFieldMapStringDouble156Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
       */
      @java.lang.Override

      public double getFieldMapStringDouble156OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Double> map =
            instance.getFieldMapStringDouble156Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
       */
      public Builder putFieldMapStringDouble156(
          java.lang.String key,
          double value) {
        key.getClass();
        
        copyOnWrite();
        instance.getMutableFieldMapStringDouble156Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, double&gt; field_map_string_double_156 = 156;</code>
       */
      public Builder putAllFieldMapStringDouble156(
          java.util.Map<java.lang.String, java.lang.Double> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringDouble156Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringEnum157Count() {
        return instance.getFieldMapStringEnum157Map().size();
      }
      /**
       * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringEnum157(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringEnum157Map().containsKey(key);
      }

      public Builder clearFieldMapStringEnum157() {
        copyOnWrite();
        instance.getMutableFieldMapStringEnum157Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
       */

      public Builder removeFieldMapStringEnum157(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringEnum157Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringEnum157Map()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapStringEnum157() {
        return getFieldMapStringEnum157Map();
      }
      /**
       * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapStringEnum157Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringEnum157Map());
      }
      /**
       * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapStringEnum157OrDefault(
          java.lang.String key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapStringEnum157Map();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapStringEnum157OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapStringEnum157Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
       */
      public Builder putFieldMapStringEnum157(
          java.lang.String key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        key.getClass();
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringEnum157Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_string_enum_157 = 157;</code>
       */
      public Builder putAllFieldMapStringEnum157(
          java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringEnum157Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringFixed32158Count() {
        return instance.getFieldMapStringFixed32158Map().size();
      }
      /**
       * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringFixed32158(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringFixed32158Map().containsKey(key);
      }

      public Builder clearFieldMapStringFixed32158() {
        copyOnWrite();
        instance.getMutableFieldMapStringFixed32158Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
       */

      public Builder removeFieldMapStringFixed32158(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringFixed32158Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringFixed32158Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringFixed32158() {
        return getFieldMapStringFixed32158Map();
      }
      /**
       * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringFixed32158Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringFixed32158Map());
      }
      /**
       * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
       */
      @java.lang.Override

      public int getFieldMapStringFixed32158OrDefault(
          java.lang.String key,
          int defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Integer> map =
            instance.getFieldMapStringFixed32158Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
       */
      @java.lang.Override

      public int getFieldMapStringFixed32158OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Integer> map =
            instance.getFieldMapStringFixed32158Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
       */
      public Builder putFieldMapStringFixed32158(
          java.lang.String key,
          int value) {
        key.getClass();
        
        copyOnWrite();
        instance.getMutableFieldMapStringFixed32158Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, fixed32&gt; field_map_string_fixed32_158 = 158;</code>
       */
      public Builder putAllFieldMapStringFixed32158(
          java.util.Map<java.lang.String, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringFixed32158Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringFixed64159Count() {
        return instance.getFieldMapStringFixed64159Map().size();
      }
      /**
       * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringFixed64159(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringFixed64159Map().containsKey(key);
      }

      public Builder clearFieldMapStringFixed64159() {
        copyOnWrite();
        instance.getMutableFieldMapStringFixed64159Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
       */

      public Builder removeFieldMapStringFixed64159(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringFixed64159Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringFixed64159Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringFixed64159() {
        return getFieldMapStringFixed64159Map();
      }
      /**
       * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringFixed64159Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringFixed64159Map());
      }
      /**
       * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
       */
      @java.lang.Override

      public long getFieldMapStringFixed64159OrDefault(
          java.lang.String key,
          long defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Long> map =
            instance.getFieldMapStringFixed64159Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
       */
      @java.lang.Override

      public long getFieldMapStringFixed64159OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Long> map =
            instance.getFieldMapStringFixed64159Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
       */
      public Builder putFieldMapStringFixed64159(
          java.lang.String key,
          long value) {
        key.getClass();
        
        copyOnWrite();
        instance.getMutableFieldMapStringFixed64159Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, fixed64&gt; field_map_string_fixed64_159 = 159;</code>
       */
      public Builder putAllFieldMapStringFixed64159(
          java.util.Map<java.lang.String, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringFixed64159Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringFloat160Count() {
        return instance.getFieldMapStringFloat160Map().size();
      }
      /**
       * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringFloat160(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringFloat160Map().containsKey(key);
      }

      public Builder clearFieldMapStringFloat160() {
        copyOnWrite();
        instance.getMutableFieldMapStringFloat160Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
       */

      public Builder removeFieldMapStringFloat160(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringFloat160Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringFloat160Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Float> getFieldMapStringFloat160() {
        return getFieldMapStringFloat160Map();
      }
      /**
       * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.Float> getFieldMapStringFloat160Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringFloat160Map());
      }
      /**
       * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
       */
      @java.lang.Override

      public float getFieldMapStringFloat160OrDefault(
          java.lang.String key,
          float defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Float> map =
            instance.getFieldMapStringFloat160Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
       */
      @java.lang.Override

      public float getFieldMapStringFloat160OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Float> map =
            instance.getFieldMapStringFloat160Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
       */
      public Builder putFieldMapStringFloat160(
          java.lang.String key,
          float value) {
        key.getClass();
        
        copyOnWrite();
        instance.getMutableFieldMapStringFloat160Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, float&gt; field_map_string_float_160 = 160;</code>
       */
      public Builder putAllFieldMapStringFloat160(
          java.util.Map<java.lang.String, java.lang.Float> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringFloat160Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringInt32161Count() {
        return instance.getFieldMapStringInt32161Map().size();
      }
      /**
       * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringInt32161(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringInt32161Map().containsKey(key);
      }

      public Builder clearFieldMapStringInt32161() {
        copyOnWrite();
        instance.getMutableFieldMapStringInt32161Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
       */

      public Builder removeFieldMapStringInt32161(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringInt32161Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringInt32161Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringInt32161() {
        return getFieldMapStringInt32161Map();
      }
      /**
       * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringInt32161Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringInt32161Map());
      }
      /**
       * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
       */
      @java.lang.Override

      public int getFieldMapStringInt32161OrDefault(
          java.lang.String key,
          int defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Integer> map =
            instance.getFieldMapStringInt32161Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
       */
      @java.lang.Override

      public int getFieldMapStringInt32161OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Integer> map =
            instance.getFieldMapStringInt32161Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
       */
      public Builder putFieldMapStringInt32161(
          java.lang.String key,
          int value) {
        key.getClass();
        
        copyOnWrite();
        instance.getMutableFieldMapStringInt32161Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, int32&gt; field_map_string_int32_161 = 161;</code>
       */
      public Builder putAllFieldMapStringInt32161(
          java.util.Map<java.lang.String, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringInt32161Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringInt64162Count() {
        return instance.getFieldMapStringInt64162Map().size();
      }
      /**
       * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringInt64162(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringInt64162Map().containsKey(key);
      }

      public Builder clearFieldMapStringInt64162() {
        copyOnWrite();
        instance.getMutableFieldMapStringInt64162Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
       */

      public Builder removeFieldMapStringInt64162(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringInt64162Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringInt64162Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringInt64162() {
        return getFieldMapStringInt64162Map();
      }
      /**
       * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringInt64162Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringInt64162Map());
      }
      /**
       * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
       */
      @java.lang.Override

      public long getFieldMapStringInt64162OrDefault(
          java.lang.String key,
          long defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Long> map =
            instance.getFieldMapStringInt64162Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
       */
      @java.lang.Override

      public long getFieldMapStringInt64162OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Long> map =
            instance.getFieldMapStringInt64162Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
       */
      public Builder putFieldMapStringInt64162(
          java.lang.String key,
          long value) {
        key.getClass();
        
        copyOnWrite();
        instance.getMutableFieldMapStringInt64162Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, int64&gt; field_map_string_int64_162 = 162;</code>
       */
      public Builder putAllFieldMapStringInt64162(
          java.util.Map<java.lang.String, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringInt64162Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringMessage163Count() {
        return instance.getFieldMapStringMessage163Map().size();
      }
      /**
       * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringMessage163(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringMessage163Map().containsKey(key);
      }

      public Builder clearFieldMapStringMessage163() {
        copyOnWrite();
        instance.getMutableFieldMapStringMessage163Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
       */

      public Builder removeFieldMapStringMessage163(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringMessage163Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringMessage163Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapStringMessage163() {
        return getFieldMapStringMessage163Map();
      }
      /**
       * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapStringMessage163Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringMessage163Map());
      }
      /**
       * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapStringMessage163OrDefault(
          java.lang.String key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapStringMessage163Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapStringMessage163OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapStringMessage163Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
       */
      public Builder putFieldMapStringMessage163(
          java.lang.String key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        key.getClass();
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringMessage163Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, .protobuf.experimental.Proto2Message&gt; field_map_string_message_163 = 163;</code>
       */
      public Builder putAllFieldMapStringMessage163(
          java.util.Map<java.lang.String, com.google.protobuf.testing.Proto2Testing.Proto2Message> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringMessage163Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringSfixed32164Count() {
        return instance.getFieldMapStringSfixed32164Map().size();
      }
      /**
       * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringSfixed32164(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringSfixed32164Map().containsKey(key);
      }

      public Builder clearFieldMapStringSfixed32164() {
        copyOnWrite();
        instance.getMutableFieldMapStringSfixed32164Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
       */

      public Builder removeFieldMapStringSfixed32164(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringSfixed32164Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringSfixed32164Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringSfixed32164() {
        return getFieldMapStringSfixed32164Map();
      }
      /**
       * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringSfixed32164Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringSfixed32164Map());
      }
      /**
       * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
       */
      @java.lang.Override

      public int getFieldMapStringSfixed32164OrDefault(
          java.lang.String key,
          int defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Integer> map =
            instance.getFieldMapStringSfixed32164Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
       */
      @java.lang.Override

      public int getFieldMapStringSfixed32164OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Integer> map =
            instance.getFieldMapStringSfixed32164Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
       */
      public Builder putFieldMapStringSfixed32164(
          java.lang.String key,
          int value) {
        key.getClass();
        
        copyOnWrite();
        instance.getMutableFieldMapStringSfixed32164Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, sfixed32&gt; field_map_string_sfixed32_164 = 164;</code>
       */
      public Builder putAllFieldMapStringSfixed32164(
          java.util.Map<java.lang.String, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringSfixed32164Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringSfixed64165Count() {
        return instance.getFieldMapStringSfixed64165Map().size();
      }
      /**
       * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringSfixed64165(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringSfixed64165Map().containsKey(key);
      }

      public Builder clearFieldMapStringSfixed64165() {
        copyOnWrite();
        instance.getMutableFieldMapStringSfixed64165Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
       */

      public Builder removeFieldMapStringSfixed64165(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringSfixed64165Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringSfixed64165Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringSfixed64165() {
        return getFieldMapStringSfixed64165Map();
      }
      /**
       * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringSfixed64165Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringSfixed64165Map());
      }
      /**
       * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
       */
      @java.lang.Override

      public long getFieldMapStringSfixed64165OrDefault(
          java.lang.String key,
          long defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Long> map =
            instance.getFieldMapStringSfixed64165Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
       */
      @java.lang.Override

      public long getFieldMapStringSfixed64165OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Long> map =
            instance.getFieldMapStringSfixed64165Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
       */
      public Builder putFieldMapStringSfixed64165(
          java.lang.String key,
          long value) {
        key.getClass();
        
        copyOnWrite();
        instance.getMutableFieldMapStringSfixed64165Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, sfixed64&gt; field_map_string_sfixed64_165 = 165;</code>
       */
      public Builder putAllFieldMapStringSfixed64165(
          java.util.Map<java.lang.String, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringSfixed64165Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringSint32166Count() {
        return instance.getFieldMapStringSint32166Map().size();
      }
      /**
       * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringSint32166(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringSint32166Map().containsKey(key);
      }

      public Builder clearFieldMapStringSint32166() {
        copyOnWrite();
        instance.getMutableFieldMapStringSint32166Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
       */

      public Builder removeFieldMapStringSint32166(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringSint32166Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringSint32166Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringSint32166() {
        return getFieldMapStringSint32166Map();
      }
      /**
       * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringSint32166Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringSint32166Map());
      }
      /**
       * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
       */
      @java.lang.Override

      public int getFieldMapStringSint32166OrDefault(
          java.lang.String key,
          int defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Integer> map =
            instance.getFieldMapStringSint32166Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
       */
      @java.lang.Override

      public int getFieldMapStringSint32166OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Integer> map =
            instance.getFieldMapStringSint32166Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
       */
      public Builder putFieldMapStringSint32166(
          java.lang.String key,
          int value) {
        key.getClass();
        
        copyOnWrite();
        instance.getMutableFieldMapStringSint32166Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, sint32&gt; field_map_string_sint32_166 = 166;</code>
       */
      public Builder putAllFieldMapStringSint32166(
          java.util.Map<java.lang.String, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringSint32166Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringSint64167Count() {
        return instance.getFieldMapStringSint64167Map().size();
      }
      /**
       * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringSint64167(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringSint64167Map().containsKey(key);
      }

      public Builder clearFieldMapStringSint64167() {
        copyOnWrite();
        instance.getMutableFieldMapStringSint64167Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
       */

      public Builder removeFieldMapStringSint64167(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringSint64167Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringSint64167Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringSint64167() {
        return getFieldMapStringSint64167Map();
      }
      /**
       * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringSint64167Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringSint64167Map());
      }
      /**
       * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
       */
      @java.lang.Override

      public long getFieldMapStringSint64167OrDefault(
          java.lang.String key,
          long defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Long> map =
            instance.getFieldMapStringSint64167Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
       */
      @java.lang.Override

      public long getFieldMapStringSint64167OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Long> map =
            instance.getFieldMapStringSint64167Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
       */
      public Builder putFieldMapStringSint64167(
          java.lang.String key,
          long value) {
        key.getClass();
        
        copyOnWrite();
        instance.getMutableFieldMapStringSint64167Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, sint64&gt; field_map_string_sint64_167 = 167;</code>
       */
      public Builder putAllFieldMapStringSint64167(
          java.util.Map<java.lang.String, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringSint64167Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringString168Count() {
        return instance.getFieldMapStringString168Map().size();
      }
      /**
       * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringString168(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringString168Map().containsKey(key);
      }

      public Builder clearFieldMapStringString168() {
        copyOnWrite();
        instance.getMutableFieldMapStringString168Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
       */

      public Builder removeFieldMapStringString168(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringString168Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringString168Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getFieldMapStringString168() {
        return getFieldMapStringString168Map();
      }
      /**
       * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.String> getFieldMapStringString168Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringString168Map());
      }
      /**
       * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapStringString168OrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.String> map =
            instance.getFieldMapStringString168Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapStringString168OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.String> map =
            instance.getFieldMapStringString168Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
       */
      public Builder putFieldMapStringString168(
          java.lang.String key,
          java.lang.String value) {
        key.getClass();
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringString168Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; field_map_string_string_168 = 168;</code>
       */
      public Builder putAllFieldMapStringString168(
          java.util.Map<java.lang.String, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringString168Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringUint32169Count() {
        return instance.getFieldMapStringUint32169Map().size();
      }
      /**
       * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringUint32169(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringUint32169Map().containsKey(key);
      }

      public Builder clearFieldMapStringUint32169() {
        copyOnWrite();
        instance.getMutableFieldMapStringUint32169Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
       */

      public Builder removeFieldMapStringUint32169(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringUint32169Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringUint32169Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringUint32169() {
        return getFieldMapStringUint32169Map();
      }
      /**
       * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.Integer> getFieldMapStringUint32169Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringUint32169Map());
      }
      /**
       * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
       */
      @java.lang.Override

      public int getFieldMapStringUint32169OrDefault(
          java.lang.String key,
          int defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Integer> map =
            instance.getFieldMapStringUint32169Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
       */
      @java.lang.Override

      public int getFieldMapStringUint32169OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Integer> map =
            instance.getFieldMapStringUint32169Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
       */
      public Builder putFieldMapStringUint32169(
          java.lang.String key,
          int value) {
        key.getClass();
        
        copyOnWrite();
        instance.getMutableFieldMapStringUint32169Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, uint32&gt; field_map_string_uint32_169 = 169;</code>
       */
      public Builder putAllFieldMapStringUint32169(
          java.util.Map<java.lang.String, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringUint32169Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapStringUint64170Count() {
        return instance.getFieldMapStringUint64170Map().size();
      }
      /**
       * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapStringUint64170(
          java.lang.String key) {
        key.getClass();
        return instance.getFieldMapStringUint64170Map().containsKey(key);
      }

      public Builder clearFieldMapStringUint64170() {
        copyOnWrite();
        instance.getMutableFieldMapStringUint64170Map().clear();
        return this;
      }
      /**
       * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
       */

      public Builder removeFieldMapStringUint64170(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableFieldMapStringUint64170Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapStringUint64170Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringUint64170() {
        return getFieldMapStringUint64170Map();
      }
      /**
       * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.Long> getFieldMapStringUint64170Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapStringUint64170Map());
      }
      /**
       * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
       */
      @java.lang.Override

      public long getFieldMapStringUint64170OrDefault(
          java.lang.String key,
          long defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Long> map =
            instance.getFieldMapStringUint64170Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
       */
      @java.lang.Override

      public long getFieldMapStringUint64170OrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.Long> map =
            instance.getFieldMapStringUint64170Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
       */
      public Builder putFieldMapStringUint64170(
          java.lang.String key,
          long value) {
        key.getClass();
        
        copyOnWrite();
        instance.getMutableFieldMapStringUint64170Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, uint64&gt; field_map_string_uint64_170 = 170;</code>
       */
      public Builder putAllFieldMapStringUint64170(
          java.util.Map<java.lang.String, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapStringUint64170Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32Bool171Count() {
        return instance.getFieldMapUint32Bool171Map().size();
      }
      /**
       * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32Bool171(
          int key) {
        
        return instance.getFieldMapUint32Bool171Map().containsKey(key);
      }

      public Builder clearFieldMapUint32Bool171() {
        copyOnWrite();
        instance.getMutableFieldMapUint32Bool171Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
       */

      public Builder removeFieldMapUint32Bool171(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Bool171Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32Bool171Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapUint32Bool171() {
        return getFieldMapUint32Bool171Map();
      }
      /**
       * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Boolean> getFieldMapUint32Bool171Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32Bool171Map());
      }
      /**
       * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
       */
      @java.lang.Override

      public boolean getFieldMapUint32Bool171OrDefault(
          int key,
          boolean defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Boolean> map =
            instance.getFieldMapUint32Bool171Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
       */
      @java.lang.Override

      public boolean getFieldMapUint32Bool171OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Boolean> map =
            instance.getFieldMapUint32Bool171Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
       */
      public Builder putFieldMapUint32Bool171(
          int key,
          boolean value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Bool171Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, bool&gt; field_map_uint32_bool_171 = 171;</code>
       */
      public Builder putAllFieldMapUint32Bool171(
          java.util.Map<java.lang.Integer, java.lang.Boolean> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32Bool171Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32Bytes172Count() {
        return instance.getFieldMapUint32Bytes172Map().size();
      }
      /**
       * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32Bytes172(
          int key) {
        
        return instance.getFieldMapUint32Bytes172Map().containsKey(key);
      }

      public Builder clearFieldMapUint32Bytes172() {
        copyOnWrite();
        instance.getMutableFieldMapUint32Bytes172Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
       */

      public Builder removeFieldMapUint32Bytes172(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Bytes172Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32Bytes172Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapUint32Bytes172() {
        return getFieldMapUint32Bytes172Map();
      }
      /**
       * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getFieldMapUint32Bytes172Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32Bytes172Map());
      }
      /**
       * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapUint32Bytes172OrDefault(
          int key,
          com.google.protobuf.ByteString defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
            instance.getFieldMapUint32Bytes172Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapUint32Bytes172OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
            instance.getFieldMapUint32Bytes172Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
       */
      public Builder putFieldMapUint32Bytes172(
          int key,
          com.google.protobuf.ByteString value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapUint32Bytes172Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, bytes&gt; field_map_uint32_bytes_172 = 172;</code>
       */
      public Builder putAllFieldMapUint32Bytes172(
          java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32Bytes172Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32Double173Count() {
        return instance.getFieldMapUint32Double173Map().size();
      }
      /**
       * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32Double173(
          int key) {
        
        return instance.getFieldMapUint32Double173Map().containsKey(key);
      }

      public Builder clearFieldMapUint32Double173() {
        copyOnWrite();
        instance.getMutableFieldMapUint32Double173Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
       */

      public Builder removeFieldMapUint32Double173(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Double173Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32Double173Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapUint32Double173() {
        return getFieldMapUint32Double173Map();
      }
      /**
       * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Double> getFieldMapUint32Double173Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32Double173Map());
      }
      /**
       * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
       */
      @java.lang.Override

      public double getFieldMapUint32Double173OrDefault(
          int key,
          double defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Double> map =
            instance.getFieldMapUint32Double173Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
       */
      @java.lang.Override

      public double getFieldMapUint32Double173OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Double> map =
            instance.getFieldMapUint32Double173Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
       */
      public Builder putFieldMapUint32Double173(
          int key,
          double value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Double173Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, double&gt; field_map_uint32_double_173 = 173;</code>
       */
      public Builder putAllFieldMapUint32Double173(
          java.util.Map<java.lang.Integer, java.lang.Double> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32Double173Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32Enum174Count() {
        return instance.getFieldMapUint32Enum174Map().size();
      }
      /**
       * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32Enum174(
          int key) {
        
        return instance.getFieldMapUint32Enum174Map().containsKey(key);
      }

      public Builder clearFieldMapUint32Enum174() {
        copyOnWrite();
        instance.getMutableFieldMapUint32Enum174Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
       */

      public Builder removeFieldMapUint32Enum174(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Enum174Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32Enum174Map()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapUint32Enum174() {
        return getFieldMapUint32Enum174Map();
      }
      /**
       * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapUint32Enum174Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32Enum174Map());
      }
      /**
       * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapUint32Enum174OrDefault(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapUint32Enum174Map();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapUint32Enum174OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapUint32Enum174Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
       */
      public Builder putFieldMapUint32Enum174(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapUint32Enum174Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint32_enum_174 = 174;</code>
       */
      public Builder putAllFieldMapUint32Enum174(
          java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32Enum174Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32Fixed32175Count() {
        return instance.getFieldMapUint32Fixed32175Map().size();
      }
      /**
       * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32Fixed32175(
          int key) {
        
        return instance.getFieldMapUint32Fixed32175Map().containsKey(key);
      }

      public Builder clearFieldMapUint32Fixed32175() {
        copyOnWrite();
        instance.getMutableFieldMapUint32Fixed32175Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
       */

      public Builder removeFieldMapUint32Fixed32175(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Fixed32175Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32Fixed32175Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Fixed32175() {
        return getFieldMapUint32Fixed32175Map();
      }
      /**
       * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Fixed32175Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32Fixed32175Map());
      }
      /**
       * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
       */
      @java.lang.Override

      public int getFieldMapUint32Fixed32175OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapUint32Fixed32175Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
       */
      @java.lang.Override

      public int getFieldMapUint32Fixed32175OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapUint32Fixed32175Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
       */
      public Builder putFieldMapUint32Fixed32175(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Fixed32175Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, fixed32&gt; field_map_uint32_fixed32_175 = 175;</code>
       */
      public Builder putAllFieldMapUint32Fixed32175(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32Fixed32175Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32Fixed64176Count() {
        return instance.getFieldMapUint32Fixed64176Map().size();
      }
      /**
       * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32Fixed64176(
          int key) {
        
        return instance.getFieldMapUint32Fixed64176Map().containsKey(key);
      }

      public Builder clearFieldMapUint32Fixed64176() {
        copyOnWrite();
        instance.getMutableFieldMapUint32Fixed64176Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
       */

      public Builder removeFieldMapUint32Fixed64176(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Fixed64176Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32Fixed64176Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Fixed64176() {
        return getFieldMapUint32Fixed64176Map();
      }
      /**
       * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Fixed64176Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32Fixed64176Map());
      }
      /**
       * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
       */
      @java.lang.Override

      public long getFieldMapUint32Fixed64176OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapUint32Fixed64176Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
       */
      @java.lang.Override

      public long getFieldMapUint32Fixed64176OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapUint32Fixed64176Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
       */
      public Builder putFieldMapUint32Fixed64176(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Fixed64176Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, fixed64&gt; field_map_uint32_fixed64_176 = 176;</code>
       */
      public Builder putAllFieldMapUint32Fixed64176(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32Fixed64176Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32Float177Count() {
        return instance.getFieldMapUint32Float177Map().size();
      }
      /**
       * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32Float177(
          int key) {
        
        return instance.getFieldMapUint32Float177Map().containsKey(key);
      }

      public Builder clearFieldMapUint32Float177() {
        copyOnWrite();
        instance.getMutableFieldMapUint32Float177Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
       */

      public Builder removeFieldMapUint32Float177(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Float177Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32Float177Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapUint32Float177() {
        return getFieldMapUint32Float177Map();
      }
      /**
       * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Float> getFieldMapUint32Float177Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32Float177Map());
      }
      /**
       * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
       */
      @java.lang.Override

      public float getFieldMapUint32Float177OrDefault(
          int key,
          float defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Float> map =
            instance.getFieldMapUint32Float177Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
       */
      @java.lang.Override

      public float getFieldMapUint32Float177OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Float> map =
            instance.getFieldMapUint32Float177Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
       */
      public Builder putFieldMapUint32Float177(
          int key,
          float value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Float177Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, float&gt; field_map_uint32_float_177 = 177;</code>
       */
      public Builder putAllFieldMapUint32Float177(
          java.util.Map<java.lang.Integer, java.lang.Float> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32Float177Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32Int32178Count() {
        return instance.getFieldMapUint32Int32178Map().size();
      }
      /**
       * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32Int32178(
          int key) {
        
        return instance.getFieldMapUint32Int32178Map().containsKey(key);
      }

      public Builder clearFieldMapUint32Int32178() {
        copyOnWrite();
        instance.getMutableFieldMapUint32Int32178Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
       */

      public Builder removeFieldMapUint32Int32178(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Int32178Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32Int32178Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Int32178() {
        return getFieldMapUint32Int32178Map();
      }
      /**
       * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Int32178Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32Int32178Map());
      }
      /**
       * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
       */
      @java.lang.Override

      public int getFieldMapUint32Int32178OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapUint32Int32178Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
       */
      @java.lang.Override

      public int getFieldMapUint32Int32178OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapUint32Int32178Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
       */
      public Builder putFieldMapUint32Int32178(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Int32178Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, int32&gt; field_map_uint32_int32_178 = 178;</code>
       */
      public Builder putAllFieldMapUint32Int32178(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32Int32178Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32Int64179Count() {
        return instance.getFieldMapUint32Int64179Map().size();
      }
      /**
       * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32Int64179(
          int key) {
        
        return instance.getFieldMapUint32Int64179Map().containsKey(key);
      }

      public Builder clearFieldMapUint32Int64179() {
        copyOnWrite();
        instance.getMutableFieldMapUint32Int64179Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
       */

      public Builder removeFieldMapUint32Int64179(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Int64179Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32Int64179Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Int64179() {
        return getFieldMapUint32Int64179Map();
      }
      /**
       * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Int64179Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32Int64179Map());
      }
      /**
       * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
       */
      @java.lang.Override

      public long getFieldMapUint32Int64179OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapUint32Int64179Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
       */
      @java.lang.Override

      public long getFieldMapUint32Int64179OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapUint32Int64179Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
       */
      public Builder putFieldMapUint32Int64179(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Int64179Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, int64&gt; field_map_uint32_int64_179 = 179;</code>
       */
      public Builder putAllFieldMapUint32Int64179(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32Int64179Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32Message180Count() {
        return instance.getFieldMapUint32Message180Map().size();
      }
      /**
       * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32Message180(
          int key) {
        
        return instance.getFieldMapUint32Message180Map().containsKey(key);
      }

      public Builder clearFieldMapUint32Message180() {
        copyOnWrite();
        instance.getMutableFieldMapUint32Message180Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
       */

      public Builder removeFieldMapUint32Message180(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Message180Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32Message180Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapUint32Message180() {
        return getFieldMapUint32Message180Map();
      }
      /**
       * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapUint32Message180Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32Message180Map());
      }
      /**
       * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapUint32Message180OrDefault(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapUint32Message180Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapUint32Message180OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapUint32Message180Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
       */
      public Builder putFieldMapUint32Message180(
          int key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapUint32Message180Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, .protobuf.experimental.Proto2Message&gt; field_map_uint32_message_180 = 180;</code>
       */
      public Builder putAllFieldMapUint32Message180(
          java.util.Map<java.lang.Integer, com.google.protobuf.testing.Proto2Testing.Proto2Message> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32Message180Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32Sfixed32181Count() {
        return instance.getFieldMapUint32Sfixed32181Map().size();
      }
      /**
       * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32Sfixed32181(
          int key) {
        
        return instance.getFieldMapUint32Sfixed32181Map().containsKey(key);
      }

      public Builder clearFieldMapUint32Sfixed32181() {
        copyOnWrite();
        instance.getMutableFieldMapUint32Sfixed32181Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
       */

      public Builder removeFieldMapUint32Sfixed32181(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Sfixed32181Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32Sfixed32181Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Sfixed32181() {
        return getFieldMapUint32Sfixed32181Map();
      }
      /**
       * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Sfixed32181Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32Sfixed32181Map());
      }
      /**
       * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
       */
      @java.lang.Override

      public int getFieldMapUint32Sfixed32181OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapUint32Sfixed32181Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
       */
      @java.lang.Override

      public int getFieldMapUint32Sfixed32181OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapUint32Sfixed32181Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
       */
      public Builder putFieldMapUint32Sfixed32181(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Sfixed32181Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, sfixed32&gt; field_map_uint32_sfixed32_181 = 181;</code>
       */
      public Builder putAllFieldMapUint32Sfixed32181(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32Sfixed32181Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32Sfixed64182Count() {
        return instance.getFieldMapUint32Sfixed64182Map().size();
      }
      /**
       * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32Sfixed64182(
          int key) {
        
        return instance.getFieldMapUint32Sfixed64182Map().containsKey(key);
      }

      public Builder clearFieldMapUint32Sfixed64182() {
        copyOnWrite();
        instance.getMutableFieldMapUint32Sfixed64182Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
       */

      public Builder removeFieldMapUint32Sfixed64182(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Sfixed64182Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32Sfixed64182Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Sfixed64182() {
        return getFieldMapUint32Sfixed64182Map();
      }
      /**
       * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Sfixed64182Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32Sfixed64182Map());
      }
      /**
       * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
       */
      @java.lang.Override

      public long getFieldMapUint32Sfixed64182OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapUint32Sfixed64182Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
       */
      @java.lang.Override

      public long getFieldMapUint32Sfixed64182OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapUint32Sfixed64182Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
       */
      public Builder putFieldMapUint32Sfixed64182(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Sfixed64182Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, sfixed64&gt; field_map_uint32_sfixed64_182 = 182;</code>
       */
      public Builder putAllFieldMapUint32Sfixed64182(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32Sfixed64182Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32Sint32183Count() {
        return instance.getFieldMapUint32Sint32183Map().size();
      }
      /**
       * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32Sint32183(
          int key) {
        
        return instance.getFieldMapUint32Sint32183Map().containsKey(key);
      }

      public Builder clearFieldMapUint32Sint32183() {
        copyOnWrite();
        instance.getMutableFieldMapUint32Sint32183Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
       */

      public Builder removeFieldMapUint32Sint32183(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Sint32183Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32Sint32183Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Sint32183() {
        return getFieldMapUint32Sint32183Map();
      }
      /**
       * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Sint32183Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32Sint32183Map());
      }
      /**
       * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
       */
      @java.lang.Override

      public int getFieldMapUint32Sint32183OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapUint32Sint32183Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
       */
      @java.lang.Override

      public int getFieldMapUint32Sint32183OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapUint32Sint32183Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
       */
      public Builder putFieldMapUint32Sint32183(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Sint32183Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, sint32&gt; field_map_uint32_sint32_183 = 183;</code>
       */
      public Builder putAllFieldMapUint32Sint32183(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32Sint32183Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32Sint64184Count() {
        return instance.getFieldMapUint32Sint64184Map().size();
      }
      /**
       * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32Sint64184(
          int key) {
        
        return instance.getFieldMapUint32Sint64184Map().containsKey(key);
      }

      public Builder clearFieldMapUint32Sint64184() {
        copyOnWrite();
        instance.getMutableFieldMapUint32Sint64184Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
       */

      public Builder removeFieldMapUint32Sint64184(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Sint64184Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32Sint64184Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Sint64184() {
        return getFieldMapUint32Sint64184Map();
      }
      /**
       * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Sint64184Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32Sint64184Map());
      }
      /**
       * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
       */
      @java.lang.Override

      public long getFieldMapUint32Sint64184OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapUint32Sint64184Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
       */
      @java.lang.Override

      public long getFieldMapUint32Sint64184OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapUint32Sint64184Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
       */
      public Builder putFieldMapUint32Sint64184(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Sint64184Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, sint64&gt; field_map_uint32_sint64_184 = 184;</code>
       */
      public Builder putAllFieldMapUint32Sint64184(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32Sint64184Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32String185Count() {
        return instance.getFieldMapUint32String185Map().size();
      }
      /**
       * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32String185(
          int key) {
        
        return instance.getFieldMapUint32String185Map().containsKey(key);
      }

      public Builder clearFieldMapUint32String185() {
        copyOnWrite();
        instance.getMutableFieldMapUint32String185Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
       */

      public Builder removeFieldMapUint32String185(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32String185Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32String185Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapUint32String185() {
        return getFieldMapUint32String185Map();
      }
      /**
       * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.String> getFieldMapUint32String185Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32String185Map());
      }
      /**
       * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapUint32String185OrDefault(
          int key,
          java.lang.String defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.String> map =
            instance.getFieldMapUint32String185Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapUint32String185OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.String> map =
            instance.getFieldMapUint32String185Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
       */
      public Builder putFieldMapUint32String185(
          int key,
          java.lang.String value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapUint32String185Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, string&gt; field_map_uint32_string_185 = 185;</code>
       */
      public Builder putAllFieldMapUint32String185(
          java.util.Map<java.lang.Integer, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32String185Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32Uint32186Count() {
        return instance.getFieldMapUint32Uint32186Map().size();
      }
      /**
       * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32Uint32186(
          int key) {
        
        return instance.getFieldMapUint32Uint32186Map().containsKey(key);
      }

      public Builder clearFieldMapUint32Uint32186() {
        copyOnWrite();
        instance.getMutableFieldMapUint32Uint32186Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
       */

      public Builder removeFieldMapUint32Uint32186(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Uint32186Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32Uint32186Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Uint32186() {
        return getFieldMapUint32Uint32186Map();
      }
      /**
       * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getFieldMapUint32Uint32186Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32Uint32186Map());
      }
      /**
       * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
       */
      @java.lang.Override

      public int getFieldMapUint32Uint32186OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapUint32Uint32186Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
       */
      @java.lang.Override

      public int getFieldMapUint32Uint32186OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getFieldMapUint32Uint32186Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
       */
      public Builder putFieldMapUint32Uint32186(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Uint32186Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, uint32&gt; field_map_uint32_uint32_186 = 186;</code>
       */
      public Builder putAllFieldMapUint32Uint32186(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32Uint32186Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint32Uint64187Count() {
        return instance.getFieldMapUint32Uint64187Map().size();
      }
      /**
       * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint32Uint64187(
          int key) {
        
        return instance.getFieldMapUint32Uint64187Map().containsKey(key);
      }

      public Builder clearFieldMapUint32Uint64187() {
        copyOnWrite();
        instance.getMutableFieldMapUint32Uint64187Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
       */

      public Builder removeFieldMapUint32Uint64187(
          int key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Uint64187Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint32Uint64187Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Uint64187() {
        return getFieldMapUint32Uint64187Map();
      }
      /**
       * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Long> getFieldMapUint32Uint64187Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint32Uint64187Map());
      }
      /**
       * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
       */
      @java.lang.Override

      public long getFieldMapUint32Uint64187OrDefault(
          int key,
          long defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapUint32Uint64187Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
       */
      @java.lang.Override

      public long getFieldMapUint32Uint64187OrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Long> map =
            instance.getFieldMapUint32Uint64187Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
       */
      public Builder putFieldMapUint32Uint64187(
          int key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint32Uint64187Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, uint64&gt; field_map_uint32_uint64_187 = 187;</code>
       */
      public Builder putAllFieldMapUint32Uint64187(
          java.util.Map<java.lang.Integer, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint32Uint64187Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64Bool188Count() {
        return instance.getFieldMapUint64Bool188Map().size();
      }
      /**
       * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64Bool188(
          long key) {
        
        return instance.getFieldMapUint64Bool188Map().containsKey(key);
      }

      public Builder clearFieldMapUint64Bool188() {
        copyOnWrite();
        instance.getMutableFieldMapUint64Bool188Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
       */

      public Builder removeFieldMapUint64Bool188(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Bool188Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64Bool188Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapUint64Bool188() {
        return getFieldMapUint64Bool188Map();
      }
      /**
       * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Boolean> getFieldMapUint64Bool188Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64Bool188Map());
      }
      /**
       * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
       */
      @java.lang.Override

      public boolean getFieldMapUint64Bool188OrDefault(
          long key,
          boolean defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Boolean> map =
            instance.getFieldMapUint64Bool188Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
       */
      @java.lang.Override

      public boolean getFieldMapUint64Bool188OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Boolean> map =
            instance.getFieldMapUint64Bool188Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
       */
      public Builder putFieldMapUint64Bool188(
          long key,
          boolean value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Bool188Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, bool&gt; field_map_uint64_bool_188 = 188;</code>
       */
      public Builder putAllFieldMapUint64Bool188(
          java.util.Map<java.lang.Long, java.lang.Boolean> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64Bool188Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64Bytes189Count() {
        return instance.getFieldMapUint64Bytes189Map().size();
      }
      /**
       * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64Bytes189(
          long key) {
        
        return instance.getFieldMapUint64Bytes189Map().containsKey(key);
      }

      public Builder clearFieldMapUint64Bytes189() {
        copyOnWrite();
        instance.getMutableFieldMapUint64Bytes189Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
       */

      public Builder removeFieldMapUint64Bytes189(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Bytes189Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64Bytes189Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapUint64Bytes189() {
        return getFieldMapUint64Bytes189Map();
      }
      /**
       * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, com.google.protobuf.ByteString> getFieldMapUint64Bytes189Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64Bytes189Map());
      }
      /**
       * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapUint64Bytes189OrDefault(
          long key,
          com.google.protobuf.ByteString defaultValue) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
            instance.getFieldMapUint64Bytes189Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getFieldMapUint64Bytes189OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.ByteString> map =
            instance.getFieldMapUint64Bytes189Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
       */
      public Builder putFieldMapUint64Bytes189(
          long key,
          com.google.protobuf.ByteString value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapUint64Bytes189Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, bytes&gt; field_map_uint64_bytes_189 = 189;</code>
       */
      public Builder putAllFieldMapUint64Bytes189(
          java.util.Map<java.lang.Long, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64Bytes189Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64Double190Count() {
        return instance.getFieldMapUint64Double190Map().size();
      }
      /**
       * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64Double190(
          long key) {
        
        return instance.getFieldMapUint64Double190Map().containsKey(key);
      }

      public Builder clearFieldMapUint64Double190() {
        copyOnWrite();
        instance.getMutableFieldMapUint64Double190Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
       */

      public Builder removeFieldMapUint64Double190(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Double190Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64Double190Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapUint64Double190() {
        return getFieldMapUint64Double190Map();
      }
      /**
       * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Double> getFieldMapUint64Double190Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64Double190Map());
      }
      /**
       * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
       */
      @java.lang.Override

      public double getFieldMapUint64Double190OrDefault(
          long key,
          double defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Double> map =
            instance.getFieldMapUint64Double190Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
       */
      @java.lang.Override

      public double getFieldMapUint64Double190OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Double> map =
            instance.getFieldMapUint64Double190Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
       */
      public Builder putFieldMapUint64Double190(
          long key,
          double value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Double190Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, double&gt; field_map_uint64_double_190 = 190;</code>
       */
      public Builder putAllFieldMapUint64Double190(
          java.util.Map<java.lang.Long, java.lang.Double> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64Double190Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64Enum191Count() {
        return instance.getFieldMapUint64Enum191Map().size();
      }
      /**
       * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64Enum191(
          long key) {
        
        return instance.getFieldMapUint64Enum191Map().containsKey(key);
      }

      public Builder clearFieldMapUint64Enum191() {
        copyOnWrite();
        instance.getMutableFieldMapUint64Enum191Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
       */

      public Builder removeFieldMapUint64Enum191(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Enum191Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64Enum191Map()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapUint64Enum191() {
        return getFieldMapUint64Enum191Map();
      }
      /**
       * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>
      getFieldMapUint64Enum191Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64Enum191Map());
      }
      /**
       * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapUint64Enum191OrDefault(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum defaultValue) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapUint64Enum191Map();
        return map.containsKey(key)
               ? map.get(key)
               : defaultValue;
      }
      /**
       * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum getFieldMapUint64Enum191OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> map =
            instance.getFieldMapUint64Enum191Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
       */
      public Builder putFieldMapUint64Enum191(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapUint64Enum191Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, .protobuf.experimental.Proto2Message.TestEnum&gt; field_map_uint64_enum_191 = 191;</code>
       */
      public Builder putAllFieldMapUint64Enum191(
          java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64Enum191Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64Fixed32192Count() {
        return instance.getFieldMapUint64Fixed32192Map().size();
      }
      /**
       * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64Fixed32192(
          long key) {
        
        return instance.getFieldMapUint64Fixed32192Map().containsKey(key);
      }

      public Builder clearFieldMapUint64Fixed32192() {
        copyOnWrite();
        instance.getMutableFieldMapUint64Fixed32192Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
       */

      public Builder removeFieldMapUint64Fixed32192(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Fixed32192Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64Fixed32192Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Fixed32192() {
        return getFieldMapUint64Fixed32192Map();
      }
      /**
       * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Fixed32192Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64Fixed32192Map());
      }
      /**
       * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
       */
      @java.lang.Override

      public int getFieldMapUint64Fixed32192OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapUint64Fixed32192Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
       */
      @java.lang.Override

      public int getFieldMapUint64Fixed32192OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapUint64Fixed32192Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
       */
      public Builder putFieldMapUint64Fixed32192(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Fixed32192Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, fixed32&gt; field_map_uint64_fixed32_192 = 192;</code>
       */
      public Builder putAllFieldMapUint64Fixed32192(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64Fixed32192Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64Fixed64193Count() {
        return instance.getFieldMapUint64Fixed64193Map().size();
      }
      /**
       * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64Fixed64193(
          long key) {
        
        return instance.getFieldMapUint64Fixed64193Map().containsKey(key);
      }

      public Builder clearFieldMapUint64Fixed64193() {
        copyOnWrite();
        instance.getMutableFieldMapUint64Fixed64193Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
       */

      public Builder removeFieldMapUint64Fixed64193(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Fixed64193Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64Fixed64193Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Fixed64193() {
        return getFieldMapUint64Fixed64193Map();
      }
      /**
       * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Fixed64193Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64Fixed64193Map());
      }
      /**
       * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
       */
      @java.lang.Override

      public long getFieldMapUint64Fixed64193OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapUint64Fixed64193Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
       */
      @java.lang.Override

      public long getFieldMapUint64Fixed64193OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapUint64Fixed64193Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
       */
      public Builder putFieldMapUint64Fixed64193(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Fixed64193Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, fixed64&gt; field_map_uint64_fixed64_193 = 193;</code>
       */
      public Builder putAllFieldMapUint64Fixed64193(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64Fixed64193Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64Float194Count() {
        return instance.getFieldMapUint64Float194Map().size();
      }
      /**
       * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64Float194(
          long key) {
        
        return instance.getFieldMapUint64Float194Map().containsKey(key);
      }

      public Builder clearFieldMapUint64Float194() {
        copyOnWrite();
        instance.getMutableFieldMapUint64Float194Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
       */

      public Builder removeFieldMapUint64Float194(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Float194Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64Float194Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapUint64Float194() {
        return getFieldMapUint64Float194Map();
      }
      /**
       * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Float> getFieldMapUint64Float194Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64Float194Map());
      }
      /**
       * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
       */
      @java.lang.Override

      public float getFieldMapUint64Float194OrDefault(
          long key,
          float defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Float> map =
            instance.getFieldMapUint64Float194Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
       */
      @java.lang.Override

      public float getFieldMapUint64Float194OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Float> map =
            instance.getFieldMapUint64Float194Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
       */
      public Builder putFieldMapUint64Float194(
          long key,
          float value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Float194Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, float&gt; field_map_uint64_float_194 = 194;</code>
       */
      public Builder putAllFieldMapUint64Float194(
          java.util.Map<java.lang.Long, java.lang.Float> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64Float194Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64Int32195Count() {
        return instance.getFieldMapUint64Int32195Map().size();
      }
      /**
       * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64Int32195(
          long key) {
        
        return instance.getFieldMapUint64Int32195Map().containsKey(key);
      }

      public Builder clearFieldMapUint64Int32195() {
        copyOnWrite();
        instance.getMutableFieldMapUint64Int32195Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
       */

      public Builder removeFieldMapUint64Int32195(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Int32195Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64Int32195Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Int32195() {
        return getFieldMapUint64Int32195Map();
      }
      /**
       * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Int32195Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64Int32195Map());
      }
      /**
       * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
       */
      @java.lang.Override

      public int getFieldMapUint64Int32195OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapUint64Int32195Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
       */
      @java.lang.Override

      public int getFieldMapUint64Int32195OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapUint64Int32195Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
       */
      public Builder putFieldMapUint64Int32195(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Int32195Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, int32&gt; field_map_uint64_int32_195 = 195;</code>
       */
      public Builder putAllFieldMapUint64Int32195(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64Int32195Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64Int64196Count() {
        return instance.getFieldMapUint64Int64196Map().size();
      }
      /**
       * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64Int64196(
          long key) {
        
        return instance.getFieldMapUint64Int64196Map().containsKey(key);
      }

      public Builder clearFieldMapUint64Int64196() {
        copyOnWrite();
        instance.getMutableFieldMapUint64Int64196Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
       */

      public Builder removeFieldMapUint64Int64196(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Int64196Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64Int64196Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Int64196() {
        return getFieldMapUint64Int64196Map();
      }
      /**
       * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Int64196Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64Int64196Map());
      }
      /**
       * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
       */
      @java.lang.Override

      public long getFieldMapUint64Int64196OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapUint64Int64196Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
       */
      @java.lang.Override

      public long getFieldMapUint64Int64196OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapUint64Int64196Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
       */
      public Builder putFieldMapUint64Int64196(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Int64196Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, int64&gt; field_map_uint64_int64_196 = 196;</code>
       */
      public Builder putAllFieldMapUint64Int64196(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64Int64196Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64Message197Count() {
        return instance.getFieldMapUint64Message197Map().size();
      }
      /**
       * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64Message197(
          long key) {
        
        return instance.getFieldMapUint64Message197Map().containsKey(key);
      }

      public Builder clearFieldMapUint64Message197() {
        copyOnWrite();
        instance.getMutableFieldMapUint64Message197Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
       */

      public Builder removeFieldMapUint64Message197(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Message197Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64Message197Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapUint64Message197() {
        return getFieldMapUint64Message197Map();
      }
      /**
       * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> getFieldMapUint64Message197Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64Message197Map());
      }
      /**
       * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapUint64Message197OrDefault(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message defaultValue) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapUint64Message197Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
       */
      @java.lang.Override

      public com.google.protobuf.testing.Proto2Testing.Proto2Message getFieldMapUint64Message197OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> map =
            instance.getFieldMapUint64Message197Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
       */
      public Builder putFieldMapUint64Message197(
          long key,
          com.google.protobuf.testing.Proto2Testing.Proto2Message value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapUint64Message197Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, .protobuf.experimental.Proto2Message&gt; field_map_uint64_message_197 = 197;</code>
       */
      public Builder putAllFieldMapUint64Message197(
          java.util.Map<java.lang.Long, com.google.protobuf.testing.Proto2Testing.Proto2Message> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64Message197Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64Sfixed32198Count() {
        return instance.getFieldMapUint64Sfixed32198Map().size();
      }
      /**
       * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64Sfixed32198(
          long key) {
        
        return instance.getFieldMapUint64Sfixed32198Map().containsKey(key);
      }

      public Builder clearFieldMapUint64Sfixed32198() {
        copyOnWrite();
        instance.getMutableFieldMapUint64Sfixed32198Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
       */

      public Builder removeFieldMapUint64Sfixed32198(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Sfixed32198Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64Sfixed32198Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Sfixed32198() {
        return getFieldMapUint64Sfixed32198Map();
      }
      /**
       * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Sfixed32198Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64Sfixed32198Map());
      }
      /**
       * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
       */
      @java.lang.Override

      public int getFieldMapUint64Sfixed32198OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapUint64Sfixed32198Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
       */
      @java.lang.Override

      public int getFieldMapUint64Sfixed32198OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapUint64Sfixed32198Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
       */
      public Builder putFieldMapUint64Sfixed32198(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Sfixed32198Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, sfixed32&gt; field_map_uint64_sfixed32_198 = 198;</code>
       */
      public Builder putAllFieldMapUint64Sfixed32198(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64Sfixed32198Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64Sfixed64199Count() {
        return instance.getFieldMapUint64Sfixed64199Map().size();
      }
      /**
       * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64Sfixed64199(
          long key) {
        
        return instance.getFieldMapUint64Sfixed64199Map().containsKey(key);
      }

      public Builder clearFieldMapUint64Sfixed64199() {
        copyOnWrite();
        instance.getMutableFieldMapUint64Sfixed64199Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
       */

      public Builder removeFieldMapUint64Sfixed64199(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Sfixed64199Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64Sfixed64199Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Sfixed64199() {
        return getFieldMapUint64Sfixed64199Map();
      }
      /**
       * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Sfixed64199Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64Sfixed64199Map());
      }
      /**
       * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
       */
      @java.lang.Override

      public long getFieldMapUint64Sfixed64199OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapUint64Sfixed64199Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
       */
      @java.lang.Override

      public long getFieldMapUint64Sfixed64199OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapUint64Sfixed64199Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
       */
      public Builder putFieldMapUint64Sfixed64199(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Sfixed64199Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, sfixed64&gt; field_map_uint64_sfixed64_199 = 199;</code>
       */
      public Builder putAllFieldMapUint64Sfixed64199(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64Sfixed64199Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64Sint32200Count() {
        return instance.getFieldMapUint64Sint32200Map().size();
      }
      /**
       * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64Sint32200(
          long key) {
        
        return instance.getFieldMapUint64Sint32200Map().containsKey(key);
      }

      public Builder clearFieldMapUint64Sint32200() {
        copyOnWrite();
        instance.getMutableFieldMapUint64Sint32200Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
       */

      public Builder removeFieldMapUint64Sint32200(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Sint32200Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64Sint32200Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Sint32200() {
        return getFieldMapUint64Sint32200Map();
      }
      /**
       * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Sint32200Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64Sint32200Map());
      }
      /**
       * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
       */
      @java.lang.Override

      public int getFieldMapUint64Sint32200OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapUint64Sint32200Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
       */
      @java.lang.Override

      public int getFieldMapUint64Sint32200OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapUint64Sint32200Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
       */
      public Builder putFieldMapUint64Sint32200(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Sint32200Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, sint32&gt; field_map_uint64_sint32_200 = 200;</code>
       */
      public Builder putAllFieldMapUint64Sint32200(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64Sint32200Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64Sint64201Count() {
        return instance.getFieldMapUint64Sint64201Map().size();
      }
      /**
       * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64Sint64201(
          long key) {
        
        return instance.getFieldMapUint64Sint64201Map().containsKey(key);
      }

      public Builder clearFieldMapUint64Sint64201() {
        copyOnWrite();
        instance.getMutableFieldMapUint64Sint64201Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
       */

      public Builder removeFieldMapUint64Sint64201(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Sint64201Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64Sint64201Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Sint64201() {
        return getFieldMapUint64Sint64201Map();
      }
      /**
       * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Sint64201Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64Sint64201Map());
      }
      /**
       * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
       */
      @java.lang.Override

      public long getFieldMapUint64Sint64201OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapUint64Sint64201Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
       */
      @java.lang.Override

      public long getFieldMapUint64Sint64201OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapUint64Sint64201Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
       */
      public Builder putFieldMapUint64Sint64201(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Sint64201Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, sint64&gt; field_map_uint64_sint64_201 = 201;</code>
       */
      public Builder putAllFieldMapUint64Sint64201(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64Sint64201Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64String202Count() {
        return instance.getFieldMapUint64String202Map().size();
      }
      /**
       * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64String202(
          long key) {
        
        return instance.getFieldMapUint64String202Map().containsKey(key);
      }

      public Builder clearFieldMapUint64String202() {
        copyOnWrite();
        instance.getMutableFieldMapUint64String202Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
       */

      public Builder removeFieldMapUint64String202(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64String202Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64String202Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.String> getFieldMapUint64String202() {
        return getFieldMapUint64String202Map();
      }
      /**
       * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.String> getFieldMapUint64String202Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64String202Map());
      }
      /**
       * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapUint64String202OrDefault(
          long key,
          java.lang.String defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.String> map =
            instance.getFieldMapUint64String202Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
       */
      @java.lang.Override

      public java.lang.String getFieldMapUint64String202OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.String> map =
            instance.getFieldMapUint64String202Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
       */
      public Builder putFieldMapUint64String202(
          long key,
          java.lang.String value) {
        
        value.getClass();
        copyOnWrite();
        instance.getMutableFieldMapUint64String202Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, string&gt; field_map_uint64_string_202 = 202;</code>
       */
      public Builder putAllFieldMapUint64String202(
          java.util.Map<java.lang.Long, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64String202Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64Uint32203Count() {
        return instance.getFieldMapUint64Uint32203Map().size();
      }
      /**
       * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64Uint32203(
          long key) {
        
        return instance.getFieldMapUint64Uint32203Map().containsKey(key);
      }

      public Builder clearFieldMapUint64Uint32203() {
        copyOnWrite();
        instance.getMutableFieldMapUint64Uint32203Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
       */

      public Builder removeFieldMapUint64Uint32203(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Uint32203Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64Uint32203Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Uint32203() {
        return getFieldMapUint64Uint32203Map();
      }
      /**
       * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Integer> getFieldMapUint64Uint32203Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64Uint32203Map());
      }
      /**
       * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
       */
      @java.lang.Override

      public int getFieldMapUint64Uint32203OrDefault(
          long key,
          int defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapUint64Uint32203Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
       */
      @java.lang.Override

      public int getFieldMapUint64Uint32203OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Integer> map =
            instance.getFieldMapUint64Uint32203Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
       */
      public Builder putFieldMapUint64Uint32203(
          long key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Uint32203Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, uint32&gt; field_map_uint64_uint32_203 = 203;</code>
       */
      public Builder putAllFieldMapUint64Uint32203(
          java.util.Map<java.lang.Long, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64Uint32203Map().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getFieldMapUint64Uint64204Count() {
        return instance.getFieldMapUint64Uint64204Map().size();
      }
      /**
       * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
       */
      @java.lang.Override

      public boolean containsFieldMapUint64Uint64204(
          long key) {
        
        return instance.getFieldMapUint64Uint64204Map().containsKey(key);
      }

      public Builder clearFieldMapUint64Uint64204() {
        copyOnWrite();
        instance.getMutableFieldMapUint64Uint64204Map().clear();
        return this;
      }
      /**
       * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
       */

      public Builder removeFieldMapUint64Uint64204(
          long key) {
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Uint64204Map().remove(key);
        return this;
      }
      /**
       * Use {@link #getFieldMapUint64Uint64204Map()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Uint64204() {
        return getFieldMapUint64Uint64204Map();
      }
      /**
       * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getFieldMapUint64Uint64204Map() {
        return java.util.Collections.unmodifiableMap(
            instance.getFieldMapUint64Uint64204Map());
      }
      /**
       * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
       */
      @java.lang.Override

      public long getFieldMapUint64Uint64204OrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapUint64Uint64204Map();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
       */
      @java.lang.Override

      public long getFieldMapUint64Uint64204OrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            instance.getFieldMapUint64Uint64204Map();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
       */
      public Builder putFieldMapUint64Uint64204(
          long key,
          long value) {
        
        
        copyOnWrite();
        instance.getMutableFieldMapUint64Uint64204Map().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint64, uint64&gt; field_map_uint64_uint64_204 = 204;</code>
       */
      public Builder putAllFieldMapUint64Uint64204(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableFieldMapUint64Uint64204Map().putAll(values);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protobuf.experimental.Proto2MessageWithMaps)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "fieldMapBoolBool1_",
              FieldMapBoolBool1DefaultEntryHolder.defaultEntry,
              "fieldMapBoolBytes2_",
              FieldMapBoolBytes2DefaultEntryHolder.defaultEntry,
              "fieldMapBoolDouble3_",
              FieldMapBoolDouble3DefaultEntryHolder.defaultEntry,
              "fieldMapBoolEnum4_",
              FieldMapBoolEnum4DefaultEntryHolder.defaultEntry,
              com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetVerifier(),
              "fieldMapBoolFixed325_",
              FieldMapBoolFixed325DefaultEntryHolder.defaultEntry,
              "fieldMapBoolFixed646_",
              FieldMapBoolFixed646DefaultEntryHolder.defaultEntry,
              "fieldMapBoolFloat7_",
              FieldMapBoolFloat7DefaultEntryHolder.defaultEntry,
              "fieldMapBoolInt328_",
              FieldMapBoolInt328DefaultEntryHolder.defaultEntry,
              "fieldMapBoolInt649_",
              FieldMapBoolInt649DefaultEntryHolder.defaultEntry,
              "fieldMapBoolMessage10_",
              FieldMapBoolMessage10DefaultEntryHolder.defaultEntry,
              "fieldMapBoolSfixed3211_",
              FieldMapBoolSfixed3211DefaultEntryHolder.defaultEntry,
              "fieldMapBoolSfixed6412_",
              FieldMapBoolSfixed6412DefaultEntryHolder.defaultEntry,
              "fieldMapBoolSint3213_",
              FieldMapBoolSint3213DefaultEntryHolder.defaultEntry,
              "fieldMapBoolSint6414_",
              FieldMapBoolSint6414DefaultEntryHolder.defaultEntry,
              "fieldMapBoolString15_",
              FieldMapBoolString15DefaultEntryHolder.defaultEntry,
              "fieldMapBoolUint3216_",
              FieldMapBoolUint3216DefaultEntryHolder.defaultEntry,
              "fieldMapBoolUint6417_",
              FieldMapBoolUint6417DefaultEntryHolder.defaultEntry,
              "fieldMapFixed32Bool18_",
              FieldMapFixed32Bool18DefaultEntryHolder.defaultEntry,
              "fieldMapFixed32Bytes19_",
              FieldMapFixed32Bytes19DefaultEntryHolder.defaultEntry,
              "fieldMapFixed32Double20_",
              FieldMapFixed32Double20DefaultEntryHolder.defaultEntry,
              "fieldMapFixed32Enum21_",
              FieldMapFixed32Enum21DefaultEntryHolder.defaultEntry,
              com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetVerifier(),
              "fieldMapFixed32Fixed3222_",
              FieldMapFixed32Fixed3222DefaultEntryHolder.defaultEntry,
              "fieldMapFixed32Fixed6423_",
              FieldMapFixed32Fixed6423DefaultEntryHolder.defaultEntry,
              "fieldMapFixed32Float24_",
              FieldMapFixed32Float24DefaultEntryHolder.defaultEntry,
              "fieldMapFixed32Int3225_",
              FieldMapFixed32Int3225DefaultEntryHolder.defaultEntry,
              "fieldMapFixed32Int6426_",
              FieldMapFixed32Int6426DefaultEntryHolder.defaultEntry,
              "fieldMapFixed32Message27_",
              FieldMapFixed32Message27DefaultEntryHolder.defaultEntry,
              "fieldMapFixed32Sfixed3228_",
              FieldMapFixed32Sfixed3228DefaultEntryHolder.defaultEntry,
              "fieldMapFixed32Sfixed6429_",
              FieldMapFixed32Sfixed6429DefaultEntryHolder.defaultEntry,
              "fieldMapFixed32Sint3230_",
              FieldMapFixed32Sint3230DefaultEntryHolder.defaultEntry,
              "fieldMapFixed32Sint6431_",
              FieldMapFixed32Sint6431DefaultEntryHolder.defaultEntry,
              "fieldMapFixed32String32_",
              FieldMapFixed32String32DefaultEntryHolder.defaultEntry,
              "fieldMapFixed32Uint3233_",
              FieldMapFixed32Uint3233DefaultEntryHolder.defaultEntry,
              "fieldMapFixed32Uint6434_",
              FieldMapFixed32Uint6434DefaultEntryHolder.defaultEntry,
              "fieldMapFixed64Bool35_",
              FieldMapFixed64Bool35DefaultEntryHolder.defaultEntry,
              "fieldMapFixed64Bytes36_",
              FieldMapFixed64Bytes36DefaultEntryHolder.defaultEntry,
              "fieldMapFixed64Double37_",
              FieldMapFixed64Double37DefaultEntryHolder.defaultEntry,
              "fieldMapFixed64Enum38_",
              FieldMapFixed64Enum38DefaultEntryHolder.defaultEntry,
              com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetVerifier(),
              "fieldMapFixed64Fixed3239_",
              FieldMapFixed64Fixed3239DefaultEntryHolder.defaultEntry,
              "fieldMapFixed64Fixed6440_",
              FieldMapFixed64Fixed6440DefaultEntryHolder.defaultEntry,
              "fieldMapFixed64Float41_",
              FieldMapFixed64Float41DefaultEntryHolder.defaultEntry,
              "fieldMapFixed64Int3242_",
              FieldMapFixed64Int3242DefaultEntryHolder.defaultEntry,
              "fieldMapFixed64Int6443_",
              FieldMapFixed64Int6443DefaultEntryHolder.defaultEntry,
              "fieldMapFixed64Message44_",
              FieldMapFixed64Message44DefaultEntryHolder.defaultEntry,
              "fieldMapFixed64Sfixed3245_",
              FieldMapFixed64Sfixed3245DefaultEntryHolder.defaultEntry,
              "fieldMapFixed64Sfixed6446_",
              FieldMapFixed64Sfixed6446DefaultEntryHolder.defaultEntry,
              "fieldMapFixed64Sint3247_",
              FieldMapFixed64Sint3247DefaultEntryHolder.defaultEntry,
              "fieldMapFixed64Sint6448_",
              FieldMapFixed64Sint6448DefaultEntryHolder.defaultEntry,
              "fieldMapFixed64String49_",
              FieldMapFixed64String49DefaultEntryHolder.defaultEntry,
              "fieldMapFixed64Uint3250_",
              FieldMapFixed64Uint3250DefaultEntryHolder.defaultEntry,
              "fieldMapFixed64Uint6451_",
              FieldMapFixed64Uint6451DefaultEntryHolder.defaultEntry,
              "fieldMapInt32Bool52_",
              FieldMapInt32Bool52DefaultEntryHolder.defaultEntry,
              "fieldMapInt32Bytes53_",
              FieldMapInt32Bytes53DefaultEntryHolder.defaultEntry,
              "fieldMapInt32Double54_",
              FieldMapInt32Double54DefaultEntryHolder.defaultEntry,
              "fieldMapInt32Enum55_",
              FieldMapInt32Enum55DefaultEntryHolder.defaultEntry,
              com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetVerifier(),
              "fieldMapInt32Fixed3256_",
              FieldMapInt32Fixed3256DefaultEntryHolder.defaultEntry,
              "fieldMapInt32Fixed6457_",
              FieldMapInt32Fixed6457DefaultEntryHolder.defaultEntry,
              "fieldMapInt32Float58_",
              FieldMapInt32Float58DefaultEntryHolder.defaultEntry,
              "fieldMapInt32Int3259_",
              FieldMapInt32Int3259DefaultEntryHolder.defaultEntry,
              "fieldMapInt32Int6460_",
              FieldMapInt32Int6460DefaultEntryHolder.defaultEntry,
              "fieldMapInt32Message61_",
              FieldMapInt32Message61DefaultEntryHolder.defaultEntry,
              "fieldMapInt32Sfixed3262_",
              FieldMapInt32Sfixed3262DefaultEntryHolder.defaultEntry,
              "fieldMapInt32Sfixed6463_",
              FieldMapInt32Sfixed6463DefaultEntryHolder.defaultEntry,
              "fieldMapInt32Sint3264_",
              FieldMapInt32Sint3264DefaultEntryHolder.defaultEntry,
              "fieldMapInt32Sint6465_",
              FieldMapInt32Sint6465DefaultEntryHolder.defaultEntry,
              "fieldMapInt32String66_",
              FieldMapInt32String66DefaultEntryHolder.defaultEntry,
              "fieldMapInt32Uint3267_",
              FieldMapInt32Uint3267DefaultEntryHolder.defaultEntry,
              "fieldMapInt32Uint6468_",
              FieldMapInt32Uint6468DefaultEntryHolder.defaultEntry,
              "fieldMapInt64Bool69_",
              FieldMapInt64Bool69DefaultEntryHolder.defaultEntry,
              "fieldMapInt64Bytes70_",
              FieldMapInt64Bytes70DefaultEntryHolder.defaultEntry,
              "fieldMapInt64Double71_",
              FieldMapInt64Double71DefaultEntryHolder.defaultEntry,
              "fieldMapInt64Enum72_",
              FieldMapInt64Enum72DefaultEntryHolder.defaultEntry,
              com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetVerifier(),
              "fieldMapInt64Fixed3273_",
              FieldMapInt64Fixed3273DefaultEntryHolder.defaultEntry,
              "fieldMapInt64Fixed6474_",
              FieldMapInt64Fixed6474DefaultEntryHolder.defaultEntry,
              "fieldMapInt64Float75_",
              FieldMapInt64Float75DefaultEntryHolder.defaultEntry,
              "fieldMapInt64Int3276_",
              FieldMapInt64Int3276DefaultEntryHolder.defaultEntry,
              "fieldMapInt64Int6477_",
              FieldMapInt64Int6477DefaultEntryHolder.defaultEntry,
              "fieldMapInt64Message78_",
              FieldMapInt64Message78DefaultEntryHolder.defaultEntry,
              "fieldMapInt64Sfixed3279_",
              FieldMapInt64Sfixed3279DefaultEntryHolder.defaultEntry,
              "fieldMapInt64Sfixed6480_",
              FieldMapInt64Sfixed6480DefaultEntryHolder.defaultEntry,
              "fieldMapInt64Sint3281_",
              FieldMapInt64Sint3281DefaultEntryHolder.defaultEntry,
              "fieldMapInt64Sint6482_",
              FieldMapInt64Sint6482DefaultEntryHolder.defaultEntry,
              "fieldMapInt64String83_",
              FieldMapInt64String83DefaultEntryHolder.defaultEntry,
              "fieldMapInt64Uint3284_",
              FieldMapInt64Uint3284DefaultEntryHolder.defaultEntry,
              "fieldMapInt64Uint6485_",
              FieldMapInt64Uint6485DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed32Bool86_",
              FieldMapSfixed32Bool86DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed32Bytes87_",
              FieldMapSfixed32Bytes87DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed32Double88_",
              FieldMapSfixed32Double88DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed32Enum89_",
              FieldMapSfixed32Enum89DefaultEntryHolder.defaultEntry,
              com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetVerifier(),
              "fieldMapSfixed32Fixed3290_",
              FieldMapSfixed32Fixed3290DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed32Fixed6491_",
              FieldMapSfixed32Fixed6491DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed32Float92_",
              FieldMapSfixed32Float92DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed32Int3293_",
              FieldMapSfixed32Int3293DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed32Int6494_",
              FieldMapSfixed32Int6494DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed32Message95_",
              FieldMapSfixed32Message95DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed32Sfixed3296_",
              FieldMapSfixed32Sfixed3296DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed32Sfixed6497_",
              FieldMapSfixed32Sfixed6497DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed32Sint3298_",
              FieldMapSfixed32Sint3298DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed32Sint6499_",
              FieldMapSfixed32Sint6499DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed32String100_",
              FieldMapSfixed32String100DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed32Uint32101_",
              FieldMapSfixed32Uint32101DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed32Uint64102_",
              FieldMapSfixed32Uint64102DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed64Bool103_",
              FieldMapSfixed64Bool103DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed64Bytes104_",
              FieldMapSfixed64Bytes104DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed64Double105_",
              FieldMapSfixed64Double105DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed64Enum106_",
              FieldMapSfixed64Enum106DefaultEntryHolder.defaultEntry,
              com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetVerifier(),
              "fieldMapSfixed64Fixed32107_",
              FieldMapSfixed64Fixed32107DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed64Fixed64108_",
              FieldMapSfixed64Fixed64108DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed64Float109_",
              FieldMapSfixed64Float109DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed64Int32110_",
              FieldMapSfixed64Int32110DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed64Int64111_",
              FieldMapSfixed64Int64111DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed64Message112_",
              FieldMapSfixed64Message112DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed64Sfixed32113_",
              FieldMapSfixed64Sfixed32113DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed64Sfixed64114_",
              FieldMapSfixed64Sfixed64114DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed64Sint32115_",
              FieldMapSfixed64Sint32115DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed64Sint64116_",
              FieldMapSfixed64Sint64116DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed64String117_",
              FieldMapSfixed64String117DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed64Uint32118_",
              FieldMapSfixed64Uint32118DefaultEntryHolder.defaultEntry,
              "fieldMapSfixed64Uint64119_",
              FieldMapSfixed64Uint64119DefaultEntryHolder.defaultEntry,
              "fieldMapSint32Bool120_",
              FieldMapSint32Bool120DefaultEntryHolder.defaultEntry,
              "fieldMapSint32Bytes121_",
              FieldMapSint32Bytes121DefaultEntryHolder.defaultEntry,
              "fieldMapSint32Double122_",
              FieldMapSint32Double122DefaultEntryHolder.defaultEntry,
              "fieldMapSint32Enum123_",
              FieldMapSint32Enum123DefaultEntryHolder.defaultEntry,
              com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetVerifier(),
              "fieldMapSint32Fixed32124_",
              FieldMapSint32Fixed32124DefaultEntryHolder.defaultEntry,
              "fieldMapSint32Fixed64125_",
              FieldMapSint32Fixed64125DefaultEntryHolder.defaultEntry,
              "fieldMapSint32Float126_",
              FieldMapSint32Float126DefaultEntryHolder.defaultEntry,
              "fieldMapSint32Int32127_",
              FieldMapSint32Int32127DefaultEntryHolder.defaultEntry,
              "fieldMapSint32Int64128_",
              FieldMapSint32Int64128DefaultEntryHolder.defaultEntry,
              "fieldMapSint32Message129_",
              FieldMapSint32Message129DefaultEntryHolder.defaultEntry,
              "fieldMapSint32Sfixed32130_",
              FieldMapSint32Sfixed32130DefaultEntryHolder.defaultEntry,
              "fieldMapSint32Sfixed64131_",
              FieldMapSint32Sfixed64131DefaultEntryHolder.defaultEntry,
              "fieldMapSint32Sint32132_",
              FieldMapSint32Sint32132DefaultEntryHolder.defaultEntry,
              "fieldMapSint32Sint64133_",
              FieldMapSint32Sint64133DefaultEntryHolder.defaultEntry,
              "fieldMapSint32String134_",
              FieldMapSint32String134DefaultEntryHolder.defaultEntry,
              "fieldMapSint32Uint32135_",
              FieldMapSint32Uint32135DefaultEntryHolder.defaultEntry,
              "fieldMapSint32Uint64136_",
              FieldMapSint32Uint64136DefaultEntryHolder.defaultEntry,
              "fieldMapSint64Bool137_",
              FieldMapSint64Bool137DefaultEntryHolder.defaultEntry,
              "fieldMapSint64Bytes138_",
              FieldMapSint64Bytes138DefaultEntryHolder.defaultEntry,
              "fieldMapSint64Double139_",
              FieldMapSint64Double139DefaultEntryHolder.defaultEntry,
              "fieldMapSint64Enum140_",
              FieldMapSint64Enum140DefaultEntryHolder.defaultEntry,
              com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetVerifier(),
              "fieldMapSint64Fixed32141_",
              FieldMapSint64Fixed32141DefaultEntryHolder.defaultEntry,
              "fieldMapSint64Fixed64142_",
              FieldMapSint64Fixed64142DefaultEntryHolder.defaultEntry,
              "fieldMapSint64Float143_",
              FieldMapSint64Float143DefaultEntryHolder.defaultEntry,
              "fieldMapSint64Int32144_",
              FieldMapSint64Int32144DefaultEntryHolder.defaultEntry,
              "fieldMapSint64Int64145_",
              FieldMapSint64Int64145DefaultEntryHolder.defaultEntry,
              "fieldMapSint64Message146_",
              FieldMapSint64Message146DefaultEntryHolder.defaultEntry,
              "fieldMapSint64Sfixed32147_",
              FieldMapSint64Sfixed32147DefaultEntryHolder.defaultEntry,
              "fieldMapSint64Sfixed64148_",
              FieldMapSint64Sfixed64148DefaultEntryHolder.defaultEntry,
              "fieldMapSint64Sint32149_",
              FieldMapSint64Sint32149DefaultEntryHolder.defaultEntry,
              "fieldMapSint64Sint64150_",
              FieldMapSint64Sint64150DefaultEntryHolder.defaultEntry,
              "fieldMapSint64String151_",
              FieldMapSint64String151DefaultEntryHolder.defaultEntry,
              "fieldMapSint64Uint32152_",
              FieldMapSint64Uint32152DefaultEntryHolder.defaultEntry,
              "fieldMapSint64Uint64153_",
              FieldMapSint64Uint64153DefaultEntryHolder.defaultEntry,
              "fieldMapStringBool154_",
              FieldMapStringBool154DefaultEntryHolder.defaultEntry,
              "fieldMapStringBytes155_",
              FieldMapStringBytes155DefaultEntryHolder.defaultEntry,
              "fieldMapStringDouble156_",
              FieldMapStringDouble156DefaultEntryHolder.defaultEntry,
              "fieldMapStringEnum157_",
              FieldMapStringEnum157DefaultEntryHolder.defaultEntry,
              com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetVerifier(),
              "fieldMapStringFixed32158_",
              FieldMapStringFixed32158DefaultEntryHolder.defaultEntry,
              "fieldMapStringFixed64159_",
              FieldMapStringFixed64159DefaultEntryHolder.defaultEntry,
              "fieldMapStringFloat160_",
              FieldMapStringFloat160DefaultEntryHolder.defaultEntry,
              "fieldMapStringInt32161_",
              FieldMapStringInt32161DefaultEntryHolder.defaultEntry,
              "fieldMapStringInt64162_",
              FieldMapStringInt64162DefaultEntryHolder.defaultEntry,
              "fieldMapStringMessage163_",
              FieldMapStringMessage163DefaultEntryHolder.defaultEntry,
              "fieldMapStringSfixed32164_",
              FieldMapStringSfixed32164DefaultEntryHolder.defaultEntry,
              "fieldMapStringSfixed64165_",
              FieldMapStringSfixed64165DefaultEntryHolder.defaultEntry,
              "fieldMapStringSint32166_",
              FieldMapStringSint32166DefaultEntryHolder.defaultEntry,
              "fieldMapStringSint64167_",
              FieldMapStringSint64167DefaultEntryHolder.defaultEntry,
              "fieldMapStringString168_",
              FieldMapStringString168DefaultEntryHolder.defaultEntry,
              "fieldMapStringUint32169_",
              FieldMapStringUint32169DefaultEntryHolder.defaultEntry,
              "fieldMapStringUint64170_",
              FieldMapStringUint64170DefaultEntryHolder.defaultEntry,
              "fieldMapUint32Bool171_",
              FieldMapUint32Bool171DefaultEntryHolder.defaultEntry,
              "fieldMapUint32Bytes172_",
              FieldMapUint32Bytes172DefaultEntryHolder.defaultEntry,
              "fieldMapUint32Double173_",
              FieldMapUint32Double173DefaultEntryHolder.defaultEntry,
              "fieldMapUint32Enum174_",
              FieldMapUint32Enum174DefaultEntryHolder.defaultEntry,
              com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetVerifier(),
              "fieldMapUint32Fixed32175_",
              FieldMapUint32Fixed32175DefaultEntryHolder.defaultEntry,
              "fieldMapUint32Fixed64176_",
              FieldMapUint32Fixed64176DefaultEntryHolder.defaultEntry,
              "fieldMapUint32Float177_",
              FieldMapUint32Float177DefaultEntryHolder.defaultEntry,
              "fieldMapUint32Int32178_",
              FieldMapUint32Int32178DefaultEntryHolder.defaultEntry,
              "fieldMapUint32Int64179_",
              FieldMapUint32Int64179DefaultEntryHolder.defaultEntry,
              "fieldMapUint32Message180_",
              FieldMapUint32Message180DefaultEntryHolder.defaultEntry,
              "fieldMapUint32Sfixed32181_",
              FieldMapUint32Sfixed32181DefaultEntryHolder.defaultEntry,
              "fieldMapUint32Sfixed64182_",
              FieldMapUint32Sfixed64182DefaultEntryHolder.defaultEntry,
              "fieldMapUint32Sint32183_",
              FieldMapUint32Sint32183DefaultEntryHolder.defaultEntry,
              "fieldMapUint32Sint64184_",
              FieldMapUint32Sint64184DefaultEntryHolder.defaultEntry,
              "fieldMapUint32String185_",
              FieldMapUint32String185DefaultEntryHolder.defaultEntry,
              "fieldMapUint32Uint32186_",
              FieldMapUint32Uint32186DefaultEntryHolder.defaultEntry,
              "fieldMapUint32Uint64187_",
              FieldMapUint32Uint64187DefaultEntryHolder.defaultEntry,
              "fieldMapUint64Bool188_",
              FieldMapUint64Bool188DefaultEntryHolder.defaultEntry,
              "fieldMapUint64Bytes189_",
              FieldMapUint64Bytes189DefaultEntryHolder.defaultEntry,
              "fieldMapUint64Double190_",
              FieldMapUint64Double190DefaultEntryHolder.defaultEntry,
              "fieldMapUint64Enum191_",
              FieldMapUint64Enum191DefaultEntryHolder.defaultEntry,
              com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetVerifier(),
              "fieldMapUint64Fixed32192_",
              FieldMapUint64Fixed32192DefaultEntryHolder.defaultEntry,
              "fieldMapUint64Fixed64193_",
              FieldMapUint64Fixed64193DefaultEntryHolder.defaultEntry,
              "fieldMapUint64Float194_",
              FieldMapUint64Float194DefaultEntryHolder.defaultEntry,
              "fieldMapUint64Int32195_",
              FieldMapUint64Int32195DefaultEntryHolder.defaultEntry,
              "fieldMapUint64Int64196_",
              FieldMapUint64Int64196DefaultEntryHolder.defaultEntry,
              "fieldMapUint64Message197_",
              FieldMapUint64Message197DefaultEntryHolder.defaultEntry,
              "fieldMapUint64Sfixed32198_",
              FieldMapUint64Sfixed32198DefaultEntryHolder.defaultEntry,
              "fieldMapUint64Sfixed64199_",
              FieldMapUint64Sfixed64199DefaultEntryHolder.defaultEntry,
              "fieldMapUint64Sint32200_",
              FieldMapUint64Sint32200DefaultEntryHolder.defaultEntry,
              "fieldMapUint64Sint64201_",
              FieldMapUint64Sint64201DefaultEntryHolder.defaultEntry,
              "fieldMapUint64String202_",
              FieldMapUint64String202DefaultEntryHolder.defaultEntry,
              "fieldMapUint64Uint32203_",
              FieldMapUint64Uint32203DefaultEntryHolder.defaultEntry,
              "fieldMapUint64Uint64204_",
              FieldMapUint64Uint64204DefaultEntryHolder.defaultEntry,
            };
            java.lang.String info =
                "\u0001\u00cc\u0000\u0000\u0001\u00cc\u00cc\u00cc\u0000\f\u00012\u00022\u00032\u0004" +
                "\u0832\u00052\u00062\u00072\b2\t2\n\u0432\u000b2\f2\r2\u000e2\u000f2\u00102\u0011" +
                "2\u00122\u00132\u00142\u0015\u0832\u00162\u00172\u00182\u00192\u001a2\u001b\u0432" +
                "\u001c2\u001d2\u001e2\u001f2 2!2\"2#2$2%2&\u0832\'2(2)2*2+2,\u0432-2.2/202122232" +
                "4252627\u08328292:2;2<2=\u0432>2?2@2A2B2C2D2E2F2G2H\u0832I2J2K2L2M2N\u0432O2P2Q2" +
                "R2S2T2U2V2W2X2Y\u0832Z2[2\\2]2^2_\u0432`2a2b2c2d2e2f2g2h2i2j\u0832k2l2m2n2o2p\u0432" +
                "q2r2s2t2u2v2w2x2y2z2{\u0832|2}2~22\u00802\u0081\u0432\u00822\u00832\u00842\u0085" +
                "2\u00862\u00872\u00882\u00892\u008a2\u008b2\u008c\u0832\u008d2\u008e2\u008f2\u0090" +
                "2\u00912\u0092\u0432\u00932\u00942\u00952\u00962\u00972\u00982\u00992\u009a2\u009b" +
                "2\u009c2\u009d\u0832\u009e2\u009f2\u00a02\u00a12\u00a22\u00a3\u0432\u00a42\u00a5" +
                "2\u00a62\u00a72\u00a82\u00a92\u00aa2\u00ab2\u00ac2\u00ad2\u00ae\u0832\u00af2\u00b0" +
                "2\u00b12\u00b22\u00b32\u00b4\u0432\u00b52\u00b62\u00b72\u00b82\u00b92\u00ba2\u00bb" +
                "2\u00bc2\u00bd2\u00be2\u00bf\u0832\u00c02\u00c12\u00c22\u00c32\u00c42\u00c5\u0432" +
                "\u00c62\u00c72\u00c82\u00c92\u00ca2\u00cb2\u00cc2";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:protobuf.experimental.Proto2MessageWithMaps)
    private static final com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps DEFAULT_INSTANCE;
    static {
      Proto2MessageWithMaps defaultInstance = new Proto2MessageWithMaps();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Proto2MessageWithMaps.class, defaultInstance);
    }

    public static com.google.protobuf.testing.Proto2Testing.Proto2MessageWithMaps getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Proto2MessageWithMaps> PARSER;

    public static com.google.protobuf.Parser<Proto2MessageWithMaps> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public static final int FIELD_DOUBLE_1_FIELD_NUMBER = 1;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.lang.Double> fieldDouble1 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        0D,
        null,
        null,
        1,
        com.google.protobuf.WireFormat.FieldType.DOUBLE,
        java.lang.Double.class);
  public static final int FIELD_FLOAT_2_FIELD_NUMBER = 2;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.lang.Float> fieldFloat2 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        0F,
        null,
        null,
        2,
        com.google.protobuf.WireFormat.FieldType.FLOAT,
        java.lang.Float.class);
  public static final int FIELD_INT64_3_FIELD_NUMBER = 3;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.lang.Long> fieldInt643 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        0L,
        null,
        null,
        3,
        com.google.protobuf.WireFormat.FieldType.INT64,
        java.lang.Long.class);
  public static final int FIELD_UINT64_4_FIELD_NUMBER = 4;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.lang.Long> fieldUint644 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        0L,
        null,
        null,
        4,
        com.google.protobuf.WireFormat.FieldType.UINT64,
        java.lang.Long.class);
  public static final int FIELD_INT32_5_FIELD_NUMBER = 5;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.lang.Integer> fieldInt325 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        0,
        null,
        null,
        5,
        com.google.protobuf.WireFormat.FieldType.INT32,
        java.lang.Integer.class);
  public static final int FIELD_FIXED64_6_FIELD_NUMBER = 6;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.lang.Long> fieldFixed646 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        0L,
        null,
        null,
        6,
        com.google.protobuf.WireFormat.FieldType.FIXED64,
        java.lang.Long.class);
  public static final int FIELD_FIXED32_7_FIELD_NUMBER = 7;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.lang.Integer> fieldFixed327 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        0,
        null,
        null,
        7,
        com.google.protobuf.WireFormat.FieldType.FIXED32,
        java.lang.Integer.class);
  public static final int FIELD_BOOL_8_FIELD_NUMBER = 8;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.lang.Boolean> fieldBool8 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        false,
        null,
        null,
        8,
        com.google.protobuf.WireFormat.FieldType.BOOL,
        java.lang.Boolean.class);
  public static final int FIELD_STRING_9_FIELD_NUMBER = 9;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.lang.String> fieldString9 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        "",
        null,
        null,
        9,
        com.google.protobuf.WireFormat.FieldType.STRING,
        java.lang.String.class);
  public static final int FIELD_MESSAGE_10_FIELD_NUMBER = 10;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      com.google.protobuf.testing.Proto2Testing.Proto2Message> fieldMessage10 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance(),
        com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance(),
        null,
        10,
        com.google.protobuf.WireFormat.FieldType.MESSAGE,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.class);
  public static final int FIELD_BYTES_11_FIELD_NUMBER = 11;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      com.google.protobuf.ByteString> fieldBytes11 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        com.google.protobuf.ByteString.EMPTY,
        null,
        null,
        11,
        com.google.protobuf.WireFormat.FieldType.BYTES,
        com.google.protobuf.ByteString.class);
  public static final int FIELD_UINT32_12_FIELD_NUMBER = 12;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.lang.Integer> fieldUint3212 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        0,
        null,
        null,
        12,
        com.google.protobuf.WireFormat.FieldType.UINT32,
        java.lang.Integer.class);
  public static final int FIELD_ENUM_13_FIELD_NUMBER = 13;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum> fieldEnum13 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.ZERO,
        null,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetValueMap(),
        13,
        com.google.protobuf.WireFormat.FieldType.ENUM,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.class);
  public static final int FIELD_SFIXED32_14_FIELD_NUMBER = 14;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.lang.Integer> fieldSfixed3214 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        0,
        null,
        null,
        14,
        com.google.protobuf.WireFormat.FieldType.SFIXED32,
        java.lang.Integer.class);
  public static final int FIELD_SFIXED64_15_FIELD_NUMBER = 15;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.lang.Long> fieldSfixed6415 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        0L,
        null,
        null,
        15,
        com.google.protobuf.WireFormat.FieldType.SFIXED64,
        java.lang.Long.class);
  public static final int FIELD_SINT32_16_FIELD_NUMBER = 16;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.lang.Integer> fieldSint3216 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        0,
        null,
        null,
        16,
        com.google.protobuf.WireFormat.FieldType.SINT32,
        java.lang.Integer.class);
  public static final int FIELD_SINT64_17_FIELD_NUMBER = 17;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.lang.Long> fieldSint6417 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        0L,
        null,
        null,
        17,
        com.google.protobuf.WireFormat.FieldType.SINT64,
        java.lang.Long.class);
  public static final int FIELD_DOUBLE_LIST_18_FIELD_NUMBER = 18;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Double>> fieldDoubleList18 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        18,
        com.google.protobuf.WireFormat.FieldType.DOUBLE,
        false,
        java.lang.Double.class);
  public static final int FIELD_FLOAT_LIST_19_FIELD_NUMBER = 19;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Float>> fieldFloatList19 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        19,
        com.google.protobuf.WireFormat.FieldType.FLOAT,
        false,
        java.lang.Float.class);
  public static final int FIELD_INT64_LIST_20_FIELD_NUMBER = 20;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Long>> fieldInt64List20 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        20,
        com.google.protobuf.WireFormat.FieldType.INT64,
        false,
        java.lang.Long.class);
  public static final int FIELD_UINT64_LIST_21_FIELD_NUMBER = 21;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Long>> fieldUint64List21 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        21,
        com.google.protobuf.WireFormat.FieldType.UINT64,
        false,
        java.lang.Long.class);
  public static final int FIELD_INT32_LIST_22_FIELD_NUMBER = 22;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Integer>> fieldInt32List22 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        22,
        com.google.protobuf.WireFormat.FieldType.INT32,
        false,
        java.lang.Integer.class);
  public static final int FIELD_FIXED64_LIST_23_FIELD_NUMBER = 23;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Long>> fieldFixed64List23 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        23,
        com.google.protobuf.WireFormat.FieldType.FIXED64,
        false,
        java.lang.Long.class);
  public static final int FIELD_FIXED32_LIST_24_FIELD_NUMBER = 24;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Integer>> fieldFixed32List24 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        24,
        com.google.protobuf.WireFormat.FieldType.FIXED32,
        false,
        java.lang.Integer.class);
  public static final int FIELD_BOOL_LIST_25_FIELD_NUMBER = 25;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Boolean>> fieldBoolList25 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        25,
        com.google.protobuf.WireFormat.FieldType.BOOL,
        false,
        java.lang.Boolean.class);
  public static final int FIELD_STRING_LIST_26_FIELD_NUMBER = 26;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.String>> fieldStringList26 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        26,
        com.google.protobuf.WireFormat.FieldType.STRING,
        false,
        java.lang.String.class);
  public static final int FIELD_MESSAGE_LIST_27_FIELD_NUMBER = 27;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<com.google.protobuf.testing.Proto2Testing.Proto2Message>> fieldMessageList27 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        com.google.protobuf.testing.Proto2Testing.Proto2Message.getDefaultInstance(),
        null,
        27,
        com.google.protobuf.WireFormat.FieldType.MESSAGE,
        false,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.class);
  public static final int FIELD_BYTES_LIST_28_FIELD_NUMBER = 28;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<com.google.protobuf.ByteString>> fieldBytesList28 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        28,
        com.google.protobuf.WireFormat.FieldType.BYTES,
        false,
        com.google.protobuf.ByteString.class);
  public static final int FIELD_UINT32_LIST_29_FIELD_NUMBER = 29;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Integer>> fieldUint32List29 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        29,
        com.google.protobuf.WireFormat.FieldType.UINT32,
        false,
        java.lang.Integer.class);
  public static final int FIELD_ENUM_LIST_30_FIELD_NUMBER = 30;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>> fieldEnumList30 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetValueMap(),
        30,
        com.google.protobuf.WireFormat.FieldType.ENUM,
        false,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.class);
  public static final int FIELD_SFIXED32_LIST_31_FIELD_NUMBER = 31;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Integer>> fieldSfixed32List31 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        31,
        com.google.protobuf.WireFormat.FieldType.SFIXED32,
        false,
        java.lang.Integer.class);
  public static final int FIELD_SFIXED64_LIST_32_FIELD_NUMBER = 32;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Long>> fieldSfixed64List32 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        32,
        com.google.protobuf.WireFormat.FieldType.SFIXED64,
        false,
        java.lang.Long.class);
  public static final int FIELD_SINT32_LIST_33_FIELD_NUMBER = 33;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Integer>> fieldSint32List33 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        33,
        com.google.protobuf.WireFormat.FieldType.SINT32,
        false,
        java.lang.Integer.class);
  public static final int FIELD_SINT64_LIST_34_FIELD_NUMBER = 34;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Long>> fieldSint64List34 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        34,
        com.google.protobuf.WireFormat.FieldType.SINT64,
        false,
        java.lang.Long.class);
  public static final int FIELD_DOUBLE_LIST_PACKED_35_FIELD_NUMBER = 35;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Double>> fieldDoubleListPacked35 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        35,
        com.google.protobuf.WireFormat.FieldType.DOUBLE,
        true,
        java.lang.Double.class);
  public static final int FIELD_FLOAT_LIST_PACKED_36_FIELD_NUMBER = 36;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Float>> fieldFloatListPacked36 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        36,
        com.google.protobuf.WireFormat.FieldType.FLOAT,
        true,
        java.lang.Float.class);
  public static final int FIELD_INT64_LIST_PACKED_37_FIELD_NUMBER = 37;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Long>> fieldInt64ListPacked37 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        37,
        com.google.protobuf.WireFormat.FieldType.INT64,
        true,
        java.lang.Long.class);
  public static final int FIELD_UINT64_LIST_PACKED_38_FIELD_NUMBER = 38;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Long>> fieldUint64ListPacked38 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        38,
        com.google.protobuf.WireFormat.FieldType.UINT64,
        true,
        java.lang.Long.class);
  public static final int FIELD_INT32_LIST_PACKED_39_FIELD_NUMBER = 39;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Integer>> fieldInt32ListPacked39 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        39,
        com.google.protobuf.WireFormat.FieldType.INT32,
        true,
        java.lang.Integer.class);
  public static final int FIELD_FIXED64_LIST_PACKED_40_FIELD_NUMBER = 40;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Long>> fieldFixed64ListPacked40 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        40,
        com.google.protobuf.WireFormat.FieldType.FIXED64,
        true,
        java.lang.Long.class);
  public static final int FIELD_FIXED32_LIST_PACKED_41_FIELD_NUMBER = 41;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Integer>> fieldFixed32ListPacked41 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        41,
        com.google.protobuf.WireFormat.FieldType.FIXED32,
        true,
        java.lang.Integer.class);
  public static final int FIELD_BOOL_LIST_PACKED_42_FIELD_NUMBER = 42;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Boolean>> fieldBoolListPacked42 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        42,
        com.google.protobuf.WireFormat.FieldType.BOOL,
        true,
        java.lang.Boolean.class);
  public static final int FIELD_UINT32_LIST_PACKED_43_FIELD_NUMBER = 43;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Integer>> fieldUint32ListPacked43 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        43,
        com.google.protobuf.WireFormat.FieldType.UINT32,
        true,
        java.lang.Integer.class);
  public static final int FIELD_ENUM_LIST_PACKED_44_FIELD_NUMBER = 44;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum>> fieldEnumListPacked44 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.internalGetValueMap(),
        44,
        com.google.protobuf.WireFormat.FieldType.ENUM,
        true,
        com.google.protobuf.testing.Proto2Testing.Proto2Message.TestEnum.class);
  public static final int FIELD_SFIXED32_LIST_PACKED_45_FIELD_NUMBER = 45;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Integer>> fieldSfixed32ListPacked45 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        45,
        com.google.protobuf.WireFormat.FieldType.SFIXED32,
        true,
        java.lang.Integer.class);
  public static final int FIELD_SFIXED64_LIST_PACKED_46_FIELD_NUMBER = 46;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Long>> fieldSfixed64ListPacked46 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        46,
        com.google.protobuf.WireFormat.FieldType.SFIXED64,
        true,
        java.lang.Long.class);
  public static final int FIELD_SINT32_LIST_PACKED_47_FIELD_NUMBER = 47;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Integer>> fieldSint32ListPacked47 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        47,
        com.google.protobuf.WireFormat.FieldType.SINT32,
        true,
        java.lang.Integer.class);
  public static final int FIELD_SINT64_LIST_PACKED_48_FIELD_NUMBER = 48;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<java.lang.Long>> fieldSint64ListPacked48 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        null,
        null,
        48,
        com.google.protobuf.WireFormat.FieldType.SINT64,
        true,
        java.lang.Long.class);
  public static final int FIELDGROUP49_FIELD_NUMBER = 49;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      com.google.protobuf.testing.Proto2Testing.FieldGroup49> fieldGroup49 = com.google.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        com.google.protobuf.testing.Proto2Testing.FieldGroup49.getDefaultInstance(),
        com.google.protobuf.testing.Proto2Testing.FieldGroup49.getDefaultInstance(),
        null,
        49,
        com.google.protobuf.WireFormat.FieldType.GROUP,
        com.google.protobuf.testing.Proto2Testing.FieldGroup49.class);
  public static final int FIELDGROUPLIST51_FIELD_NUMBER = 51;
  /**
   * <code>extend .protobuf.experimental.Proto2MessageWithExtensions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
      com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions,
      java.util.List<com.google.protobuf.testing.Proto2Testing.FieldGroupList51>> fieldGroupList51 = com.google.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        com.google.protobuf.testing.Proto2Testing.Proto2MessageWithExtensions.getDefaultInstance(),
        com.google.protobuf.testing.Proto2Testing.FieldGroupList51.getDefaultInstance(),
        null,
        51,
        com.google.protobuf.WireFormat.FieldType.GROUP,
        false,
        com.google.protobuf.testing.Proto2Testing.FieldGroupList51.class);

  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
